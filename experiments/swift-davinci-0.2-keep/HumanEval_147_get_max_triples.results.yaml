language: swift
name: HumanEval_147_get_max_triples
results:
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n {\n        for j in i+1..<n {\n    \
    \        for k in j+1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0\
    \ {\n                    count += 1\n                }\n            }\n      \
    \  }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var result = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n {\n        for j in i+1..<n {\n    \
    \        for k in j+1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0\
    \ {\n                    result += 1\n                }\n            }\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n\
    \            for k in j+1..<n {\n                if (a[i] + a[j] + a[k]) % 3 ==\
    \ 0 {\n                    count += 1\n                }\n            }\n    \
    \    }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    for i in 1..<n {\n        for j in (i + 1)..<n {\n\
    \            for k in (j + 1)..<n {\n                if (i * i - i + 1 + j * j\
    \ - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1\n      \
    \          }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpiuum1ctq/tmpiuum1ctq.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7e8252c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7e7f49b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7e7f49988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7e7f487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiuum1ctq                        0x00005654fae503b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ac7e843e460 __libc_start_main +
    245

    6    tmpiuum1ctq                        0x00005654fae4ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<n - 2 {\n        for j in i + 1..<n\
    \ - 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    for i in 1..<n {\n        for j in i+1..<n {\n   \
    \         for k in j+1..<n {\n                if (i*i-i+1 + j*j-j+1 + k*k-k+1)\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpx56uvx9t/tmpx56uvx9t.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc7635dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc76054b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc76054988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc760537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx56uvx9t                        0x000055981152c3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002adc76549460 __libc_start_main +
    245

    6    tmpx56uvx9t                        0x000055981152bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var result = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n {\n        for j in i + 1..<n {\n  \
    \          for k in j + 1..<n {\n                if (a[i] + a[j] + a[k]) % 3 ==\
    \ 0 {\n                    result += 1\n                }\n            }\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array(repeating: 0, count: n)\n    for i in 0..<n {\n       \
    \ a[i] = i * i - i + 1\n    }\n    var count = 0\n    for i in 0..<n {\n     \
    \   for j in i+1..<n {\n            for k in j+1..<n {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmp1kz3fa2m/tmp1kz3fa2m.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2a1b9b8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a1b6afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2a1b6af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2a1b6ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1kz3fa2m                        0x0000558231f70455 <unavailable> + 5205

    5    libc.so.6                          0x00002b2a1bba4460 __libc_start_main +
    245

    6    tmp1kz3fa2m                        0x0000558231f70109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<n - 2 {\n        for j in i + 1..<n\
    \ - 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var triples = 0\n    for i in 1..<n {\n        for j in (i + 1)..<n {\n\
    \            for k in (j + 1)..<n {\n                if (i * i - i + 1 + j * j\
    \ - j + 1 + k * k - k + 1) % 3 == 0 {\n                    triples += 1\n    \
    \            }\n            }\n        }\n    }\n    return triples\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmp8tj8mpga/tmp8tj8mpga.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac0464bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0461b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0461b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0461b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8tj8mpga                        0x000055b80ef233b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ac0466a8460 __libc_start_main +
    245

    6    tmp8tj8mpga                        0x000055b80ef22fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n\
    \            for k in j+1..<n {\n                if (a[i] + a[j] + a[k]) % 3 ==\
    \ 0 {\n                    count += 1\n                }\n            }\n    \
    \    }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    for i in 1..<n {\n        for j in i+1..<n {\n   \
    \         for k in j+1..<n {\n                if (i*i - i + 1 + j*j - j + 1 +\
    \ k*k - k + 1) % 3 == 0 {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpy602g31s/tmpy602g31s.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a5c9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a5993b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a5993988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a59927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy602g31s                        0x000055dcc76383b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b94a5e88460 __libc_start_main +
    245

    6    tmpy602g31s                        0x000055dcc7637fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    for i in 1..<n {\n        for j in (i + 1)..<n {\n\
    \            for k in (j + 1)..<n {\n                if (i * i - i + 1 + j * j\
    \ - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1\n      \
    \          }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpiuum1ctq/tmpiuum1ctq.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7e8252c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7e7f49b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7e7f49988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7e7f487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiuum1ctq                        0x00005654fae503b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ac7e843e460 __libc_start_main +
    245

    6    tmpiuum1ctq                        0x00005654fae4ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<a.count {\n        for j in (i + 1)..<a.count\
    \ {\n            for k in (j + 1)..<a.count {\n                if (a[i] + a[j]\
    \ + a[k]) % 3 == 0 {\n                    count += 1\n                }\n    \
    \        }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n - 2 {\n        for j in i + 1..<n -\
    \ 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var triples = 0\n    var a = Array(repeating: 0, count: n)\n    for i\
    \ in 1...n {\n        a[i - 1] = i * i - i + 1\n    }\n    for i in 0..<n - 2\
    \ {\n        for j in i + 1..<n - 1 {\n            for k in j + 1..<n {\n    \
    \            if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    triples +=\
    \ 1\n                }\n            }\n        }\n    }\n    return triples\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var result = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n - 2 {\n        for j in i + 1..<n -\
    \ 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    result += 1\n                }\n           \
    \ }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    var a = Array(repeating: 0, count: n)\n    for i in\
    \ 0..<n {\n        a[i] = i * i - i + 1\n    }\n    for i in 0..<n {\n       \
    \ for j in i+1..<n {\n            for k in j+1..<n {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpbl8v0cuh/tmpbl8v0cuh.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b41361c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b41058b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b41058988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b410577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbl8v0cuh                        0x000055a64a1cc455 <unavailable> + 5205

    5    libc.so.6                          0x00002b9b4154d460 __libc_start_main +
    245

    6    tmpbl8v0cuh                        0x000055a64a1cc109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    for i in 1..<n {\n        for j in i+1..<n {\n   \
    \         for k in j+1..<n {\n                if (i*i - i + 1 + j*j - j + 1 +\
    \ k*k - k + 1) % 3 == 0 {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpy602g31s/tmpy602g31s.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a5c9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a5993b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a5993988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a59927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy602g31s                        0x000055dcc76383b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b94a5e88460 __libc_start_main +
    245

    6    tmpy602g31s                        0x000055dcc7637fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n\
    \            for k in j+1..<n {\n                if (a[i] + a[j] + a[k]) % 3 ==\
    \ 0 {\n                    count += 1\n                }\n            }\n    \
    \    }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    for i in 1..<n {\n        for j in i+1..<n {\n   \
    \         for k in j+1..<n {\n                if (i*i - i + 1 + j*j - j + 1 +\
    \ k*k - k + 1) % 3 == 0 {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpy602g31s/tmpy602g31s.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a5c9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a5993b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a5993988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a59927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy602g31s                        0x000055dcc76383b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b94a5e88460 __libc_start_main +
    245

    6    tmpy602g31s                        0x000055dcc7637fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var result = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n - 2 {\n        for j in i + 1..<n -\
    \ 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    result += 1\n                }\n           \
    \ }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<a.count {\n        for j in i+1..<a.count\
    \ {\n            for k in j+1..<a.count {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var result = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n {\n        for j in i+1..<n {\n    \
    \        for k in j+1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0\
    \ {\n                    result += 1\n                }\n            }\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var result = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n - 2 {\n        for j in i + 1..<n -\
    \ 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    result += 1\n                }\n           \
    \ }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n - 2 {\n        for j in i + 1..<n -\
    \ 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    for i in 1..<n {\n        for j in i+1..<n {\n   \
    \         for k in j+1..<n {\n                if (i*i - i + 1 + j*j - j + 1 +\
    \ k*k - k + 1) % 3 == 0 {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpy602g31s/tmpy602g31s.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a5c9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a5993b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a5993988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a59927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy602g31s                        0x000055dcc76383b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b94a5e88460 __libc_start_main +
    245

    6    tmpy602g31s                        0x000055dcc7637fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n - 2 {\n        for j in i + 1..<n -\
    \ 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<a.count {\n        for j in i+1..<a.count\
    \ {\n            for k in j+1..<a.count {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n - 2 {\n        for j in i + 1..<n -\
    \ 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n\
    \            for k in j+1..<n {\n                if (a[i] + a[j] + a[k]) % 3 ==\
    \ 0 {\n                    count += 1\n                }\n            }\n    \
    \    }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<n - 2 {\n        for j in i + 1..<n\
    \ - 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n\
    \            for k in j+1..<n {\n                if (a[i] + a[j] + a[k]) % 3 ==\
    \ 0 {\n                    count += 1\n                }\n            }\n    \
    \    }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<n - 2 {\n        for j in i + 1..<n\
    \ - 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<a.count {\n        for j in i+1..<a.count\
    \ {\n            for k in j+1..<a.count {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var result = 0\n    var a = Array(repeating: 0, count: n)\n    for i\
    \ in 1...n {\n        a[i - 1] = i * i - i + 1\n    }\n    for i in 0..<n - 2\
    \ {\n        for j in i + 1..<n - 1 {\n            for k in j + 1..<n {\n    \
    \            if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    result +=\
    \ 1\n                }\n            }\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    for i in 1..<n {\n        for j in i+1..<n {\n   \
    \         for k in j+1..<n {\n                if (i*i - i + 1 + j*j - j + 1 +\
    \ k*k - k + 1) % 3 == 0 {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpy602g31s/tmpy602g31s.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a5c9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a5993b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a5993988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a59927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy602g31s                        0x000055dcc76383b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b94a5e88460 __libc_start_main +
    245

    6    tmpy602g31s                        0x000055dcc7637fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array(repeating: 0, count: n)\n    for i in 0..<n {\n       \
    \ a[i] = i * i - i + 1\n    }\n    var count = 0\n    for i in 0..<n {\n     \
    \   for j in i+1..<n {\n            for k in j+1..<n {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmp1kz3fa2m/tmp1kz3fa2m.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2a1b9b8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a1b6afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2a1b6af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2a1b6ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1kz3fa2m                        0x0000558231f70455 <unavailable> + 5205

    5    libc.so.6                          0x00002b2a1bba4460 __libc_start_main +
    245

    6    tmp1kz3fa2m                        0x0000558231f70109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    for i in 1..<n {\n        for j in i+1..<n {\n   \
    \         for k in j+1..<n {\n                if (i*i - i + 1 + j*j - j + 1 +\
    \ k*k - k + 1) % 3 == 0 {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpy602g31s/tmpy602g31s.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a5c9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a5993b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a5993988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a59927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy602g31s                        0x000055dcc76383b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b94a5e88460 __libc_start_main +
    245

    6    tmpy602g31s                        0x000055dcc7637fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var result = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n - 2 {\n        for j in i + 1..<n -\
    \ 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    result += 1\n                }\n           \
    \ }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n\
    \            for k in j+1..<n {\n                if (a[i] + a[j] + a[k]) % 3 ==\
    \ 0 {\n                    count += 1\n                }\n            }\n    \
    \    }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<n - 2 {\n        for j in i + 1..<n\
    \ - 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<n - 2 {\n        for j in i + 1..<n\
    \ - 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n\
    \            for k in j+1..<n {\n                if (a[i] + a[j] + a[k]) % 3 ==\
    \ 0 {\n                    count += 1\n                }\n            }\n    \
    \    }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    var count = 0\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n {\n        for j in i+1..<n {\n    \
    \        for k in j+1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0\
    \ {\n                    count += 1\n                }\n            }\n      \
    \  }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    for i in 1..<n {\n        for j in i+1..<n {\n   \
    \         for k in j+1..<n {\n                if (i*i - i + 1 + j*j - j + 1 +\
    \ k*k - k + 1) % 3 == 0 {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpy602g31s/tmpy602g31s.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a5c9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a5993b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a5993988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a59927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy602g31s                        0x000055dcc76383b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b94a5e88460 __libc_start_main +
    245

    6    tmpy602g31s                        0x000055dcc7637fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n {\n        for j in i+1..<n {\n    \
    \        for k in j+1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0\
    \ {\n                    count += 1\n                }\n            }\n      \
    \  }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    for i in 1..<n {\n        for j in i+1..<n {\n   \
    \         for k in j+1..<n {\n                if (i*i - i + 1 + j*j - j + 1 +\
    \ k*k - k + 1) % 3 == 0 {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpy602g31s/tmpy602g31s.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a5c9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a5993b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a5993988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a59927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy602g31s                        0x000055dcc76383b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b94a5e88460 __libc_start_main +
    245

    6    tmpy602g31s                        0x000055dcc7637fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n\
    \            for k in j+1..<n {\n                if (a[i] + a[j] + a[k]) % 3 ==\
    \ 0 {\n                    count += 1\n                }\n            }\n    \
    \    }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var result = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n - 2 {\n        for j in i + 1..<n -\
    \ 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    result += 1\n                }\n           \
    \ }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n - 2 {\n        for j in i + 1..<n -\
    \ 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<a.count {\n        for j in i+1..<a.count\
    \ {\n            for k in j+1..<a.count {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    for i in 1..<n {\n        for j in i+1..<n {\n   \
    \         for k in j+1..<n {\n                if (i*i - i + 1 + j*j - j + 1 +\
    \ k*k - k + 1) % 3 == 0 {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpy602g31s/tmpy602g31s.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a5c9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a5993b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a5993988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a59927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy602g31s                        0x000055dcc76383b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b94a5e88460 __libc_start_main +
    245

    6    tmpy602g31s                        0x000055dcc7637fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n - 2 {\n        for j in i + 1..<n -\
    \ 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    for i in 1..<n {\n        for j in i+1..<n {\n   \
    \         for k in j+1..<n {\n                if (i*i - i + 1 + j*j - j + 1 +\
    \ k*k - k + 1) % 3 == 0 {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpy602g31s/tmpy602g31s.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a5c9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a5993b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a5993988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a59927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy602g31s                        0x000055dcc76383b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b94a5e88460 __libc_start_main +
    245

    6    tmpy602g31s                        0x000055dcc7637fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var result = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n - 2 {\n        for j in i + 1..<n -\
    \ 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    result += 1\n                }\n           \
    \ }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n {\n        for j in i+1..<n {\n    \
    \        for k in j+1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0\
    \ {\n                    count += 1\n                }\n            }\n      \
    \  }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n - 2 {\n        for j in i + 1..<n -\
    \ 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<a.count {\n        for j in i+1..<a.count\
    \ {\n            for k in j+1..<a.count {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<n - 2 {\n        for j in i + 1..<n\
    \ - 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    var a = Array(repeating: 0, count: n)\n    for i in\
    \ 0..<n {\n        a[i] = i * i - i + 1\n    }\n    for i in 0..<n {\n       \
    \ for j in i+1..<n {\n            for k in j+1..<n {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpbl8v0cuh/tmpbl8v0cuh.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b41361c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b41058b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b41058988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b410577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbl8v0cuh                        0x000055a64a1cc455 <unavailable> + 5205

    5    libc.so.6                          0x00002b9b4154d460 __libc_start_main +
    245

    6    tmpbl8v0cuh                        0x000055a64a1cc109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    for i in 1..<n {\n        for j in i+1..<n {\n   \
    \         for k in j+1..<n {\n                if (i*i - i + 1 + j*j - j + 1 +\
    \ k*k - k + 1) % 3 == 0 {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpy602g31s/tmpy602g31s.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a5c9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a5993b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a5993988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a59927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy602g31s                        0x000055dcc76383b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b94a5e88460 __libc_start_main +
    245

    6    tmpy602g31s                        0x000055dcc7637fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n - 2 {\n        for j in i + 1..<n -\
    \ 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array(repeating: 0, count: n)\n    var count = 0\n    for i in\
    \ 1...n {\n        a[i - 1] = i * i - i + 1\n        for j in (i + 1)...n {\n\
    \            for k in (j + 1)...n {\n                if (a[i - 1] + a[j - 1] +\
    \ a[k - 1]) % 3 == 0 {\n                    count += 1\n                }\n  \
    \          }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b682139fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6821096561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6821096286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b682109613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6821095bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpnkwdqcmr                        0x000055f369308a5d <unavailable> + 6749

    6    tmpnkwdqcmr                        0x000055f3693083e8 <unavailable> + 5096

    7    libc.so.6                          0x00002b682158b460 __libc_start_main +
    245

    8    tmpnkwdqcmr                        0x000055f369308109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n {\n        for j in i+1..<n {\n    \
    \        for k in j+1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0\
    \ {\n                    count += 1\n                }\n            }\n      \
    \  }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n {\n        for j in (i + 1)..<n {\n\
    \            for k in (j + 1)..<n {\n                if (a[i] + a[j] + a[k]) %\
    \ 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<n - 2 {\n        for j in i + 1..<n\
    \ - 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n - 2 {\n        for j in i + 1..<n -\
    \ 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = Array(repeating: 0, count: n)\n    var count = 0\n    for i in\
    \ 1...n {\n        a[i - 1] = i * i - i + 1\n        for j in i + 1...n {\n  \
    \          for k in j + 1...n {\n                if (a[i - 1] + a[j - 1] + a[k\
    \ - 1]) % 3 == 0 {\n                    count += 1\n                }\n      \
    \      }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b73a2b61c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73a2858561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b73a2858286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b73a285813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b73a2857bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmppnatpdwp                        0x000055bcd6e0fa5d <unavailable> + 6749

    6    tmppnatpdwp                        0x000055bcd6e0f3e8 <unavailable> + 5096

    7    libc.so.6                          0x00002b73a2d4d460 __libc_start_main +
    245

    8    tmppnatpdwp                        0x000055bcd6e0f109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<n - 2 {\n        for j in i + 1..<n\
    \ - 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n\
    \            for k in j+1..<n {\n                if (a[i] + a[j] + a[k]) % 3 ==\
    \ 0 {\n                    count += 1\n                }\n            }\n    \
    \    }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n\
    \            for k in j+1..<n {\n                if (a[i] + a[j] + a[k]) % 3 ==\
    \ 0 {\n                    count += 1\n                }\n            }\n    \
    \    }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<n - 2 {\n        for j in i + 1..<n\
    \ - 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var result = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n {\n        for j in i+1..<n {\n    \
    \        for k in j+1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0\
    \ {\n                    result += 1\n                }\n            }\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<n - 2 {\n        for j in i + 1..<n\
    \ - 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<a.count {\n        for j in i+1..<a.count\
    \ {\n            for k in j+1..<a.count {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n {\n        for j in (i + 1)..<n {\n\
    \            for k in (j + 1)..<n {\n                if (a[i] + a[j] + a[k]) %\
    \ 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<n - 2 {\n        for j in i + 1..<n\
    \ - 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n {\n        for j in i+1..<n {\n    \
    \        for k in j+1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0\
    \ {\n                    count += 1\n                }\n            }\n      \
    \  }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var cnt = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n  \
    \          for k in j+1..<n {\n                if (a[i] + a[j] + a[k]) % 3 ==\
    \ 0 {\n                    cnt += 1\n                }\n            }\n      \
    \  }\n    }\n    return cnt\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<n - 2 {\n        for j in i + 1..<n\
    \ - 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n\
    \            for k in j+1..<n {\n                if (a[i] + a[j] + a[k]) % 3 ==\
    \ 0 {\n                    count += 1\n                }\n            }\n    \
    \    }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    for i in 1..<n {\n        for j in (i + 1)..<n {\n\
    \            for k in (j + 1)..<n {\n                if (i * i - i + 1 + j * j\
    \ - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1\n      \
    \          }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpiuum1ctq/tmpiuum1ctq.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7e8252c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7e7f49b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7e7f49988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7e7f487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiuum1ctq                        0x00005654fae503b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ac7e843e460 __libc_start_main +
    245

    6    tmpiuum1ctq                        0x00005654fae4ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<n - 2 {\n        for j in i + 1..<n\
    \ - 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    var a = Array(repeating: 0, count: n)\n    for i in\
    \ 0..<n {\n        a[i] = i * i - i + 1\n    }\n    for i in 0..<n {\n       \
    \ for j in i+1..<n {\n            for k in j+1..<n {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpbl8v0cuh/tmpbl8v0cuh.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b41361c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b41058b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b41058988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b410577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbl8v0cuh                        0x000055a64a1cc455 <unavailable> + 5205

    5    libc.so.6                          0x00002b9b4154d460 __libc_start_main +
    245

    6    tmpbl8v0cuh                        0x000055a64a1cc109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    for i in 1..<n {\n        for j in (i + 1)..<n {\n\
    \            for k in (j + 1)..<n {\n                if (i * i - i + 1 + j * j\
    \ - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1\n      \
    \          }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpiuum1ctq/tmpiuum1ctq.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7e8252c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7e7f49b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7e7f49988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7e7f487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiuum1ctq                        0x00005654fae503b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ac7e843e460 __libc_start_main +
    245

    6    tmpiuum1ctq                        0x00005654fae4ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var result = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n {\n        for j in i+1..<n {\n    \
    \        for k in j+1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0\
    \ {\n                    result += 1\n                }\n            }\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n - 2 {\n        for j in i + 1..<n -\
    \ 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var result = 0\n    for i in 1..<n {\n        for j in i+1..<n {\n  \
    \          for k in j+1..<n {\n                if (i * i - i + 1 + j * j - j +\
    \ 1 + k * k - k + 1) % 3 == 0 {\n                    result += 1\n           \
    \     }\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpfnsgzwi2/tmpfnsgzwi2.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f0b656c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f0b34db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f0b34d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f0b34c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfnsgzwi2                        0x0000556db87a33b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b2f0b842460 __libc_start_main +
    245

    6    tmpfnsgzwi2                        0x0000556db87a2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<a.count {\n        for j in (i + 1)..<a.count\
    \ {\n            for k in (j + 1)..<a.count {\n                if (a[i] + a[j]\
    \ + a[k]) % 3 == 0 {\n                    count += 1\n                }\n    \
    \        }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    for i in 1..<n {\n        for j in i+1..<n {\n   \
    \         for k in j+1..<n {\n                if (i*i - i + 1 + j*j - j + 1 +\
    \ k*k - k + 1) % 3 == 0 {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpy602g31s/tmpy602g31s.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a5c9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a5993b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a5993988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a59927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy602g31s                        0x000055dcc76383b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b94a5e88460 __libc_start_main +
    245

    6    tmpy602g31s                        0x000055dcc7637fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n {\n        for j in i+1..<n {\n    \
    \        for k in j+1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0\
    \ {\n                    count += 1\n                }\n            }\n      \
    \  }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<a.count - 2 {\n        for j in i\
    \ + 1..<a.count - 1 {\n            for k in j + 1..<a.count {\n              \
    \  if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count += 1\n      \
    \          }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var result = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n {\n        for j in i+1..<n {\n    \
    \        for k in j+1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0\
    \ {\n                    result += 1\n                }\n            }\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n {\n        for j in i+1..<n {\n    \
    \        for k in j+1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0\
    \ {\n                    count += 1\n                }\n            }\n      \
    \  }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<a.count {\n        for j in i+1..<a.count\
    \ {\n            for k in j+1..<a.count {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<a.count {\n        for j in i+1..<a.count\
    \ {\n            for k in j+1..<a.count {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    for i in 1..<n {\n        for j in (i + 1)..<n {\n\
    \            for k in (j + 1)..<n {\n                if (i * i - i + 1 + j * j\
    \ - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1\n      \
    \          }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpiuum1ctq/tmpiuum1ctq.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7e8252c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7e7f49b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7e7f49988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7e7f487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiuum1ctq                        0x00005654fae503b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ac7e843e460 __libc_start_main +
    245

    6    tmpiuum1ctq                        0x00005654fae4ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    for i in 1..<n {\n        for j in (i + 1)..<n {\n\
    \            for k in (j + 1)..<n {\n                if (i * i - i + 1 + j * j\
    \ - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1\n      \
    \          }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpiuum1ctq/tmpiuum1ctq.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7e8252c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7e7f49b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7e7f49988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7e7f487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiuum1ctq                        0x00005654fae503b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ac7e843e460 __libc_start_main +
    245

    6    tmpiuum1ctq                        0x00005654fae4ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    for i in 1..<n {\n        for j in i+1..<n {\n   \
    \         for k in j+1..<n {\n                if (i*i - i + 1 + j*j - j + 1 +\
    \ k*k - k + 1) % 3 == 0 {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpy602g31s/tmpy602g31s.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a5c9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a5993b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a5993988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a59927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy602g31s                        0x000055dcc76383b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b94a5e88460 __libc_start_main +
    245

    6    tmpy602g31s                        0x000055dcc7637fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var result = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n - 2 {\n        for j in i + 1..<n -\
    \ 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    result += 1\n                }\n           \
    \ }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var result = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n - 2 {\n        for j in i + 1..<n -\
    \ 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    result += 1\n                }\n           \
    \ }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<a.count {\n        for j in i+1..<a.count\
    \ {\n            for k in j+1..<a.count {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var result = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<a.count {\n        for j in (i + 1)..<a.count\
    \ {\n            for k in (j + 1)..<a.count {\n                if (a[i] + a[j]\
    \ + a[k]) % 3 == 0 {\n                    result += 1\n                }\n   \
    \         }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    for i in 1..<n {\n        for j in i+1..<n {\n   \
    \         for k in j+1..<n {\n                if (i*i - i + 1 + j*j - j + 1 +\
    \ k*k - k + 1) % 3 == 0 {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpy602g31s/tmpy602g31s.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a5c9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a5993b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a5993988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a59927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy602g31s                        0x000055dcc76383b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b94a5e88460 __libc_start_main +
    245

    6    tmpy602g31s                        0x000055dcc7637fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n\
    \            for k in j+1..<n {\n                if (a[i] + a[j] + a[k]) % 3 ==\
    \ 0 {\n                    count += 1\n                }\n            }\n    \
    \    }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    for i in 1..<n {\n        for j in i+1..<n {\n   \
    \         for k in j+1..<n {\n                if (i*i - i + 1 + j*j - j + 1 +\
    \ k*k - k + 1) % 3 == 0 {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpy602g31s/tmpy602g31s.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a5c9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a5993b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a5993988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a59927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy602g31s                        0x000055dcc76383b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b94a5e88460 __libc_start_main +
    245

    6    tmpy602g31s                        0x000055dcc7637fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n\
    \            for k in j+1..<n {\n                if (a[i] + a[j] + a[k]) % 3 ==\
    \ 0 {\n                    count += 1\n                }\n            }\n    \
    \    }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var result = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n {\n        for j in i+1..<n {\n    \
    \        for k in j+1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0\
    \ {\n                    result += 1\n                }\n            }\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    for i in 1..<n {\n        for j in (i + 1)..<n {\n\
    \            for k in (j + 1)..<n {\n                if (i * i - i + 1 + j * j\
    \ - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1\n      \
    \          }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpiuum1ctq/tmpiuum1ctq.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7e8252c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7e7f49b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7e7f49988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7e7f487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiuum1ctq                        0x00005654fae503b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ac7e843e460 __libc_start_main +
    245

    6    tmpiuum1ctq                        0x00005654fae4ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n - 2 {\n        for j in i + 1..<n -\
    \ 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var result = 0\n    for i in 0..<n - 2 {\n        for j in i + 1..<n\
    \ - 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    result += 1\n                }\n           \
    \ }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    for i in 1..<n {\n        for j in i+1..<n {\n   \
    \         for k in j+1..<n {\n                if (i*i - i + 1 + j*j - j + 1 +\
    \ k*k - k + 1) % 3 == 0 {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpy602g31s/tmpy602g31s.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a5c9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a5993b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a5993988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a59927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy602g31s                        0x000055dcc76383b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b94a5e88460 __libc_start_main +
    245

    6    tmpy602g31s                        0x000055dcc7637fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    for i in 1..<n {\n        for j in i+1..<n {\n   \
    \         for k in j+1..<n {\n                if (i * i - i + 1 + j * j - j +\
    \ 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1\n            \
    \    }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpo6jkyubz/tmpo6jkyubz.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf09d0cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf09a03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf09a03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf09a027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo6jkyubz                        0x000055c9a5f4e3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002acf09ef8460 __libc_start_main +
    245

    6    tmpo6jkyubz                        0x000055c9a5f4dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n - 2 {\n        for j in i + 1..<n -\
    \ 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    for i in 1..<n {\n        for j in i+1..<n {\n   \
    \         for k in j+1..<n {\n                if (i*i - i + 1 + j*j - j + 1 +\
    \ k*k - k + 1) % 3 == 0 {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpy602g31s/tmpy602g31s.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a5c9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a5993b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a5993988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a59927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy602g31s                        0x000055dcc76383b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b94a5e88460 __libc_start_main +
    245

    6    tmpy602g31s                        0x000055dcc7637fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<n - 2 {\n        for j in i + 1..<n\
    \ - 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var triples = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n {\n        for j in i+1..<n {\n    \
    \        for k in j+1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0\
    \ {\n                    triples += 1\n                }\n            }\n    \
    \    }\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var result = 0\n    var a = Array(repeating: 0, count: n)\n    for i\
    \ in 1...n {\n        a[i - 1] = i * i - i + 1\n    }\n    for i in 0..<n - 2\
    \ {\n        for j in i + 1..<n - 1 {\n            for k in j + 1..<n {\n    \
    \            if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    result +=\
    \ 1\n                }\n            }\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var result = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n - 2 {\n        for j in i + 1..<n -\
    \ 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    result += 1\n                }\n           \
    \ }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    for i in 1..<n {\n        for j in (i + 1)..<n {\n\
    \            for k in (j + 1)..<n {\n                if (i * i - i + 1 + j * j\
    \ - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1\n      \
    \          }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpiuum1ctq/tmpiuum1ctq.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7e8252c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7e7f49b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7e7f49988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7e7f487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiuum1ctq                        0x00005654fae503b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ac7e843e460 __libc_start_main +
    245

    6    tmpiuum1ctq                        0x00005654fae4ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    for i in 1..<n {\n        for j in i+1..<n {\n   \
    \         for k in j+1..<n {\n                if (i*i-i+1 + j*j-j+1 + k*k-k+1)\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpx56uvx9t/tmpx56uvx9t.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc7635dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc76054b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc76054988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc760537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx56uvx9t                        0x000055981152c3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002adc76549460 __libc_start_main +
    245

    6    tmpx56uvx9t                        0x000055981152bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n - 2 {\n        for j in i + 1..<n -\
    \ 1 {\n            for k in j + 1..<n {\n                if a[i] + a[j] + a[k]\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpb82rr1p3/tmpb82rr1p3.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0815d36c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0815a2db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0815a2d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0815a2c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb82rr1p3                        0x000055569c417535 <unavailable> + 5429

    5    libc.so.6                          0x00002b0815f22460 __libc_start_main +
    245

    6    tmpb82rr1p3                        0x000055569c4171e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n\
    \            for k in j+1..<n {\n                if (a[i] + a[j] + a[k]) % 3 ==\
    \ 0 {\n                    count += 1\n                }\n            }\n    \
    \    }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n - 2 {\n        for j in i + 1..<n -\
    \ 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    for i in 1..<n {\n        for j in i+1..<n {\n   \
    \         for k in j+1..<n {\n                if (i * i - i + 1 + j * j - j +\
    \ 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1\n            \
    \    }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpo6jkyubz/tmpo6jkyubz.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf09d0cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf09a03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf09a03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf09a027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo6jkyubz                        0x000055c9a5f4e3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002acf09ef8460 __libc_start_main +
    245

    6    tmpo6jkyubz                        0x000055c9a5f4dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var result = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n {\n        for j in i+1..<n {\n    \
    \        for k in j+1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0\
    \ {\n                    result += 1\n                }\n            }\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n - 2 {\n        for j in i + 1..<n -\
    \ 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    for i in 1..<n {\n        for j in (i + 1)..<n {\n\
    \            for k in (j + 1)..<n {\n                if (i * i - i + 1 + j * j\
    \ - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1\n      \
    \          }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpiuum1ctq/tmpiuum1ctq.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7e8252c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7e7f49b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7e7f49988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7e7f487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiuum1ctq                        0x00005654fae503b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ac7e843e460 __libc_start_main +
    245

    6    tmpiuum1ctq                        0x00005654fae4ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<a.count {\n        for j in i+1..<a.count\
    \ {\n            for k in j+1..<a.count {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n\
    \            for k in j+1..<n {\n                if (a[i] + a[j] + a[k]) % 3 ==\
    \ 0 {\n                    count += 1\n                }\n            }\n    \
    \    }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n\
    \            for k in j+1..<n {\n                if (a[i] + a[j] + a[k]) % 3 ==\
    \ 0 {\n                    count += 1\n                }\n            }\n    \
    \    }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n\
    \            for k in j+1..<n {\n                if (a[i] + a[j] + a[k]) % 3 ==\
    \ 0 {\n                    count += 1\n                }\n            }\n    \
    \    }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    for i in 1..<n {\n        for j in i+1..<n {\n   \
    \         for k in j+1..<n {\n                if (i*i - i + 1 + j*j - j + 1 +\
    \ k*k - k + 1) % 3 == 0 {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpy602g31s/tmpy602g31s.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a5c9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a5993b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a5993988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a59927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy602g31s                        0x000055dcc76383b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b94a5e88460 __libc_start_main +
    245

    6    tmpy602g31s                        0x000055dcc7637fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    for i in 1..<n {\n        for j in i+1..<n {\n   \
    \         for k in j+1..<n {\n                if (i*i - i + 1 + j*j - j + 1 +\
    \ k*k - k + 1) % 3 == 0 {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpy602g31s/tmpy602g31s.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a5c9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a5993b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a5993988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a59927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy602g31s                        0x000055dcc76383b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b94a5e88460 __libc_start_main +
    245

    6    tmpy602g31s                        0x000055dcc7637fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    for i in 1..<n {\n        for j in i+1..<n {\n   \
    \         for k in j+1..<n {\n                if (i*i - i + 1 + j*j - j + 1 +\
    \ k*k - k + 1) % 3 == 0 {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpy602g31s/tmpy602g31s.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a5c9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a5993b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a5993988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a59927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy602g31s                        0x000055dcc76383b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b94a5e88460 __libc_start_main +
    245

    6    tmpy602g31s                        0x000055dcc7637fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n\
    \            for k in j+1..<n {\n                if (a[i] + a[j] + a[k]) % 3 ==\
    \ 0 {\n                    count += 1\n                }\n            }\n    \
    \    }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    for i in 1..<n {\n        for j in i+1..<n {\n   \
    \         for k in j+1..<n {\n                if (i*i - i + 1 + j*j - j + 1 +\
    \ k*k - k + 1) % 3 == 0 {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpy602g31s/tmpy602g31s.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a5c9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a5993b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a5993988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a59927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy602g31s                        0x000055dcc76383b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b94a5e88460 __libc_start_main +
    245

    6    tmpy602g31s                        0x000055dcc7637fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n - 2 {\n        for j in i + 1..<n -\
    \ 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    for i in 1..<n {\n        for j in i+1..<n {\n   \
    \         for k in j+1..<n {\n                if (i * i - i + 1 + j * j - j +\
    \ 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1\n            \
    \    }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpo6jkyubz/tmpo6jkyubz.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf09d0cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf09a03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf09a03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf09a027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo6jkyubz                        0x000055c9a5f4e3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002acf09ef8460 __libc_start_main +
    245

    6    tmpo6jkyubz                        0x000055c9a5f4dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n - 2 {\n        for j in i + 1..<n -\
    \ 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    for i in 1..<n {\n        for j in i+1..<n {\n   \
    \         for k in j+1..<n {\n                if (i*i - i + 1 + j*j - j + 1 +\
    \ k*k - k + 1) % 3 == 0 {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpy602g31s/tmpy602g31s.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a5c9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a5993b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a5993988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a59927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy602g31s                        0x000055dcc76383b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b94a5e88460 __libc_start_main +
    245

    6    tmpy602g31s                        0x000055dcc7637fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var result = 0\n    var a = Array(repeating: 0, count: n)\n    for i\
    \ in 1...n {\n        a[i - 1] = i * i - i + 1\n    }\n    for i in 0..<n {\n\
    \        for j in i + 1..<n {\n            for k in j + 1..<n {\n            \
    \    if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    result += 1\n   \
    \             }\n            }\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n {\n        for j in i+1..<n {\n    \
    \        for k in j+1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0\
    \ {\n                    count += 1\n                }\n            }\n      \
    \  }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var result = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n {\n        for j in i+1..<n {\n    \
    \        for k in j+1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0\
    \ {\n                    result += 1\n                }\n            }\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n {\n        for j in i+1..<n {\n    \
    \        for k in j+1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0\
    \ {\n                    count += 1\n                }\n            }\n      \
    \  }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<n - 2 {\n        for j in i + 1..<n\
    \ - 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<n - 2 {\n        for j in i + 1..<n\
    \ - 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    var a = Array(repeating: 0, count: n)\n    for i in\
    \ 0..<n {\n        a[i] = i * i - i + 1\n    }\n    for i in 0..<n {\n       \
    \ for j in i+1..<n {\n            for k in j+1..<n {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpbl8v0cuh/tmpbl8v0cuh.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b41361c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b41058b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b41058988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b410577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbl8v0cuh                        0x000055a64a1cc455 <unavailable> + 5205

    5    libc.so.6                          0x00002b9b4154d460 __libc_start_main +
    245

    6    tmpbl8v0cuh                        0x000055a64a1cc109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<n - 2 {\n        for j in i + 1..<n\
    \ - 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var result = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n {\n        for j in i+1..<n {\n    \
    \        for k in j+1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0\
    \ {\n                    result += 1\n                }\n            }\n     \
    \   }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n {\n        for j in (i + 1)..<n {\n\
    \            for k in (j + 1)..<n {\n                if (a[i] + a[j] + a[k]) %\
    \ 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    for i in 1..<n {\n        for j in i+1..<n {\n   \
    \         for k in j+1..<n {\n                if (i * i - i + 1 + j * j - j +\
    \ 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1\n            \
    \    }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpo6jkyubz/tmpo6jkyubz.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf09d0cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf09a03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf09a03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf09a027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo6jkyubz                        0x000055c9a5f4e3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002acf09ef8460 __libc_start_main +
    245

    6    tmpo6jkyubz                        0x000055c9a5f4dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n\
    \            for k in j+1..<n {\n                if (a[i] + a[j] + a[k]) % 3 ==\
    \ 0 {\n                    count += 1\n                }\n            }\n    \
    \    }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    for i in 1..<n {\n        for j in i+1..<n {\n   \
    \         for k in j+1..<n {\n                if (i*i - i + 1 + j*j - j + 1 +\
    \ k*k - k + 1) % 3 == 0 {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpy602g31s/tmpy602g31s.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a5c9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a5993b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a5993988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a59927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy602g31s                        0x000055dcc76383b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b94a5e88460 __libc_start_main +
    245

    6    tmpy602g31s                        0x000055dcc7637fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    for i in 1..<n {\n        for j in (i + 1)..<n {\n\
    \            for k in (j + 1)..<n {\n                if (i * i - i + 1 + j * j\
    \ - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1\n      \
    \          }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpiuum1ctq/tmpiuum1ctq.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7e8252c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7e7f49b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7e7f49988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7e7f487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiuum1ctq                        0x00005654fae503b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ac7e843e460 __libc_start_main +
    245

    6    tmpiuum1ctq                        0x00005654fae4ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<n - 2 {\n        for j in i + 1..<n\
    \ - 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n - 2 {\n        for j in i + 1..<n -\
    \ 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n {\n        for j in i+1..<n {\n    \
    \        for k in j+1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0\
    \ {\n                    count += 1\n                }\n            }\n      \
    \  }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var result = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n - 2 {\n        for j in i + 1..<n -\
    \ 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    result += 1\n                }\n           \
    \ }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    for i in 1..<n {\n        for j in i+1..<n {\n   \
    \         for k in j+1..<n {\n                if (i * i - i + 1 + j * j - j +\
    \ 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1\n            \
    \    }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpo6jkyubz/tmpo6jkyubz.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf09d0cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf09a03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf09a03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf09a027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo6jkyubz                        0x000055c9a5f4e3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002acf09ef8460 __libc_start_main +
    245

    6    tmpo6jkyubz                        0x000055c9a5f4dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<n - 2 {\n        for j in i + 1..<n\
    \ - 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var result = 0\n    for i in 1..<n {\n        for j in (i + 1)..<n {\n\
    \            for k in (j + 1)..<n {\n                if (i * i - i + 1 + j * j\
    \ - j + 1 + k * k - k + 1) % 3 == 0 {\n                    result += 1\n     \
    \           }\n            }\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmp04lg1cgo/tmp04lg1cgo.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f03271c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f02f68b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f02f68988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f02f677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp04lg1cgo                        0x0000563a4db693b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b3f0345d460 __libc_start_main +
    245

    6    tmp04lg1cgo                        0x0000563a4db68fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n - 2 {\n        for j in i + 1..<n -\
    \ 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    var a = Array(repeating: 0, count: n)\n    for i in\
    \ 0..<n {\n        a[i] = i * i - i + 1\n    }\n    for i in 0..<n {\n       \
    \ for j in i+1..<n {\n            for k in j+1..<n {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpbl8v0cuh/tmpbl8v0cuh.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b41361c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b41058b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b41058988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b410577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbl8v0cuh                        0x000055a64a1cc455 <unavailable> + 5205

    5    libc.so.6                          0x00002b9b4154d460 __libc_start_main +
    245

    6    tmpbl8v0cuh                        0x000055a64a1cc109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    var count = 0\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n {\n        for j in i+1..<n {\n    \
    \        for k in j+1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0\
    \ {\n                    count += 1\n                }\n            }\n      \
    \  }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var result = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n - 2 {\n        for j in i + 1..<n -\
    \ 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    result += 1\n                }\n           \
    \ }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var triples = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<a.count {\n        for j in i+1..<a.count\
    \ {\n            for k in j+1..<a.count {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    triples += 1\n                }\n          \
    \  }\n        }\n    }\n    return triples\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n   \
    \         for k in j+1..<n {\n                if (i*i-i+1 + j*j-j+1 + k*k-k+1)\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpifcyoru9/tmpifcyoru9.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7f49e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad7f46dcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad7f46dc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7f46db7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpifcyoru9                        0x000056407edfd335 <unavailable> + 4917

    5    libc.so.6                          0x00002ad7f4bd1460 __libc_start_main +
    245

    6    tmpifcyoru9                        0x000056407edfcfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824805
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    for i in 1..<n {\n        for j in i+1..<n {\n   \
    \         for k in j+1..<n {\n                if (i*i - i + 1 + j*j - j + 1 +\
    \ k*k - k + 1) % 3 == 0 {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpy602g31s/tmpy602g31s.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a5c9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a5993b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a5993988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a59927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy602g31s                        0x000055dcc76383b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b94a5e88460 __libc_start_main +
    245

    6    tmpy602g31s                        0x000055dcc7637fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<a.count {\n        for j in i + 1..<a.count\
    \ {\n            for k in j + 1..<a.count {\n                if (a[i] + a[j] +\
    \ a[k]) % 3 == 0 {\n                    count += 1\n                }\n      \
    \      }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\n\
    assert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<a.count {\n        for j in i+1..<a.count\
    \ {\n            for k in j+1..<a.count {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var result = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n {\n        for j in (i + 1)..<n {\n\
    \            for k in (j + 1)..<n {\n                if (a[i] + a[j] + a[k]) %\
    \ 3 == 0 {\n                    result += 1\n                }\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    for i in 1..<n {\n        for j in i+1..<n {\n   \
    \         for k in j+1..<n {\n                if (i*i - i + 1 + j*j - j + 1 +\
    \ k*k - k + 1) % 3 == 0 {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpy602g31s/tmpy602g31s.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a5c9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a5993b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a5993988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a59927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy602g31s                        0x000055dcc76383b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b94a5e88460 __libc_start_main +
    245

    6    tmpy602g31s                        0x000055dcc7637fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var triples = 0\n    for i in 1..<n {\n        for j in i+1..<n {\n \
    \           for k in j+1..<n {\n                if (i*i - i + 1 + j*j - j + 1\
    \ + k*k - k + 1) % 3 == 0 {\n                    triples += 1\n              \
    \  }\n            }\n        }\n    }\n    return triples\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmphg42yc75/tmphg42yc75.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17d21bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17d1eb5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17d1eb5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17d1eb47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphg42yc75                        0x000055cbe6f903b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b17d23aa460 __libc_start_main +
    245

    6    tmphg42yc75                        0x000055cbe6f8ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n - 2 {\n        for j in i + 1..<n -\
    \ 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    var i = 1\n    while i < n - 1 {\n        var j =\
    \ i + 1\n        while j < n {\n            var k = j + 1\n            while k\
    \ < n + 1 {\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1)\
    \ % 3 == 0 {\n                    count += 1\n                }\n            \
    \    k += 1\n            }\n            j += 1\n        }\n        i += 1\n  \
    \  }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n   \
    \         for k in j+1..<n {\n                if (i*i - i + 1 + j*j - j + 1 +\
    \ k*k - k + 1) % 3 == 0 {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpyl7iuqrx/tmpyl7iuqrx.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aece0869c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aece0560b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aece0560988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aece055f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyl7iuqrx                        0x00005588bcac1335 <unavailable> + 4917

    5    libc.so.6                          0x00002aece0a55460 __libc_start_main +
    245

    6    tmpyl7iuqrx                        0x00005588bcac0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n - 2 {\n        for j in i + 1..<n -\
    \ 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n\
    \            for k in j+1..<n {\n                if (a[i] + a[j] + a[k]) % 3 ==\
    \ 0 {\n                    count += 1\n                }\n            }\n    \
    \    }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<a.count {\n        for j in i+1..<a.count\
    \ {\n            for k in j+1..<a.count {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    for i in 1..<n {\n        for j in (i + 1)..<n {\n\
    \            for k in (j + 1)..<n {\n                if (i * i - i + 1 + j * j\
    \ - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1\n      \
    \          }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpiuum1ctq/tmpiuum1ctq.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7e8252c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7e7f49b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7e7f49988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7e7f487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiuum1ctq                        0x00005654fae503b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ac7e843e460 __libc_start_main +
    245

    6    tmpiuum1ctq                        0x00005654fae4ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n {\n        for j in (i + 1)..<n {\n\
    \            for k in (j + 1)..<n {\n                if (a[i] + a[j] + a[k]) %\
    \ 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<n - 2 {\n        for j in i + 1..<n\
    \ - 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n\
    \            for k in j+1..<n {\n                if (a[i] + a[j] + a[k]) % 3 ==\
    \ 0 {\n                    count += 1\n                }\n            }\n    \
    \    }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n {\n        for j in i+1..<n {\n    \
    \        for k in j+1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0\
    \ {\n                    count += 1\n                }\n            }\n      \
    \  }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    for i in 1..<n {\n        for j in i+1..<n {\n   \
    \         for k in j+1..<n {\n                if (i*i - i + 1 + j*j - j + 1 +\
    \ k*k - k + 1) % 3 == 0 {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpy602g31s/tmpy602g31s.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a5c9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a5993b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a5993988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a59927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy602g31s                        0x000055dcc76383b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b94a5e88460 __libc_start_main +
    245

    6    tmpy602g31s                        0x000055dcc7637fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var result = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n - 2 {\n        for j in i + 1..<n -\
    \ 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    result += 1\n                }\n           \
    \ }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<n - 2 {\n        for j in i + 1..<n\
    \ - 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n\
    \            for k in j+1..<n {\n                if (a[i] + a[j] + a[k]) % 3 ==\
    \ 0 {\n                    count += 1\n                }\n            }\n    \
    \    }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n {\n        for j in i+1..<n {\n    \
    \        for k in j+1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0\
    \ {\n                    count += 1\n                }\n            }\n      \
    \  }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<n - 2 {\n        for j in i + 1..<n\
    \ - 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<a.count {\n        for j in i+1..<a.count\
    \ {\n            for k in j+1..<a.count {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    for i in 1..<n {\n        for j in i+1..<n {\n   \
    \         for k in j+1..<n {\n                if (i*i - i + 1 + j*j - j + 1 +\
    \ k*k - k + 1) % 3 == 0 {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpy602g31s/tmpy602g31s.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b94a5c9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b94a5993b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b94a5993988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94a59927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy602g31s                        0x000055dcc76383b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b94a5e88460 __libc_start_main +
    245

    6    tmpy602g31s                        0x000055dcc7637fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i * i - i + 1)\n\
    \    }\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n\
    \            for k in j+1..<n {\n                if (a[i] + a[j] + a[k]) % 3 ==\
    \ 0 {\n                    count += 1\n                }\n            }\n    \
    \    }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    var a = Array(repeating: 0, count: n)\n    for i in\
    \ 0..<n {\n        a[i] = i * i - i + 1\n    }\n    for i in 0..<n {\n       \
    \ for j in i+1..<n {\n            for k in j+1..<n {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6)\
    \ == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpbl8v0cuh/tmpbl8v0cuh.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b41361c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b41058b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b41058988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b410577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbl8v0cuh                        0x000055a64a1cc455 <unavailable> + 5205

    5    libc.so.6                          0x00002b9b4154d460 __libc_start_main +
    245

    6    tmpbl8v0cuh                        0x000055a64a1cc109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    for i in 1..<n {\n        for j in i+1..<n {\n   \
    \         for k in j+1..<n {\n                if (i*i-i+1 + j*j-j+1 + k*k-k+1)\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: Exception
  stderr: 'tmpx56uvx9t/tmpx56uvx9t.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc7635dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc76054b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc76054988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc760537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx56uvx9t                        0x000055981152c3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002adc76549460 __libc_start_main +
    245

    6    tmpx56uvx9t                        0x000055981152bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824804
- exit_code: -4
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    for i in 1..<n {\n        for j in (i + 1)..<n {\n\
    \            for k in (j + 1)..<n {\n                if (i * i - i + 1 + j * j\
    \ - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1\n      \
    \          }\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n:\
    \ 6) == 4)\nassert(get_max_triples(n: 10) == 36)\nassert(get_max_triples(n: 100)\
    \ == 53361)"
  status: Exception
  stderr: 'tmpiuum1ctq/tmpiuum1ctq.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7e8252c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7e7f49b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7e7f49988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7e7f487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiuum1ctq                        0x00005654fae503b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ac7e843e460 __libc_start_main +
    245

    6    tmpiuum1ctq                        0x00005654fae4ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824804
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var a = [Int]()\n    var count = 0\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n - 2 {\n        for j in i + 1..<n -\
    \ 1 {\n            for k in j + 1..<n {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count += 1\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_max_triples(n: 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n:\
    \ 10) == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824805
- exit_code: 0
  program: "\n/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// Input: n = 5\n/// Output: 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int\
    \ {\n    var count = 0\n    var a = [Int]()\n    for i in 1...n {\n        a.append(i\
    \ * i - i + 1)\n    }\n    for i in 0..<n {\n        for j in i+1..<n {\n    \
    \        for k in j+1..<n {\n                if (a[i] + a[j] + a[k]) % 3 == 0\
    \ {\n                    count += 1\n                }\n            }\n      \
    \  }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_max_triples(n:\
    \ 5) == 1)\nassert(get_max_triples(n: 6) == 4)\nassert(get_max_triples(n: 10)\
    \ == 36)\nassert(get_max_triples(n: 100) == 53361)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824804
