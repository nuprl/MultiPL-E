name: HumanEval_121_solution
language: swift
prompt: "\n/// Given a non-empty list of integers, return the sum of all of the odd\
  \ elements that are in even positions.\n/// Examples\n/// solution([5, 8, 7, 1])\
  \ ==> 12\n/// solution([3, 3, 3, 3, 3]) ==> 9\n/// solution([30, 13, 24, 321]) ==>0\n\
  func solution(lst: [Int]) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(solution(lst: [5, 8, 7, 1]) == 12)\nassert(solution(lst:\
  \ [3, 3, 3, 3, 3]) == 9)\nassert(solution(lst: [30, 13, 24, 321]) == 0)\nassert(solution(lst:\
  \ [5, 9]) == 5)\nassert(solution(lst: [2, 4, 8]) == 0)\nassert(solution(lst: [30,\
  \ 13, 23, 32]) == 23)\nassert(solution(lst: [3, 13, 2, 9]) == 3)"
completions: ["    var sum = 0\n    for (index, element) in lst.enumerated() {\n \
    \       if index % 2 == 0 && element % 2 != 0 {\n            sum += element\n\
    \        }\n    }\n    return sum", '    return lst.enumerated().reduce(0) { $0
    + ($1.offset % 2 == 0 && $1.element % 2 != 0 ? $1.element : 0) }', "    var sum\
    \ = 0\n    for (index, value) in lst.enumerated() {\n        if index % 2 == 0\
    \ && value % 2 != 0 {\n            sum += value\n        }\n    }\n    return\
    \ sum", "    var sum = 0\n    for (index, value) in lst.enumerated() {\n     \
    \   if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n        }\n\
    \    }\n    return sum", '    return lst.enumerated().filter({ $0.offset % 2 ==
    1 && $1 % 2 == 1 }).map({ $0.element }).reduce(0, +)', '    return lst.enumerated().reduce(0)
    { $0 + ($1.offset % 2 == 0 && $1.element % 2 != 0 ? $1.element : 0) }', '    return
    lst.enumerated().filter({ $0.offset % 2 == 1 && $1 % 2 == 1 }).map({ $0.element
    }).reduce(0, +)', "    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n\
    \        }\n    }\n    return sum", "    var sum = 0\n    for (index, value) in\
    \ lst.enumerated() {\n        if index % 2 == 0 && value % 2 != 0 {\n        \
    \    sum += value\n        }\n    }\n    return sum", "    var sum = 0\n    for\
    \ (index, value) in lst.enumerated() {\n        if index % 2 == 0 && value % 2\
    \ != 0 {\n            sum += value\n        }\n    }\n    return sum", "    var\
    \ sum = 0\n    for (index, element) in lst.enumerated() {\n        if index %\
    \ 2 == 0 && element % 2 != 0 {\n            sum += element\n        }\n    }\n\
    \    return sum", '    return lst.enumerated().reduce(0) { $0 + ($1.offset % 2
    == 0 && $1.element % 2 != 0 ? $1.element : 0) }', "    var sum = 0\n    for (index,\
    \ value) in lst.enumerated() {\n        if index % 2 == 0 && value % 2 != 0 {\n\
    \            sum += value\n        }\n    }\n    return sum", "    var sum = 0\n\
    \    for (index, element) in lst.enumerated() {\n        if index % 2 == 0 &&\
    \ element % 2 != 0 {\n            sum += element\n        }\n    }\n    return\
    \ sum", "    var sum = 0\n    for (index, value) in lst.enumerated() {\n     \
    \   if index % 2 == 0 && value % 2 != 0 {\n            sum += value\n        }\n\
    \    }\n    return sum", '    return lst.enumerated().reduce(0) { $0 + ($1.offset
    % 2 == 0 && $1.element % 2 != 0 ? $1.element : 0) }', "    var sum = 0\n    for\
    \ (index, value) in lst.enumerated() {\n        if index % 2 == 0 && value % 2\
    \ != 0 {\n            sum += value\n        }\n    }\n    return sum", "    var\
    \ sum = 0\n    for (index, value) in lst.enumerated() {\n        if index % 2\
    \ == 0 && value % 2 != 0 {\n            sum += value\n        }\n    }\n    return\
    \ sum", '    return lst.enumerated().reduce(0) { $0 + ($1.offset % 2 == 0 && $1.element
    % 2 != 0 ? $1.element : 0) }', "    var sum = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if index % 2 == 0 && element % 2 != 0 {\n            sum += element\n\
    \        }\n    }\n    return sum"]
stop_tokens:
- "\n}"
