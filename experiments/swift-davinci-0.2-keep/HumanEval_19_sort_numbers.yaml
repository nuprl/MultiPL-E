name: HumanEval_19_sort_numbers
language: swift
prompt: "\n/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
  /// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
  \ 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to\
  \ largest\n/// >>> sort_numbers('three one five')\n/// 'one three five'\nfunc sort_numbers(numbers:\
  \ String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(sort_numbers(numbers: \"\") == \"\")\nassert(sort_numbers(numbers:\
  \ \"three\") == \"three\")\nassert(sort_numbers(numbers: \"three five nine\") ==\
  \ \"three five nine\")\nassert(sort_numbers(numbers: \"five zero four seven nine\
  \ eight\") == \"zero four five seven eight nine\")\nassert(sort_numbers(numbers:\
  \ \"six five four three two one zero\") == \"zero one two three four five six\")"
completions: ["    let nums = numbers.split(separator: \" \")\n    let sorted = nums.sorted\
    \ {\n        let a = Int(String(number_to_int($0)))!\n        let b = Int(String(number_to_int($1)))!\n\
    \        return a < b\n    }\n    return sorted.joined(separator: \" \")", " \
    \   let numberals = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\", \"seven\", \"eight\", \"nine\"]\n    let numbers = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = numbers.sorted { (lhs, rhs) -> Bool in\n        return\
    \ numberals.index(of: lhs)! < numberals.index(of: rhs)!\n    }\n    return sorted.joined(separator:\
    \ \" \")", "    let numeral_map = [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\"\
    : 3, \"four\": 4, \"five\": 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\"\
    : 9]\n    let nums = numbers.components(separatedBy: \" \")\n    let sorted_nums\
    \ = nums.sorted { (num1, num2) -> Bool in\n        return numeral_map[num1]! <\
    \ numeral_map[num2]!\n    }\n    return sorted_nums.joined(separator: \" \")",
  "    let nums = numbers.components(separatedBy: \" \")\n    let sorted = nums.sorted\
    \ { (s1, s2) -> Bool in\n        return s1 < s2\n    }\n    return sorted.joined(separator:\
    \ \" \")", "    let nums = numbers.components(separatedBy: \" \")\n    let sortedNums\
    \ = nums.sorted { (a, b) -> Bool in\n        return a.count < b.count\n    }\n\
    \    return sortedNums.joined(separator: \" \")", "    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ a) < number_to_int(number: b)\n    }\n    return sorted.joined(separator: \"\
    \ \")", "    let nums = numbers.split(separator: \" \")\n    let sorted = nums.sorted\
    \ { (a, b) -> Bool in\n        return Int(a)! < Int(b)!\n    }\n    return sorted.joined(separator:\
    \ \" \")", "    let numeral_map = [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\"\
    : 3, \"four\": 4, \"five\": 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\"\
    : 9]\n    let numeral_list = numbers.components(separatedBy: \" \")\n    let sorted_numbers\
    \ = numeral_list.sorted { (a, b) -> Bool in\n        return numeral_map[a]! <\
    \ numeral_map[b]!\n    }\n    return sorted_numbers.joined(separator: \" \")",
  "    let number_map = [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\"\
    : 4, \"five\": 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9]\n    let\
    \ numbers_array = numbers.components(separatedBy: \" \")\n    let sorted_numbers\
    \ = numbers_array.sorted { (a, b) -> Bool in\n        return number_map[a]! <\
    \ number_map[b]!\n    }\n    return sorted_numbers.joined(separator: \" \")",
  "    let nums = numbers.components(separatedBy: \" \")\n    let sorted = nums.sorted\
    \ { (a, b) -> Bool in\n        return a.count < b.count\n    }\n    return sorted.joined(separator:\
    \ \" \")", "    let nums = numbers.components(separatedBy: \" \")\n    let sorted\
    \ = nums.sorted { (a, b) -> Bool in\n        return num_to_int(num: a) < num_to_int(num:\
    \ b)\n    }\n    return sorted.joined(separator: \" \")", "    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (s1, s2) -> Bool in\n        return s1\
    \ < s2\n    }\n    return sorted.joined(separator: \" \")", "    let nums = numbers.components(separatedBy:\
    \ \" \")\n    let sorted = nums.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ a) < number_to_int(number: b)\n    }\n    return sorted.joined(separator: \"\
    \ \")", "    let number_map = [\"zero\": 0, \"one\": 1, \"two\": 2, \"three\"\
    : 3, \"four\": 4, \"five\": 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\"\
    : 9]\n    let numbers = numbers.split(separator: \" \")\n    let sorted_numbers\
    \ = numbers.sorted { (a, b) -> Bool in\n        return number_map[String(a)]!\
    \ < number_map[String(b)]!\n    }\n    return sorted_numbers.joined(separator:\
    \ \" \")", "    let numberals = [\"zero\", \"one\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\", \"seven\", \"eight\", \"nine\"]\n    let sorted = numbers.components(separatedBy:\
    \ \" \").sorted { (a, b) -> Bool in\n        return numberals.index(of: a)! <\
    \ numberals.index(of: b)!\n    }\n    return sorted.joined(separator: \" \")",
  "    let numbers_array = numbers.components(separatedBy: \" \")\n    let sorted_numbers\
    \ = numbers_array.sorted { (a, b) -> Bool in\n        return number_to_int(number:\
    \ a) < number_to_int(number: b)\n    }\n    return sorted_numbers.joined(separator:\
    \ \" \")", "    let nums = numbers.components(separatedBy: \" \")\n    let sorted\
    \ = nums.sorted { (a, b) -> Bool in\n        return num_to_int(num: a) < num_to_int(num:\
    \ b)\n    }\n    return sorted.joined(separator: \" \")", "    let numbers = numbers.split(separator:\
    \ \" \")\n    let sortedNumbers = numbers.sorted { (first, second) -> Bool in\n\
    \        return first < second\n    }\n    return sortedNumbers.joined(separator:\
    \ \" \")", "    let nums = numbers.split(separator: \" \")\n    let sorted = nums.sorted\
    \ { (a, b) -> Bool in\n        return Int(a)! < Int(b)!\n    }\n    return sorted.joined(separator:\
    \ \" \")", "    let nums = numbers.split(separator: \" \")\n    let nums_sorted\
    \ = nums.sorted { (s1, s2) -> Bool in\n        let num1 = Int(s1) ?? 0\n     \
    \   let num2 = Int(s2) ?? 0\n        return num1 < num2\n    }\n    return nums_sorted.joined(separator:\
    \ \" \")"]
stop_tokens:
- "\n}"
