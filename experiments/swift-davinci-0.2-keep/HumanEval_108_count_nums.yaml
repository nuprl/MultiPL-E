name: HumanEval_108_count_nums
language: swift
prompt: "\n/// Write a function count_nums which takes an array of integers and returns\n\
  /// the number of elements which has a sum of digits > 0.\n/// If a number is negative,\
  \ then its first signed digit will be negative:\n/// e.g. -123 has signed digits\
  \ -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1, 11, -11])\
  \ == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int]) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
  \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
  \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
  \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
  \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
completions: ['    return arr.filter { $0.digits.reduce(0, +) > 0 }.count', '    return
    arr.filter({$0.digits.reduce(0, combine: +) > 0}).count', "    var count = 0\n\
    \    for i in arr {\n        if i < 0 {\n            if i % 10 != 0 {\n      \
    \          count += 1\n            }\n        } else {\n            if i % 10\
    \ != 0 {\n                count += 1\n            }\n        }\n    }\n    return\
    \ count", '    return arr.filter { $0.digits.reduce(0, +) > 0 }.count', '    return
    arr.filter { $0.digits.reduce(0, +) > 0 }.count', "    var count = 0\n    for\
    \ num in arr {\n        if sum_digits(num) > 0 {\n            count += 1\n   \
    \     }\n    }\n    return count", '    return arr.filter({$0.sum_digits() > 0}).count',
  "    var count = 0\n    for num in arr {\n        if num < 0 {\n            if num\
    \ % 10 != 0 {\n                count += 1\n            }\n        } else {\n \
    \           if num % 10 != 0 {\n                count += 1\n            }\n  \
    \      }\n    }\n    return count", '    return arr.filter({ $0 != 0 && $0.digits.reduce(0,
    +) > 0 }).count', '    return arr.filter({$0.digits.reduce(0, combine: +) > 0}).count',
  '    return arr.filter({$0.digits().reduce(0, +) > 0}).count', '    return arr.filter
    { $0.digits.reduce(0, +) > 0 }.count', '    return arr.filter({$0 != 0}).filter({abs($0)
    % 10 != 0}).count', '    return arr.filter { $0.digits.reduce(0, +) > 0 }.count',
  '    return arr.filter({ $0.digits.reduce(0, combine: +) > 0 }).count', "    return\
    \ arr.filter{\n        var sum = 0\n        var num = $0\n        while num !=\
    \ 0 {\n            sum += abs(num % 10)\n            num /= 10\n        }\n  \
    \      return sum > 0\n    }.count", '    return arr.filter { $0.digits.reduce(0,
    +) > 0 }.count', '    return arr.filter({ $0 != 0 }).reduce(0, { $0 + abs($1)
    }).description.characters.map({ Int(String($0))! }).reduce(0, +)', "    var count\
    \ = 0\n    for num in arr {\n        if num < 0 {\n            if num % 10 < 0\
    \ {\n                count += 1\n            }\n        } else {\n           \
    \ if num % 10 > 0 {\n                count += 1\n            }\n        }\n  \
    \  }\n    return count", '    return arr.filter { $0.digits.reduce(0, +) > 0 }.count']
stop_tokens:
- "\n}"
