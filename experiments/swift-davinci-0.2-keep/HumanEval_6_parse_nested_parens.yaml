name: HumanEval_6_parse_nested_parens
language: swift
prompt: "\n/// Input to this function is a string represented multiple groups for\
  \ nested parentheses separated by spaces.\n/// For each of the group, output the\
  \ deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels\
  \ of nesting while ((())) has three.\n/// >>> parse_nested_parens('(()()) ((()))\
  \ () ((())()())')\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String)\
  \ -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(parse_nested_parens(paren_string: \"(()())\
  \ ((())) () ((())()())\") == [2, 3, 1, 3])\nassert(parse_nested_parens(paren_string:\
  \ \"() (()) ((())) (((())))\") == [1, 2, 3, 4])\nassert(parse_nested_parens(paren_string:\
  \ \"(()(())((())))\") == [4])"
completions: ["    var paren_groups = paren_string.components(separatedBy: \" \")\n\
    \    var max_nesting_levels = [Int]()\n    for paren_group in paren_groups {\n\
    \        var max_nesting_level = 0\n        var current_nesting_level = 0\n  \
    \      for paren in paren_group {\n            if paren == \"(\" {\n         \
    \       current_nesting_level += 1\n            } else if paren == \")\" {\n \
    \               current_nesting_level -= 1\n            }\n            if current_nesting_level\
    \ > max_nesting_level {\n                max_nesting_level = current_nesting_level\n\
    \            }\n        }\n        max_nesting_levels.append(max_nesting_level)\n\
    \    }\n    return max_nesting_levels", "    var paren_stack = Stack<Character>()\n\
    \    var max_depth = 0\n    var depth = 0\n    var max_depths = [Int]()\n    for\
    \ char in paren_string {\n        if char == \"(\" {\n            paren_stack.push(char)\n\
    \            depth += 1\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        } else if char == \")\" {\n            paren_stack.pop()\n\
    \            depth -= 1\n            if paren_stack.isEmpty() {\n            \
    \    max_depths.append(max_depth)\n                max_depth = 0\n           \
    \     depth = 0\n            }\n        }\n    }\n    return max_depths", "  \
    \  var max_nesting = 0\n    var current_nesting = 0\n    var result = [Int]()\n\
    \    for char in paren_string {\n        if char == \"(\" {\n            current_nesting\
    \ += 1\n            if current_nesting > max_nesting {\n                max_nesting\
    \ = current_nesting\n            }\n        } else if char == \")\" {\n      \
    \      current_nesting -= 1\n        } else if char == \" \" {\n            result.append(max_nesting)\n\
    \            max_nesting = 0\n            current_nesting = 0\n        }\n   \
    \ }\n    result.append(max_nesting)\n    return result", "    var result = [Int]()\n\
    \    let paren_groups = paren_string.split(separator: \" \")\n    for paren_group\
    \ in paren_groups {\n        var stack = [Character]()\n        var max_depth\
    \ = 0\n        for char in paren_group {\n            if char == \"(\" {\n   \
    \             stack.append(char)\n                max_depth = max(max_depth, stack.count)\n\
    \            } else if char == \")\" {\n                stack.removeLast()\n \
    \           }\n        }\n        result.append(max_depth)\n    }\n    return\
    \ result", "    var max_nesting_level = 0\n    var nesting_level = 0\n    var\
    \ max_nesting_levels: [Int] = []\n    for char in paren_string {\n        if char\
    \ == \"(\" {\n            nesting_level += 1\n            if nesting_level > max_nesting_level\
    \ {\n                max_nesting_level = nesting_level\n            }\n      \
    \  } else if char == \")\" {\n            nesting_level -= 1\n            if nesting_level\
    \ == 0 {\n                max_nesting_levels.append(max_nesting_level)\n     \
    \           max_nesting_level = 0\n            }\n        }\n    }\n    return\
    \ max_nesting_levels", "    var max_nesting_levels = [Int]()\n    var current_nesting_level\
    \ = 0\n    var max_nesting_level = 0\n    for char in paren_string {\n       \
    \ if char == \"(\" {\n            current_nesting_level += 1\n            if current_nesting_level\
    \ > max_nesting_level {\n                max_nesting_level = current_nesting_level\n\
    \            }\n        } else if char == \")\" {\n            current_nesting_level\
    \ -= 1\n        } else if char == \" \" {\n            max_nesting_levels.append(max_nesting_level)\n\
    \            max_nesting_level = 0\n            current_nesting_level = 0\n  \
    \      }\n    }\n    max_nesting_levels.append(max_nesting_level)\n    return\
    \ max_nesting_levels", "    var result = [Int]()\n    var current_max = 0\n  \
    \  var current_count = 0\n    for char in paren_string {\n        if char == \"\
    (\" {\n            current_count += 1\n            if current_count > current_max\
    \ {\n                current_max = current_count\n            }\n        } else\
    \ if char == \")\" {\n            current_count -= 1\n        } else if char ==\
    \ \" \" {\n            result.append(current_max)\n            current_max = 0\n\
    \            current_count = 0\n        }\n    }\n    result.append(current_max)\n\
    \    return result", "    var result = [Int]()\n    var max_level = 0\n    var\
    \ level = 0\n    for char in paren_string {\n        if char == \"(\" {\n    \
    \        level += 1\n            max_level = max(max_level, level)\n        }\
    \ else if char == \")\" {\n            level -= 1\n        } else if char == \"\
    \ \" {\n            result.append(max_level)\n            max_level = 0\n    \
    \        level = 0\n        }\n    }\n    result.append(max_level)\n    return\
    \ result", "    var max_nesting_levels = [Int]()\n    let paren_groups = paren_string.components(separatedBy:\
    \ \" \")\n    for group in paren_groups {\n        var nesting_level = 0\n   \
    \     var max_nesting_level = 0\n        for char in group.characters {\n    \
    \        if char == \"(\" {\n                nesting_level += 1\n            }\
    \ else if char == \")\" {\n                nesting_level -= 1\n            }\n\
    \            if nesting_level > max_nesting_level {\n                max_nesting_level\
    \ = nesting_level\n            }\n        }\n        max_nesting_levels.append(max_nesting_level)\n\
    \    }\n    return max_nesting_levels", "    var max_nesting_levels = [Int]()\n\
    \    var current_nesting_level = 0\n    var max_nesting_level = 0\n    var i =\
    \ 0\n    while i < paren_string.count {\n        let index = paren_string.index(paren_string.startIndex,\
    \ offsetBy: i)\n        let paren = paren_string[index]\n        if paren == \"\
    (\" {\n            current_nesting_level += 1\n            if current_nesting_level\
    \ > max_nesting_level {\n                max_nesting_level = current_nesting_level\n\
    \            }\n        } else if paren == \")\" {\n            current_nesting_level\
    \ -= 1\n        } else if paren == \" \" {\n            max_nesting_levels.append(max_nesting_level)\n\
    \            max_nesting_level = 0\n            current_nesting_level = 0\n  \
    \      }\n        i += 1\n    }\n    max_nesting_levels.append(max_nesting_level)\n\
    \    return max_nesting_levels", "    var max_nesting_levels = [Int]()\n    var\
    \ current_nesting_level = 0\n    var max_nesting_level = 0\n    for char in paren_string\
    \ {\n        if char == \"(\" {\n            current_nesting_level += 1\n    \
    \        if current_nesting_level > max_nesting_level {\n                max_nesting_level\
    \ = current_nesting_level\n            }\n        } else if char == \")\" {\n\
    \            current_nesting_level -= 1\n        } else if char == \" \" {\n \
    \           max_nesting_levels.append(max_nesting_level)\n            max_nesting_level\
    \ = 0\n            current_nesting_level = 0\n        }\n    }\n    max_nesting_levels.append(max_nesting_level)\n\
    \    return max_nesting_levels", "    let groups = paren_string.split(separator:\
    \ \" \")\n    var max_nesting = [Int]()\n    for group in groups {\n        var\
    \ nesting = 0\n        var max_nesting_in_group = 0\n        for char in group\
    \ {\n            if char == \"(\" {\n                nesting += 1\n          \
    \  } else if char == \")\" {\n                nesting -= 1\n            }\n  \
    \          if nesting > max_nesting_in_group {\n                max_nesting_in_group\
    \ = nesting\n            }\n        }\n        max_nesting.append(max_nesting_in_group)\n\
    \    }\n    return max_nesting", "    var result = [Int]()\n    var i = 0\n  \
    \  var j = 0\n    var count = 0\n    var max_count = 0\n    while i < paren_string.count\
    \ {\n        let char = paren_string[paren_string.index(paren_string.startIndex,\
    \ offsetBy: i)]\n        if char == \"(\" {\n            count += 1\n        \
    \    max_count = max(max_count, count)\n        } else if char == \")\" {\n  \
    \          count -= 1\n        } else if char == \" \" {\n            result.append(max_count)\n\
    \            max_count = 0\n            count = 0\n            j = i + 1\n   \
    \     }\n        i += 1\n    }\n    result.append(max_count)\n    return result",
  "    var max_depth = 0\n    var depth = 0\n    var max_depths = [Int]()\n    for\
    \ char in paren_string {\n        if char == \"(\" {\n            depth += 1\n\
    \            if depth > max_depth {\n                max_depth = depth\n     \
    \       }\n        } else if char == \")\" {\n            depth -= 1\n       \
    \ } else if char == \" \" {\n            max_depths.append(max_depth)\n      \
    \      max_depth = 0\n            depth = 0\n        }\n    }\n    max_depths.append(max_depth)\n\
    \    return max_depths", "    var paren_groups = paren_string.split(separator:\
    \ \" \")\n    var result = [Int]()\n    for paren_group in paren_groups {\n  \
    \      var max_depth = 0\n        var current_depth = 0\n        for char in paren_group\
    \ {\n            if char == \"(\" {\n                current_depth += 1\n    \
    \        } else if char == \")\" {\n                current_depth -= 1\n     \
    \       }\n            if current_depth > max_depth {\n                max_depth\
    \ = current_depth\n            }\n        }\n        result.append(max_depth)\n\
    \    }\n    return result", "    var result = [Int]()\n    var current_level =\
    \ 0\n    var max_level = 0\n    for char in paren_string {\n        if char ==\
    \ \"(\" {\n            current_level += 1\n            max_level = max(max_level,\
    \ current_level)\n        } else if char == \")\" {\n            current_level\
    \ -= 1\n        } else if char == \" \" {\n            result.append(max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    result.append(max_level)\n    return result", "    var max_depth = 0\n  \
    \  var depth = 0\n    var max_depth_list = [Int]()\n    for char in paren_string\
    \ {\n        if char == \"(\" {\n            depth += 1\n            if depth\
    \ > max_depth {\n                max_depth = depth\n            }\n        } else\
    \ if char == \")\" {\n            depth -= 1\n        } else if char == \" \"\
    \ {\n            max_depth_list.append(max_depth)\n            max_depth = 0\n\
    \            depth = 0\n        }\n    }\n    max_depth_list.append(max_depth)\n\
    \    return max_depth_list", "    var result = [Int]()\n    var paren_stack =\
    \ Stack<Character>()\n    var max_depth = 0\n    for paren in paren_string {\n\
    \        if paren == \"(\" {\n            paren_stack.push(paren)\n          \
    \  max_depth = max(max_depth, paren_stack.count)\n        } else if paren == \"\
    )\" {\n            paren_stack.pop()\n        } else if paren == \" \" {\n   \
    \         result.append(max_depth)\n            max_depth = 0\n        }\n   \
    \ }\n    result.append(max_depth)\n    return result", "    var result = [Int]()\n\
    \    var current_level = 0\n    var max_level = 0\n    for char in paren_string\
    \ {\n        if char == \"(\" {\n            current_level += 1\n            max_level\
    \ = max(max_level, current_level)\n        } else if char == \")\" {\n       \
    \     current_level -= 1\n        } else if char == \" \" {\n            result.append(max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    result.append(max_level)\n    return result", "    var result = [Int]()\n\
    \    let paren_groups = paren_string.components(separatedBy: \" \")\n    for group\
    \ in paren_groups {\n        var max_depth = 0\n        var current_depth = 0\n\
    \        for paren in group {\n            if paren == \"(\" {\n             \
    \   current_depth += 1\n            } else if paren == \")\" {\n             \
    \   current_depth -= 1\n            }\n            if current_depth > max_depth\
    \ {\n                max_depth = current_depth\n            }\n        }\n   \
    \     result.append(max_depth)\n    }\n    return result"]
stop_tokens:
- "\n}"
