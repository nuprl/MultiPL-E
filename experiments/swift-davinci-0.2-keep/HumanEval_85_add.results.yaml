language: swift
name: HumanEval_85_add
results:
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().reduce(0) { $1.offset % 2 == 1\
    \ && $1.element % 2 == 0 ? $0 + $1.element : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter({ $0.offset % 2 != 0 }).filter({\
    \ $0.element % 2 == 0 }).reduce(0, { $0 + $1.element })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().reduce(0) { $1.offset % 2 == 1\
    \ && $1.element % 2 == 0 ? $0 + $1.element : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().reduce(0) { $1.offset % 2 == 1\
    \ && $1.element % 2 == 0 ? $0 + $1.element : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().reduce(0) { $1.offset % 2 == 1\
    \ && $1.element % 2 == 0 ? $0 + $1.element : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter({ $0.offset % 2 != 0 }).filter({\
    \ $0.element % 2 == 0 }).reduce(0, { $0 + $1.element })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().reduce(0) { $1.offset % 2 == 1\
    \ && $1.element % 2 == 0 ? $0 + $1.element : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().reduce(0) { $1.offset % 2 == 1\
    \ && $1.element % 2 == 0 ? $0 + $1.element : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().reduce(0) { (result, element) in\n\
    \        element.offset % 2 == 1 && element.element % 2 == 0 ? result + element.element\
    \ : result\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && element % 2 == 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter({ $0.offset % 2 != 0 }).filter({\
    \ $0.element % 2 == 0 }).reduce(0, { $0 + $1.element })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().reduce(0) { $1.offset % 2 == 1\
    \ && $1.element % 2 == 0 ? $0 + $1.element : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().reduce(0) { (result, element) in\n\
    \        if element.offset % 2 != 0 && element.element % 2 == 0 {\n          \
    \  return result + element.element\n        }\n        return result\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().reduce(0) { $1.offset % 2 == 1\
    \ && $1.element % 2 == 0 ? $0 + $1.element : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().reduce(0) { (result, element) in\n\
    \        if element.offset % 2 != 0 && element.element % 2 == 0 {\n          \
    \  return result + element.element\n        }\n        return result\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4,\
    \ 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
    \ [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for i in 0..<lst.count {\n        if i\
    \ % 2 == 1 && lst[i] % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().reduce(0) { $1.offset % 2 == 1\
    \ && $1.element % 2 == 0 ? $0 + $1.element : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().reduce(0) { $1.offset % 2 == 1\
    \ && $1.element % 2 == 0 ? $0 + $1.element : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter({ $0.offset % 2 != 0 }).filter({\
    \ $0.element % 2 == 0 }).reduce(0, { $0 + $1.element })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().reduce(0) { $1.offset % 2 == 1\
    \ && $1.element % 2 == 0 ? $0 + $1.element : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().reduce(0) { $1.offset % 2 == 1\
    \ && $1.element % 2 == 0 ? $0 + $1.element : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for i in 0..<lst.count {\n        if i\
    \ % 2 == 1 && lst[i] % 2 == 0 {\n            sum += lst[i]\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(add(lst: [4, 88])\
    \ == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0,\
    \ 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && element % 2 == 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().reduce(0) { $1.offset % 2 == 1\
    \ && $1.element % 2 == 0 ? $0 + $1.element : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().reduce(0) { $1.offset % 2 == 1\
    \ && $1.element % 2 == 0 ? $0 + $1.element : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().reduce(0) { $1.offset % 2 == 1\
    \ && $1.element % 2 == 0 ? $0 + $1.element : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter({ $0.offset % 2 != 0 }).filter({\
    \ $0.element % 2 == 0 }).reduce(0, { $0 + $1.element })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().reduce(0) { $1.offset % 2 == 1\
    \ && $1.element % 2 == 0 ? $0 + $1.element : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().reduce(0) { $1.offset % 2 == 1\
    \ && $1.element % 2 == 0 ? $0 + $1.element : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().reduce(0) { $1.offset % 2 == 1\
    \ && $1.element % 2 == 0 ? $0 + $1.element : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && element % 2 == 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter({ $0.offset % 2 != 0 }).filter({\
    \ $0.element % 2 == 0 }).reduce(0, { $0 + $1.element })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().reduce(0) { $1.0 % 2 == 1 && $1.1\
    \ % 2 == 0 ? $0 + $1.1 : $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().reduce(0) { $1.offset % 2 == 1\
    \ && $1.element % 2 == 0 ? $0 + $1.element : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().reduce(0) { $1.offset % 2 == 1\
    \ && $1.element % 2 == 0 ? $0 + $1.element : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter({$0.offset % 2 != 0}).filter({$0.element\
    \ % 2 == 0}).reduce(0, {$0 + $1.element})\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().reduce(0) { $1.offset % 2 == 1\
    \ && $1.element % 2 == 0 ? $0 + $1.element : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().reduce(0) { $1.offset % 2 == 1\
    \ && $1.element % 2 == 0 ? $0 + $1.element : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().reduce(0) { $1.offset % 2 == 1\
    \ && $1.element % 2 == 0 ? $0 + $1.element : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && element % 2 == 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter({ $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }).map({ $0.element }).reduce(0, +)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && element % 2 == 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().reduce(0) { $1.offset % 2 == 1\
    \ && $1.element % 2 == 0 ? $0 + $1.element : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().reduce(0) { $1.offset % 2 == 1\
    \ && $1.element % 2 == 0 ? $0 + $1.element : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().reduce(0) { $1.offset % 2 == 1\
    \ && $1.element % 2 == 0 ? $0 + $1.element : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter({$0.offset % 2 != 0}).map({$0.element}).filter({$0\
    \ % 2 == 0}).reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013642
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter({$0.offset % 2 != 0}).filter({$0.element\
    \ % 2 == 0}).reduce(0, {$0 + $1.element})\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && element % 2 == 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && element % 2 == 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && element % 2 == 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter({ $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }).map({ $0.element }).reduce(0, +)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().reduce(0) { $1.offset % 2 == 1\
    \ && $1.element % 2 == 0 ? $0 + $1.element : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().reduce(0) { $1.offset % 2 == 1\
    \ && $1.element % 2 == 0 ? $0 + $1.element : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter({ $0.offset % 2 != 0 }).filter({\
    \ $0.element % 2 == 0 }).reduce(0, { $0 + $1.element })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().reduce(0) { $1.offset % 2 == 1\
    \ && $1.element % 2 == 0 ? $0 + $1.element : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.0 % 2 != 0 && $0.1\
    \ % 2 == 0 }.map { $0.1 }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\n\
    assert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.0 % 2 != 0 && $0.1\
    \ % 2 == 0 }.map { $0.1 }.reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\n\
    assert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().reduce(0) { (result, element) in\n\
    \        return element.offset % 2 == 1 && element.element % 2 == 0 ? result +\
    \ element.element : result\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter({ $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }).map({ $0.element }).reduce(0, +)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var result = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            result += value\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\n\
    assert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter({ $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }).map({ $0.element }).reduce(0, +)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter({ $0.0 % 2 != 0 }).filter({\
    \ $0.1 % 2 == 0 }).map({ $0.1 }).reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter({$0.offset % 2 != 0}).filter({$0.element\
    \ % 2 == 0}).reduce(0, {$0 + $1.element})\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().reduce(0) { (result, element) in\n\
    \        return element.offset % 2 == 1 && element.element % 2 == 0 ? result +\
    \ element.element : result\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && element % 2 == 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter({ $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }).map({ $0.element }).reduce(0, +)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().reduce(0) { $1.offset % 2 == 1\
    \ && $1.element % 2 == 0 ? $0 + $1.element : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var result = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            result += value\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\n\
    assert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().reduce(0) { $1.offset % 2 == 1\
    \ && $1.element % 2 == 0 ? $0 + $1.element : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter({ $0.offset % 2 != 0 }).filter({\
    \ $0.element % 2 == 0 }).reduce(0, { $0 + $1.element })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && element % 2 == 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, element) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && element % 2 == 0 {\n            sum += element\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().reduce(0) { $1.offset % 2 == 1\
    \ && $1.element % 2 == 0 ? $0 + $1.element : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter({$0.offset % 2 != 0}).filter({$0.element\
    \ % 2 == 0}).reduce(0, {$0 + $1.element})\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122])\
    \ == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8])\
    \ == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter({ $0.offset % 2 != 0 }).filter({\
    \ $0.element % 2 == 0 }).reduce(0, { $0 + $1.element })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter({ $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }).map({ $0.element }).reduce(0, +)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter { $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().reduce(0) { $1.offset % 2 == 1\
    \ && $1.element % 2 == 0 ? $0 + $1.element : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter({ $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }).map({ $0.element }).reduce(0, +)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, num) in lst.enumerated() {\n\
    \        if index % 2 != 0 && num % 2 == 0 {\n            sum += num\n       \
    \ }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(add(lst: [4,\
    \ 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().filter({ $0.offset % 2 != 0 &&\
    \ $0.element % 2 == 0 }).map({ $0.element }).reduce(0, +)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7,\
    \ 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4,\
    \ 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    return lst.enumerated().reduce(0) { $1.offset % 2 == 1\
    \ && $1.element % 2 == 0 ? $0 + $1.element : $0 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2,\
    \ 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6,\
    \ 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
- exit_code: 0
  program: "\n/// Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
    \ [Int]) -> Int {\n    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(add(lst:\
    \ [4, 88]) == 88)\nassert(add(lst: [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst:\
    \ [4, 0, 6, 7]) == 0)\nassert(add(lst: [4, 4, 6, 8]) == 12)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013641
