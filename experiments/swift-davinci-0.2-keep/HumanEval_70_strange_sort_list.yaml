name: HumanEval_70_strange_sort_list
language: swift
prompt: "\n/// Given list of integers, return list in strange order.\n/// Strange\
  \ sorting, is when you start with the minimum value,\n/// then maximum of the remaining\
  \ integers, then minimum and so on.\n/// Examples:\n/// strange_sort_list([1, 2,\
  \ 3, 4]) == [1, 4, 2, 3]\n/// strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
  /// strange_sort_list([]) == []\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(strange_sort_list(lst: [1, 2, 3, 4]) ==\
  \ [1, 4, 2, 3])\nassert(strange_sort_list(lst: [5, 6, 7, 8, 9]) == [5, 9, 6, 8,\
  \ 7])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\nassert(strange_sort_list(lst:\
  \ [5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\nassert(strange_sort_list(lst: [5,\
  \ 5, 5, 5]) == [5, 5, 5, 5])\nassert(strange_sort_list(lst: [] as [Int]) == [] as\
  \ [Int])\nassert(strange_sort_list(lst: [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7,\
  \ 3, 6, 4, 5])\nassert(strange_sort_list(lst: [0, 2, 2, 2, 5, 5, -5, -5]) == [-5,\
  \ 5, -5, 5, 0, 2, 2, 2])\nassert(strange_sort_list(lst: [111111]) == [111111])"
completions: ["    var lst = lst\n    var result = [Int]()\n    while !lst.isEmpty\
    \ {\n        let min = lst.min()!\n        let max = lst.max()!\n        result.append(min)\n\
    \        result.append(max)\n        lst.remove(at: lst.index(of: min)!)\n   \
    \     lst.remove(at: lst.index(of: max)!)\n    }\n    return result", "    var\
    \ result = [Int]()\n    var lst = lst\n    while lst.count > 0 {\n        result.append(lst.min()!)\n\
    \        lst.removeAtIndex(lst.indexOf(lst.min()!)!)\n        if lst.count > 0\
    \ {\n            result.append(lst.max()!)\n            lst.removeAtIndex(lst.indexOf(lst.max()!)!)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    var sorted\
    \ = lst.sorted()\n    var min = sorted.removeFirst()\n    var max = sorted.removeLast()\n\
    \    while !sorted.isEmpty {\n        result.append(min)\n        result.append(max)\n\
    \        min = sorted.removeFirst()\n        max = sorted.removeLast()\n    }\n\
    \    result.append(min)\n    result.append(max)\n    return result", "    var\
    \ lst = lst\n    var result: [Int] = []\n    while !lst.isEmpty {\n        result.append(lst.min()!)\n\
    \        lst.remove(at: lst.index(of: lst.min()!)!)\n        if !lst.isEmpty {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result", "    var lst = lst\n  \
    \  var result = [Int]()\n    while !lst.isEmpty {\n        result.append(lst.min()!)\n\
    \        lst.removeAtIndex(lst.indexOf(lst.min()!)!)\n        if !lst.isEmpty\
    \ {\n            result.append(lst.max()!)\n            lst.removeAtIndex(lst.indexOf(lst.max()!)!)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    var lst\
    \ = lst\n    while !lst.isEmpty {\n        result.append(lst.remove(at: lst.index(of:\
    \ lst.min()!)!))\n        if !lst.isEmpty {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    var lst = lst\n    while !lst.isEmpty {\n        result.append(lst.remove(at:\
    \ lst.index(of: lst.min()!)!))\n        if !lst.isEmpty {\n            result.append(lst.remove(at:\
    \ lst.index(of: lst.max()!)!))\n        }\n    }\n    return result", "    var\
    \ lst = lst\n    var result: [Int] = []\n    while !lst.isEmpty {\n        let\
    \ min = lst.min()!\n        let max = lst.max()!\n        result.append(min)\n\
    \        result.append(max)\n        lst.removeAll(where: { $0 == min || $0 ==\
    \ max })\n    }\n    return result", "    var result = [Int]()\n    var lst =\
    \ lst\n    while lst.count > 0 {\n        let min = lst.minElement()!\n      \
    \  let max = lst.maxElement()!\n        result.append(min)\n        result.append(max)\n\
    \        lst.removeAtIndex(lst.indexOf(min)!)\n        lst.removeAtIndex(lst.indexOf(max)!)\n\
    \    }\n    return result", '    return lst.sorted(by: { $0 < $1 })', "    var\
    \ lst = lst\n    var result = [Int]()\n    while !lst.isEmpty {\n        result.append(lst.min()!)\n\
    \        lst.remove(at: lst.index(of: lst.min()!)!)\n        if !lst.isEmpty {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result", "    var lst = lst\n  \
    \  var result: [Int] = []\n    while !lst.isEmpty {\n        result.append(lst.min()!)\n\
    \        lst.remove(at: lst.index(of: lst.min()!)!)\n        if !lst.isEmpty {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result", "    var lst = lst\n  \
    \  var result: [Int] = []\n    while !lst.isEmpty {\n        result.append(lst.min()!)\n\
    \        lst.remove(at: lst.index(of: lst.min()!)!)\n        if !lst.isEmpty {\n\
    \            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result", "    var lst = lst\n  \
    \  var result: [Int] = []\n    while !lst.isEmpty {\n        let min = lst.min()!\n\
    \        let max = lst.max()!\n        result.append(min)\n        result.append(max)\n\
    \        lst.remove(min)\n        lst.remove(max)\n    }\n    return result",
  "    var lst = lst\n    var result: [Int] = []\n    while !lst.isEmpty {\n     \
    \   result.append(lst.min()!)\n        result.append(lst.max()!)\n        lst.remove(at:\
    \ lst.index(of: lst.min()!)!)\n        lst.remove(at: lst.index(of: lst.max()!)!)\n\
    \    }\n    return result", "    var lst = lst\n    var result: [Int] = []\n \
    \   while lst.count > 0 {\n        result.append(lst.min()!)\n        lst.remove(at:\
    \ lst.index(of: lst.min()!)!)\n        if lst.count > 0 {\n            result.append(lst.max()!)\n\
    \            lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n  \
    \  return result", "    var lst = lst\n    var result: [Int] = []\n    while !lst.isEmpty\
    \ {\n        result.append(lst.min()!)\n        lst.remove(at: lst.index(of: lst.min()!)!)\n\
    \        if !lst.isEmpty {\n            result.append(lst.max()!)\n          \
    \  lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n    return result",
  "    var lst = lst\n    var result: [Int] = []\n    while !lst.isEmpty {\n     \
    \   result.append(lst.min()!)\n        lst.remove(at: lst.index(of: lst.min()!)!)\n\
    \        if !lst.isEmpty {\n            result.append(lst.max()!)\n          \
    \  lst.remove(at: lst.index(of: lst.max()!)!)\n        }\n    }\n    return result",
  "    var result = [Int]()\n    var lst = lst\n    while !lst.isEmpty {\n       \
    \ let min = lst.min()!\n        let max = lst.max()!\n        result.append(min)\n\
    \        result.append(max)\n        lst.remove(at: lst.index(of: min)!)\n   \
    \     lst.remove(at: lst.index(of: max)!)\n    }\n    return result", "    var\
    \ lst = lst\n    var result: [Int] = []\n    while lst.count > 0 {\n        result.append(lst.min()!)\n\
    \        lst.remove(at: lst.index(of: lst.min()!)!)\n        if lst.count > 0\
    \ {\n            result.append(lst.max()!)\n            lst.remove(at: lst.index(of:\
    \ lst.max()!)!)\n        }\n    }\n    return result"]
stop_tokens:
- "\n}"
