language: swift
name: HumanEval_117_select_words
results:
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { $0.countOfConsonants() == n }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"\
    ])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\", \"\
    lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmph9p85ewi.swift:14:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.countOfConsonants()\
    \ == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = Set(\"aeiouAEIOU\"\
    )\n    return s.components(separatedBy: \" \").filter {\n        $0.filter { !vowels.contains($0)\
    \ }.count == n\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfbjxn9rl.swift:15:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter {\n       \
    \    ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    var result = [String]()\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let words = s.components(separatedBy:\
    \ \" \")\n    for word in words {\n        var count = 0\n        for letter in\
    \ word {\n            if !vowels.contains(String(letter).lowercased()) {\n   \
    \             count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpk3ky0fla.swift:16:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    var result = [String]()\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let words = s.components(separatedBy:\
    \ \" \")\n    for word in words {\n        var count = 0\n        for char in\
    \ word {\n            if !vowels.contains(String(char).lowercased()) {\n     \
    \           count += 1\n            }\n        }\n        if count == n {\n  \
    \          result.append(word)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8zhg2h4d.swift:16:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\", \"y\"]\n    return s.split(separator: \" \").filter {\n\
    \        $0.filter { !vowels.contains($0.lowercased()) }.count == n\n    }.map\
    \ { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpgpy2n9h1/tmpgpy2n9h1.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9a90546c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9a9023db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9a9023d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9a9023c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgpy2n9h1                        0x0000557c2359daf9 <unavailable> + 6905

    5    libc.so.6                          0x00002b9a90732460 __libc_start_main +
    245

    6    tmpgpy2n9h1                        0x0000557c2359d5a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpld5mn7ea.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { $0.countOfConsonants() == n }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"\
    ])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\", \"\
    lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmph9p85ewi.swift:14:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.countOfConsonants()\
    \ == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { $0.countOfConsonants() == n }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"\
    ])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\", \"\
    lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmph9p85ewi.swift:14:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.countOfConsonants()\
    \ == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for letter in word {\n\
    \            if !vowels.contains(letter) {\n                count += 1\n     \
    \       }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwdk2tpgo.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { $0.count == n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5a2mq4fc.swift:14:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.count\
    \ == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    var result = [String]()\n\
    \    let vowels = \"aeiou\"\n    for word in s.components(separatedBy: \" \")\
    \ {\n        var count = 0\n        for char in word {\n            if !vowels.contains(char)\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp99n44rl_.swift:16:19: error: value of type 'String' has no member\
    \ 'components'\n    for word in s.components(separatedBy: \" \") {\n         \
    \       ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpld5mn7ea.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    return words.filter {\n\
    \        $0.filter { !vowels.contains($0) }.count == n\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpai3jskxo.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    var result = [String]()\n\
    \    let vowels = \"aeiou\"\n    let words = s.components(separatedBy: \" \")\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmphv_l4fqh.swift:16:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    return words.filter {\n\
    \        $0.filter { !vowels.contains($0) }.count == n\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpai3jskxo.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    return words.filter { word\
    \ in\n        word.lowercased().filter { !vowels.contains($0) }.count == n\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0z0ikesg.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpld5mn7ea.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    var result = [String]()\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let words = s.components(separatedBy:\
    \ \" \")\n    for word in words {\n        var count = 0\n        for char in\
    \ word {\n            if !vowels.contains(String(char).lowercased()) {\n     \
    \           count += 1\n            }\n        }\n        if count == n {\n  \
    \          result.append(word)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8zhg2h4d.swift:16:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { $0.count == n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5a2mq4fc.swift:14:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.count\
    \ == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpld5mn7ea.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    var result = [String]()\n\
    \    let words = s.components(separatedBy: \" \")\n    for word in words {\n \
    \       if word.count == n {\n            result.append(word)\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp71cc0jth.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpld5mn7ea.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    var result = [String]()\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let words = s.components(separatedBy:\
    \ \" \")\n    for word in words {\n        var count = 0\n        for letter in\
    \ word {\n            if !vowels.contains(String(letter).lowercased()) {\n   \
    \             count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpk3ky0fla.swift:16:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\", \"y\"]\n    let words = s.components(separatedBy: \" \"\
    )\n    var result = [String]()\n    for word in words {\n        var count = 0\n\
    \        for char in word {\n            if !vowels.contains(String(char).lowercased())\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnqex_bcg.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { $0.count == n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5a2mq4fc.swift:14:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.count\
    \ == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { $0.count == n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5a2mq4fc.swift:14:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.count\
    \ == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpld5mn7ea.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    var result = [String]()\n\
    \    let vowels = \"aeiou\"\n    for word in s.components(separatedBy: \" \")\
    \ {\n        var count = 0\n        for char in word {\n            if !vowels.contains(char)\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp99n44rl_.swift:16:19: error: value of type 'String' has no member\
    \ 'components'\n    for word in s.components(separatedBy: \" \") {\n         \
    \       ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpld5mn7ea.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\", \"y\"]\n    let words = s.components(separatedBy: \" \"\
    )\n    var result = [String]()\n    for word in words {\n        var count = 0\n\
    \        for letter in word {\n            if !vowels.contains(String(letter).lowercased())\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpoj8mln4w.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    var result = [String]()\n\
    \    let vowels = \"aeiou\"\n    let words = s.components(separatedBy: \" \")\n\
    \    for word in words {\n        var count = 0\n        for letter in word {\n\
    \            if !vowels.contains(letter) {\n                count += 1\n     \
    \       }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmptfgah2gy.swift:16:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpld5mn7ea.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpld5mn7ea.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpld5mn7ea.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { $0.countOfConsonants() == n }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"\
    ])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\", \"\
    lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmph9p85ewi.swift:14:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.countOfConsonants()\
    \ == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    var result = [String]()\n\
    \    let vowels = \"aeiou\"\n    let words = s.components(separatedBy: \" \")\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmphv_l4fqh.swift:16:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { $0.count == n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5a2mq4fc.swift:14:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.count\
    \ == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { $0.count == n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5a2mq4fc.swift:14:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.count\
    \ == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpld5mn7ea.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { $0.filter { !$0.isVowel }.count == n }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfva8j0vy.swift:14:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.filter\
    \ { !$0.isVowel }.count == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\", \"y\"]\n    let words = s.components(separatedBy: \" \"\
    )\n    var result: [String] = []\n    for word in words {\n        var count =\
    \ 0\n        for letter in word {\n            if !vowels.contains(String(letter).lowercased())\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpj1f0zv7f.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { $0.countOfConsonants() == n }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"\
    ])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\", \"\
    lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmph9p85ewi.swift:14:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.countOfConsonants()\
    \ == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    return words.filter {\n\
    \        $0.filter { !vowels.contains($0) }.count == n\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpai3jskxo.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { $0.countOfConsonants() == n }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"\
    ])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\", \"\
    lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmph9p85ewi.swift:14:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.countOfConsonants()\
    \ == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpld5mn7ea.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\", \"y\"]\n    let words = s.components(separatedBy: \" \"\
    )\n    var result = [String]()\n    for word in words {\n        var count = 0\n\
    \        for letter in word {\n            if !vowels.contains(String(letter).lowercased())\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpoj8mln4w.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { $0.count == n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5a2mq4fc.swift:14:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.count\
    \ == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpld5mn7ea.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.lowercased().split(separator: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpryxcdhoj/tmpryxcdhoj.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0bb5dd1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0bb5ac8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0bb5ac8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0bb5ac77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpryxcdhoj                        0x000055b4913d6ba9 <unavailable> + 7081

    5    libc.so.6                          0x00002b0bb5fbd460 __libc_start_main +
    245

    6    tmpryxcdhoj                        0x000055b4913d6659 <unavailable> + 5721

    '
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpld5mn7ea.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    return words.filter { $0.filter\
    \ { !vowels.contains($0) }.count == n }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvdiaof_e.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    var words = [String]()\n\
    \    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n\
    \    let s = s.lowercased()\n    for word in s.components(separatedBy: \" \")\
    \ {\n        var count = 0\n        for char in word {\n            if !vowels.contains(char)\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            words.append(word)\n        }\n    }\n    return words\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpljd62a7h.swift:18:19: error: value of type 'String' has no member\
    \ 'components'\n    for word in s.components(separatedBy: \" \") {\n         \
    \       ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { $0.count == n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5a2mq4fc.swift:14:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.count\
    \ == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    var words = [String]()\n\
    \    var consonants = 0\n    var word = \"\"\n    for c in s {\n        if c ==\
    \ \" \" {\n            if consonants == n {\n                words.append(word)\n\
    \            }\n            consonants = 0\n            word = \"\"\n        }\
    \ else {\n            if !isVowel(c) {\n                consonants += 1\n    \
    \        }\n            word += String(c)\n        }\n    }\n    if consonants\
    \ == n {\n        words.append(word)\n    }\n    return words\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp23nw5qgq.swift:25:17: error: cannot find 'isVowel' in scope\n \
    \           if !isVowel(c) {\n                ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpld5mn7ea.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { $0.consonants() == n }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp196u85sy.swift:14:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.consonants()\
    \ == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { $0.count == n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5a2mq4fc.swift:14:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.count\
    \ == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    var result = [String]()\n\
    \    let vowels = \"aeiou\"\n    let words = s.components(separatedBy: \" \")\n\
    \    for word in words {\n        var consonants = 0\n        for char in word\
    \ {\n            if !vowels.contains(char) {\n                consonants += 1\n\
    \            }\n        }\n        if consonants == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvqrp6fg0.swift:16:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.split(separator: \" \")\n    var result = [String]()\n    for\
    \ word in words {\n        var count = 0\n        for c in word {\n          \
    \  if !vowels.contains(c) {\n                count += 1\n            }\n     \
    \   }\n        if count == n {\n            result.append(String(word))\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpg86fqj1r/tmpg86fqj1r.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af95928cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af958f83b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af958f83988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af958f827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg86fqj1r                        0x000055b899854f1b <unavailable> + 7963

    5    libc.so.6                          0x00002af959478460 __libc_start_main +
    245

    6    tmpg86fqj1r                        0x000055b899854609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014152
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\", \"y\"]\n    let words = s.components(separatedBy: \" \"\
    )\n    var result = [String]()\n    for word in words {\n        var count = 0\n\
    \        for letter in word {\n            if !vowels.contains(String(letter).lowercased())\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpoj8mln4w.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.split(separator: \" \")\n    var result = [String]()\n    for\
    \ word in words {\n        var count = 0\n        for char in word {\n       \
    \     if !vowels.contains(char) {\n                count += 1\n            }\n\
    \        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpu84pm4ri/tmpu84pm4ri.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e9730bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e97002b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e97002988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e970017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu84pm4ri                        0x000056119d863f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b5e974f7460 __libc_start_main +
    245

    6    tmpu84pm4ri                        0x000056119d863609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014152
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiouAEIOU\"\
    \n    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1hq9pcey.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { $0.count == n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5a2mq4fc.swift:14:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.count\
    \ == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for letter in word {\n\
    \            if !vowels.contains(letter) {\n                count += 1\n     \
    \       }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwdk2tpgo.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    return words.filter { word\
    \ in\n        word.filter { !vowels.contains($0) }.count == n\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvig3vw3g.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014152
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.split(separator: \" \")\n    var result = [String]()\n    for\
    \ word in words {\n        var count = 0\n        for char in word {\n       \
    \     if !vowels.contains(char) {\n                count += 1\n            }\n\
    \        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpu84pm4ri/tmpu84pm4ri.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e9730bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e97002b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e97002988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e970017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu84pm4ri                        0x000056119d863f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b5e974f7460 __libc_start_main +
    245

    6    tmpu84pm4ri                        0x000056119d863609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014152
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    return words.filter { $0.filter\
    \ { !vowels.contains($0) }.count == n }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvdiaof_e.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    return s.split(separator: \" \").filter {\n        $0.filter { !vowels.contains($0)\
    \ }.count == n\n    }.map { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp2t_ch2ut/tmp2t_ch2ut.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae68f887c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae68f57eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae68f57e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae68f57d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2t_ch2ut                        0x000055c6c28fbeab <unavailable> + 7851

    5    libc.so.6                          0x00002ae68fa73460 __libc_start_main +
    245

    6    tmp2t_ch2ut                        0x000055c6c28fb599 <unavailable> + 5529

    '
  stdout: ''
  timestamp: 1660014152
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for letter in word {\n\
    \            if !vowels.contains(letter) {\n                count += 1\n     \
    \       }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwdk2tpgo.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    var result = [String]()\n\
    \    let vowels = \"aeiou\"\n    let words = s.components(separatedBy: \" \")\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmphv_l4fqh.swift:16:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.split(separator: \" \")\n    var result = [String]()\n    for\
    \ word in words {\n        var count = 0\n        for char in word {\n       \
    \     if !vowels.contains(char) {\n                count += 1\n            }\n\
    \        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpu84pm4ri/tmpu84pm4ri.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e9730bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e97002b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e97002988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e970017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu84pm4ri                        0x000056119d863f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b5e974f7460 __libc_start_main +
    245

    6    tmpu84pm4ri                        0x000056119d863609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014152
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiouAEIOU\"\
    \n    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1hq9pcey.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    return words.filter {\n\
    \        $0.filter { !vowels.contains($0) }.count == n\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpai3jskxo.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpld5mn7ea.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { $0.consonants() == n }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp196u85sy.swift:14:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.consonants()\
    \ == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { $0.consonants() == n }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp196u85sy.swift:14:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.consonants()\
    \ == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    var result = [String]()\n\
    \    let words = s.split(separator: \" \")\n    for word in words {\n        var\
    \ count = 0\n        for letter in word {\n            if !isVowel(letter: letter)\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpjh6ukh3a.swift:19:17: error: cannot find 'isVowel' in scope\n \
    \           if !isVowel(letter: letter) {\n                ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiouAEIOU\"\
    \n    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1hq9pcey.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { $0.consonants() == n }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp196u85sy.swift:14:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.consonants()\
    \ == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpld5mn7ea.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpld5mn7ea.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpld5mn7ea.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    return s.split(separator:\
    \ \" \").filter { $0.filter { !$0.isVowel }.count == n }.map { String($0) }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzwdi38wm.swift:14:61: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isVowel'\n    return s.split(separator: \" \").filter\
    \ { $0.filter { !$0.isVowel }.count == n }.map { String($0) }\n              \
    \                                           ~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014152
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = Set(\"aeiou\"\
    )\n    return s.split(separator: \" \").filter {\n        $0.filter { !vowels.contains($0)\
    \ }.count == n\n    }.map { String($0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpy76qay7x/tmpy76qay7x.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c7c165c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c7be5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c7be5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c7be5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy76qay7x                        0x000055f076bf5f7b <unavailable> + 8059

    5    libc.so.6                          0x00002b4c7c351460 __libc_start_main +
    245

    6    tmpy76qay7x                        0x000055f076bf5669 <unavailable> + 5737

    '
  stdout: ''
  timestamp: 1660014152
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpld5mn7ea.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = Set(\"aeiouAEIOU\"\
    )\n    return s.components(separatedBy: \" \").filter { $0.filter { !vowels.contains($0)\
    \ }.count == n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp91ltb2x8.swift:15:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.filter\
    \ { !vowels.contains($0) }.count == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014152
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.split(separator: \" \")\n    var result = [String]()\n    for\
    \ word in words {\n        var count = 0\n        for letter in word {\n     \
    \       if !vowels.contains(letter) {\n                count += 1\n          \
    \  }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpi85f40oi/tmpi85f40oi.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a66d70c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a66a67b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a66a67988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a66a667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi85f40oi                        0x000056257e848f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b6a66f5c460 __libc_start_main +
    245

    6    tmpi85f40oi                        0x000056257e848609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014152
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpld5mn7ea.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    var result = [String]()\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let words = s.components(separatedBy:\
    \ \" \")\n    for word in words {\n        var count = 0\n        for char in\
    \ word {\n            if !vowels.contains(String(char).lowercased()) {\n     \
    \           count += 1\n            }\n        }\n        if count == n {\n  \
    \          result.append(word)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8zhg2h4d.swift:16:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    return words.filter { word\
    \ in\n        word.filter { !vowels.contains($0) }.count == n\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvig3vw3g.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014152
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\", \"y\"]\n    let words = s.components(separatedBy: \" \"\
    )\n    var result: [String] = []\n    for word in words {\n        var count =\
    \ 0\n        for letter in word {\n            if !vowels.contains(String(letter).lowercased())\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpj1f0zv7f.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    var result = [String]()\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let words = s.split(separator:\
    \ \" \")\n    for word in words {\n        var consonants = 0\n        for char\
    \ in word {\n            if !vowels.contains(String(char)) {\n               \
    \ consonants += 1\n            }\n        }\n        if consonants == n {\n  \
    \          result.append(String(word))\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpmhiuom7e/tmpmhiuom7e.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9aaf176c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9aaee6db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9aaee6d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9aaee6c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmhiuom7e                        0x000056042cee2f2b <unavailable> + 7979

    5    libc.so.6                          0x00002b9aaf362460 __libc_start_main +
    245

    6    tmpmhiuom7e                        0x000056042cee2619 <unavailable> + 5657

    '
  stdout: ''
  timestamp: 1660014152
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.split(separator: \" \")\n    var result = [String]()\n    for\
    \ word in words {\n        var count = 0\n        for char in word {\n       \
    \     if !vowels.contains(char) {\n                count += 1\n            }\n\
    \        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpu84pm4ri/tmpu84pm4ri.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e9730bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e97002b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e97002988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e970017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu84pm4ri                        0x000056119d863f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b5e974f7460 __libc_start_main +
    245

    6    tmpu84pm4ri                        0x000056119d863609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014152
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { $0.filter { !$0.isVowel }.count == n }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfva8j0vy.swift:14:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.filter\
    \ { !$0.isVowel }.count == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    return s.split(separator:\
    \ \" \").filter { $0.count == n }.map { String($0) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpqg35qqb9/tmpqg35qqb9.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf711a7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf70e9eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf70e9e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf70e9d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqg35qqb9                        0x000055cfdd1d0904 <unavailable> + 6404

    5    libc.so.6                          0x00002acf71393460 __libc_start_main +
    245

    6    tmpqg35qqb9                        0x000055cfdd1d0509 <unavailable> + 5385

    '
  stdout: ''
  timestamp: 1660014152
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    var result = [String]()\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let words = s.components(separatedBy:\
    \ \" \")\n    for word in words {\n        var count = 0\n        for letter in\
    \ word {\n            if !vowels.contains(String(letter).lowercased()) {\n   \
    \             count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpk3ky0fla.swift:16:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"]\n    let words = s.components(separatedBy: \" \")\n   \
    \ var result = [String]()\n    for word in words {\n        var count = 0\n  \
    \      for letter in word {\n            if !vowels.contains(String(letter).lowercased())\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgcc6glpn.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014152
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpld5mn7ea.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { $0.count == n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5a2mq4fc.swift:14:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.count\
    \ == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { $0.countOf(consonants:) == n }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp45tvkap9.swift:14:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.countOf(consonants:)\
    \ == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014152
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpld5mn7ea.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\", \"y\"]\n    let words = s.components(separatedBy: \" \"\
    )\n    var result: [String] = []\n    for word in words {\n        var count =\
    \ 0\n        for char in word {\n            if !vowels.contains(String(char).lowercased())\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp73lduaw4.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014152
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.split(separator: \" \")\n    var result = [String]()\n    for\
    \ word in words {\n        var count = 0\n        for char in word {\n       \
    \     if !vowels.contains(char) {\n                count += 1\n            }\n\
    \        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpu84pm4ri/tmpu84pm4ri.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e9730bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e97002b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e97002988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e970017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu84pm4ri                        0x000056119d863f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b5e974f7460 __libc_start_main +
    245

    6    tmpu84pm4ri                        0x000056119d863609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014152
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { $0.count == n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5a2mq4fc.swift:14:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.count\
    \ == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiouAEIOU\"\
    \n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    var\
    \ words = [String]()\n    for word in s.components(separatedBy: \" \") {\n   \
    \     var count = 0\n        for char in word {\n            if consonants.contains(char)\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            words.append(word)\n        }\n    }\n    return words\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpoujlg7t_.swift:17:19: error: value of type 'String' has no member\
    \ 'components'\n    for word in s.components(separatedBy: \" \") {\n         \
    \       ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014152
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    var result = [String]()\n\
    \    let words = s.components(separatedBy: \" \")\n    for word in words {\n \
    \       if word.count == n {\n            result.append(word)\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp71cc0jth.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { $0.countOfConsonants() == n }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"\
    ])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\", \"\
    lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmph9p85ewi.swift:14:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.countOfConsonants()\
    \ == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var consonants = 0\n        for char in word\
    \ {\n            if !vowels.contains(char) {\n                consonants += 1\n\
    \            }\n        }\n        if consonants == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6dz2g088.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014152
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.split(separator: \" \")\n    var result = [String]()\n    for\
    \ word in words {\n        var count = 0\n        for char in word {\n       \
    \     if !vowels.contains(char) {\n                count += 1\n            }\n\
    \        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpu84pm4ri/tmpu84pm4ri.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e9730bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e97002b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e97002988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e970017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu84pm4ri                        0x000056119d863f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b5e974f7460 __libc_start_main +
    245

    6    tmpu84pm4ri                        0x000056119d863609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014152
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { $0.countOfConsonants() == n }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"\
    ])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\", \"\
    lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmph9p85ewi.swift:14:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.countOfConsonants()\
    \ == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpld5mn7ea.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for letter in word {\n\
    \            if !vowels.contains(letter) {\n                count += 1\n     \
    \       }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwdk2tpgo.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    return words.filter { $0.filter\
    \ { !vowels.contains($0) }.count == n }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvdiaof_e.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpld5mn7ea.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpld5mn7ea.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpld5mn7ea.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { $0.count == n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5a2mq4fc.swift:14:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.count\
    \ == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpld5mn7ea.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    return words.filter { $0.lowercased().filter\
    \ { !vowels.contains($0) }.count == n }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpm6_z9ylz.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014152
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    var result: [String] = []\n\
    \    let vowels = \"aeiou\"\n    let words = s.components(separatedBy: \" \")\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1tta0pqu.swift:16:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014152
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpld5mn7ea.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpld5mn7ea.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result: [String] =\
    \ []\n    for word in words {\n        var count = 0\n        for char in word\
    \ {\n            if !vowels.contains(char) {\n                count += 1\n   \
    \         }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpw51eh_rd.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014152
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    var result = [String]()\n\
    \    let vowels = \"aeiou\"\n    for word in s.components(separatedBy: \" \")\
    \ {\n        var count = 0\n        for char in word {\n            if !vowels.contains(char)\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp99n44rl_.swift:16:19: error: value of type 'String' has no member\
    \ 'components'\n    for word in s.components(separatedBy: \" \") {\n         \
    \       ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    return words.filter { $0.filter\
    \ { !vowels.contains($0) }.count == n }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvdiaof_e.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for letter in word {\n\
    \            if !vowels.contains(letter) {\n                count += 1\n     \
    \       }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwdk2tpgo.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    var result = [String]()\n\
    \    let vowels = \"aeiou\"\n    let words = s.components(separatedBy: \" \")\n\
    \    for word in words {\n        var count = 0\n        for letter in word {\n\
    \            if !vowels.contains(letter) {\n                count += 1\n     \
    \       }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmptfgah2gy.swift:16:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpld5mn7ea.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\", \"y\"]\n    let words = s.components(separatedBy: \" \"\
    )\n    var result = [String]()\n    for word in words {\n        var count = 0\n\
    \        for char in word {\n            if !vowels.contains(String(char).lowercased())\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnqex_bcg.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.split(separator: \" \")\n    var result = [String]()\n    for\
    \ word in words {\n        var count = 0\n        for char in word {\n       \
    \     if !vowels.contains(char) {\n                count += 1\n            }\n\
    \        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpu84pm4ri/tmpu84pm4ri.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e9730bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e97002b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e97002988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e970017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu84pm4ri                        0x000056119d863f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b5e974f7460 __libc_start_main +
    245

    6    tmpu84pm4ri                        0x000056119d863609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014152
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { $0.filter { !$0.isVowel }.count == n }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfva8j0vy.swift:14:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.filter\
    \ { !$0.isVowel }.count == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var consonants = 0\n        for char in word\
    \ {\n            if !vowels.contains(char) {\n                consonants += 1\n\
    \            }\n        }\n        if consonants == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6dz2g088.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014152
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let arr = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in arr {\n        var count = 0\n        for char in word {\n  \
    \          if !vowels.contains(char) {\n                count += 1\n         \
    \   }\n        }\n        if count == n {\n            result.append(word)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3a54giyj.swift:15:17: error: value of type 'String' has no member\
    \ 'components'\n    let arr = s.components(separatedBy: \" \")\n             \
    \ ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014152
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.split(separator: \" \")\n    var result: [String] = []\n  \
    \  for word in words {\n        var count = 0\n        for char in word {\n  \
    \          if !vowels.contains(char) {\n                count += 1\n         \
    \   }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp61nitbjy/tmp61nitbjy.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ca76a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ca7397b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ca7397988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ca73967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp61nitbjy                        0x000056140605debb <unavailable> + 7867

    5    libc.so.6                          0x00002b8ca788c460 __libc_start_main +
    245

    6    tmp61nitbjy                        0x000056140605d5a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014152
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpld5mn7ea.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpld5mn7ea.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    var result: [String] = []\n\
    \    let vowels = \"aeiou\"\n    let words = s.components(separatedBy: \" \")\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1tta0pqu.swift:16:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014152
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiouAEIOU\"\
    \n    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for letter in word {\n\
    \            if !vowels.contains(letter) {\n                count += 1\n     \
    \       }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxbu6spb6.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014152
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.split(separator: \" \")\n    var result: [String] = []\n  \
    \  for word in words {\n        var count = 0\n        for char in word {\n  \
    \          if !vowels.contains(char) {\n                count += 1\n         \
    \   }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmp61nitbjy/tmp61nitbjy.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ca76a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ca7397b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ca7397988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ca73967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp61nitbjy                        0x000056140605debb <unavailable> + 7867

    5    libc.so.6                          0x00002b8ca788c460 __libc_start_main +
    245

    6    tmp61nitbjy                        0x000056140605d5a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014152
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for letter in word {\n\
    \            if !vowels.contains(letter) {\n                count += 1\n     \
    \       }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwdk2tpgo.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    let words = s.components(separatedBy:\
    \ \" \")\n    var result = [String]()\n    for word in words {\n        var count\
    \ = 0\n        for char in word.lowercased() {\n            if consonants.contains(char)\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpntg5c4dq.swift:16:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014152
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    var result = [String]()\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let words = s.components(separatedBy:\
    \ \" \")\n    for word in words {\n        var count = 0\n        for char in\
    \ word {\n            if !vowels.contains(String(char).lowercased()) {\n     \
    \           count += 1\n            }\n        }\n        if count == n {\n  \
    \          result.append(word)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8zhg2h4d.swift:16:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpld5mn7ea.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result: [String] =\
    \ []\n    for word in words {\n        var count = 0\n        for char in word\
    \ {\n            if !vowels.contains(char) {\n                count += 1\n   \
    \         }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpw51eh_rd.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014152
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { $0.consonants() == n }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp196u85sy.swift:14:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.consonants()\
    \ == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { $0.countOfConsonants() == n }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"\
    ])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\", \"\
    lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmph9p85ewi.swift:14:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.countOfConsonants()\
    \ == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { $0.countOfConsonants() == n }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"\
    ])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\", \"\
    lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmph9p85ewi.swift:14:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.countOfConsonants()\
    \ == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    return s.split(separator:\
    \ \" \").filter { $0.count == n }.map { String($0) }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpqg35qqb9/tmpqg35qqb9.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf711a7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf70e9eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf70e9e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf70e9d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqg35qqb9                        0x000055cfdd1d0904 <unavailable> + 6404

    5    libc.so.6                          0x00002acf71393460 __libc_start_main +
    245

    6    tmpqg35qqb9                        0x000055cfdd1d0509 <unavailable> + 5385

    '
  stdout: ''
  timestamp: 1660014152
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    var words = [String]()\n\
    \    var word = \"\"\n    for c in s {\n        if c == \" \" {\n            if\
    \ word.count == n {\n                words.append(word)\n            }\n     \
    \       word = \"\"\n        } else {\n            word += String(c)\n       \
    \ }\n    }\n    if word.count == n {\n        words.append(word)\n    }\n    return\
    \ words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary had\
    \ a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple\
    \ white space\", n: 2) == [] as [String])\nassert(select_words(s: \"Hello world\"\
    , n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"\
    ])\nassert(select_words(s: \"\", n: 4) == [] as [String])\nassert(select_words(s:\
    \ \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpjwu9bmuu/tmpjwu9bmuu.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b08778ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b08775d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b08775d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b08775d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjwu9bmuu                        0x00005635f36cc814 <unavailable> + 6164

    5    libc.so.6                          0x00002b0877ac9460 __libc_start_main +
    245

    6    tmpjwu9bmuu                        0x00005635f36cc419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660014152
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    return s.split(separator:\
    \ \" \").filter { $0.filter { !isVowel($0) }.count == n }.map { String($0) }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpt6ewrc4k.swift:14:58: error: cannot find 'isVowel' in scope\n \
    \   return s.split(separator: \" \").filter { $0.filter { !isVowel($0) }.count\
    \ == n }.map { String($0) }\n                                                \
    \         ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014152
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\", \"y\"]\n    let words = s.components(separatedBy: \" \"\
    )\n    var result = [String]()\n    for word in words {\n        var count = 0\n\
    \        for letter in word {\n            if !vowels.contains(String(letter).lowercased())\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpoj8mln4w.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { $0.consonants == n }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpad1lycld.swift:14:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.consonants\
    \ == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014152
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for letter in word {\n\
    \            if !vowels.contains(letter) {\n                count += 1\n     \
    \       }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwdk2tpgo.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { $0.countOfConsonants() == n }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"\
    ])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\", \"\
    lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmph9p85ewi.swift:14:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.countOfConsonants()\
    \ == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpld5mn7ea.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { $0.count == n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5a2mq4fc.swift:14:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.count\
    \ == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\", \"y\"]\n    let words = s.components(separatedBy: \" \"\
    )\n    var result = [String]()\n    for word in words {\n        var count = 0\n\
    \        for char in word {\n            if !vowels.contains(String(char).lowercased())\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnqex_bcg.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { $0.count == n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5a2mq4fc.swift:14:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.count\
    \ == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    return words.filter { $0.filter\
    \ { !vowels.contains($0) }.count == n }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvdiaof_e.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpld5mn7ea.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    var result = [String]()\n\
    \    let vowels = \"aeiou\"\n    let words = s.split(separator: \" \")\n    for\
    \ word in words {\n        var count = 0\n        for char in word {\n       \
    \     if !vowels.contains(char) {\n                count += 1\n            }\n\
    \        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpsrye1v56/tmpsrye1v56.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b79a9193c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b79a8e8ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b79a8e8a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79a8e897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsrye1v56                        0x0000562b618a4f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b79a937f460 __libc_start_main +
    245

    6    tmpsrye1v56                        0x0000562b618a4609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014152
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    var result = [String]()\n\
    \    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let words = s.components(separatedBy:\
    \ \" \")\n    for word in words {\n        var count = 0\n        for letter in\
    \ word {\n            if !vowels.contains(String(letter).lowercased()) {\n   \
    \             count += 1\n            }\n        }\n        if count == n {\n\
    \            result.append(word)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpk3ky0fla.swift:16:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for letter in word {\n\
    \            if !vowels.contains(letter) {\n                count += 1\n     \
    \       }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwdk2tpgo.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    return s.split(separator:\
    \ \" \").filter { $0.filter { !isVowel($0) }.count == n }.map { String($0) }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpt6ewrc4k.swift:14:58: error: cannot find 'isVowel' in scope\n \
    \   return s.split(separator: \" \").filter { $0.filter { !isVowel($0) }.count\
    \ == n }.map { String($0) }\n                                                \
    \         ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014152
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.split(separator: \" \")\n    var result = [String]()\n    for\
    \ word in words {\n        var count = 0\n        for char in word {\n       \
    \     if !vowels.contains(char) {\n                count += 1\n            }\n\
    \        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpu84pm4ri/tmpu84pm4ri.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e9730bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e97002b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e97002988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e970017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu84pm4ri                        0x000056119d863f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b5e974f7460 __libc_start_main +
    245

    6    tmpu84pm4ri                        0x000056119d863609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014152
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpld5mn7ea.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for letter in word {\n\
    \            if !vowels.contains(letter) {\n                count += 1\n     \
    \       }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwdk2tpgo.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter {\n        $0.filter {\n            !\"aeiou\".contains($0)\n\
    \        }.count == n\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpc___347e.swift:14:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter {\n       \
    \    ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014152
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    return s.split(separator:\
    \ \" \").filter { $0.filter { !isVowel($0) }.count == n }.map { String($0) }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpt6ewrc4k.swift:14:58: error: cannot find 'isVowel' in scope\n \
    \   return s.split(separator: \" \").filter { $0.filter { !isVowel($0) }.count\
    \ == n }.map { String($0) }\n                                                \
    \         ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014152
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    return s.components(separatedBy: \" \").filter {\n        $0.lowercased().filter\
    \ { !vowels.contains($0) }.count == n\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"\
    ])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\", \"\
    lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3lja5_br.swift:15:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter {\n       \
    \    ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014152
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    var result = [String]()\n\
    \    let vowels = \"aeiou\"\n    let words = s.components(separatedBy: \" \")\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmphv_l4fqh.swift:16:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { $0.consonants() == n }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp196u85sy.swift:14:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.consonants()\
    \ == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    var result = [String]()\n\
    \    let words = s.components(separatedBy: \" \")\n    for word in words {\n \
    \       if word.count >= n {\n            var consonants = 0\n            for\
    \ char in word {\n                if !isVowel(char: char) {\n                \
    \    consonants += 1\n                }\n            }\n            if consonants\
    \ == n {\n                result.append(word)\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(select_words(s: \"\
    Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"Mary\
    \ had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpmtogfcqg.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014152
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpld5mn7ea.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for letter in word {\n\
    \            if !vowels.contains(letter) {\n                count += 1\n     \
    \       }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwdk2tpgo.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpld5mn7ea.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for letter in word {\n\
    \            if !vowels.contains(letter) {\n                count += 1\n     \
    \       }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwdk2tpgo.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpld5mn7ea.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    return words.filter {\n\
    \        $0.filter { !vowels.contains($0) }.count == n\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"\
    little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\"\
    , \"lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpai3jskxo.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpld5mn7ea.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.split(separator: \" \")\n    var result = [String]()\n    for\
    \ word in words {\n        var count = 0\n        for char in word {\n       \
    \     if !vowels.contains(char) {\n                count += 1\n            }\n\
    \        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpu84pm4ri/tmpu84pm4ri.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e9730bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e97002b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e97002988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e970017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu84pm4ri                        0x000056119d863f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b5e974f7460 __libc_start_main +
    245

    6    tmpu84pm4ri                        0x000056119d863609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014152
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpld5mn7ea.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpld5mn7ea.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpld5mn7ea.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    return words.filter { word\
    \ in\n        word.filter { !vowels.contains($0) }.count == n\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvig3vw3g.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014152
- exit_code: -4
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.split(separator: \" \")\n    var result = [String]()\n    for\
    \ word in words {\n        var count = 0\n        for letter in word {\n     \
    \       if !vowels.contains(letter) {\n                count += 1\n          \
    \  }\n        }\n        if count == n {\n            result.append(String(word))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: Exception
  stderr: 'tmpi85f40oi/tmpi85f40oi.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a66d70c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a66a67b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a66a67988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a66a667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi85f40oi                        0x000056257e848f1b <unavailable> + 7963

    5    libc.so.6                          0x00002b6a66f5c460 __libc_start_main +
    245

    6    tmpi85f40oi                        0x000056257e848609 <unavailable> + 5641

    '
  stdout: ''
  timestamp: 1660014152
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { $0.consonants() == n }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp196u85sy.swift:14:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.consonants()\
    \ == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { $0.count == n }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5a2mq4fc.swift:14:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.count\
    \ == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for letter in word {\n\
    \            if !vowels.contains(letter) {\n                count += 1\n     \
    \       }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwdk2tpgo.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\", \"y\"]\n    let words = s.components(separatedBy: \" \"\
    )\n    var result = [String]()\n    for word in words {\n        var count = 0\n\
    \        for letter in word {\n            if !vowels.contains(String(letter).lowercased())\
    \ {\n                count += 1\n            }\n        }\n        if count ==\
    \ n {\n            result.append(word)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpoj8mln4w.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for letter in word {\n\
    \            if !vowels.contains(letter) {\n                count += 1\n     \
    \       }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwdk2tpgo.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    var result = [String]()\n\
    \    let vowels = \"aeiou\"\n    let words = s.components(separatedBy: \" \")\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmphv_l4fqh.swift:16:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for letter in word {\n\
    \            if !vowels.contains(letter) {\n                count += 1\n     \
    \       }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwdk2tpgo.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter {\n        $0.filter {\n            ![\"a\", \"e\", \"i\", \"\
    o\", \"u\"].contains($0.lowercased())\n        }.count == n\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(select_words(s: \"Mary had a little lamb\", n:\
    \ 4) == [\"little\"])\nassert(select_words(s: \"Mary had a little lamb\", n: 3)\
    \ == [\"Mary\", \"lamb\"])\nassert(select_words(s: \"simple white space\", n:\
    \ 2) == [] as [String])\nassert(select_words(s: \"Hello world\", n: 4) == [\"\
    world\"])\nassert(select_words(s: \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s:\
    \ \"\", n: 4) == [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1)\
    \ == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp19h5k4sz.swift:14:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter {\n       \
    \    ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014152
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    var words = [String]()\n\
    \    var word = \"\"\n    for c in s {\n        if c == \" \" {\n            if\
    \ count_consonants(word) == n {\n                words.append(word)\n        \
    \    }\n            word = \"\"\n        } else {\n            word += String(c)\n\
    \        }\n    }\n    if count_consonants(word) == n {\n        words.append(word)\n\
    \    }\n    return words\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpucxy59ao.swift:18:16: error: cannot find 'count_consonants' in\
    \ scope\n            if count_consonants(word) == n {\n               ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpucxy59ao.swift:26:8: error: cannot find 'count_consonants' in scope\n\
    \    if count_consonants(word) == n {\n       ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014152
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiouAEIOU\"\
    \n    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1hq9pcey.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpld5mn7ea.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    return s.components(separatedBy:\
    \ \" \").filter { $0.countOfConsonants() == n }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"\
    ])\nassert(select_words(s: \"Mary had a little lamb\", n: 3) == [\"Mary\", \"\
    lamb\"])\nassert(select_words(s: \"simple white space\", n: 2) == [] as [String])\n\
    assert(select_words(s: \"Hello world\", n: 4) == [\"world\"])\nassert(select_words(s:\
    \ \"Uncle sam\", n: 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) ==\
    \ [] as [String])\nassert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"\
    c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmph9p85ewi.swift:14:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").filter { $0.countOfConsonants()\
    \ == n }\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for c in word {\n   \
    \         if !vowels.contains(c) {\n                count += 1\n            }\n\
    \        }\n        if count == n {\n            result.append(word)\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s: \"\
    Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvzl0a2i3.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014152
- exit_code: 1
  program: "\n/// Given a string s and a natural number n, you have been tasked to\
    \ implement \n/// a function that returns a list of all words from string s that\
    \ contain exactly \n/// n consonants, in order these words appear in the string\
    \ s.\n/// If the string s is empty then the function should return an empty list.\n\
    /// Note: you may assume the input string contains only letters and spaces.\n\
    /// Examples:\n/// select_words(\"Mary had a little lamb\", 4) ==> [\"little\"\
    ]\n/// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n\
    /// select_words(\"simple white space\", 2) ==> []\n/// select_words(\"Hello world\"\
    , 4) ==> [\"world\"]\n/// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nfunc\
    \ select_words(s: String, n: Int) -> [String] {\n    let vowels = \"aeiou\"\n\
    \    let words = s.components(separatedBy: \" \")\n    var result = [String]()\n\
    \    for word in words {\n        var count = 0\n        for char in word {\n\
    \            if !vowels.contains(char) {\n                count += 1\n       \
    \     }\n        }\n        if count == n {\n            result.append(word)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(select_words(s: \"Mary had a little lamb\", n: 4) == [\"little\"])\nassert(select_words(s:\
    \ \"Mary had a little lamb\", n: 3) == [\"Mary\", \"lamb\"])\nassert(select_words(s:\
    \ \"simple white space\", n: 2) == [] as [String])\nassert(select_words(s: \"\
    Hello world\", n: 4) == [\"world\"])\nassert(select_words(s: \"Uncle sam\", n:\
    \ 3) == [\"Uncle\"])\nassert(select_words(s: \"\", n: 4) == [] as [String])\n\
    assert(select_words(s: \"a b c d e f\", n: 1) == [\"b\", \"c\", \"d\", \"f\"])"
  status: SyntaxError
  stderr: "/tmp/tmpld5mn7ea.swift:15:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014151
