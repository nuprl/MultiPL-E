language: swift
name: HumanEval_126_is_sorted
results:
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    for i in 0..<lst.count {\n      \
    \  if lst[i] != sorted[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1l9fc83t/tmp1l9fc83t.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93f3cfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93f39f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93f39f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93f39f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1l9fc83t                        0x000055a630f0fd9b <unavailable> + 7579

    5    libc.so.6                          0x00002b93f3ee8460 __libc_start_main +
    245

    6    tmp1l9fc83t                        0x000055a630f0f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = true\n    for i in 0..<lst.count - 1 {\n        if\
    \ lst[i] >= lst[i + 1] {\n            sorted = false\n        }\n    }\n    return\
    \ sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a06348c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a0603f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a0603f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a0603f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a0603ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpvxlnq84e                        0x00005617d02e40ee <unavailable> + 8430

    6    tmpvxlnq84e                        0x00005617d02e39d4 <unavailable> + 6612

    7    libc.so.6                          0x00002b7a06534460 __libc_start_main +
    245

    8    tmpvxlnq84e                        0x00005617d02e31a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    for i in 0..<lst.count {\n      \
    \  if lst[i] != sorted[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1l9fc83t/tmp1l9fc83t.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93f3cfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93f39f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93f39f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93f39f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1l9fc83t                        0x000055a630f0fd9b <unavailable> + 7579

    5    libc.so.6                          0x00002b93f3ee8460 __libc_start_main +
    245

    6    tmp1l9fc83t                        0x000055a630f0f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    for i in 0..<lst.count {\n      \
    \  if lst[i] != sorted[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1l9fc83t/tmp1l9fc83t.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93f3cfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93f39f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93f39f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93f39f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1l9fc83t                        0x000055a630f0fd9b <unavailable> + 7579

    5    libc.so.6                          0x00002b93f3ee8460 __libc_start_main +
    245

    6    tmp1l9fc83t                        0x000055a630f0f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    return lst.sorted() == lst\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpvalzsgks/tmpvalzsgks.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab892d8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab892a81b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab892a81988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab892a807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvalzsgks                        0x000055bdf8c1dbcb <unavailable> + 7115

    5    libc.so.6                          0x00002ab892f76460 __libc_start_main +
    245

    6    tmpvalzsgks                        0x000055bdf8c1d079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    for i in 0..<lst.count {\n      \
    \  if lst[i] != sorted[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1l9fc83t/tmp1l9fc83t.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93f3cfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93f39f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93f39f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93f39f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1l9fc83t                        0x000055a630f0fd9b <unavailable> + 7579

    5    libc.so.6                          0x00002b93f3ee8460 __libc_start_main +
    245

    6    tmp1l9fc83t                        0x000055a630f0f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return lst == sorted\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpvz06zsu4/tmpvz06zsu4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8b038ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8b0081b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8b0081988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8b00807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvz06zsu4                        0x0000561a5b20cbcb <unavailable> + 7115

    5    libc.so.6                          0x00002ac8b0576460 __libc_start_main +
    245

    6    tmpvz06zsu4                        0x0000561a5b20c079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    return lst.sorted() == lst\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpvalzsgks/tmpvalzsgks.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab892d8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab892a81b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab892a81988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab892a807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvalzsgks                        0x000055bdf8c1dbcb <unavailable> + 7115

    5    libc.so.6                          0x00002ab892f76460 __libc_start_main +
    245

    6    tmpvalzsgks                        0x000055bdf8c1d079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    var count = 0\n    for i in 0..<lst.count\
    \ {\n        if lst[i] == sorted[i] {\n            count += 1\n        }\n   \
    \ }\n    return count == lst.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpizlw7mpy/tmpizlw7mpy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d21414c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d2110bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d2110b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d2110a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpizlw7mpy                        0x0000557178c20d9b <unavailable> + 7579

    5    libc.so.6                          0x00002b3d21600460 __libc_start_main +
    245

    6    tmpizlw7mpy                        0x0000557178c20249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    for i in 0..<lst.count {\n      \
    \  if lst[i] != sorted[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1l9fc83t/tmp1l9fc83t.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93f3cfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93f39f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93f39f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93f39f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1l9fc83t                        0x000055a630f0fd9b <unavailable> + 7579

    5    libc.so.6                          0x00002b93f3ee8460 __libc_start_main +
    245

    6    tmp1l9fc83t                        0x000055a630f0f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    for i in 0..<lst.count {\n      \
    \  if lst[i] != sorted[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1l9fc83t/tmp1l9fc83t.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93f3cfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93f39f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93f39f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93f39f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1l9fc83t                        0x000055a630f0fd9b <unavailable> + 7579

    5    libc.so.6                          0x00002b93f3ee8460 __libc_start_main +
    245

    6    tmp1l9fc83t                        0x000055a630f0f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    for i in 0..<lst.count {\n      \
    \  if lst[i] != sorted[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1l9fc83t/tmp1l9fc83t.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93f3cfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93f39f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93f39f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93f39f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1l9fc83t                        0x000055a630f0fd9b <unavailable> + 7579

    5    libc.so.6                          0x00002b93f3ee8460 __libc_start_main +
    245

    6    tmp1l9fc83t                        0x000055a630f0f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    let sorted = lst.sorted()\n    return lst == sorted\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpicp9o7nd/tmpicp9o7nd.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef6459fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef64296b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef64296988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef642957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpicp9o7nd                        0x000055f370610bcb <unavailable> + 7115

    5    libc.so.6                          0x00002aef6478b460 __libc_start_main +
    245

    6    tmpicp9o7nd                        0x000055f370610079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    for i in 0..<lst.count {\n      \
    \  if lst[i] != sorted[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1l9fc83t/tmp1l9fc83t.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93f3cfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93f39f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93f39f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93f39f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1l9fc83t                        0x000055a630f0fd9b <unavailable> + 7579

    5    libc.so.6                          0x00002b93f3ee8460 __libc_start_main +
    245

    6    tmp1l9fc83t                        0x000055a630f0f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = true\n    var prev = lst[0]\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < prev {\n            sorted = false\n            break\n\
    \        }\n        prev = lst[i]\n    }\n    return sorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002af858437c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af85812e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af85812e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af85812e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af85812dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002af857f2de83 <unavailable> + 188035

    6    tmpx5vkdfl7                        0x000055c5687f3056 <unavailable> + 8278

    7    tmpx5vkdfl7                        0x000055c5687f29d4 <unavailable> + 6612

    8    libc.so.6                          0x00002af858623460 __libc_start_main +
    245

    9    tmpx5vkdfl7                        0x000055c5687f21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    var count = 0\n    for i in 0..<lst.count\
    \ {\n        if lst[i] == sorted[i] {\n            count += 1\n        }\n   \
    \ }\n    return count == lst.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpizlw7mpy/tmpizlw7mpy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d21414c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d2110bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d2110b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d2110a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpizlw7mpy                        0x0000557178c20d9b <unavailable> + 7579

    5    libc.so.6                          0x00002b3d21600460 __libc_start_main +
    245

    6    tmpizlw7mpy                        0x0000557178c20249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = true\n    for i in 0..<lst.count-1 {\n        if lst[i]\
    \ > lst[i+1] {\n            sorted = false\n        }\n    }\n    return sorted\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b53d89e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53d86dc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b53d86dc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b53d86dc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b53d86dbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp29a5ka7v                        0x000055fe500190ee <unavailable> + 8430

    6    tmp29a5ka7v                        0x000055fe500189d4 <unavailable> + 6612

    7    libc.so.6                          0x00002b53d8bd1460 __libc_start_main +
    245

    8    tmp29a5ka7v                        0x000055fe500181a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var prev = lst[0]\n    for i in lst {\n        if i < prev {\n \
    \           return false\n        }\n        prev = i\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002afa8ccb5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa8c9ac561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afa8c9ac286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afa8c9ac13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afa8c9abbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002afa8c7abe83 <unavailable> + 188035

    6    tmp8tr42kdm                        0x00005640d8abdfc2 <unavailable> + 8130

    7    tmp8tr42kdm                        0x00005640d8abd954 <unavailable> + 6484

    8    libc.so.6                          0x00002afa8cea1460 __libc_start_main +
    245

    9    tmp8tr42kdm                        0x00005640d8abd129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    if lst == sorted {\n        return\
    \ true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2,\
    \ 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpni9mbmp8/tmpni9mbmp8.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fdd736c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fdd42db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fdd42d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fdd42c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9mbmp8                        0x0000562ee88bdbcb <unavailable> + 7115

    5    libc.so.6                          0x00002b1fdd922460 __libc_start_main +
    245

    6    tmpni9mbmp8                        0x0000562ee88bd079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    for i in 0..<lst.count {\n      \
    \  if lst[i] != sorted[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1l9fc83t/tmp1l9fc83t.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93f3cfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93f39f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93f39f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93f39f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1l9fc83t                        0x000055a630f0fd9b <unavailable> + 7579

    5    libc.so.6                          0x00002b93f3ee8460 __libc_start_main +
    245

    6    tmp1l9fc83t                        0x000055a630f0f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var last = lst[0]\n    for i in lst {\n        if i < last {\n \
    \           return false\n        }\n        last = i\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac40fc60c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac40f957561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac40f957286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac40f95713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac40f956bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac40f756e83 <unavailable> + 188035

    6    tmp0443lpjd                        0x000055bd1bb60fc2 <unavailable> + 8130

    7    tmp0443lpjd                        0x000055bd1bb60954 <unavailable> + 6484

    8    libc.so.6                          0x00002ac40fe4c460 __libc_start_main +
    245

    9    tmp0443lpjd                        0x000055bd1bb60129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    for i in 0..<lst.count {\n      \
    \  if lst[i] != sorted[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1l9fc83t/tmp1l9fc83t.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93f3cfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93f39f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93f39f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93f39f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1l9fc83t                        0x000055a630f0fd9b <unavailable> + 7579

    5    libc.so.6                          0x00002b93f3ee8460 __libc_start_main +
    245

    6    tmp1l9fc83t                        0x000055a630f0f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = true\n    var last = 0\n    for i in lst {\n      \
    \  if i < last {\n            sorted = false\n        }\n        last = i\n  \
    \  }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpb2j0uni0/tmpb2j0uni0.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba882f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba87fecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba87fec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba87feb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb2j0uni0                        0x000055abbdc05c2b <unavailable> + 7211

    5    libc.so.6                          0x00002aba884e1460 __libc_start_main +
    245

    6    tmpb2j0uni0                        0x000055abbdc050d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = true\n    var prev = lst[0]\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < prev {\n            sorted = false\n            break\n\
    \        }\n        prev = lst[i]\n    }\n    return sorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002af858437c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af85812e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af85812e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af85812e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af85812dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002af857f2de83 <unavailable> + 188035

    6    tmpx5vkdfl7                        0x000055c5687f3056 <unavailable> + 8278

    7    tmpx5vkdfl7                        0x000055c5687f29d4 <unavailable> + 6612

    8    libc.so.6                          0x00002af858623460 __libc_start_main +
    245

    9    tmpx5vkdfl7                        0x000055c5687f21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    for i in 0..<lst.count {\n      \
    \  if lst[i] != sorted[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1l9fc83t/tmp1l9fc83t.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93f3cfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93f39f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93f39f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93f39f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1l9fc83t                        0x000055a630f0fd9b <unavailable> + 7579

    5    libc.so.6                          0x00002b93f3ee8460 __libc_start_main +
    245

    6    tmp1l9fc83t                        0x000055a630f0f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = true\n    for i in 0..<lst.count - 1 {\n        if\
    \ lst[i] > lst[i + 1] {\n            sorted = false\n        }\n    }\n    return\
    \ sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b523a5f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b523a2ea561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b523a2ea286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b523a2ea13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b523a2e9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmppyger2uw                        0x000056232f1a80ee <unavailable> + 8430

    6    tmppyger2uw                        0x000056232f1a79d4 <unavailable> + 6612

    7    libc.so.6                          0x00002b523a7df460 __libc_start_main +
    245

    8    tmppyger2uw                        0x000056232f1a71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    for i in 0..<lst.count {\n      \
    \  if lst[i] != sorted[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1l9fc83t/tmp1l9fc83t.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93f3cfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93f39f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93f39f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93f39f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1l9fc83t                        0x000055a630f0fd9b <unavailable> + 7579

    5    libc.so.6                          0x00002b93f3ee8460 __libc_start_main +
    245

    6    tmp1l9fc83t                        0x000055a630f0f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return lst == sorted\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpvz06zsu4/tmpvz06zsu4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8b038ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8b0081b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8b0081988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8b00807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvz06zsu4                        0x0000561a5b20cbcb <unavailable> + 7115

    5    libc.so.6                          0x00002ac8b0576460 __libc_start_main +
    245

    6    tmpvz06zsu4                        0x0000561a5b20c079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    var count = 0\n    for i in 0..<lst.count\
    \ {\n        if lst[i] == sorted[i] {\n            count += 1\n        }\n   \
    \ }\n    return count == lst.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpizlw7mpy/tmpizlw7mpy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d21414c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d2110bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d2110b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d2110a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpizlw7mpy                        0x0000557178c20d9b <unavailable> + 7579

    5    libc.so.6                          0x00002b3d21600460 __libc_start_main +
    245

    6    tmpizlw7mpy                        0x0000557178c20249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count == 1 {\n        return true\n    }\n    var sorted\
    \ = lst.sorted()\n    for i in 0..<lst.count {\n        if lst[i] != sorted[i]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmps375gx0t/tmps375gx0t.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d17b1cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d17813b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d17813988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d178127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps375gx0t                        0x000055aa6b47cd9b <unavailable> + 7579

    5    libc.so.6                          0x00002b2d17d08460 __libc_start_main +
    245

    6    tmps375gx0t                        0x000055aa6b47c249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    var count = 0\n    for i in 0..<lst.count\
    \ {\n        if lst[i] == sorted[i] {\n            count += 1\n        }\n   \
    \ }\n    if count == lst.count {\n        return true\n    } else {\n        return\
    \ false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpo3k2cvay/tmpo3k2cvay.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36c3f62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36c3c59b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36c3c59988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36c3c587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo3k2cvay                        0x000055a279141d9b <unavailable> + 7579

    5    libc.so.6                          0x00002b36c414e460 __libc_start_main +
    245

    6    tmpo3k2cvay                        0x000055a279141249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = true\n    var previous = lst[0]\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < previous {\n            sorted = false\n        }\n \
    \       previous = lst[i]\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2,\
    \ 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b615299fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6152696561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6152696286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b615269613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6152695bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6152495e83 <unavailable> + 188035

    6    tmp7irdc2u9                        0x000055f032907056 <unavailable> + 8278

    7    tmp7irdc2u9                        0x000055f0329069d4 <unavailable> + 6612

    8    libc.so.6                          0x00002b6152b8b460 __libc_start_main +
    245

    9    tmp7irdc2u9                        0x000055f0329061a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    for i in 0..<lst.count {\n      \
    \  if lst[i] != sorted[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1l9fc83t/tmp1l9fc83t.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93f3cfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93f39f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93f39f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93f39f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1l9fc83t                        0x000055a630f0fd9b <unavailable> + 7579

    5    libc.so.6                          0x00002b93f3ee8460 __libc_start_main +
    245

    6    tmp1l9fc83t                        0x000055a630f0f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    for i in 0..<lst.count - 1 {\n        if lst[i] > lst[i + 1] {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b659a967c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b659a65e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b659a65e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b659a65e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b659a65dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp3wukrln3                        0x0000562203d320da <unavailable> + 8410

    6    tmp3wukrln3                        0x0000562203d319d4 <unavailable> + 6612

    7    libc.so.6                          0x00002b659ab53460 __libc_start_main +
    245

    8    tmp3wukrln3                        0x0000562203d311a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = true\n    var prev = lst[0]\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < prev {\n            sorted = false\n            break\n\
    \        }\n        prev = lst[i]\n    }\n    return sorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002af858437c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af85812e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af85812e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af85812e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af85812dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002af857f2de83 <unavailable> + 188035

    6    tmpx5vkdfl7                        0x000055c5687f3056 <unavailable> + 8278

    7    tmpx5vkdfl7                        0x000055c5687f29d4 <unavailable> + 6612

    8    libc.so.6                          0x00002af858623460 __libc_start_main +
    245

    9    tmpx5vkdfl7                        0x000055c5687f21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    for i in 0..<lst.count {\n      \
    \  if lst[i] != sorted[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1l9fc83t/tmp1l9fc83t.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93f3cfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93f39f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93f39f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93f39f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1l9fc83t                        0x000055a630f0fd9b <unavailable> + 7579

    5    libc.so.6                          0x00002b93f3ee8460 __libc_start_main +
    245

    6    tmp1l9fc83t                        0x000055a630f0f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    var count = 0\n    for i in 0..<lst.count\
    \ {\n        if lst[i] == sorted[i] {\n            count += 1\n        }\n   \
    \ }\n    return count == lst.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpizlw7mpy/tmpizlw7mpy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d21414c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d2110bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d2110b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d2110a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpizlw7mpy                        0x0000557178c20d9b <unavailable> + 7579

    5    libc.so.6                          0x00002b3d21600460 __libc_start_main +
    245

    6    tmpizlw7mpy                        0x0000557178c20249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    for i in 0..<lst.count {\n      \
    \  if lst[i] != sorted[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1l9fc83t/tmp1l9fc83t.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93f3cfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93f39f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93f39f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93f39f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1l9fc83t                        0x000055a630f0fd9b <unavailable> + 7579

    5    libc.so.6                          0x00002b93f3ee8460 __libc_start_main +
    245

    6    tmp1l9fc83t                        0x000055a630f0f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = true\n    for i in 0..<lst.count-1 {\n        if lst[i]\
    \ > lst[i+1] {\n            sorted = false\n        }\n    }\n    return sorted\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b53d89e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53d86dc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b53d86dc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b53d86dc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b53d86dbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp29a5ka7v                        0x000055fe500190ee <unavailable> + 8430

    6    tmp29a5ka7v                        0x000055fe500189d4 <unavailable> + 6612

    7    libc.so.6                          0x00002b53d8bd1460 __libc_start_main +
    245

    8    tmp29a5ka7v                        0x000055fe500181a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    for i in 0..<lst.count - 1 {\n        if lst[i] >= lst[i + 1] {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b39a8198c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39a7e8f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b39a7e8f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b39a7e8f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b39a7e8ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpiyt5auxp                        0x00005637e46750da <unavailable> + 8410

    6    tmpiyt5auxp                        0x00005637e46749d4 <unavailable> + 6612

    7    libc.so.6                          0x00002b39a8384460 __libc_start_main +
    245

    8    tmpiyt5auxp                        0x00005637e46741a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = true\n    var last = 0\n    for i in lst {\n      \
    \  if i < last {\n            sorted = false\n        }\n        last = i\n  \
    \  }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpb2j0uni0/tmpb2j0uni0.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba882f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba87fecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba87fec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba87feb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb2j0uni0                        0x000055abbdc05c2b <unavailable> + 7211

    5    libc.so.6                          0x00002aba884e1460 __libc_start_main +
    245

    6    tmpb2j0uni0                        0x000055abbdc050d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    for i in 0..<lst.count {\n      \
    \  if lst[i] != sorted[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1l9fc83t/tmp1l9fc83t.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93f3cfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93f39f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93f39f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93f39f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1l9fc83t                        0x000055a630f0fd9b <unavailable> + 7579

    5    libc.so.6                          0x00002b93f3ee8460 __libc_start_main +
    245

    6    tmp1l9fc83t                        0x000055a630f0f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    for i in 0..<lst.count {\n      \
    \  if lst[i] != sorted[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1l9fc83t/tmp1l9fc83t.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93f3cfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93f39f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93f39f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93f39f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1l9fc83t                        0x000055a630f0fd9b <unavailable> + 7579

    5    libc.so.6                          0x00002b93f3ee8460 __libc_start_main +
    245

    6    tmp1l9fc83t                        0x000055a630f0f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    for i in 0..<lst.count {\n      \
    \  if lst[i] != sorted[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1l9fc83t/tmp1l9fc83t.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93f3cfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93f39f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93f39f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93f39f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1l9fc83t                        0x000055a630f0fd9b <unavailable> + 7579

    5    libc.so.6                          0x00002b93f3ee8460 __libc_start_main +
    245

    6    tmp1l9fc83t                        0x000055a630f0f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    for i in 0..<lst.count {\n      \
    \  if lst[i] != sorted[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1l9fc83t/tmp1l9fc83t.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93f3cfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93f39f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93f39f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93f39f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1l9fc83t                        0x000055a630f0fd9b <unavailable> + 7579

    5    libc.so.6                          0x00002b93f3ee8460 __libc_start_main +
    245

    6    tmp1l9fc83t                        0x000055a630f0f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var previous = lst[0]\n    for i in lst {\n        if i < previous\
    \ {\n            return false\n        }\n        previous = i\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abefe2bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abefdfb6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abefdfb6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abefdfb613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abefdfb5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abefddb5e83 <unavailable> + 188035

    6    tmpihklplh2                        0x000055ef958a5fc2 <unavailable> + 8130

    7    tmpihklplh2                        0x000055ef958a5954 <unavailable> + 6484

    8    libc.so.6                          0x00002abefe4ab460 __libc_start_main +
    245

    9    tmpihklplh2                        0x000055ef958a5129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    for i in 0..<lst.count {\n      \
    \  if lst[i] != sorted[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1l9fc83t/tmp1l9fc83t.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93f3cfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93f39f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93f39f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93f39f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1l9fc83t                        0x000055a630f0fd9b <unavailable> + 7579

    5    libc.so.6                          0x00002b93f3ee8460 __libc_start_main +
    245

    6    tmp1l9fc83t                        0x000055a630f0f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var lst = lst\n    lst.sort()\n    return lst == lst.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv381pqv6/tmpv381pqv6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a27065c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a26d5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a26d5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a26d5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv381pqv6                        0x0000558c21f93676 <unavailable> + 5750

    5    libc.so.6                          0x00002b3a27251460 __libc_start_main +
    245

    6    tmpv381pqv6                        0x0000558c21f93159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    var count = 0\n    for i in 0..<lst.count\
    \ {\n        if lst[i] == sorted[i] {\n            count += 1\n        }\n   \
    \ }\n    return count == lst.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpizlw7mpy/tmpizlw7mpy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d21414c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d2110bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d2110b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d2110a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpizlw7mpy                        0x0000557178c20d9b <unavailable> + 7579

    5    libc.so.6                          0x00002b3d21600460 __libc_start_main +
    245

    6    tmpizlw7mpy                        0x0000557178c20249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = true\n    var last = lst[0]\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < last {\n            sorted = false\n            break\n\
    \        }\n        last = lst[i]\n    }\n    return sorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c16058c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c15d4f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b1c15d4f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b1c15d4f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1c15d4ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b1c15b4ee83 <unavailable> + 188035

    6    tmpnxgvg9yr                        0x000055790c4ea056 <unavailable> + 8278

    7    tmpnxgvg9yr                        0x000055790c4e99d4 <unavailable> + 6612

    8    libc.so.6                          0x00002b1c16244460 __libc_start_main +
    245

    9    tmpnxgvg9yr                        0x000055790c4e91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var last = lst[0]\n    for i in lst {\n        if i < last {\n \
    \           return false\n        }\n        last = i\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac40fc60c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac40f957561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac40f957286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac40f95713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac40f956bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac40f756e83 <unavailable> + 188035

    6    tmp0443lpjd                        0x000055bd1bb60fc2 <unavailable> + 8130

    7    tmp0443lpjd                        0x000055bd1bb60954 <unavailable> + 6484

    8    libc.so.6                          0x00002ac40fe4c460 __libc_start_main +
    245

    9    tmp0443lpjd                        0x000055bd1bb60129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = true\n    for i in 0..<lst.count - 1 {\n        if\
    \ lst[i] > lst[i + 1] {\n            sorted = false\n        }\n    }\n    return\
    \ sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b523a5f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b523a2ea561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b523a2ea286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b523a2ea13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b523a2e9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmppyger2uw                        0x000056232f1a80ee <unavailable> + 8430

    6    tmppyger2uw                        0x000056232f1a79d4 <unavailable> + 6612

    7    libc.so.6                          0x00002b523a7df460 __libc_start_main +
    245

    8    tmppyger2uw                        0x000056232f1a71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return lst == sorted\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpvz06zsu4/tmpvz06zsu4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8b038ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8b0081b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8b0081988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8b00807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvz06zsu4                        0x0000561a5b20cbcb <unavailable> + 7115

    5    libc.so.6                          0x00002ac8b0576460 __libc_start_main +
    245

    6    tmpvz06zsu4                        0x0000561a5b20c079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var prev = lst[0]\n    for i in lst {\n        if i < prev {\n \
    \           return false\n        }\n        prev = i\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002afa8ccb5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa8c9ac561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afa8c9ac286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afa8c9ac13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afa8c9abbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002afa8c7abe83 <unavailable> + 188035

    6    tmp8tr42kdm                        0x00005640d8abdfc2 <unavailable> + 8130

    7    tmp8tr42kdm                        0x00005640d8abd954 <unavailable> + 6484

    8    libc.so.6                          0x00002afa8cea1460 __libc_start_main +
    245

    9    tmp8tr42kdm                        0x00005640d8abd129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    if lst.count == 1 {\n        return true\n    }\n    for i in 0..<lst.count\
    \ - 1 {\n        if lst[i] >= lst[i + 1] {\n            return false\n       \
    \ }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ade936a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ade93398561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ade93398286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ade9339813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ade93397bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpwm5geo__                        0x000056185e0480f3 <unavailable> + 8435

    6    tmpwm5geo__                        0x000056185e0479d4 <unavailable> + 6612

    7    libc.so.6                          0x00002ade9388d460 __libc_start_main +
    245

    8    tmpwm5geo__                        0x000056185e0471a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = true\n    var prev = lst[0]\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < prev {\n            sorted = false\n            break\n\
    \        }\n        prev = lst[i]\n    }\n    return sorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002af858437c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af85812e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af85812e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af85812e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af85812dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002af857f2de83 <unavailable> + 188035

    6    tmpx5vkdfl7                        0x000055c5687f3056 <unavailable> + 8278

    7    tmpx5vkdfl7                        0x000055c5687f29d4 <unavailable> + 6612

    8    libc.so.6                          0x00002af858623460 __libc_start_main +
    245

    9    tmpx5vkdfl7                        0x000055c5687f21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var prev = lst[0]\n    for i in lst {\n        if i < prev {\n \
    \           return false\n        }\n        prev = i\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002afa8ccb5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa8c9ac561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afa8c9ac286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afa8c9ac13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afa8c9abbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002afa8c7abe83 <unavailable> + 188035

    6    tmp8tr42kdm                        0x00005640d8abdfc2 <unavailable> + 8130

    7    tmp8tr42kdm                        0x00005640d8abd954 <unavailable> + 6484

    8    libc.so.6                          0x00002afa8cea1460 __libc_start_main +
    245

    9    tmp8tr42kdm                        0x00005640d8abd129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = true\n    for i in 0..<lst.count-1 {\n        if lst[i]\
    \ >= lst[i+1] {\n            sorted = false\n        }\n    }\n    return sorted\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b09256bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09253b1561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b09253b1286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b09253b113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b09253b0bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpx_13tlfr                        0x000055be498020ee <unavailable> + 8430

    6    tmpx_13tlfr                        0x000055be498019d4 <unavailable> + 6612

    7    libc.so.6                          0x00002b09258a6460 __libc_start_main +
    245

    8    tmpx_13tlfr                        0x000055be498011a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    var count = 0\n    for i in 0..<lst.count\
    \ {\n        if lst[i] == sorted[i] {\n            count += 1\n        }\n   \
    \ }\n    return count == lst.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpizlw7mpy/tmpizlw7mpy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d21414c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d2110bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d2110b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d2110a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpizlw7mpy                        0x0000557178c20d9b <unavailable> + 7579

    5    libc.so.6                          0x00002b3d21600460 __libc_start_main +
    245

    6    tmpizlw7mpy                        0x0000557178c20249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var previous = lst[0]\n    for i in lst {\n        if i < previous\
    \ {\n            return false\n        }\n        previous = i\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abefe2bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abefdfb6561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abefdfb6286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abefdfb613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abefdfb5bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abefddb5e83 <unavailable> + 188035

    6    tmpihklplh2                        0x000055ef958a5fc2 <unavailable> + 8130

    7    tmpihklplh2                        0x000055ef958a5954 <unavailable> + 6484

    8    libc.so.6                          0x00002abefe4ab460 __libc_start_main +
    245

    9    tmpihklplh2                        0x000055ef958a5129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    for i in 0..<lst.count {\n      \
    \  if lst[i] != sorted[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1l9fc83t/tmp1l9fc83t.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93f3cfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93f39f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93f39f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93f39f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1l9fc83t                        0x000055a630f0fd9b <unavailable> + 7579

    5    libc.so.6                          0x00002b93f3ee8460 __libc_start_main +
    245

    6    tmp1l9fc83t                        0x000055a630f0f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return lst == sorted\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpvz06zsu4/tmpvz06zsu4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8b038ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8b0081b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8b0081988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8b00807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvz06zsu4                        0x0000561a5b20cbcb <unavailable> + 7115

    5    libc.so.6                          0x00002ac8b0576460 __libc_start_main +
    245

    6    tmpvz06zsu4                        0x0000561a5b20c079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = true\n    var previous = lst[0]\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < previous {\n            sorted = false\n        }\n \
    \       previous = lst[i]\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2,\
    \ 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b615299fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6152696561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6152696286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b615269613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6152695bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6152495e83 <unavailable> + 188035

    6    tmp7irdc2u9                        0x000055f032907056 <unavailable> + 8278

    7    tmp7irdc2u9                        0x000055f0329069d4 <unavailable> + 6612

    8    libc.so.6                          0x00002b6152b8b460 __libc_start_main +
    245

    9    tmp7irdc2u9                        0x000055f0329061a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    for i in 0..<lst.count {\n      \
    \  if lst[i] != sorted[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1l9fc83t/tmp1l9fc83t.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93f3cfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93f39f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93f39f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93f39f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1l9fc83t                        0x000055a630f0fd9b <unavailable> + 7579

    5    libc.so.6                          0x00002b93f3ee8460 __libc_start_main +
    245

    6    tmp1l9fc83t                        0x000055a630f0f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    for i in 0..<lst.count {\n      \
    \  if lst[i] != sorted[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1l9fc83t/tmp1l9fc83t.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93f3cfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93f39f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93f39f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93f39f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1l9fc83t                        0x000055a630f0fd9b <unavailable> + 7579

    5    libc.so.6                          0x00002b93f3ee8460 __libc_start_main +
    245

    6    tmp1l9fc83t                        0x000055a630f0f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sortedList = lst.sorted()\n    return sortedList == lst\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpgj69acgf/tmpgj69acgf.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0032620c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0032317b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0032317988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00323167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgj69acgf                        0x000055c61f33abcb <unavailable> + 7115

    5    libc.so.6                          0x00002b003280c460 __libc_start_main +
    245

    6    tmpgj69acgf                        0x000055c61f33a079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    if lst == sorted {\n        return\
    \ true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2,\
    \ 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpni9mbmp8/tmpni9mbmp8.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fdd736c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fdd42db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fdd42d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fdd42c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9mbmp8                        0x0000562ee88bdbcb <unavailable> + 7115

    5    libc.so.6                          0x00002b1fdd922460 __libc_start_main +
    245

    6    tmpni9mbmp8                        0x0000562ee88bd079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    var count = 0\n    for i in 0..<lst.count\
    \ {\n        if lst[i] == sorted[i] {\n            count += 1\n        }\n   \
    \ }\n    if count == lst.count {\n        return true\n    } else {\n        return\
    \ false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpo3k2cvay/tmpo3k2cvay.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36c3f62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36c3c59b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36c3c59988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36c3c587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo3k2cvay                        0x000055a279141d9b <unavailable> + 7579

    5    libc.so.6                          0x00002b36c414e460 __libc_start_main +
    245

    6    tmpo3k2cvay                        0x000055a279141249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    return lst.sorted() == lst\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpvalzsgks/tmpvalzsgks.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab892d8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab892a81b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab892a81988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab892a807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvalzsgks                        0x000055bdf8c1dbcb <unavailable> + 7115

    5    libc.so.6                          0x00002ab892f76460 __libc_start_main +
    245

    6    tmpvalzsgks                        0x000055bdf8c1d079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sortedList = lst.sorted()\n    for i in 0..<lst.count {\n  \
    \      if lst[i] != sortedList[i] {\n            return false\n        }\n   \
    \ }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpshasqmc1/tmpshasqmc1.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b193f930c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b193f627b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b193f627988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b193f6267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpshasqmc1                        0x0000564c08ae6d9b <unavailable> + 7579

    5    libc.so.6                          0x00002b193fb1c460 __libc_start_main +
    245

    6    tmpshasqmc1                        0x0000564c08ae6249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = true\n    var prev = lst[0]\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < prev {\n            sorted = false\n            break\n\
    \        }\n        prev = lst[i]\n    }\n    return sorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002af858437c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af85812e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af85812e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af85812e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af85812dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002af857f2de83 <unavailable> + 188035

    6    tmpx5vkdfl7                        0x000055c5687f3056 <unavailable> + 8278

    7    tmpx5vkdfl7                        0x000055c5687f29d4 <unavailable> + 6612

    8    libc.so.6                          0x00002af858623460 __libc_start_main +
    245

    9    tmpx5vkdfl7                        0x000055c5687f21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    for i in 0..<lst.count {\n      \
    \  if lst[i] != sorted[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1l9fc83t/tmp1l9fc83t.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93f3cfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93f39f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93f39f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93f39f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1l9fc83t                        0x000055a630f0fd9b <unavailable> + 7579

    5    libc.so.6                          0x00002b93f3ee8460 __libc_start_main +
    245

    6    tmp1l9fc83t                        0x000055a630f0f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = true\n    var prev = lst[0]\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < prev {\n            sorted = false\n            break\n\
    \        }\n        prev = lst[i]\n    }\n    return sorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002af858437c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af85812e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af85812e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af85812e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af85812dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002af857f2de83 <unavailable> + 188035

    6    tmpx5vkdfl7                        0x000055c5687f3056 <unavailable> + 8278

    7    tmpx5vkdfl7                        0x000055c5687f29d4 <unavailable> + 6612

    8    libc.so.6                          0x00002af858623460 __libc_start_main +
    245

    9    tmpx5vkdfl7                        0x000055c5687f21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = true\n    var prev = lst[0]\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < prev {\n            sorted = false\n            break\n\
    \        }\n        prev = lst[i]\n    }\n    return sorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002af858437c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af85812e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af85812e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af85812e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af85812dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002af857f2de83 <unavailable> + 188035

    6    tmpx5vkdfl7                        0x000055c5687f3056 <unavailable> + 8278

    7    tmpx5vkdfl7                        0x000055c5687f29d4 <unavailable> + 6612

    8    libc.so.6                          0x00002af858623460 __libc_start_main +
    245

    9    tmpx5vkdfl7                        0x000055c5687f21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var prev = lst[0]\n    for i in lst {\n        if i < prev {\n \
    \           return false\n        }\n        prev = i\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002afa8ccb5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa8c9ac561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afa8c9ac286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afa8c9ac13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afa8c9abbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002afa8c7abe83 <unavailable> + 188035

    6    tmp8tr42kdm                        0x00005640d8abdfc2 <unavailable> + 8130

    7    tmp8tr42kdm                        0x00005640d8abd954 <unavailable> + 6484

    8    libc.so.6                          0x00002afa8cea1460 __libc_start_main +
    245

    9    tmp8tr42kdm                        0x00005640d8abd129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = true\n    var prev = lst[0]\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < prev {\n            sorted = false\n            break\n\
    \        }\n        prev = lst[i]\n    }\n    return sorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002af858437c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af85812e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af85812e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af85812e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af85812dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002af857f2de83 <unavailable> + 188035

    6    tmpx5vkdfl7                        0x000055c5687f3056 <unavailable> + 8278

    7    tmpx5vkdfl7                        0x000055c5687f29d4 <unavailable> + 6612

    8    libc.so.6                          0x00002af858623460 __libc_start_main +
    245

    9    tmpx5vkdfl7                        0x000055c5687f21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return lst == sorted\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpvz06zsu4/tmpvz06zsu4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8b038ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8b0081b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8b0081988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8b00807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvz06zsu4                        0x0000561a5b20cbcb <unavailable> + 7115

    5    libc.so.6                          0x00002ac8b0576460 __libc_start_main +
    245

    6    tmpvz06zsu4                        0x0000561a5b20c079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    for i in 0..<lst.count {\n      \
    \  if lst[i] != sorted[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1l9fc83t/tmp1l9fc83t.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93f3cfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93f39f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93f39f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93f39f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1l9fc83t                        0x000055a630f0fd9b <unavailable> + 7579

    5    libc.so.6                          0x00002b93f3ee8460 __libc_start_main +
    245

    6    tmp1l9fc83t                        0x000055a630f0f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    for i in 0..<lst.count {\n      \
    \  if lst[i] != sorted[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1l9fc83t/tmp1l9fc83t.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93f3cfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93f39f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93f39f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93f39f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1l9fc83t                        0x000055a630f0fd9b <unavailable> + 7579

    5    libc.so.6                          0x00002b93f3ee8460 __libc_start_main +
    245

    6    tmp1l9fc83t                        0x000055a630f0f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return lst == sorted\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpvz06zsu4/tmpvz06zsu4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8b038ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8b0081b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8b0081988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8b00807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvz06zsu4                        0x0000561a5b20cbcb <unavailable> + 7115

    5    libc.so.6                          0x00002ac8b0576460 __libc_start_main +
    245

    6    tmpvz06zsu4                        0x0000561a5b20c079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = true\n    var prev = lst[0]\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < prev {\n            sorted = false\n            break\n\
    \        }\n        prev = lst[i]\n    }\n    return sorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002af858437c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af85812e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af85812e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af85812e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af85812dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002af857f2de83 <unavailable> + 188035

    6    tmpx5vkdfl7                        0x000055c5687f3056 <unavailable> + 8278

    7    tmpx5vkdfl7                        0x000055c5687f29d4 <unavailable> + 6612

    8    libc.so.6                          0x00002af858623460 __libc_start_main +
    245

    9    tmpx5vkdfl7                        0x000055c5687f21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    for i in 0..<lst.count {\n      \
    \  if lst[i] != sorted[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1l9fc83t/tmp1l9fc83t.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93f3cfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93f39f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93f39f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93f39f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1l9fc83t                        0x000055a630f0fd9b <unavailable> + 7579

    5    libc.so.6                          0x00002b93f3ee8460 __libc_start_main +
    245

    6    tmp1l9fc83t                        0x000055a630f0f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    for i in 0..<lst.count - 1 {\n        if lst[i] >= lst[i + 1] {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b39a8198c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39a7e8f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b39a7e8f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b39a7e8f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b39a7e8ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpiyt5auxp                        0x00005637e46750da <unavailable> + 8410

    6    tmpiyt5auxp                        0x00005637e46749d4 <unavailable> + 6612

    7    libc.so.6                          0x00002b39a8384460 __libc_start_main +
    245

    8    tmpiyt5auxp                        0x00005637e46741a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = true\n    for i in 0..<lst.count - 1 {\n        if\
    \ lst[i] > lst[i + 1] {\n            sorted = false\n        }\n    }\n    return\
    \ sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b523a5f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b523a2ea561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b523a2ea286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b523a2ea13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b523a2e9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmppyger2uw                        0x000056232f1a80ee <unavailable> + 8430

    6    tmppyger2uw                        0x000056232f1a79d4 <unavailable> + 6612

    7    libc.so.6                          0x00002b523a7df460 __libc_start_main +
    245

    8    tmppyger2uw                        0x000056232f1a71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    for i in 0..<lst.count {\n      \
    \  if lst[i] != sorted[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1l9fc83t/tmp1l9fc83t.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93f3cfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93f39f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93f39f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93f39f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1l9fc83t                        0x000055a630f0fd9b <unavailable> + 7579

    5    libc.so.6                          0x00002b93f3ee8460 __libc_start_main +
    245

    6    tmp1l9fc83t                        0x000055a630f0f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = true\n    for i in 0..<lst.count - 1 {\n        if\
    \ lst[i] > lst[i + 1] {\n            sorted = false\n        }\n    }\n    return\
    \ sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b523a5f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b523a2ea561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b523a2ea286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b523a2ea13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b523a2e9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmppyger2uw                        0x000056232f1a80ee <unavailable> + 8430

    6    tmppyger2uw                        0x000056232f1a79d4 <unavailable> + 6612

    7    libc.so.6                          0x00002b523a7df460 __libc_start_main +
    245

    8    tmppyger2uw                        0x000056232f1a71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    for i in 0..<lst.count {\n      \
    \  if lst[i] != sorted[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1l9fc83t/tmp1l9fc83t.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93f3cfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93f39f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93f39f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93f39f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1l9fc83t                        0x000055a630f0fd9b <unavailable> + 7579

    5    libc.so.6                          0x00002b93f3ee8460 __libc_start_main +
    245

    6    tmp1l9fc83t                        0x000055a630f0f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    for i in 0..<lst.count {\n      \
    \  if lst[i] != sorted[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1l9fc83t/tmp1l9fc83t.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93f3cfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93f39f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93f39f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93f39f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1l9fc83t                        0x000055a630f0fd9b <unavailable> + 7579

    5    libc.so.6                          0x00002b93f3ee8460 __libc_start_main +
    245

    6    tmp1l9fc83t                        0x000055a630f0f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var prev = lst[0]\n    for i in 1..<lst.count {\n        if lst[i]\
    \ <= prev {\n            return false\n        }\n        prev = lst[i]\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b022f647c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b022f33e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b022f33e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b022f33e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b022f33dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b022f13de83 <unavailable> + 188035

    6    tmpq0157okp                        0x0000559116d6d042 <unavailable> + 8258

    7    tmpq0157okp                        0x0000559116d6c9d4 <unavailable> + 6612

    8    libc.so.6                          0x00002b022f833460 __libc_start_main +
    245

    9    tmpq0157okp                        0x0000559116d6c1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    var count = 0\n    for i in 0..<lst.count\
    \ {\n        if lst[i] == sorted[i] {\n            count += 1\n        }\n   \
    \ }\n    return count == lst.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpizlw7mpy/tmpizlw7mpy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d21414c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d2110bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d2110b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d2110a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpizlw7mpy                        0x0000557178c20d9b <unavailable> + 7579

    5    libc.so.6                          0x00002b3d21600460 __libc_start_main +
    245

    6    tmpizlw7mpy                        0x0000557178c20249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = true\n    var prev = lst[0]\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < prev {\n            sorted = false\n            break\n\
    \        }\n        prev = lst[i]\n    }\n    return sorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002af858437c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af85812e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af85812e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af85812e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af85812dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002af857f2de83 <unavailable> + 188035

    6    tmpx5vkdfl7                        0x000055c5687f3056 <unavailable> + 8278

    7    tmpx5vkdfl7                        0x000055c5687f29d4 <unavailable> + 6612

    8    libc.so.6                          0x00002af858623460 __libc_start_main +
    245

    9    tmpx5vkdfl7                        0x000055c5687f21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    for i in 0..<lst.count {\n      \
    \  if lst[i] != sorted[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1l9fc83t/tmp1l9fc83t.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93f3cfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93f39f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93f39f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93f39f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1l9fc83t                        0x000055a630f0fd9b <unavailable> + 7579

    5    libc.so.6                          0x00002b93f3ee8460 __libc_start_main +
    245

    6    tmp1l9fc83t                        0x000055a630f0f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = true\n    var last = lst[0]\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < last {\n            sorted = false\n            break\n\
    \        }\n        last = lst[i]\n    }\n    return sorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c16058c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c15d4f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b1c15d4f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b1c15d4f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1c15d4ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b1c15b4ee83 <unavailable> + 188035

    6    tmpnxgvg9yr                        0x000055790c4ea056 <unavailable> + 8278

    7    tmpnxgvg9yr                        0x000055790c4e99d4 <unavailable> + 6612

    8    libc.so.6                          0x00002b1c16244460 __libc_start_main +
    245

    9    tmpnxgvg9yr                        0x000055790c4e91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return lst == sorted\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpvz06zsu4/tmpvz06zsu4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8b038ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8b0081b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8b0081988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8b00807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvz06zsu4                        0x0000561a5b20cbcb <unavailable> + 7115

    5    libc.so.6                          0x00002ac8b0576460 __libc_start_main +
    245

    6    tmpvz06zsu4                        0x0000561a5b20c079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    for i in 0..<lst.count {\n      \
    \  if lst[i] != sorted[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1l9fc83t/tmp1l9fc83t.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93f3cfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93f39f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93f39f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93f39f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1l9fc83t                        0x000055a630f0fd9b <unavailable> + 7579

    5    libc.so.6                          0x00002b93f3ee8460 __libc_start_main +
    245

    6    tmp1l9fc83t                        0x000055a630f0f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    for i in 0..<lst.count {\n      \
    \  if lst[i] != sorted[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1l9fc83t/tmp1l9fc83t.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93f3cfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93f39f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93f39f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93f39f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1l9fc83t                        0x000055a630f0fd9b <unavailable> + 7579

    5    libc.so.6                          0x00002b93f3ee8460 __libc_start_main +
    245

    6    tmp1l9fc83t                        0x000055a630f0f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = true\n    var last = lst[0]\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < last {\n            sorted = false\n            break\n\
    \        }\n        last = lst[i]\n    }\n    return sorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c16058c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c15d4f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b1c15d4f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b1c15d4f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1c15d4ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b1c15b4ee83 <unavailable> + 188035

    6    tmpnxgvg9yr                        0x000055790c4ea056 <unavailable> + 8278

    7    tmpnxgvg9yr                        0x000055790c4e99d4 <unavailable> + 6612

    8    libc.so.6                          0x00002b1c16244460 __libc_start_main +
    245

    9    tmpnxgvg9yr                        0x000055790c4e91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    for i in 0..<lst.count {\n      \
    \  if lst[i] != sorted[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1l9fc83t/tmp1l9fc83t.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93f3cfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93f39f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93f39f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93f39f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1l9fc83t                        0x000055a630f0fd9b <unavailable> + 7579

    5    libc.so.6                          0x00002b93f3ee8460 __libc_start_main +
    245

    6    tmp1l9fc83t                        0x000055a630f0f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    for i in 0..<lst.count {\n      \
    \  if lst[i] != sorted[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1l9fc83t/tmp1l9fc83t.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93f3cfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93f39f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93f39f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93f39f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1l9fc83t                        0x000055a630f0fd9b <unavailable> + 7579

    5    libc.so.6                          0x00002b93f3ee8460 __libc_start_main +
    245

    6    tmp1l9fc83t                        0x000055a630f0f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    for i in 0..<lst.count {\n      \
    \  if lst[i] != sorted[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1l9fc83t/tmp1l9fc83t.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93f3cfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93f39f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93f39f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93f39f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1l9fc83t                        0x000055a630f0fd9b <unavailable> + 7579

    5    libc.so.6                          0x00002b93f3ee8460 __libc_start_main +
    245

    6    tmp1l9fc83t                        0x000055a630f0f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = true\n    var last = lst[0]\n    for i in 1..<lst.count\
    \ {\n        if last == lst[i] {\n            sorted = false\n        }\n    \
    \    if last > lst[i] {\n            sorted = false\n        }\n        last =\
    \ lst[i]\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0539acdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05397c4561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b05397c4286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b05397c413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b05397c3bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b05395c3e83 <unavailable> + 188035

    6    tmplf3qena7                        0x0000562483d2605c <unavailable> + 8284

    7    tmplf3qena7                        0x0000562483d259d4 <unavailable> + 6612

    8    libc.so.6                          0x00002b0539cb9460 __libc_start_main +
    245

    9    tmplf3qena7                        0x0000562483d251a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return lst == sorted\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpvz06zsu4/tmpvz06zsu4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8b038ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8b0081b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8b0081988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8b00807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvz06zsu4                        0x0000561a5b20cbcb <unavailable> + 7115

    5    libc.so.6                          0x00002ac8b0576460 __libc_start_main +
    245

    6    tmpvz06zsu4                        0x0000561a5b20c079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return lst == sorted\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpvz06zsu4/tmpvz06zsu4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8b038ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8b0081b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8b0081988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8b00807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvz06zsu4                        0x0000561a5b20cbcb <unavailable> + 7115

    5    libc.so.6                          0x00002ac8b0576460 __libc_start_main +
    245

    6    tmpvz06zsu4                        0x0000561a5b20c079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    if lst == sorted {\n        return\
    \ true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2,\
    \ 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpni9mbmp8/tmpni9mbmp8.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fdd736c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fdd42db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fdd42d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fdd42c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9mbmp8                        0x0000562ee88bdbcb <unavailable> + 7115

    5    libc.so.6                          0x00002b1fdd922460 __libc_start_main +
    245

    6    tmpni9mbmp8                        0x0000562ee88bd079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    for i in 0..<lst.count {\n      \
    \  if lst[i] != sorted[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1l9fc83t/tmp1l9fc83t.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93f3cfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93f39f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93f39f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93f39f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1l9fc83t                        0x000055a630f0fd9b <unavailable> + 7579

    5    libc.so.6                          0x00002b93f3ee8460 __libc_start_main +
    245

    6    tmp1l9fc83t                        0x000055a630f0f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    return lst.sorted() == lst\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpvalzsgks/tmpvalzsgks.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab892d8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab892a81b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab892a81988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab892a807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvalzsgks                        0x000055bdf8c1dbcb <unavailable> + 7115

    5    libc.so.6                          0x00002ab892f76460 __libc_start_main +
    245

    6    tmpvalzsgks                        0x000055bdf8c1d079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    if lst == sorted {\n        return\
    \ true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2,\
    \ 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpni9mbmp8/tmpni9mbmp8.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fdd736c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fdd42db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fdd42d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fdd42c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpni9mbmp8                        0x0000562ee88bdbcb <unavailable> + 7115

    5    libc.so.6                          0x00002b1fdd922460 __libc_start_main +
    245

    6    tmpni9mbmp8                        0x0000562ee88bd079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    for i in 0..<lst.count-1 {\n        if lst[i] > lst[i+1] {\n   \
    \         return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002adcf00d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adcefdc9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adcefdc9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adcefdc913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adcefdc8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpudhxawb0                        0x00005578957230da <unavailable> + 8410

    6    tmpudhxawb0                        0x00005578957229d4 <unavailable> + 6612

    7    libc.so.6                          0x00002adcf02be460 __libc_start_main +
    245

    8    tmpudhxawb0                        0x00005578957221a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var prev = lst[0]\n    for i in lst {\n        if i < prev {\n \
    \           return false\n        }\n        prev = i\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002afa8ccb5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa8c9ac561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afa8c9ac286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afa8c9ac13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afa8c9abbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002afa8c7abe83 <unavailable> + 188035

    6    tmp8tr42kdm                        0x00005640d8abdfc2 <unavailable> + 8130

    7    tmp8tr42kdm                        0x00005640d8abd954 <unavailable> + 6484

    8    libc.so.6                          0x00002afa8cea1460 __libc_start_main +
    245

    9    tmp8tr42kdm                        0x00005640d8abd129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    for i in 0..<lst.count {\n      \
    \  if lst[i] != sorted[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1l9fc83t/tmp1l9fc83t.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93f3cfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93f39f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93f39f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93f39f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1l9fc83t                        0x000055a630f0fd9b <unavailable> + 7579

    5    libc.so.6                          0x00002b93f3ee8460 __libc_start_main +
    245

    6    tmp1l9fc83t                        0x000055a630f0f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = true\n    var prev = lst[0]\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < prev {\n            sorted = false\n            break\n\
    \        }\n        prev = lst[i]\n    }\n    return sorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002af858437c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af85812e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af85812e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af85812e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af85812dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002af857f2de83 <unavailable> + 188035

    6    tmpx5vkdfl7                        0x000055c5687f3056 <unavailable> + 8278

    7    tmpx5vkdfl7                        0x000055c5687f29d4 <unavailable> + 6612

    8    libc.so.6                          0x00002af858623460 __libc_start_main +
    245

    9    tmpx5vkdfl7                        0x000055c5687f21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var temp = lst\n    temp.sort()\n    return temp == lst\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpljf9qa1m/tmpljf9qa1m.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68ac549c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68ac240b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68ac240988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68ac23f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpljf9qa1m                        0x000055f756316c3b <unavailable> + 7227

    5    libc.so.6                          0x00002b68ac735460 __libc_start_main +
    245

    6    tmpljf9qa1m                        0x000055f7563160e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    for i in 0..<lst.count {\n      \
    \  if lst[i] != sorted[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1l9fc83t/tmp1l9fc83t.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93f3cfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93f39f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93f39f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93f39f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1l9fc83t                        0x000055a630f0fd9b <unavailable> + 7579

    5    libc.so.6                          0x00002b93f3ee8460 __libc_start_main +
    245

    6    tmp1l9fc83t                        0x000055a630f0f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return lst == sorted\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpvz06zsu4/tmpvz06zsu4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8b038ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8b0081b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8b0081988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8b00807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvz06zsu4                        0x0000561a5b20cbcb <unavailable> + 7115

    5    libc.so.6                          0x00002ac8b0576460 __libc_start_main +
    245

    6    tmpvz06zsu4                        0x0000561a5b20c079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    for (index, value) in lst.enumerated()\
    \ {\n        if value != sorted[index] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpwdnigidl/tmpwdnigidl.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae15ce26c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae15cb1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae15cb1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae15cb1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwdnigidl                        0x0000560b9b209dcb <unavailable> + 7627

    5    libc.so.6                          0x00002ae15d012460 __libc_start_main +
    245

    6    tmpwdnigidl                        0x0000560b9b209279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    for i in 0..<lst.count {\n      \
    \  if lst[i] != sorted[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1l9fc83t/tmp1l9fc83t.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93f3cfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93f39f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93f39f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93f39f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1l9fc83t                        0x000055a630f0fd9b <unavailable> + 7579

    5    libc.so.6                          0x00002b93f3ee8460 __libc_start_main +
    245

    6    tmp1l9fc83t                        0x000055a630f0f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    for i in 0..<lst.count {\n      \
    \  if lst[i] != sorted[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1l9fc83t/tmp1l9fc83t.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93f3cfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93f39f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93f39f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93f39f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1l9fc83t                        0x000055a630f0fd9b <unavailable> + 7579

    5    libc.so.6                          0x00002b93f3ee8460 __libc_start_main +
    245

    6    tmp1l9fc83t                        0x000055a630f0f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    for i in 0..<lst.count - 1 {\n        if lst[i] >= lst[i + 1] {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b39a8198c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39a7e8f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b39a7e8f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b39a7e8f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b39a7e8ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpiyt5auxp                        0x00005637e46750da <unavailable> + 8410

    6    tmpiyt5auxp                        0x00005637e46749d4 <unavailable> + 6612

    7    libc.so.6                          0x00002b39a8384460 __libc_start_main +
    245

    8    tmpiyt5auxp                        0x00005637e46741a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    for i in 0..<lst.count {\n      \
    \  if lst[i] != sorted[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1l9fc83t/tmp1l9fc83t.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93f3cfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93f39f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93f39f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93f39f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1l9fc83t                        0x000055a630f0fd9b <unavailable> + 7579

    5    libc.so.6                          0x00002b93f3ee8460 __libc_start_main +
    245

    6    tmp1l9fc83t                        0x000055a630f0f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = true\n    var prev = lst[0]\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < prev {\n            sorted = false\n            break\n\
    \        }\n        prev = lst[i]\n    }\n    return sorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002af858437c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af85812e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af85812e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af85812e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af85812dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002af857f2de83 <unavailable> + 188035

    6    tmpx5vkdfl7                        0x000055c5687f3056 <unavailable> + 8278

    7    tmpx5vkdfl7                        0x000055c5687f29d4 <unavailable> + 6612

    8    libc.so.6                          0x00002af858623460 __libc_start_main +
    245

    9    tmpx5vkdfl7                        0x000055c5687f21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    for i in 0..<lst.count {\n      \
    \  if lst[i] != sorted[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1l9fc83t/tmp1l9fc83t.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93f3cfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93f39f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93f39f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93f39f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1l9fc83t                        0x000055a630f0fd9b <unavailable> + 7579

    5    libc.so.6                          0x00002b93f3ee8460 __libc_start_main +
    245

    6    tmp1l9fc83t                        0x000055a630f0f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    for i in 0..<lst.count {\n      \
    \  if lst[i] != sorted[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1l9fc83t/tmp1l9fc83t.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93f3cfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93f39f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93f39f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93f39f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1l9fc83t                        0x000055a630f0fd9b <unavailable> + 7579

    5    libc.so.6                          0x00002b93f3ee8460 __libc_start_main +
    245

    6    tmp1l9fc83t                        0x000055a630f0f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = true\n    for i in 1..<lst.count {\n        if lst[i]\
    \ < lst[i - 1] {\n            sorted = false\n        }\n    }\n    return sorted\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b680470ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6804401561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6804401286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b680440113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6804400bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpkhmrfz9l                        0x000055ea767270de <unavailable> + 8414

    6    tmpkhmrfz9l                        0x000055ea767269d4 <unavailable> + 6612

    7    libc.so.6                          0x00002b68048f6460 __libc_start_main +
    245

    8    tmpkhmrfz9l                        0x000055ea767261a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = true\n    var prev = lst[0]\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < prev {\n            sorted = false\n            break\n\
    \        }\n        prev = lst[i]\n    }\n    return sorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002af858437c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af85812e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af85812e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af85812e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af85812dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002af857f2de83 <unavailable> + 188035

    6    tmpx5vkdfl7                        0x000055c5687f3056 <unavailable> + 8278

    7    tmpx5vkdfl7                        0x000055c5687f29d4 <unavailable> + 6612

    8    libc.so.6                          0x00002af858623460 __libc_start_main +
    245

    9    tmpx5vkdfl7                        0x000055c5687f21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    for i in 0..<lst.count {\n      \
    \  if lst[i] != sorted[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1l9fc83t/tmp1l9fc83t.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93f3cfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93f39f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93f39f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93f39f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1l9fc83t                        0x000055a630f0fd9b <unavailable> + 7579

    5    libc.so.6                          0x00002b93f3ee8460 __libc_start_main +
    245

    6    tmp1l9fc83t                        0x000055a630f0f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = true\n    for i in 0..<lst.count - 1 {\n        if\
    \ lst[i] > lst[i + 1] {\n            sorted = false\n        }\n    }\n    return\
    \ sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b523a5f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b523a2ea561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b523a2ea286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b523a2ea13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b523a2e9bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmppyger2uw                        0x000056232f1a80ee <unavailable> + 8430

    6    tmppyger2uw                        0x000056232f1a79d4 <unavailable> + 6612

    7    libc.so.6                          0x00002b523a7df460 __libc_start_main +
    245

    8    tmppyger2uw                        0x000056232f1a71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    return lst.sorted() == lst\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpvalzsgks/tmpvalzsgks.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab892d8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab892a81b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab892a81988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab892a807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvalzsgks                        0x000055bdf8c1dbcb <unavailable> + 7115

    5    libc.so.6                          0x00002ab892f76460 __libc_start_main +
    245

    6    tmpvalzsgks                        0x000055bdf8c1d079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    return lst.sorted() == lst\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpvalzsgks/tmpvalzsgks.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab892d8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab892a81b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab892a81988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab892a807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvalzsgks                        0x000055bdf8c1dbcb <unavailable> + 7115

    5    libc.so.6                          0x00002ab892f76460 __libc_start_main +
    245

    6    tmpvalzsgks                        0x000055bdf8c1d079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = true\n    var last = lst[0]\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < last {\n            sorted = false\n            break\n\
    \        }\n        last = lst[i]\n    }\n    return sorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c16058c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c15d4f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b1c15d4f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b1c15d4f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1c15d4ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b1c15b4ee83 <unavailable> + 188035

    6    tmpnxgvg9yr                        0x000055790c4ea056 <unavailable> + 8278

    7    tmpnxgvg9yr                        0x000055790c4e99d4 <unavailable> + 6612

    8    libc.so.6                          0x00002b1c16244460 __libc_start_main +
    245

    9    tmpnxgvg9yr                        0x000055790c4e91a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = true\n    var prev = lst[0]\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < prev {\n            sorted = false\n            break\n\
    \        }\n        prev = lst[i]\n    }\n    return sorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002af858437c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af85812e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af85812e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af85812e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af85812dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002af857f2de83 <unavailable> + 188035

    6    tmpx5vkdfl7                        0x000055c5687f3056 <unavailable> + 8278

    7    tmpx5vkdfl7                        0x000055c5687f29d4 <unavailable> + 6612

    8    libc.so.6                          0x00002af858623460 __libc_start_main +
    245

    9    tmpx5vkdfl7                        0x000055c5687f21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    for i in 0..<lst.count {\n      \
    \  if lst[i] != sorted[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1l9fc83t/tmp1l9fc83t.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93f3cfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93f39f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93f39f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93f39f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1l9fc83t                        0x000055a630f0fd9b <unavailable> + 7579

    5    libc.so.6                          0x00002b93f3ee8460 __libc_start_main +
    245

    6    tmp1l9fc83t                        0x000055a630f0f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    for i in 0..<lst.count {\n      \
    \  if lst[i] != sorted[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1l9fc83t/tmp1l9fc83t.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93f3cfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93f39f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93f39f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93f39f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1l9fc83t                        0x000055a630f0fd9b <unavailable> + 7579

    5    libc.so.6                          0x00002b93f3ee8460 __libc_start_main +
    245

    6    tmp1l9fc83t                        0x000055a630f0f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = true\n    var previous = lst[0]\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < previous {\n            sorted = false\n        }\n \
    \       previous = lst[i]\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2,\
    \ 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b615299fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6152696561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6152696286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b615269613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6152695bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b6152495e83 <unavailable> + 188035

    6    tmp7irdc2u9                        0x000055f032907056 <unavailable> + 8278

    7    tmp7irdc2u9                        0x000055f0329069d4 <unavailable> + 6612

    8    libc.so.6                          0x00002b6152b8b460 __libc_start_main +
    245

    9    tmp7irdc2u9                        0x000055f0329061a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    return sorted == lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpv4jy1k4e/tmpv4jy1k4e.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b1b391c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b1b088b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b1b088988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b1b0877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4jy1k4e                        0x000055da7c7e9bcb <unavailable> + 7115

    5    libc.so.6                          0x00002b0b1b57d460 __libc_start_main +
    245

    6    tmpv4jy1k4e                        0x000055da7c7e9079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sortedLst = lst.sorted()\n    return sortedLst == lst\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp7guv6nc7/tmp7guv6nc7.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae0e248ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae0e2181b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae0e2181988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae0e21807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7guv6nc7                        0x000055caee639bcb <unavailable> + 7115

    5    libc.so.6                          0x00002ae0e2676460 __libc_start_main +
    245

    6    tmp7guv6nc7                        0x000055caee639079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1660013706
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    /// is_sorted([5]) \u279E True\n/// is_sorted([1, 2, 3, 4, 5]) \u279E True\n///\
    \ is_sorted([1, 3, 2, 4, 5]) \u279E False\n/// is_sorted([1, 2, 3, 4, 5, 6]) \u279E\
    \ True\n/// is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n/// is_sorted([1, 3,\
    \ 2, 4, 5, 6, 7]) \u279E False\n/// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n\
    /// is_sorted([1, 2, 2, 2, 3, 4]) \u279E False\nfunc is_sorted(lst: [Int]) ->\
    \ Bool {\n    var sorted = lst.sorted()\n    for i in 0..<lst.count {\n      \
    \  if lst[i] != sorted[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1l9fc83t/tmp1l9fc83t.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93f3cfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93f39f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93f39f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93f39f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1l9fc83t                        0x000055a630f0fd9b <unavailable> + 7579

    5    libc.so.6                          0x00002b93f3ee8460 __libc_start_main +
    245

    6    tmp1l9fc83t                        0x000055a630f0f249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660013706
