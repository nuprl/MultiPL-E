language: swift
name: HumanEval_31_is_prime
results:
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n    for i in 2...n-1\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n\
    \    for i in 3...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp82xlykxw.swift:27:22: error: cannot find 'sqrt' in scope\n    for\
    \ i in 3...Int(sqrt(Double(n))) {\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    for i in 2...n\
    \ - 1 {\n        if n % i == 0 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    var i = 2\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            return false\n \
    \       }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    var i = 2\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            return false\n \
    \       }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 2 {\n        return true\n    }\n    if n % 2 ==\
    \ 0 {\n        return false\n    }\n    for i in 3..<n {\n        if n % i ==\
    \ 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b30055a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b300529a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b300529a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b300529a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3005299bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpz2n7sq52                        0x000055f2b8bcaa97 <unavailable> + 6807

    6    tmpz2n7sq52                        0x000055f2b8bca587 <unavailable> + 5511

    7    libc.so.6                          0x00002b300578f460 __libc_start_main +
    245

    8    tmpz2n7sq52                        0x000055f2b8bc9fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n % 2 == 0 {\n        return false\n \
    \   }\n    var i = 3\n    while i * i <= n {\n        if n % i == 0 {\n      \
    \      return false\n        }\n        i += 2\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n\
    \    var i = 3\n    while i * i <= n {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        i += 2\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    } else if n <= 3\
    \ {\n        return true\n    } else if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n % 2 == 0 {\n        return false\n \
    \   }\n    for i in stride(from: 3, through: Int(sqrt(Double(n))), by: 2) {\n\
    \        if n % i == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmprk1ni84i.swift:27:43: error: cannot find 'sqrt' in scope\n    for\
    \ i in stride(from: 3, through: Int(sqrt(Double(n))), by: 2) {\n             \
    \                             ^~~~\n"
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    var i = 2\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            return false\n \
    \       }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n % 2 == 0 {\n        return false\n \
    \   }\n    var i = 3\n    while i * i <= n {\n        if n % i == 0 {\n      \
    \      return false\n        }\n        i += 2\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n % 2 == 0 {\n        return false\n \
    \   }\n    for i in 3...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpl5upjbzt.swift:27:22: error: cannot find 'sqrt' in scope\n    for\
    \ i in 3...Int(sqrt(Double(n))) {\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n % 2 == 0 {\n        return false\n \
    \   }\n    for i in 3..<n {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n % 2 == 0 {\n        return false\n \
    \   }\n    let limit = Int(sqrt(Double(n)))\n    for i in 3...limit {\n      \
    \  if n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp8c7nduu.swift:27:21: error: cannot find 'sqrt' in scope\n    let\
    \ limit = Int(sqrt(Double(n)))\n                    ^~~~\n"
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n\
    \    for i in 3..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n\
    \    for i in 3...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp82xlykxw.swift:27:22: error: cannot find 'sqrt' in scope\n    for\
    \ i in 3...Int(sqrt(Double(n))) {\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 2 {\n        return true\n    }\n    if n % 2 ==\
    \ 0 {\n        return false\n    }\n    for i in 3..<n {\n        if n % i ==\
    \ 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b30055a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b300529a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b300529a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b300529a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3005299bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpz2n7sq52                        0x000055f2b8bcaa97 <unavailable> + 6807

    6    tmpz2n7sq52                        0x000055f2b8bca587 <unavailable> + 5511

    7    libc.so.6                          0x00002b300578f460 __libc_start_main +
    245

    8    tmpz2n7sq52                        0x000055f2b8bc9fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    var i = 2\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            return false\n \
    \       }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n\
    \    for i in 3..<n {\n        if n % i == 0 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n    var i = 2\n\
    \    while i < n {\n        if n % i == 0 {\n            return false\n      \
    \  }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n\
    \    for i in 3...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp82xlykxw.swift:27:22: error: cannot find 'sqrt' in scope\n    for\
    \ i in 3...Int(sqrt(Double(n))) {\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n\
    \    for i in 3...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp82xlykxw.swift:27:22: error: cannot find 'sqrt' in scope\n    for\
    \ i in 3...Int(sqrt(Double(n))) {\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2...Int(sqrt(Double(n)))\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2i9dcwci.swift:21:22: error: cannot find 'sqrt' in scope\n    for\
    \ i in 2...Int(sqrt(Double(n))) {\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    else if n\
    \ <= 3 {\n        return true\n    }\n    else if n % 2 == 0 || n % 3 == 0 {\n\
    \        return false\n    }\n    var i = 5\n    while i * i <= n {\n        if\
    \ n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n    \
    \    i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    for i in 2...n-1\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2...Int(sqrt(Double(n)))\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2i9dcwci.swift:21:22: error: cannot find 'sqrt' in scope\n    for\
    \ i in 2...Int(sqrt(Double(n))) {\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n\
    \    for i in 3...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp82xlykxw.swift:27:22: error: cannot find 'sqrt' in scope\n    for\
    \ i in 3...Int(sqrt(Double(n))) {\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n % 2 == 0 {\n        return false\n \
    \   }\n    for i in 3...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpynudkg1f.swift:27:22: error: cannot find 'sqrt' in scope\n    for\
    \ i in 3...Int(sqrt(Double(n))) {\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    else if n\
    \ <= 3 {\n        return true\n    }\n    else if n % 2 == 0 || n % 3 == 0 {\n\
    \        return false\n    }\n    var i = 5\n    while i * i <= n {\n        if\
    \ n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n    \
    \    i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n % 2 == 0 {\n        return false\n \
    \   }\n    var i = 3\n    while i * i <= n {\n        if n % i == 0 {\n      \
    \      return false\n        }\n        i += 2\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    } else if n <= 3\
    \ {\n        return true\n    } else if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n % 2 == 0 {\n        return false\n \
    \   }\n    var i = 3\n    while i * i <= n {\n        if n % i == 0 {\n      \
    \      return false\n        }\n        i += 2\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    var i = 2\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            return false\n \
    \       }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    var i = 2\n    while i*i <= n {\n       \
    \ if n % i == 0 {\n            return false\n        }\n        i = i + 1\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    else if n\
    \ <= 3 {\n        return true\n    }\n    else if n % 2 == 0 || n % 3 == 0 {\n\
    \        return false\n    }\n    var i = 5\n    while i * i <= n {\n        if\
    \ n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n    \
    \    i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n    for i in 2...n-1\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n % 2 == 0 {\n        return false\n \
    \   }\n    for i in 3..<n {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2...n-1\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    var i = 2\n    while i * i <= n {\n     \
    \   if n % i == 0 {\n            return false\n        }\n        i += 1\n   \
    \ }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n    var i = 2\n\
    \    while i < n {\n        if n % i == 0 {\n            return false\n      \
    \  }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n % 2 == 0 {\n        return false\n \
    \   }\n    var i = 3\n    while i * i <= n {\n        if n % i == 0 {\n      \
    \      return false\n        }\n        i += 2\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    var i = 2\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            return false\n \
    \       }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n    for i in 2...n-1\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n\
    \    for i in 3...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp82xlykxw.swift:27:22: error: cannot find 'sqrt' in scope\n    for\
    \ i in 3...Int(sqrt(Double(n))) {\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n % 2 == 0 {\n        return false\n \
    \   }\n    var i = 3\n    while i * i <= n {\n        if n % i == 0 {\n      \
    \      return false\n        }\n        i += 2\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n % 2 == 0 {\n        return false\n \
    \   }\n    for i in 3..<n {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n % 2 == 0 {\n        return false\n \
    \   }\n    var i = 3\n    while i * i <= n {\n        if n % i == 0 {\n      \
    \      return false\n        }\n        i += 2\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    var i = 2\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            return false\n \
    \       }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n % 2 == 0 {\n        return false\n \
    \   }\n    for i in 3...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpynudkg1f.swift:27:22: error: cannot find 'sqrt' in scope\n    for\
    \ i in 3...Int(sqrt(Double(n))) {\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n\
    \    for i in 3...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp82xlykxw.swift:27:22: error: cannot find 'sqrt' in scope\n    for\
    \ i in 3...Int(sqrt(Double(n))) {\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n\
    \    for i in 3...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp82xlykxw.swift:27:22: error: cannot find 'sqrt' in scope\n    for\
    \ i in 3...Int(sqrt(Double(n))) {\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    var i = 2\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            return false\n \
    \       }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    for i in 2...n-1\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    else if n\
    \ <= 3 {\n        return true\n    }\n    else if n % 2 == 0 || n % 3 == 0 {\n\
    \        return false\n    }\n    var i = 5\n    while i * i <= n {\n        if\
    \ n % i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n    \
    \    i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n % 2 == 0 {\n        return false\n \
    \   }\n    for i in 3...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpynudkg1f.swift:27:22: error: cannot find 'sqrt' in scope\n    for\
    \ i in 3...Int(sqrt(Double(n))) {\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659824355
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n\
    \    for i in 3...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp82xlykxw.swift:27:22: error: cannot find 'sqrt' in scope\n    for\
    \ i in 3...Int(sqrt(Double(n))) {\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    var i = 2\n    while i*i <= n {\n       \
    \ if n % i == 0 {\n            return false\n        }\n        i = i + 1\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    for i in 2...n-1\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n % 2 == 0 {\n        return false\n \
    \   }\n    let upper_bound = Int(sqrt(Double(n)))\n    for i in 3...upper_bound\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnxi5bj2y.swift:27:27: error: cannot find 'sqrt' in scope\n    let\
    \ upper_bound = Int(sqrt(Double(n)))\n                          ^~~~\n"
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n % 2 == 0 {\n        return false\n \
    \   }\n    for i in 3...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpynudkg1f.swift:27:22: error: cannot find 'sqrt' in scope\n    for\
    \ i in 3...Int(sqrt(Double(n))) {\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n % 2 == 0 {\n        return false\n \
    \   }\n    for i in 3...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpynudkg1f.swift:27:22: error: cannot find 'sqrt' in scope\n    for\
    \ i in 3...Int(sqrt(Double(n))) {\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    if n == 2 {\n\
    \        return true\n    }\n    if n % 2 == 0 {\n        return false\n    }\n\
    \    var i = 3\n    while i * i <= n {\n        if n % i == 0 {\n            return\
    \ false\n        }\n        i += 2\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n % 2 == 0 {\n        return false\n \
    \   }\n    for i in 3...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpynudkg1f.swift:27:22: error: cannot find 'sqrt' in scope\n    for\
    \ i in 3...Int(sqrt(Double(n))) {\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n % 2 == 0 {\n        return false\n \
    \   }\n    var i = 3\n    while i * i <= n {\n        if n % i == 0 {\n      \
    \      return false\n        }\n        i += 2\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n    for i in 2..<n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n == 1 {\n        return false\n    }\n    if n == 2\
    \ {\n        return true\n    }\n    if n % 2 == 0 {\n        return false\n \
    \   }\n    for i in 3...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpynudkg1f.swift:27:22: error: cannot find 'sqrt' in scope\n    for\
    \ i in 3...Int(sqrt(Double(n))) {\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\n///\
    \ >>> is_prime(6)\n/// False\n/// >>> is_prime(101)\n/// True\n/// >>> is_prime(11)\n\
    /// True\n/// >>> is_prime(13441)\n/// True\n/// >>> is_prime(61)\n/// True\n\
    /// >>> is_prime(4)\n/// False\n/// >>> is_prime(1)\n/// False\nfunc is_prime(n:\
    \ Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    if n <= 3\
    \ {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824355
