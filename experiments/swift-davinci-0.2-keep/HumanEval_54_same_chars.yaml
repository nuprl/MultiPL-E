name: HumanEval_54_same_chars
language: swift
prompt: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
  \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n///\
  \ True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
  \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
  /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
  \ String, s1: String) -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
  ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
  \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"\
  dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") ==\
  \ false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\n\
  assert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
completions: ["    var s0 = s0\n    var s1 = s1\n    if s0.characters.count != s1.characters.count\
    \ {\n        return false\n    }\n    for c in s0.characters {\n        if let\
    \ i = s1.characters.index(of: c) {\n            s1.remove(at: i)\n        } else\
    \ {\n            return false\n        }\n    }\n    return true", "    var s0\
    \ = s0\n    var s1 = s1\n    for c in s0 {\n        if let i = s1.index(of: c)\
    \ {\n            s1.remove(at: i)\n        } else {\n            return false\n\
    \        }\n    }\n    return true", "    var c0 = [Character](s0.characters)\n\
    \    var c1 = [Character](s1.characters)\n    c0.sort()\n    c1.sort()\n    return\
    \ c0 == c1", "    var s0 = s0\n    var s1 = s1\n    if s0.count != s1.count {\n\
    \        return false\n    }\n    for c in s0 {\n        if let i = s1.firstIndex(of:\
    \ c) {\n            s1.remove(at: i)\n        } else {\n            return false\n\
    \        }\n    }\n    return true", "    var d0 = [Character: Int]()\n    var\
    \ d1 = [Character: Int]()\n    for c in s0 {\n        d0[c] = (d0[c] ?? 0) + 1\n\
    \    }\n    for c in s1 {\n        d1[c] = (d1[c] ?? 0) + 1\n    }\n    return\
    \ d0 == d1", "    var s0 = s0\n    var s1 = s1\n    for c in s0 {\n        if\
    \ let idx = s1.index(of: c) {\n            s1.remove(at: idx)\n        } else\
    \ {\n            return false\n        }\n    }\n    return true", "    var s0\
    \ = s0\n    var s1 = s1\n    for c in s0 {\n        if let i = s1.firstIndex(of:\
    \ c) {\n            s1.remove(at: i)\n        } else {\n            return false\n\
    \        }\n    }\n    return true", "    var s0 = s0\n    var s1 = s1\n    for\
    \ c in s0 {\n        if let idx = s1.index(of: c) {\n            s1.remove(at:\
    \ idx)\n        } else {\n            return false\n        }\n    }\n    return\
    \ true", "    var s0 = s0\n    var s1 = s1\n    while !s0.isEmpty {\n        if\
    \ let c = s0.popFirst() {\n            if let i = s1.firstIndex(of: c) {\n   \
    \             s1.remove(at: i)\n            } else {\n                return false\n\
    \            }\n        }\n    }\n    return s1.isEmpty", "    var s0 = s0\n \
    \   var s1 = s1\n    for c in s0 {\n        if let i = s1.firstIndex(of: c) {\n\
    \            s1.remove(at: i)\n        } else {\n            return false\n  \
    \      }\n    }\n    return true", "    var chars = [Character: Int]()\n    for\
    \ c in s0 {\n        if let count = chars[c] {\n            chars[c] = count +\
    \ 1\n        } else {\n            chars[c] = 1\n        }\n    }\n    for c in\
    \ s1 {\n        if let count = chars[c] {\n            chars[c] = count - 1\n\
    \        } else {\n            return false\n        }\n    }\n    for (_, count)\
    \ in chars {\n        if count != 0 {\n            return false\n        }\n \
    \   }\n    return true", "    var d0 = [Character: Int]()\n    var d1 = [Character:\
    \ Int]()\n    for c in s0 {\n        if let n = d0[c] {\n            d0[c] = n\
    \ + 1\n        } else {\n            d0[c] = 1\n        }\n    }\n    for c in\
    \ s1 {\n        if let n = d1[c] {\n            d1[c] = n + 1\n        } else\
    \ {\n            d1[c] = 1\n        }\n    }\n    return d0 == d1", "    var s0\
    \ = s0\n    var s1 = s1\n    for c in s0 {\n        if let i = s1.firstIndex(of:\
    \ c) {\n            s1.remove(at: i)\n        } else {\n            return false\n\
    \        }\n    }\n    return true", "    var s0 = s0\n    var s1 = s1\n    for\
    \ c in s0 {\n        if let i = s1.firstIndex(of: c) {\n            s1.remove(at:\
    \ i)\n        } else {\n            return false\n        }\n    }\n    return\
    \ true", "    var d0 = [Character: Int]()\n    var d1 = [Character: Int]()\n \
    \   for c in s0 {\n        if let count = d0[c] {\n            d0[c] = count +\
    \ 1\n        } else {\n            d0[c] = 1\n        }\n    }\n    for c in s1\
    \ {\n        if let count = d1[c] {\n            d1[c] = count + 1\n        }\
    \ else {\n            d1[c] = 1\n        }\n    }\n    return d0 == d1", "   \
    \ var s0 = s0\n    var s1 = s1\n    if s0.count != s1.count {\n        return\
    \ false\n    }\n    for c in s0 {\n        if let i = s1.firstIndex(of: c) {\n\
    \            s1.remove(at: i)\n        } else {\n            return false\n  \
    \      }\n    }\n    return true", "    var c0 = s0.characters.sort()\n    var\
    \ c1 = s1.characters.sort()\n    return c0 == c1", "    var d0 = [Character: Int]()\n\
    \    var d1 = [Character: Int]()\n    for c in s0 {\n        d0[c] = (d0[c] ??\
    \ 0) + 1\n    }\n    for c in s1 {\n        d1[c] = (d1[c] ?? 0) + 1\n    }\n\
    \    return d0 == d1", "    var s0 = s0\n    var s1 = s1\n    for c in s0 {\n\
    \        if let i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n   \
    \     } else {\n            return false\n        }\n    }\n    return true",
  "    var s0 = s0\n    var s1 = s1\n    for c in s0 {\n        if let i = s1.firstIndex(of:\
    \ c) {\n            s1.remove(at: i)\n        } else {\n            return false\n\
    \        }\n    }\n    return true"]
stop_tokens:
- "\n}"
