name: HumanEval_116_sort_array
language: swift
prompt: "\n/// In this Kata, you have to sort an array of non-negative integers according\
  \ to\n/// number of ones in their binary representation in ascending order.\n///\
  \ For similar number of ones, sort based on decimal value.\n/// It must be implemented\
  \ like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n/// >>> sort_array([-2,\
  \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n/// >>> sort_array([1, 0, 2, 3, 4])\
  \ [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int]) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1,\
  \ 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5,\
  \ -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
  \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7,\
  \ 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6,\
  \ 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16,\
  \ 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4,\
  \ 8, 16, 32])"
completions: ["    return arr.sorted {\n        let a = String($0, radix: 2).filter\
    \ { $0 == \"1\" }.count\n        let b = String($1, radix: 2).filter { $0 == \"\
    1\" }.count\n        return a == b ? $0 < $1 : a < b\n    }", "    return arr.sorted\
    \ {\n        let a = String($0, radix: 2)\n        let b = String($1, radix: 2)\n\
    \        return a.filter { $0 == \"1\" }.count == b.filter { $0 == \"1\" }.count\
    \ ? $0 < $1 : a.filter { $0 == \"1\" }.count < b.filter { $0 == \"1\" }.count\n\
    \    }", "    return arr.sorted {\n        let aOnes = $0.nonzeroBitCount\n  \
    \      let bOnes = $1.nonzeroBitCount\n        if aOnes == bOnes {\n         \
    \   return $0 < $1\n        }\n        return aOnes < bOnes\n    }", "    return\
    \ arr.sorted { (a, b) -> Bool in\n        let aBinary = String(a, radix: 2)\n\
    \        let bBinary = String(b, radix: 2)\n        let aOnes = aBinary.filter\
    \ { $0 == \"1\" }.count\n        let bOnes = bBinary.filter { $0 == \"1\" }.count\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }", "    return arr.sorted { (a, b) -> Bool in\n        let\
    \ aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n        if\
    \ aOnes == bOnes {\n            return a < b\n        }\n        return aOnes\
    \ < bOnes\n    }", "    return arr.sorted { (a, b) -> Bool in\n        let aOnes\
    \ = a.numberOfOnes\n        let bOnes = b.numberOfOnes\n        if aOnes == bOnes\
    \ {\n            return a < b\n        }\n        return aOnes < bOnes\n    }",
  "    return arr.sorted { (a, b) -> Bool in\n        let aBinary = String(a, radix:\
    \ 2)\n        let bBinary = String(b, radix: 2)\n        if aBinary.characters.filter({\
    \ $0 == \"1\" }).count == bBinary.characters.filter({ $0 == \"1\" }).count {\n\
    \            return a < b\n        }\n        return aBinary.characters.filter({\
    \ $0 == \"1\" }).count < bBinary.characters.filter({ $0 == \"1\" }).count\n  \
    \  }", "    return arr.sorted {\n        let a = String($0, radix: 2)\n      \
    \  let b = String($1, radix: 2)\n        if a.filter({ $0 == \"1\" }).count ==\
    \ b.filter({ $0 == \"1\" }).count {\n            return $0 < $1\n        }\n \
    \       return a.filter({ $0 == \"1\" }).count < b.filter({ $0 == \"1\" }).count\n\
    \    }", "    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }", "    return\
    \ arr.sorted(by: {\n        let a = String($0, radix: 2)\n        let b = String($1,\
    \ radix: 2)\n        return a.filter({ $0 == \"1\" }).count < b.filter({ $0 ==\
    \ \"1\" }).count\n    })", "    return arr.sorted { (a, b) -> Bool in\n      \
    \  let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n    \
    \    if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }", "    var sorted = arr.sorted { (a, b) -> Bool in\n  \
    \      let aBinary = String(a, radix: 2)\n        let bBinary = String(b, radix:\
    \ 2)\n        return aBinary.filter { $0 == \"1\" }.count < bBinary.filter { $0\
    \ == \"1\" }.count\n    }\n    sorted.sort { (a, b) -> Bool in\n        let aBinary\
    \ = String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n        return\
    \ aBinary.filter { $0 == \"1\" }.count == bBinary.filter { $0 == \"1\" }.count\
    \ ? a < b : false\n    }\n    return sorted", "    return arr.sorted(by: {\n \
    \       let a = String($0, radix: 2).filter({ $0 == \"1\" }).count\n        let\
    \ b = String($1, radix: 2).filter({ $0 == \"1\" }).count\n        return a ==\
    \ b ? $0 < $1 : a < b\n    })", "    return arr.sorted { (a, b) -> Bool in\n \
    \       let aBinary = String(a, radix: 2)\n        let bBinary = String(b, radix:\
    \ 2)\n        let aOnes = aBinary.filter { $0 == \"1\" }.count\n        let bOnes\
    \ = bBinary.filter { $0 == \"1\" }.count\n        if aOnes == bOnes {\n      \
    \      return a < b\n        }\n        return aOnes < bOnes\n    }", "    return\
    \ arr.sorted(by: { (a, b) -> Bool in\n        let a1 = String(a, radix: 2).filter\
    \ { $0 == \"1\" }.count\n        let b1 = String(b, radix: 2).filter { $0 == \"\
    1\" }.count\n        return a1 < b1 || (a1 == b1 && a < b)\n    })", "    return\
    \ arr.sorted {\n        let a = String($0, radix: 2)\n        let b = String($1,\
    \ radix: 2)\n        return a.filter { $0 == \"1\" }.count == b.filter { $0 ==\
    \ \"1\" }.count ? $0 < $1 : a.filter { $0 == \"1\" }.count < b.filter { $0 ==\
    \ \"1\" }.count\n    }", "    return arr.sorted { (a, b) -> Bool in\n        let\
    \ aOnes = a.onesInBinary()\n        let bOnes = b.onesInBinary()\n        if aOnes\
    \ == bOnes {\n            return a < b\n        }\n        return aOnes < bOnes\n\
    \    }", "    return arr.sorted { (a, b) -> Bool in\n        let aBinary = String(a,\
    \ radix: 2)\n        let bBinary = String(b, radix: 2)\n        let aOnes = aBinary.filter\
    \ { $0 == \"1\" }.count\n        let bOnes = bBinary.filter { $0 == \"1\" }.count\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }", "    return arr.sorted {\n        let a = String($0,\
    \ radix: 2).filter { $0 == \"1\" }.count\n        let b = String($1, radix: 2).filter\
    \ { $0 == \"1\" }.count\n        return a == b ? $0 < $1 : a < b\n    }", "  \
    \  return arr.sorted { (a, b) -> Bool in\n        let aBinary = String(a, radix:\
    \ 2)\n        let bBinary = String(b, radix: 2)\n        let aOnes = aBinary.filter\
    \ { $0 == \"1\" }.count\n        let bOnes = bBinary.filter { $0 == \"1\" }.count\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }", "    return arr.sorted { (a, b) -> Bool in\n        let\
    \ aBinary = String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n \
    \       let aOnes = aBinary.filter { $0 == \"1\" }.count\n        let bOnes =\
    \ bBinary.filter { $0 == \"1\" }.count\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }", "    return\
    \ arr.sorted { (a, b) -> Bool in\n        let aBinary = String(a, radix: 2)\n\
    \        let bBinary = String(b, radix: 2)\n        let aOnes = aBinary.filter\
    \ { $0 == \"1\" }.count\n        let bOnes = bBinary.filter { $0 == \"1\" }.count\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }", "    return arr.sorted {\n        let a = String($0,\
    \ radix: 2).filter { $0 == \"1\" }.count\n        let b = String($1, radix: 2).filter\
    \ { $0 == \"1\" }.count\n        return a == b ? $0 < $1 : a < b\n    }", "  \
    \  return arr.sorted(by: { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    })", "    return\
    \ arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n    \
    \    let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n            return\
    \ a < b\n        }\n        return aOnes < bOnes\n    }", "    return arr.sorted\
    \ { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n        let bOnes\
    \ = b.nonzeroBitCount\n        if aOnes == bOnes {\n            return a < b\n\
    \        }\n        return aOnes < bOnes\n    }", "    return arr.sorted(by: {\
    \ (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n        let bOnes\
    \ = b.nonzeroBitCount\n        if aOnes == bOnes {\n            return a < b\n\
    \        }\n        return aOnes < bOnes\n    })", "    return arr.sorted { (a,\
    \ b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }", "    return arr.sorted(by: { (a, b) -> Bool in\n    \
    \    let aBin = String(a, radix: 2)\n        let bBin = String(b, radix: 2)\n\
    \        if aBin.filter({ $0 == \"1\" }).count == bBin.filter({ $0 == \"1\" }).count\
    \ {\n            return a < b\n        }\n        return aBin.filter({ $0 == \"\
    1\" }).count < bBin.filter({ $0 == \"1\" }).count\n    })", "    return arr.sorted\
    \ { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n        let bOnes\
    \ = b.nonzeroBitCount\n        if aOnes == bOnes {\n            return a < b\n\
    \        }\n        return aOnes < bOnes\n    }", "    return arr.sorted(by: {\n\
    \        let a = String($0, radix: 2).filter { $0 == \"1\" }.count\n        let\
    \ b = String($1, radix: 2).filter { $0 == \"1\" }.count\n        return a == b\
    \ ? $0 < $1 : a < b\n    })", "    return arr.sorted(by: { (a, b) -> Bool in\n\
    \        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    })", "    return arr.sorted(by: { (a, b) -> Bool in\n   \
    \     let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n \
    \       if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    })", "    return arr.sorted { (a, b) -> Bool in\n       \
    \ let aBinary = String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n\
    \        if aBinary.filter({ $0 == \"1\" }).count == bBinary.filter({ $0 == \"\
    1\" }).count {\n            return a < b\n        }\n        return aBinary.filter({\
    \ $0 == \"1\" }).count < bBinary.filter({ $0 == \"1\" }).count\n    }", "    return\
    \ arr.sorted { (a, b) -> Bool in\n        let aBinary = String(a, radix: 2)\n\
    \        let bBinary = String(b, radix: 2)\n        let aOnes = aBinary.filter\
    \ { $0 == \"1\" }.count\n        let bOnes = bBinary.filter { $0 == \"1\" }.count\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }", "    return arr.sorted(by: {\n        let count1 = $0.nonzeroBitCount\n\
    \        let count2 = $1.nonzeroBitCount\n        if count1 == count2 {\n    \
    \        return $0 < $1\n        }\n        return count1 < count2\n    })", " \
    \   return arr.sorted { (a, b) -> Bool in\n        let aBinary = String(a, radix:\
    \ 2)\n        let bBinary = String(b, radix: 2)\n        let aOnes = aBinary.filter\
    \ { $0 == \"1\" }.count\n        let bOnes = bBinary.filter { $0 == \"1\" }.count\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }", "    return arr.sorted { (a, b) -> Bool in\n        let\
    \ aOnes = a.numberOfOnes\n        let bOnes = b.numberOfOnes\n        if aOnes\
    \ == bOnes {\n            return a < b\n        }\n        return aOnes < bOnes\n\
    \    }", "    return arr.sorted(by: { (a, b) -> Bool in\n        let aOnes = numberOfOnes(a)\n\
    \        let bOnes = numberOfOnes(b)\n        if aOnes == bOnes {\n          \
    \  return a < b\n        }\n        return aOnes < bOnes\n    })", "    return\
    \ arr.sorted(by: {\n        let a = String($0, radix: 2).filter { $0 == \"1\"\
    \ }.count\n        let b = String($1, radix: 2).filter { $0 == \"1\" }.count\n\
    \        return a == b ? $0 < $1 : a < b\n    })", "    return arr.sorted { (a,\
    \ b) -> Bool in\n        let aBinary = String(a, radix: 2)\n        let bBinary\
    \ = String(b, radix: 2)\n        let aOnes = aBinary.filter { $0 == \"1\" }.count\n\
    \        let bOnes = bBinary.filter { $0 == \"1\" }.count\n        if aOnes ==\
    \ bOnes {\n            return a < b\n        }\n        return aOnes < bOnes\n\
    \    }", "    return arr.sorted { (a, b) -> Bool in\n        let aBinary = String(a,\
    \ radix: 2)\n        let bBinary = String(b, radix: 2)\n        if aBinary.filter({\
    \ $0 == \"1\" }).count == bBinary.filter({ $0 == \"1\" }).count {\n          \
    \  return a < b\n        }\n        return aBinary.filter({ $0 == \"1\" }).count\
    \ < bBinary.filter({ $0 == \"1\" }).count\n    }", "    return arr.sorted(by:\
    \ {\n        let x = String($0, radix: 2).filter { $0 == \"1\" }.count\n     \
    \   let y = String($1, radix: 2).filter { $0 == \"1\" }.count\n        return\
    \ x == y ? $0 < $1 : x < y\n    })", "    return arr.sorted(by: {\n        let\
    \ a = String($0, radix: 2).filter { $0 == \"1\" }.count\n        let b = String($1,\
    \ radix: 2).filter { $0 == \"1\" }.count\n        return a == b ? $0 < $1 : a\
    \ < b\n    })", "    return arr.sorted(by: { (a, b) -> Bool in\n        let aOnes\
    \ = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n        if aOnes\
    \ == bOnes {\n            return a < b\n        }\n        return aOnes < bOnes\n\
    \    })", "    let sorted = arr.sorted { (a, b) -> Bool in\n        let aBinary\
    \ = String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n        let\
    \ aOnes = aBinary.filter { $0 == \"1\" }.count\n        let bOnes = bBinary.filter\
    \ { $0 == \"1\" }.count\n        if aOnes == bOnes {\n            return a < b\n\
    \        }\n        return aOnes < bOnes\n    }\n    return sorted", "    return\
    \ arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n    \
    \    let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n            return\
    \ a < b\n        }\n        return aOnes < bOnes\n    }", "    return arr.sorted\
    \ { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n        let bOnes\
    \ = b.nonzeroBitCount\n        if aOnes == bOnes {\n            return a < b\n\
    \        }\n        return aOnes < bOnes\n    }", "    return arr.sorted(by: {\
    \ (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n        let bOnes\
    \ = b.nonzeroBitCount\n        if aOnes == bOnes {\n            return a < b\n\
    \        }\n        return aOnes < bOnes\n    })", "    return arr.sorted { (a,\
    \ b) -> Bool in\n        let aBinary = String(a, radix: 2)\n        let bBinary\
    \ = String(b, radix: 2)\n        let aOnes = aBinary.filter { $0 == \"1\" }.count\n\
    \        let bOnes = bBinary.filter { $0 == \"1\" }.count\n        if aOnes ==\
    \ bOnes {\n            return a < b\n        }\n        return aOnes < bOnes\n\
    \    }", "    return arr.sorted {\n        let a = $0.nonzeroBitCount\n      \
    \  let b = $1.nonzeroBitCount\n        return a == b ? $0 < $1 : a < b\n    }",
  "    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }", "    return\
    \ arr.sorted(by: { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    })", "    return\
    \ arr.sorted {\n        let a = String($0, radix: 2)\n        let b = String($1,\
    \ radix: 2)\n        if a.filter { $0 == \"1\" }.count == b.filter { $0 == \"\
    1\" }.count {\n            return $0 < $1\n        }\n        return a.filter\
    \ { $0 == \"1\" }.count < b.filter { $0 == \"1\" }.count\n    }", "    return\
    \ arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n    \
    \    let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n            return\
    \ a < b\n        }\n        return aOnes < bOnes\n    }", "    return arr.sorted(by:\
    \ { (a, b) -> Bool in\n        let aBin = String(a, radix: 2)\n        let bBin\
    \ = String(b, radix: 2)\n        if aBin.filter({ $0 == \"1\" }).count == bBin.filter({\
    \ $0 == \"1\" }).count {\n            return a < b\n        }\n        return\
    \ aBin.filter({ $0 == \"1\" }).count < bBin.filter({ $0 == \"1\" }).count\n  \
    \  })", "    return arr.sorted {\n        let ones1 = $0.nonzeroBitCount\n   \
    \     let ones2 = $1.nonzeroBitCount\n        return ones1 == ones2 ? $0 < $1\
    \ : ones1 < ones2\n    }", "    return arr.sorted { (a, b) -> Bool in\n      \
    \  let aBinary = String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n\
    \        if aBinary.count == bBinary.count {\n            return a < b\n     \
    \   }\n        return aBinary.count < bBinary.count\n    }", "    return arr.sorted\
    \ {\n        let ones1 = $0.nonzeroBitCount\n        let ones2 = $1.nonzeroBitCount\n\
    \        return ones1 == ones2 ? $0 < $1 : ones1 < ones2\n    }", "    return\
    \ arr.sorted {\n        let a = String($0, radix: 2).filter { $0 == \"1\" }.count\n\
    \        let b = String($1, radix: 2).filter { $0 == \"1\" }.count\n        return\
    \ a == b ? $0 < $1 : a < b\n    }", "    return arr.sorted(by: {\n        let\
    \ a = String($0, radix: 2).filter { $0 == \"1\" }.count\n        let b = String($1,\
    \ radix: 2).filter { $0 == \"1\" }.count\n        return a == b ? $0 < $1 : a\
    \ < b\n    })", "    return arr.sorted { (lhs, rhs) -> Bool in\n        let lhsOnes\
    \ = lhs.onesCount\n        let rhsOnes = rhs.onesCount\n        if lhsOnes ==\
    \ rhsOnes {\n            return lhs < rhs\n        }\n        return lhsOnes <\
    \ rhsOnes\n    }", "    return arr.sorted(by: { (a, b) -> Bool in\n        let\
    \ aBinary = String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n \
    \       if aBinary.filter({ $0 == \"1\" }).count == bBinary.filter({ $0 == \"\
    1\" }).count {\n            return a < b\n        }\n        return aBinary.filter({\
    \ $0 == \"1\" }).count < bBinary.filter({ $0 == \"1\" }).count\n    })", "   \
    \ return arr.sorted {\n        let a = String($0, radix: 2).filter { $0 == \"\
    1\" }.count\n        let b = String($1, radix: 2).filter { $0 == \"1\" }.count\n\
    \        return a == b ? $0 < $1 : a < b\n    }", "    return arr.sorted { (a,\
    \ b) -> Bool in\n        let aBinary = String(a, radix: 2)\n        let bBinary\
    \ = String(b, radix: 2)\n        let aOnes = aBinary.filter { $0 == \"1\" }.count\n\
    \        let bOnes = bBinary.filter { $0 == \"1\" }.count\n        if aOnes ==\
    \ bOnes {\n            return a < b\n        }\n        return aOnes < bOnes\n\
    \    }", "    return arr.sorted { (lhs, rhs) -> Bool in\n        let lhsBinary\
    \ = String(lhs, radix: 2)\n        let rhsBinary = String(rhs, radix: 2)\n   \
    \     let lhsOnes = lhsBinary.filter { $0 == \"1\" }.count\n        let rhsOnes\
    \ = rhsBinary.filter { $0 == \"1\" }.count\n        if lhsOnes == rhsOnes {\n\
    \            return lhs < rhs\n        }\n        return lhsOnes < rhsOnes\n \
    \   }", "    var sorted = arr.sorted { (a, b) -> Bool in\n        let aOnes =\
    \ a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n        if aOnes ==\
    \ bOnes {\n            return a < b\n        }\n        return aOnes < bOnes\n\
    \    }\n    return sorted", "    return arr.sorted { (a, b) -> Bool in\n     \
    \   let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n   \
    \     if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }", "    return arr.sorted { (a, b) -> Bool in\n        let\
    \ aBinary = String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n \
    \       if aBinary.count == bBinary.count {\n            return a < b\n      \
    \  }\n        return aBinary.count < bBinary.count\n    }", "    return arr.sorted\
    \ { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n        let bOnes\
    \ = b.nonzeroBitCount\n        if aOnes == bOnes {\n            return a < b\n\
    \        }\n        return aOnes < bOnes\n    }", "    return arr.sorted { (a,\
    \ b) -> Bool in\n        let aBinary = String(a, radix: 2)\n        let bBinary\
    \ = String(b, radix: 2)\n        if aBinary.filter({ $0 == \"1\" }).count == bBinary.filter({\
    \ $0 == \"1\" }).count {\n            return a < b\n        }\n        return\
    \ aBinary.filter({ $0 == \"1\" }).count < bBinary.filter({ $0 == \"1\" }).count\n\
    \    }", "    return arr.sorted(by: {\n        let a = String($0, radix: 2).filter\
    \ { $0 == \"1\" }.count\n        let b = String($1, radix: 2).filter { $0 == \"\
    1\" }.count\n        return a == b ? $0 < $1 : a < b\n    })", "    return arr.sorted\
    \ {\n        let a = String($0, radix: 2).filter { $0 == \"1\" }.count\n     \
    \   let b = String($1, radix: 2).filter { $0 == \"1\" }.count\n        return\
    \ a < b || (a == b && $0 < $1)\n    }", "    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }", "    return arr.sorted { (a, b) -> Bool in\n        let\
    \ aBinary = String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n \
    \       let aOnes = aBinary.filter { $0 == \"1\" }.count\n        let bOnes =\
    \ bBinary.filter { $0 == \"1\" }.count\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }", "    return\
    \ arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n    \
    \    let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n            return\
    \ a < b\n        }\n        return aOnes < bOnes\n    }", "    return arr.sorted\
    \ { (a, b) -> Bool in\n        let aBinary = String(a, radix: 2)\n        let\
    \ bBinary = String(b, radix: 2)\n        let aOnes = aBinary.filter { $0 == \"\
    1\" }.count\n        let bOnes = bBinary.filter { $0 == \"1\" }.count\n      \
    \  if aOnes == bOnes {\n            return a < b\n        }\n        return aOnes\
    \ < bOnes\n    }", "    return arr.sorted { (a, b) -> Bool in\n        let aOnes\
    \ = String(a, radix: 2).filter { $0 == \"1\" }.count\n        let bOnes = String(b,\
    \ radix: 2).filter { $0 == \"1\" }.count\n        return aOnes == bOnes ? a <\
    \ b : aOnes < bOnes\n    }", "    return arr.sorted { (a, b) -> Bool in\n    \
    \    let aOnes = a.onesCount\n        let bOnes = b.onesCount\n        return\
    \ aOnes == bOnes ? a < b : aOnes < bOnes\n    }", "    return arr.sorted { (a,\
    \ b) -> Bool in\n        let aBinary = String(a, radix: 2)\n        let bBinary\
    \ = String(b, radix: 2)\n        let aOnes = aBinary.filter { $0 == \"1\" }.count\n\
    \        let bOnes = bBinary.filter { $0 == \"1\" }.count\n        if aOnes ==\
    \ bOnes {\n            return a < b\n        }\n        return aOnes < bOnes\n\
    \    }", "    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }", "    return\
    \ arr.sorted(by: { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    })", "    return\
    \ arr.sorted { (a, b) -> Bool in\n        let aBinary = String(a, radix: 2)\n\
    \        let bBinary = String(b, radix: 2)\n        let aOnes = aBinary.filter\
    \ { $0 == \"1\" }.count\n        let bOnes = bBinary.filter { $0 == \"1\" }.count\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }", "    return arr.sorted { (a, b) -> Bool in\n        let\
    \ aBinary = String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n \
    \       if aBinary.filter({ $0 == \"1\" }).count == bBinary.filter({ $0 == \"\
    1\" }).count {\n            return a < b\n        }\n        return aBinary.filter({\
    \ $0 == \"1\" }).count < bBinary.filter({ $0 == \"1\" }).count\n    }", "    return\
    \ arr.sorted { (a, b) -> Bool in\n        let aBinary = String(a, radix: 2)\n\
    \        let bBinary = String(b, radix: 2)\n        let aOnes = aBinary.filter\
    \ { $0 == \"1\" }.count\n        let bOnes = bBinary.filter { $0 == \"1\" }.count\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }", "    return arr.sorted(by: {\n        let a = String($0,\
    \ radix: 2).filter { $0 == \"1\" }.count\n        let b = String($1, radix: 2).filter\
    \ { $0 == \"1\" }.count\n        return a == b ? $0 < $1 : a < b\n    })", " \
    \   return arr.sorted { (a, b) -> Bool in\n        let aOnes = String(a, radix:\
    \ 2).filter { $0 == \"1\" }.count\n        let bOnes = String(b, radix: 2).filter\
    \ { $0 == \"1\" }.count\n        return aOnes == bOnes ? a < b : aOnes < bOnes\n\
    \    }", "    return arr.sorted(by: {\n        let a = String($0, radix: 2)\n\
    \        let b = String($1, radix: 2)\n        if a.filter({ $0 == \"1\" }).count\
    \ == b.filter({ $0 == \"1\" }).count {\n            return $0 < $1\n        }\n\
    \        return a.filter({ $0 == \"1\" }).count < b.filter({ $0 == \"1\" }).count\n\
    \    })", "    return arr.sorted { (a, b) -> Bool in\n        let aBinary = String(a,\
    \ radix: 2)\n        let bBinary = String(b, radix: 2)\n        if aBinary.filter({\
    \ $0 == \"1\" }).count == bBinary.filter({ $0 == \"1\" }).count {\n          \
    \  return a < b\n        }\n        return aBinary.filter({ $0 == \"1\" }).count\
    \ < bBinary.filter({ $0 == \"1\" }).count\n    }", "    return arr.sorted { (a,\
    \ b) -> Bool in\n        let aBinary = String(a, radix: 2)\n        let bBinary\
    \ = String(b, radix: 2)\n        let aOnes = aBinary.filter { $0 == \"1\" }.count\n\
    \        let bOnes = bBinary.filter { $0 == \"1\" }.count\n        if aOnes ==\
    \ bOnes {\n            return a < b\n        }\n        return aOnes < bOnes\n\
    \    }", "    return arr.sorted { (a, b) -> Bool in\n        let aBinary = String(a,\
    \ radix: 2)\n        let bBinary = String(b, radix: 2)\n        let aOnes = aBinary.filter\
    \ { $0 == \"1\" }.count\n        let bOnes = bBinary.filter { $0 == \"1\" }.count\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }", "    return arr.sorted { (a, b) -> Bool in\n        let\
    \ aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n        if\
    \ aOnes == bOnes {\n            return a < b\n        }\n        return aOnes\
    \ < bOnes\n    }", "    return arr.sorted { (a, b) -> Bool in\n        let aOnes\
    \ = String(a, radix: 2).filter { $0 == \"1\" }.count\n        let bOnes = String(b,\
    \ radix: 2).filter { $0 == \"1\" }.count\n        return aOnes == bOnes ? a <\
    \ b : aOnes < bOnes\n    }", "    return arr.sorted { (a, b) -> Bool in\n    \
    \    let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n  \
    \      if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }", "    return arr.sorted { (lhs, rhs) -> Bool in\n    \
    \    let lhsBinary = String(lhs, radix: 2)\n        let rhsBinary = String(rhs,\
    \ radix: 2)\n        let lhsOnes = lhsBinary.filter { $0 == \"1\" }.count\n  \
    \      let rhsOnes = rhsBinary.filter { $0 == \"1\" }.count\n        if lhsOnes\
    \ == rhsOnes {\n            return lhs < rhs\n        }\n        return lhsOnes\
    \ < rhsOnes\n    }", "    var arr = arr\n    arr.sort {\n        if $0.nonzeroBitCount\
    \ == $1.nonzeroBitCount {\n            return $0 < $1\n        }\n        return\
    \ $0.nonzeroBitCount < $1.nonzeroBitCount\n    }\n    return arr", "    return\
    \ arr.sorted { (a, b) -> Bool in\n        let aBinary = String(a, radix: 2)\n\
    \        let bBinary = String(b, radix: 2)\n        if aBinary.filter({ $0 ==\
    \ \"1\" }).count == bBinary.filter({ $0 == \"1\" }).count {\n            return\
    \ a < b\n        }\n        return aBinary.filter({ $0 == \"1\" }).count < bBinary.filter({\
    \ $0 == \"1\" }).count\n    }", "    return arr.sorted(by: {\n        let a =\
    \ String($0, radix: 2).filter { $0 == \"1\" }.count\n        let b = String($1,\
    \ radix: 2).filter { $0 == \"1\" }.count\n        return a == b ? $0 < $1 : a\
    \ < b\n    })", "    return arr.sorted(by: {\n        let a = String($0, radix:\
    \ 2)\n        let b = String($1, radix: 2)\n        if a.filter({ $0 == \"1\"\
    \ }).count == b.filter({ $0 == \"1\" }).count {\n            return $0 < $1\n\
    \        }\n        return a.filter({ $0 == \"1\" }).count < b.filter({ $0 ==\
    \ \"1\" }).count\n    })", "    return arr.sorted { (a, b) -> Bool in\n      \
    \  let aOnes = String(a, radix: 2).filter { $0 == \"1\" }.count\n        let bOnes\
    \ = String(b, radix: 2).filter { $0 == \"1\" }.count\n        return aOnes ==\
    \ bOnes ? a < b : aOnes < bOnes\n    }", "    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aBinary = String(a, radix: 2)\n        let bBinary = String(b,\
    \ radix: 2)\n        if aBinary.filter({ $0 == \"1\" }).count == bBinary.filter({\
    \ $0 == \"1\" }).count {\n            return a < b\n        }\n        return\
    \ aBinary.filter({ $0 == \"1\" }).count < bBinary.filter({ $0 == \"1\" }).count\n\
    \    }", "    return arr.sorted(by: { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    })", "    return\
    \ arr.sorted { (a, b) -> Bool in\n        let aBinary = String(a, radix: 2)\n\
    \        let bBinary = String(b, radix: 2)\n        let aOnes = aBinary.filter\
    \ { $0 == \"1\" }.count\n        let bOnes = bBinary.filter { $0 == \"1\" }.count\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }", "    var arr = arr\n    arr.sort { (a, b) -> Bool in\n\
    \        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n    return arr", "    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }", "    return arr.sorted { (a, b) -> Bool in\n        let\
    \ aBinary = String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n \
    \       let aOnes = aBinary.filter { $0 == \"1\" }.count\n        let bOnes =\
    \ bBinary.filter { $0 == \"1\" }.count\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }", "    return\
    \ arr.sorted { (a, b) -> Bool in\n        let aBinary = String(a, radix: 2)\n\
    \        let bBinary = String(b, radix: 2)\n        let aOnes = aBinary.filter\
    \ { $0 == \"1\" }.count\n        let bOnes = bBinary.filter { $0 == \"1\" }.count\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }", "    return arr.sorted { (a, b) -> Bool in\n        let\
    \ a1 = a.nonzeroBitCount\n        let b1 = b.nonzeroBitCount\n        if a1 ==\
    \ b1 {\n            return a < b\n        }\n        return a1 < b1\n    }", " \
    \   return arr.sorted { (a, b) -> Bool in\n        let aBinary = String(a, radix:\
    \ 2)\n        let bBinary = String(b, radix: 2)\n        let aOnes = aBinary.filter\
    \ { $0 == \"1\" }.count\n        let bOnes = bBinary.filter { $0 == \"1\" }.count\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }", "    return arr.sorted { (a, b) -> Bool in\n        let\
    \ aBin = String(a, radix: 2)\n        let bBin = String(b, radix: 2)\n       \
    \ let aOnes = aBin.filter { $0 == \"1\" }.count\n        let bOnes = bBin.filter\
    \ { $0 == \"1\" }.count\n        if aOnes == bOnes {\n            return a < b\n\
    \        }\n        return aOnes < bOnes\n    }", "    return arr.sorted(by: {\n\
    \        let a = String($0, radix: 2).filter { $0 == \"1\" }.count\n        let\
    \ b = String($1, radix: 2).filter { $0 == \"1\" }.count\n        return a < b\
    \ || (a == b && $0 < $1)\n    })", "    return arr.sorted(by: {\n        let a\
    \ = $0\n        let b = $1\n        let aBinary = String(a, radix: 2)\n      \
    \  let bBinary = String(b, radix: 2)\n        let aOnes = aBinary.filter { $0\
    \ == \"1\" }.count\n        let bOnes = bBinary.filter { $0 == \"1\" }.count\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    })", "    return arr.sorted { (a, b) -> Bool in\n       \
    \ let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n     \
    \   if aOnes == bOnes {\n            return a < b\n        }\n        return aOnes\
    \ < bOnes\n    }", "    return arr.sorted(by: {\n        let a = String($0, radix:\
    \ 2).filter({ $0 == \"1\" }).count\n        let b = String($1, radix: 2).filter({\
    \ $0 == \"1\" }).count\n        return a == b ? $0 < $1 : a < b\n    })", "  \
    \  return arr.sorted(by: {\n        let a = String($0, radix: 2).filter({ $0 ==\
    \ \"1\" }).count\n        let b = String($1, radix: 2).filter({ $0 == \"1\" }).count\n\
    \        return a == b ? $0 < $1 : a < b\n    })", "    return arr.sorted(by:\
    \ { (a, b) -> Bool in\n        let aOnes = a.numberOfOnes\n        let bOnes =\
    \ b.numberOfOnes\n        if aOnes == bOnes {\n            return a < b\n    \
    \    }\n        return aOnes < bOnes\n    })", "    return arr.sorted(by: {\n\
    \        let ones1 = $0.nonzeroBitCount\n        let ones2 = $1.nonzeroBitCount\n\
    \        if ones1 == ones2 {\n            return $0 < $1\n        }\n        return\
    \ ones1 < ones2\n    })", "    return arr.sorted { (a, b) -> Bool in\n       \
    \ let aOnes = a.onesCount\n        let bOnes = b.onesCount\n        if aOnes ==\
    \ bOnes {\n            return a < b\n        }\n        return aOnes < bOnes\n\
    \    }", "    return arr.sorted { (a, b) -> Bool in\n        let aBinary = String(a,\
    \ radix: 2)\n        let bBinary = String(b, radix: 2)\n        let aOnes = aBinary.filter\
    \ { $0 == \"1\" }.count\n        let bOnes = bBinary.filter { $0 == \"1\" }.count\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }", "    return arr.sorted { (a, b) -> Bool in\n        let\
    \ aOnes = a.onesInBinary\n        let bOnes = b.onesInBinary\n        if aOnes\
    \ == bOnes {\n            return a < b\n        }\n        return aOnes < bOnes\n\
    \    }", "    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }", "    return\
    \ arr.sorted { (a, b) -> Bool in\n        let aBinary = String(a, radix: 2)\n\
    \        let bBinary = String(b, radix: 2)\n        let aOnes = aBinary.filter\
    \ { $0 == \"1\" }.count\n        let bOnes = bBinary.filter { $0 == \"1\" }.count\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }", "    return arr.sorted { (a, b) -> Bool in\n        let\
    \ aBinary = String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n \
    \       let aOnes = aBinary.filter { $0 == \"1\" }.count\n        let bOnes =\
    \ bBinary.filter { $0 == \"1\" }.count\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }", "    return\
    \ arr.sorted(by: { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    })", "    return\
    \ arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n    \
    \    let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n            return\
    \ a < b\n        }\n        return aOnes < bOnes\n    }", "    return arr.sorted\
    \ { (a, b) -> Bool in\n        let aOnes = String(a, radix: 2).filter { $0 ==\
    \ \"1\" }.count\n        let bOnes = String(b, radix: 2).filter { $0 == \"1\"\
    \ }.count\n        return aOnes == bOnes ? a < b : aOnes < bOnes\n    }", "  \
    \  return arr.sorted {\n        if $0.nonzeroBitCount == $1.nonzeroBitCount {\n\
    \            return $0 < $1\n        }\n        return $0.nonzeroBitCount < $1.nonzeroBitCount\n\
    \    }", "    return arr.sorted(by: { (a, b) -> Bool in\n        let aOnes = a.onesCount\n\
    \        let bOnes = b.onesCount\n        if aOnes == bOnes {\n            return\
    \ a < b\n        }\n        return aOnes < bOnes\n    })", "    return arr.sorted\
    \ { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n        let bOnes\
    \ = b.nonzeroBitCount\n        if aOnes == bOnes {\n            return a < b\n\
    \        }\n        return aOnes < bOnes\n    }", "    return arr.sorted { (a,\
    \ b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }", "    return arr.sorted { (a, b) -> Bool in\n        let\
    \ aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n        if\
    \ aOnes == bOnes {\n            return a < b\n        }\n        return aOnes\
    \ < bOnes\n    }", "    return arr.sorted(by: { (a, b) -> Bool in\n        let\
    \ aBinary = String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n \
    \       if aBinary.filter({ $0 == \"1\" }).count == bBinary.filter({ $0 == \"\
    1\" }).count {\n            return a < b\n        }\n        return aBinary.filter({\
    \ $0 == \"1\" }).count < bBinary.filter({ $0 == \"1\" }).count\n    })", "   \
    \ return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.onesCount\n   \
    \     let bOnes = b.onesCount\n        if aOnes == bOnes {\n            return\
    \ a < b\n        }\n        return aOnes < bOnes\n    }", "    return arr.sorted\
    \ { (a, b) -> Bool in\n        let aOnes = a.onesCount\n        let bOnes = b.onesCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }", "    return arr.sorted(by: {\n        let a = String($0,\
    \ radix: 2).filter { $0 == \"1\" }.count\n        let b = String($1, radix: 2).filter\
    \ { $0 == \"1\" }.count\n        return a == b ? $0 < $1 : a < b\n    })", " \
    \   return arr.sorted(by: { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    })", "    return\
    \ arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n    \
    \    let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n            return\
    \ a < b\n        }\n        return aOnes < bOnes\n    }", "    return arr.sorted\
    \ {\n        let a = String($0, radix: 2).filter { $0 == \"1\" }.count\n     \
    \   let b = String($1, radix: 2).filter { $0 == \"1\" }.count\n        return\
    \ a == b ? $0 < $1 : a < b\n    }", "    return arr.sorted { (a, b) -> Bool in\n\
    \        let aOnes = a.binary.filter { $0 == \"1\" }.count\n        let bOnes\
    \ = b.binary.filter { $0 == \"1\" }.count\n        if aOnes == bOnes {\n     \
    \       return a < b\n        }\n        return aOnes < bOnes\n    }", "    return\
    \ arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n    \
    \    let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n            return\
    \ a < b\n        }\n        return aOnes < bOnes\n    }", "    return arr.sorted(by:\
    \ {\n        let a = String($0, radix: 2).filter { $0 == \"1\" }.count\n     \
    \   let b = String($1, radix: 2).filter { $0 == \"1\" }.count\n        return\
    \ a == b ? $0 < $1 : a < b\n    })", "    return arr.sorted { (a, b) -> Bool in\n\
    \        let aOnes = a.onesInBinary()\n        let bOnes = b.onesInBinary()\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }", "    return arr.sorted { (a, b) -> Bool in\n        let\
    \ aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n        if\
    \ aOnes == bOnes {\n            return a < b\n        }\n        return aOnes\
    \ < bOnes\n    }", "    return arr.sorted { (a, b) -> Bool in\n        let aOnes\
    \ = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n        if aOnes\
    \ == bOnes {\n            return a < b\n        }\n        return aOnes < bOnes\n\
    \    }", "    return arr.sorted(by: { (lhs, rhs) -> Bool in\n        let lhsOnes\
    \ = lhs.nonzeroBitCount\n        let rhsOnes = rhs.nonzeroBitCount\n        if\
    \ lhsOnes == rhsOnes {\n            return lhs < rhs\n        }\n        return\
    \ lhsOnes < rhsOnes\n    })", "    return arr.sorted {\n        let ones1 = $0.nonzeroBitCount\n\
    \        let ones2 = $1.nonzeroBitCount\n        if ones1 == ones2 {\n       \
    \     return $0 < $1\n        }\n        return ones1 < ones2\n    }", "    return\
    \ arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n    \
    \    let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n            return\
    \ a < b\n        }\n        return aOnes < bOnes\n    }", "    return arr.sorted\
    \ { (a, b) -> Bool in\n        let aBinary = String(a, radix: 2)\n        let\
    \ bBinary = String(b, radix: 2)\n        let aOnes = aBinary.filter { $0 == \"\
    1\" }.count\n        let bOnes = bBinary.filter { $0 == \"1\" }.count\n      \
    \  if aOnes == bOnes {\n            return a < b\n        }\n        return aOnes\
    \ < bOnes\n    }", "    return arr.sorted { (a, b) -> Bool in\n        let aOnes\
    \ = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n        if aOnes\
    \ == bOnes {\n            return a < b\n        }\n        return aOnes < bOnes\n\
    \    }", "    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }", "    return\
    \ arr.sorted(by: {\n        let a = String($0, radix: 2).filter { $0 == \"1\"\
    \ }.count\n        let b = String($1, radix: 2).filter { $0 == \"1\" }.count\n\
    \        return a == b ? $0 < $1 : a < b\n    })", "    return arr.sorted(by:\
    \ { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n        let bOnes\
    \ = b.nonzeroBitCount\n        if aOnes == bOnes {\n            return a < b\n\
    \        }\n        return aOnes < bOnes\n    })", "    return arr.sorted { (a,\
    \ b) -> Bool in\n        let aBinary = String(a, radix: 2)\n        let bBinary\
    \ = String(b, radix: 2)\n        let aCount = aBinary.filter { $0 == \"1\" }.count\n\
    \        let bCount = bBinary.filter { $0 == \"1\" }.count\n        if aCount\
    \ == bCount {\n            return a < b\n        }\n        return aCount < bCount\n\
    \    }", "    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.numberOfOnes\n\
    \        let bOnes = b.numberOfOnes\n        if aOnes == bOnes {\n           \
    \ return a < b\n        }\n        return aOnes < bOnes\n    }", "    return arr.sorted\
    \ { (a, b) -> Bool in\n        let aOnes = a.onesCount\n        let bOnes = b.onesCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }", "    return arr.sorted { (a, b) -> Bool in\n        let\
    \ aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n        if\
    \ aOnes == bOnes {\n            return a < b\n        }\n        return aOnes\
    \ < bOnes\n    }", "    return arr.sorted { (a, b) -> Bool in\n        let aOnes\
    \ = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n        if aOnes\
    \ == bOnes {\n            return a < b\n        }\n        return aOnes < bOnes\n\
    \    }", "    return arr.sorted(by: {\n        let a = String($0, radix: 2).filter\
    \ { $0 == \"1\" }.count\n        let b = String($1, radix: 2).filter { $0 == \"\
    1\" }.count\n        return a == b ? $0 < $1 : a < b\n    })", "    return arr.sorted\
    \ { (a, b) -> Bool in\n        let aOnes = String(a, radix: 2).filter { $0 ==\
    \ \"1\" }.count\n        let bOnes = String(b, radix: 2).filter { $0 == \"1\"\
    \ }.count\n        return aOnes == bOnes ? a < b : aOnes < bOnes\n    }", "  \
    \  return arr.sorted {\n        let a = String($0, radix: 2)\n        let b =\
    \ String($1, radix: 2)\n        if a.filter({ $0 == \"1\" }).count == b.filter({\
    \ $0 == \"1\" }).count {\n            return $0 < $1\n        }\n        return\
    \ a.filter({ $0 == \"1\" }).count < b.filter({ $0 == \"1\" }).count\n    }", " \
    \   var ones = [Int]()\n    var zeros = [Int]()\n    for i in arr {\n        if\
    \ i.nonzeroBitCount == 0 {\n            zeros.append(i)\n        } else {\n  \
    \          ones.append(i)\n        }\n    }\n    ones.sort()\n    zeros.sort()\n\
    \    return ones + zeros", "    return arr.sorted { (a, b) -> Bool in\n      \
    \  let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n    \
    \    if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }", "    return arr.sorted { (a, b) -> Bool in\n        let\
    \ aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n        if\
    \ aOnes == bOnes {\n            return a < b\n        }\n        return aOnes\
    \ < bOnes\n    }", "    let sorted = arr.sorted { (a, b) -> Bool in\n        let\
    \ aOnes = a.onesCount\n        let bOnes = b.onesCount\n        if aOnes == bOnes\
    \ {\n            return a < b\n        }\n        return aOnes < bOnes\n    }\n\
    \    return sorted", "    return arr.sorted {\n        let a = String($0, radix:\
    \ 2)\n        let b = String($1, radix: 2)\n        if a.filter({ $0 == \"1\"\
    \ }).count == b.filter({ $0 == \"1\" }).count {\n            return $0 < $1\n\
    \        }\n        return a.filter({ $0 == \"1\" }).count < b.filter({ $0 ==\
    \ \"1\" }).count\n    }", "    return arr.sorted {\n        let a = String($0,\
    \ radix: 2).filter { $0 == \"1\" }.count\n        let b = String($1, radix: 2).filter\
    \ { $0 == \"1\" }.count\n        return a == b ? $0 < $1 : a < b\n    }", "  \
    \  return arr.sorted(by: {\n        let a = $0.nonzeroBitCount\n        let b\
    \ = $1.nonzeroBitCount\n        return a == b ? $0 < $1 : a < b\n    })", "  \
    \  return arr.sorted { (a, b) -> Bool in\n        let aBinary = String(a, radix:\
    \ 2)\n        let bBinary = String(b, radix: 2)\n        if aBinary.filter({ $0\
    \ == \"1\" }).count == bBinary.filter({ $0 == \"1\" }).count {\n            return\
    \ a < b\n        }\n        return aBinary.filter({ $0 == \"1\" }).count < bBinary.filter({\
    \ $0 == \"1\" }).count\n    }", "    return arr.sorted(by: { (a, b) -> Bool in\n\
    \        let aOnes = String(a, radix: 2).filter({ $0 == \"1\" }).count\n     \
    \   let bOnes = String(b, radix: 2).filter({ $0 == \"1\" }).count\n        if\
    \ aOnes == bOnes {\n            return a < b\n        }\n        return aOnes\
    \ < bOnes\n    })", "    return arr.sorted { (a, b) -> Bool in\n        let aOnes\
    \ = a.binary.filter { $0 == \"1\" }.count\n        let bOnes = b.binary.filter\
    \ { $0 == \"1\" }.count\n        if aOnes == bOnes {\n            return a < b\n\
    \        }\n        return aOnes < bOnes\n    }", "    return arr.sorted { (a,\
    \ b) -> Bool in\n        let a1 = a.numberOfOnes\n        let b1 = b.numberOfOnes\n\
    \        if a1 == b1 {\n            return a < b\n        }\n        return a1\
    \ < b1\n    }", "    return arr.sorted(by: { (a, b) -> Bool in\n        let aOnes\
    \ = String(a, radix: 2).filter { $0 == \"1\" }.count\n        let bOnes = String(b,\
    \ radix: 2).filter { $0 == \"1\" }.count\n        return aOnes == bOnes ? a <\
    \ b : aOnes < bOnes\n    })", "    return arr.sorted { (a, b) -> Bool in\n   \
    \     let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n \
    \       if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }", "    return arr.sorted { (a, b) -> Bool in\n        let\
    \ a1 = a.nonzeroBitCount\n        let b1 = b.nonzeroBitCount\n        if a1 ==\
    \ b1 {\n            return a < b\n        }\n        return a1 < b1\n    }", " \
    \   return arr.sorted(by: {\n        let a = String($0, radix: 2).filter { $0\
    \ == \"1\" }.count\n        let b = String($1, radix: 2).filter { $0 == \"1\"\
    \ }.count\n        return a == b ? $0 < $1 : a < b\n    })", "    return arr.sorted\
    \ {\n        let a = String($0, radix: 2)\n        let b = String($1, radix: 2)\n\
    \        if a.filter({ $0 == \"1\" }).count == b.filter({ $0 == \"1\" }).count\
    \ {\n            return $0 < $1\n        }\n        return a.filter({ $0 == \"\
    1\" }).count < b.filter({ $0 == \"1\" }).count\n    }", "    return arr.sorted\
    \ { (a, b) -> Bool in\n        let onesA = String(a, radix: 2).filter { $0 ==\
    \ \"1\" }.count\n        let onesB = String(b, radix: 2).filter { $0 == \"1\"\
    \ }.count\n        if onesA == onesB {\n            return a < b\n        }\n\
    \        return onesA < onesB\n    }", "    return arr.sorted { (a, b) -> Bool\
    \ in\n        let aBinary = String(a, radix: 2)\n        let bBinary = String(b,\
    \ radix: 2)\n        let aOnes = aBinary.filter { $0 == \"1\" }.count\n      \
    \  let bOnes = bBinary.filter { $0 == \"1\" }.count\n        if aOnes == bOnes\
    \ {\n            return a < b\n        }\n        return aOnes < bOnes\n    }",
  "    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.onesInBinary\n\
    \        let bOnes = b.onesInBinary\n        return aOnes == bOnes ? a < b : aOnes\
    \ < bOnes\n    }", "    return arr.sorted { (a, b) -> Bool in\n        let aOnes\
    \ = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n        if aOnes\
    \ == bOnes {\n            return a < b\n        }\n        return aOnes < bOnes\n\
    \    }", "    return arr.sorted { (a, b) -> Bool in\n        let aCount = a.nonzeroBitCount\n\
    \        let bCount = b.nonzeroBitCount\n        if aCount == bCount {\n     \
    \       return a < b\n        }\n        return aCount < bCount\n    }", "   \
    \ return arr.sorted(by: {\n        let a = String($0, radix: 2).filter { $0 ==\
    \ \"1\" }.count\n        let b = String($1, radix: 2).filter { $0 == \"1\" }.count\n\
    \        return a == b ? $0 < $1 : a < b\n    })", "    return arr.sorted(by:\
    \ { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n        let bOnes\
    \ = b.nonzeroBitCount\n        if aOnes == bOnes {\n            return a < b\n\
    \        }\n        return aOnes < bOnes\n    })", "    return arr.sorted { (a,\
    \ b) -> Bool in\n        let aBinary = String(a, radix: 2)\n        let bBinary\
    \ = String(b, radix: 2)\n        let aOnes = aBinary.filter { $0 == \"1\" }.count\n\
    \        let bOnes = bBinary.filter { $0 == \"1\" }.count\n        if aOnes ==\
    \ bOnes {\n            return a < b\n        }\n        return aOnes < bOnes\n\
    \    }", "    return arr.sorted { (a, b) -> Bool in\n        let aBinary = String(a,\
    \ radix: 2)\n        let bBinary = String(b, radix: 2)\n        if aBinary.filter({\
    \ $0 == \"1\" }).count == bBinary.filter({ $0 == \"1\" }).count {\n          \
    \  return a < b\n        }\n        return aBinary.filter({ $0 == \"1\" }).count\
    \ < bBinary.filter({ $0 == \"1\" }).count\n    }", "    return arr.sorted(by:\
    \ {\n        let a = String($0, radix: 2)\n        let b = String($1, radix: 2)\n\
    \        if a.filter({ $0 == \"1\" }).count == b.filter({ $0 == \"1\" }).count\
    \ {\n            return $0 < $1\n        }\n        return a.filter({ $0 == \"\
    1\" }).count < b.filter({ $0 == \"1\" }).count\n    })", "    return arr.sorted(by:\
    \ { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n        let bOnes\
    \ = b.nonzeroBitCount\n        if aOnes == bOnes {\n            return a < b\n\
    \        }\n        return aOnes < bOnes\n    })", "    return arr.sorted { (a,\
    \ b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }", "    return arr.sorted { (a, b) -> Bool in\n        let\
    \ aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n        if\
    \ aOnes == bOnes {\n            return a < b\n        }\n        return aOnes\
    \ < bOnes\n    }", "    return arr.sorted { (a, b) -> Bool in\n        let aOnes\
    \ = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n        if aOnes\
    \ == bOnes {\n            return a < b\n        }\n        return aOnes < bOnes\n\
    \    }", "    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.onesCount\n\
    \        let bOnes = b.onesCount\n        if aOnes == bOnes {\n            return\
    \ a < b\n        }\n        return aOnes < bOnes\n    }", "    return arr.sorted(by:\
    \ { (a, b) -> Bool in\n        let aBinary = String(a, radix: 2)\n        let\
    \ bBinary = String(b, radix: 2)\n        if aBinary.filter({ $0 == \"1\" }).count\
    \ == bBinary.filter({ $0 == \"1\" }).count {\n            return a < b\n     \
    \   }\n        return aBinary.filter({ $0 == \"1\" }).count < bBinary.filter({\
    \ $0 == \"1\" }).count\n    })", "    return arr.sorted { (a, b) -> Bool in\n\
    \        let aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }", "    return arr.sorted { (a, b) -> Bool in\n        let\
    \ aOnes = a.numberOfOnes()\n        let bOnes = b.numberOfOnes()\n        if aOnes\
    \ == bOnes {\n            return a < b\n        }\n        return aOnes < bOnes\n\
    \    }", "    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }", "    return\
    \ arr.sorted { (a, b) -> Bool in\n        let aBin = String(a, radix: 2)\n   \
    \     let bBin = String(b, radix: 2)\n        let aOnes = aBin.filter { $0 ==\
    \ \"1\" }.count\n        let bOnes = bBin.filter { $0 == \"1\" }.count\n     \
    \   if aOnes == bOnes {\n            return a < b\n        }\n        return aOnes\
    \ < bOnes\n    }", "    return arr.sorted { (a, b) -> Bool in\n        let aOnes\
    \ = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n        if aOnes\
    \ == bOnes {\n            return a < b\n        }\n        return aOnes < bOnes\n\
    \    }", "    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }", "    return\
    \ arr.sorted { (a, b) -> Bool in\n        let aOnes = String(a, radix: 2).filter\
    \ { $0 == \"1\" }.count\n        let bOnes = String(b, radix: 2).filter { $0 ==\
    \ \"1\" }.count\n        return aOnes == bOnes ? a < b : aOnes < bOnes\n    }",
  "    return arr.sorted { (a, b) -> Bool in\n        let aBinary = String(a, radix:\
    \ 2)\n        let bBinary = String(b, radix: 2)\n        let aOnes = aBinary.filter\
    \ { $0 == \"1\" }.count\n        let bOnes = bBinary.filter { $0 == \"1\" }.count\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }"]
stop_tokens:
- "\n}"
