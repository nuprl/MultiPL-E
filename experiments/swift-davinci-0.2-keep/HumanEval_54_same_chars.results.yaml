language: swift
name: HumanEval_54_same_chars
results:
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    if s0.characters.count\
    \ != s1.characters.count {\n        return false\n    }\n    for c in s0.characters\
    \ {\n        if let i = s1.characters.index(of: c) {\n            s1.remove(at:\
    \ i)\n        } else {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\", s1: \"\
    dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\") ==\
    \ true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzz8w_6uy.swift:18:11: error: 'characters' is unavailable: Please\
    \ use String directly\n    if s0.characters.count != s1.characters.count {\n \
    \         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpzz8w_6uy.swift:18:34:\
    \ error: 'characters' is unavailable: Please use String directly\n    if s0.characters.count\
    \ != s1.characters.count {\n                                 ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpzz8w_6uy.swift:21:17: error: 'characters'\
    \ is unavailable: Please use String directly\n    for c in s0.characters {\n \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpzz8w_6uy.swift:22:23: error: 'characters' is unavailable: Please\
    \ use String directly\n        if let i = s1.characters.index(of: c) {\n     \
    \                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpzz8w_6uy.swift:22:34: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let i = s1.characters.index(of: c) {\n    \
    \                             ^\n/tmp/tmpzz8w_6uy.swift:22:34: note: use 'firstIndex(of:)'\
    \ instead\n        if let i = s1.characters.index(of: c) {\n                 \
    \                ^~~~~\n                                 firstIndex\n/tmp/tmpzz8w_6uy.swift:16:9:\
    \ warning: variable 's0' was never mutated; consider changing to 'let' constant\n\
    \    var s0 = s0\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.index(of: c) {\n            s1.remove(at: i)\n \
    \       } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmptasm9l24/tmptasm9l24.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad605289c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad604f80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad604f80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad604f7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptasm9l24                        0x00005611bae006b8 <unavailable> + 5816

    5    libc.so.6                          0x00002ad605475460 __libc_start_main +
    245

    6    tmptasm9l24                        0x00005611bae00129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var c0 = [Character](s0.characters)\n   \
    \ var c1 = [Character](s1.characters)\n    c0.sort()\n    c1.sort()\n    return\
    \ c0 == c1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\", s1: \"\
    dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\") ==\
    \ true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp28oto5db.swift:16:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    var c0 = [Character](s0.characters)\n             \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp28oto5db.swift:17:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    var c1 = [Character](s1.characters)\n             \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    if s0.count\
    \ != s1.count {\n        return false\n    }\n    for c in s0 {\n        if let\
    \ i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n        } else {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpmo21gq1d/tmpmo21gq1d.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b659c0d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b659bdc9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b659bdc9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b659bdc87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmo21gq1d                        0x00005627a850c523 <unavailable> + 5411

    5    libc.so.6                          0x00002b659c2be460 __libc_start_main +
    245

    6    tmpmo21gq1d                        0x00005627a850c179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var d0 = [Character: Int]()\n    var d1 =\
    \ [Character: Int]()\n    for c in s0 {\n        d0[c] = (d0[c] ?? 0) + 1\n  \
    \  }\n    for c in s1 {\n        d1[c] = (d1[c] ?? 0) + 1\n    }\n    return d0\
    \ == d1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\", s1: \"\
    dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\") ==\
    \ true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: Exception
  stderr: 'tmpbgsnddjj/tmpbgsnddjj.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26174e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26171ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26171dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26171dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbgsnddjj                        0x0000563581002513 <unavailable> + 5395

    5    libc.so.6                          0x00002b26176d2460 __libc_start_main +
    245

    6    tmpbgsnddjj                        0x0000563581002169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let idx = s1.index(of: c) {\n            s1.remove(at: idx)\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpf0veidgi/tmpf0veidgi.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba06b430c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba06b127b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba06b127988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba06b1267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf0veidgi                        0x000055ed0ac8d6b8 <unavailable> + 5816

    5    libc.so.6                          0x00002ba06b61c460 __libc_start_main +
    245

    6    tmpf0veidgi                        0x000055ed0ac8d129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpipq9dsa9/tmpipq9dsa9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8daf6cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8daf3c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8daf3c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8daf3c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpipq9dsa9                        0x000055dbc4f436b8 <unavailable> + 5816

    5    libc.so.6                          0x00002b8daf8ba460 __libc_start_main +
    245

    6    tmpipq9dsa9                        0x000055dbc4f43129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let idx = s1.index(of: c) {\n            s1.remove(at: idx)\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpf0veidgi/tmpf0veidgi.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba06b430c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba06b127b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba06b127988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba06b1267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf0veidgi                        0x000055ed0ac8d6b8 <unavailable> + 5816

    5    libc.so.6                          0x00002ba06b61c460 __libc_start_main +
    245

    6    tmpf0veidgi                        0x000055ed0ac8d129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    while !s0.isEmpty\
    \ {\n        if let c = s0.popFirst() {\n            if let i = s1.firstIndex(of:\
    \ c) {\n                s1.remove(at: i)\n            } else {\n             \
    \   return false\n            }\n        }\n    }\n    return s1.isEmpty\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpu_2ftcra.swift:19:20: error: referencing instance method 'popFirst()'\
    \ on 'Collection' requires the types 'String' and 'String.SubSequence' (aka 'Substring')\
    \ be equivalent\n        if let c = s0.popFirst() {\n                   ^\nSwift.Collection:1:11:\
    \ note: where 'Self' = 'String', 'Self.SubSequence' = 'String.SubSequence' (aka\
    \ 'Substring')\nextension Collection where Self == Self.SubSequence {\n      \
    \    ^\n"
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpipq9dsa9/tmpipq9dsa9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8daf6cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8daf3c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8daf3c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8daf3c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpipq9dsa9                        0x000055dbc4f436b8 <unavailable> + 5816

    5    libc.so.6                          0x00002b8daf8ba460 __libc_start_main +
    245

    6    tmpipq9dsa9                        0x000055dbc4f43129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var chars = [Character: Int]()\n    for c\
    \ in s0 {\n        if let count = chars[c] {\n            chars[c] = count + 1\n\
    \        } else {\n            chars[c] = 1\n        }\n    }\n    for c in s1\
    \ {\n        if let count = chars[c] {\n            chars[c] = count - 1\n   \
    \     } else {\n            return false\n        }\n    }\n    for (_, count)\
    \ in chars {\n        if count != 0 {\n            return false\n        }\n \
    \   }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmp920v6m8j/tmp920v6m8j.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ee34a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ee31a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1ee31a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1ee319f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp920v6m8j                        0x000056151cd73623 <unavailable> + 5667

    5    libc.so.6                          0x00002b1ee3695460 __libc_start_main +
    245

    6    tmp920v6m8j                        0x000056151cd73279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var d0 = [Character: Int]()\n    var d1 =\
    \ [Character: Int]()\n    for c in s0 {\n        if let n = d0[c] {\n        \
    \    d0[c] = n + 1\n        } else {\n            d0[c] = 1\n        }\n    }\n\
    \    for c in s1 {\n        if let n = d1[c] {\n            d1[c] = n + 1\n  \
    \      } else {\n            d1[c] = 1\n        }\n    }\n    return d0 == d1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpvciemf7x/tmpvciemf7x.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af338badc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3388a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af3388a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3388a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvciemf7x                        0x0000561a61432513 <unavailable> + 5395

    5    libc.so.6                          0x00002af338d99460 __libc_start_main +
    245

    6    tmpvciemf7x                        0x0000561a61432169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpipq9dsa9/tmpipq9dsa9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8daf6cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8daf3c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8daf3c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8daf3c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpipq9dsa9                        0x000055dbc4f436b8 <unavailable> + 5816

    5    libc.so.6                          0x00002b8daf8ba460 __libc_start_main +
    245

    6    tmpipq9dsa9                        0x000055dbc4f43129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpipq9dsa9/tmpipq9dsa9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8daf6cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8daf3c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8daf3c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8daf3c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpipq9dsa9                        0x000055dbc4f436b8 <unavailable> + 5816

    5    libc.so.6                          0x00002b8daf8ba460 __libc_start_main +
    245

    6    tmpipq9dsa9                        0x000055dbc4f43129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var d0 = [Character: Int]()\n    var d1 =\
    \ [Character: Int]()\n    for c in s0 {\n        if let count = d0[c] {\n    \
    \        d0[c] = count + 1\n        } else {\n            d0[c] = 1\n        }\n\
    \    }\n    for c in s1 {\n        if let count = d1[c] {\n            d1[c] =\
    \ count + 1\n        } else {\n            d1[c] = 1\n        }\n    }\n    return\
    \ d0 == d1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\", s1: \"\
    dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\") ==\
    \ true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: Exception
  stderr: 'tmp0xd9_nmh/tmp0xd9_nmh.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8d5f64c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8d5c5bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8d5c5b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8d5c5a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xd9_nmh                        0x000055f38e926513 <unavailable> + 5395

    5    libc.so.6                          0x00002ac8d6150460 __libc_start_main +
    245

    6    tmp0xd9_nmh                        0x000055f38e926169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    if s0.count\
    \ != s1.count {\n        return false\n    }\n    for c in s0 {\n        if let\
    \ i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n        } else {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpmo21gq1d/tmpmo21gq1d.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b659c0d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b659bdc9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b659bdc9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b659bdc87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmo21gq1d                        0x00005627a850c523 <unavailable> + 5411

    5    libc.so.6                          0x00002b659c2be460 __libc_start_main +
    245

    6    tmpmo21gq1d                        0x00005627a850c179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var c0 = s0.characters.sort()\n    var c1\
    \ = s1.characters.sort()\n    return c0 == c1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpy7i9olez.swift:16:28: error: value of type 'String' has no member\
    \ 'sort'\n    var c0 = s0.characters.sort()\n             ~~~~~~~~~~~~~ ^~~~\n\
    /tmp/tmpy7i9olez.swift:17:28: error: value of type 'String' has no member 'sort'\n\
    \    var c1 = s1.characters.sort()\n             ~~~~~~~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var d0 = [Character: Int]()\n    var d1 =\
    \ [Character: Int]()\n    for c in s0 {\n        d0[c] = (d0[c] ?? 0) + 1\n  \
    \  }\n    for c in s1 {\n        d1[c] = (d1[c] ?? 0) + 1\n    }\n    return d0\
    \ == d1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\", s1: \"\
    dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\") ==\
    \ true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: Exception
  stderr: 'tmpbgsnddjj/tmpbgsnddjj.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26174e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26171ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26171dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26171dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbgsnddjj                        0x0000563581002513 <unavailable> + 5395

    5    libc.so.6                          0x00002b26176d2460 __libc_start_main +
    245

    6    tmpbgsnddjj                        0x0000563581002169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpipq9dsa9/tmpipq9dsa9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8daf6cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8daf3c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8daf3c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8daf3c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpipq9dsa9                        0x000055dbc4f436b8 <unavailable> + 5816

    5    libc.so.6                          0x00002b8daf8ba460 __libc_start_main +
    245

    6    tmpipq9dsa9                        0x000055dbc4f43129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpipq9dsa9/tmpipq9dsa9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8daf6cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8daf3c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8daf3c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8daf3c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpipq9dsa9                        0x000055dbc4f436b8 <unavailable> + 5816

    5    libc.so.6                          0x00002b8daf8ba460 __libc_start_main +
    245

    6    tmpipq9dsa9                        0x000055dbc4f43129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var chars = [Character: Int]()\n    for c\
    \ in s0 {\n        if let n = chars[c] {\n            chars[c] = n + 1\n     \
    \   } else {\n            chars[c] = 1\n        }\n    }\n    for c in s1 {\n\
    \        if let n = chars[c] {\n            chars[c] = n - 1\n        } else {\n\
    \            return false\n        }\n    }\n    for (_, n) in chars {\n     \
    \   if n != 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmp9d1h7zu1/tmp9d1h7zu1.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af079811c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af079508b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af079508988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0795077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9d1h7zu1                        0x000055e539539623 <unavailable> + 5667

    5    libc.so.6                          0x00002af0799fd460 __libc_start_main +
    245

    6    tmp9d1h7zu1                        0x000055e539539279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = Array(s0)\n    var s1 = Array(s1)\n\
    \    s0.sort()\n    s1.sort()\n    return s0 == s1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpamyc4jus/tmpamyc4jus.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b29728f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b29725e8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b29725e8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b29725e77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpamyc4jus                        0x00005592fa9375c3 <unavailable> + 5571

    5    libc.so.6                          0x00002b2972add460 __libc_start_main +
    245

    6    tmpamyc4jus                        0x00005592fa937219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var chars0 = [Character](s0.characters)\n\
    \    var chars1 = [Character](s1.characters)\n    chars0.sortInPlace()\n    chars1.sortInPlace()\n\
    \    return chars0 == chars1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4rck0lc3.swift:16:33: error: 'characters' is unavailable: Please\
    \ use String directly\n    var chars0 = [Character](s0.characters)\n         \
    \                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmp4rck0lc3.swift:17:33: error: 'characters' is unavailable:\
    \ Please use String directly\n    var chars1 = [Character](s1.characters)\n  \
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp4rck0lc3.swift:18:12: error: value of type '[Character]'\
    \ has no member 'sortInPlace'\n    chars0.sortInPlace()\n    ~~~~~~ ^~~~~~~~~~~\n\
    /tmp/tmp4rck0lc3.swift:19:12: error: value of type '[Character]' has no member\
    \ 'sortInPlace'\n    chars1.sortInPlace()\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    if s0.count\
    \ != s1.count {\n        return false\n    }\n    for c in s0 {\n        if let\
    \ index = s1.firstIndex(of: c) {\n            s1.remove(at: index)\n        }\
    \ else {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmple_vd7xj/tmple_vd7xj.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af417c12c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af417909b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af417909988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4179087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmple_vd7xj                        0x00005559a1d31523 <unavailable> + 5411

    5    libc.so.6                          0x00002af417dfe460 __libc_start_main +
    245

    6    tmple_vd7xj                        0x00005559a1d31179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let index = s1.index(of: c) {\n            s1.remove(at: index)\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpld19flgm/tmpld19flgm.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b91ff41cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b91ff113b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b91ff113988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b91ff1127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpld19flgm                        0x000055c2015dc6b8 <unavailable> + 5816

    5    libc.so.6                          0x00002b91ff608460 __libc_start_main +
    245

    6    tmpld19flgm                        0x000055c2015dc129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpipq9dsa9/tmpipq9dsa9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8daf6cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8daf3c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8daf3c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8daf3c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpipq9dsa9                        0x000055dbc4f436b8 <unavailable> + 5816

    5    libc.so.6                          0x00002b8daf8ba460 __libc_start_main +
    245

    6    tmpipq9dsa9                        0x000055dbc4f43129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpipq9dsa9/tmpipq9dsa9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8daf6cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8daf3c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8daf3c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8daf3c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpipq9dsa9                        0x000055dbc4f436b8 <unavailable> + 5816

    5    libc.so.6                          0x00002b8daf8ba460 __libc_start_main +
    245

    6    tmpipq9dsa9                        0x000055dbc4f43129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    if s0.characters.count\
    \ != s1.characters.count {\n        return false\n    }\n    for c in s0.characters\
    \ {\n        if let index = s1.characters.index(of: c) {\n            s1.remove(at:\
    \ index)\n        } else {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\", s1: \"\
    dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\") ==\
    \ true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1o50zjv3.swift:18:11: error: 'characters' is unavailable: Please\
    \ use String directly\n    if s0.characters.count != s1.characters.count {\n \
    \         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp1o50zjv3.swift:18:34:\
    \ error: 'characters' is unavailable: Please use String directly\n    if s0.characters.count\
    \ != s1.characters.count {\n                                 ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp1o50zjv3.swift:21:17: error: 'characters'\
    \ is unavailable: Please use String directly\n    for c in s0.characters {\n \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp1o50zjv3.swift:22:27: error: 'characters' is unavailable: Please\
    \ use String directly\n        if let index = s1.characters.index(of: c) {\n \
    \                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmp1o50zjv3.swift:22:38: warning: 'index(of:)' is deprecated:\
    \ renamed to 'firstIndex(of:)'\n        if let index = s1.characters.index(of:\
    \ c) {\n                                     ^\n/tmp/tmp1o50zjv3.swift:22:38:\
    \ note: use 'firstIndex(of:)' instead\n        if let index = s1.characters.index(of:\
    \ c) {\n                                     ^~~~~\n                         \
    \            firstIndex\n/tmp/tmp1o50zjv3.swift:16:9: warning: variable 's0' was\
    \ never mutated; consider changing to 'let' constant\n    var s0 = s0\n    ~~~\
    \ ^\n    let\n"
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    while !s0.isEmpty\
    \ {\n        let c = s0.removeFirst()\n        if let i = s1.firstIndex(of: c)\
    \ {\n            s1.remove(at: i)\n        } else {\n            return false\n\
    \        }\n    }\n    return s1.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    ) == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0:\
    \ \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmp_ej6xccn/tmp_ej6xccn.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adaf025ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adaeff51b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adaeff51988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adaeff507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_ej6xccn                        0x000055785f877503 <unavailable> + 5379

    5    libc.so.6                          0x00002adaf0446460 __libc_start_main +
    245

    6    tmp_ej6xccn                        0x000055785f877159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpipq9dsa9/tmpipq9dsa9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8daf6cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8daf3c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8daf3c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8daf3c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpipq9dsa9                        0x000055dbc4f436b8 <unavailable> + 5816

    5    libc.so.6                          0x00002b8daf8ba460 __libc_start_main +
    245

    6    tmpipq9dsa9                        0x000055dbc4f43129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.index(of: c) {\n            s1.remove(at: i)\n \
    \       } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmptasm9l24/tmptasm9l24.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad605289c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad604f80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad604f80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad604f7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptasm9l24                        0x00005611bae006b8 <unavailable> + 5816

    5    libc.so.6                          0x00002ad605475460 __libc_start_main +
    245

    6    tmptasm9l24                        0x00005611bae00129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpipq9dsa9/tmpipq9dsa9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8daf6cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8daf3c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8daf3c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8daf3c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpipq9dsa9                        0x000055dbc4f436b8 <unavailable> + 5816

    5    libc.so.6                          0x00002b8daf8ba460 __libc_start_main +
    245

    6    tmpipq9dsa9                        0x000055dbc4f43129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    while !s0.isEmpty\
    \ {\n        let c = s0.removeFirst()\n        if let i = s1.firstIndex(of: c)\
    \ {\n            s1.remove(at: i)\n        } else {\n            return false\n\
    \        }\n    }\n    return s1.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    ) == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0:\
    \ \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmp_ej6xccn/tmp_ej6xccn.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adaf025ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adaeff51b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adaeff51988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adaeff507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_ej6xccn                        0x000055785f877503 <unavailable> + 5379

    5    libc.so.6                          0x00002adaf0446460 __libc_start_main +
    245

    6    tmp_ej6xccn                        0x000055785f877159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpipq9dsa9/tmpipq9dsa9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8daf6cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8daf3c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8daf3c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8daf3c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpipq9dsa9                        0x000055dbc4f436b8 <unavailable> + 5816

    5    libc.so.6                          0x00002b8daf8ba460 __libc_start_main +
    245

    6    tmpipq9dsa9                        0x000055dbc4f43129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.index(of: c) {\n            s1.remove(at: i)\n \
    \       } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmptasm9l24/tmptasm9l24.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad605289c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad604f80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad604f80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad604f7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptasm9l24                        0x00005611bae006b8 <unavailable> + 5816

    5    libc.so.6                          0x00002ad605475460 __libc_start_main +
    245

    6    tmptasm9l24                        0x00005611bae00129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var c0 = [Character](s0.characters)\n   \
    \ var c1 = [Character](s1.characters)\n    c0.sortInPlace()\n    c1.sortInPlace()\n\
    \    return c0 == c1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgv8jntpl.swift:16:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    var c0 = [Character](s0.characters)\n             \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpgv8jntpl.swift:17:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    var c1 = [Character](s1.characters)\n             \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpgv8jntpl.swift:18:8: error: value of type '[Character]' has no member\
    \ 'sortInPlace'\n    c0.sortInPlace()\n    ~~ ^~~~~~~~~~~\n/tmp/tmpgv8jntpl.swift:19:8:\
    \ error: value of type '[Character]' has no member 'sortInPlace'\n    c1.sortInPlace()\n\
    \    ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014022
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var c0 = s0.characters.sort()\n    var c1\
    \ = s1.characters.sort()\n    return c0 == c1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpy7i9olez.swift:16:28: error: value of type 'String' has no member\
    \ 'sort'\n    var c0 = s0.characters.sort()\n             ~~~~~~~~~~~~~ ^~~~\n\
    /tmp/tmpy7i9olez.swift:17:28: error: value of type 'String' has no member 'sort'\n\
    \    var c1 = s1.characters.sort()\n             ~~~~~~~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660014022
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    let s0 = Array(s0.characters)\n    let s1\
    \ = Array(s1.characters)\n    var s0_counts = [Character: Int]()\n    var s1_counts\
    \ = [Character: Int]()\n    for c in s0 {\n        if let count = s0_counts[c]\
    \ {\n            s0_counts[c] = count + 1\n        } else {\n            s0_counts[c]\
    \ = 1\n        }\n    }\n    for c in s1 {\n        if let count = s1_counts[c]\
    \ {\n            s1_counts[c] = count + 1\n        } else {\n            s1_counts[c]\
    \ = 1\n        }\n    }\n    for (c, count) in s0_counts {\n        if let count1\
    \ = s1_counts[c] {\n            if count1 < count {\n                return false\n\
    \            }\n        } else {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"\
    eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\"\
    , s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\"\
    ) == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9yswkwc5.swift:16:23: error: 'characters' is unavailable: Please\
    \ use String directly\n    let s0 = Array(s0.characters)\n                   \
    \   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmp9yswkwc5.swift:17:23:\
    \ error: 'characters' is unavailable: Please use String directly\n    let s1 =\
    \ Array(s1.characters)\n                      ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var d0 = [Character: Int]()\n    var d1 =\
    \ [Character: Int]()\n    for c in s0 {\n        d0[c] = (d0[c] ?? 0) + 1\n  \
    \  }\n    for c in s1 {\n        d1[c] = (d1[c] ?? 0) + 1\n    }\n    return d0\
    \ == d1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\", s1: \"\
    dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\") ==\
    \ true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: Exception
  stderr: 'tmpbgsnddjj/tmpbgsnddjj.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26174e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26171ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26171dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26171dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbgsnddjj                        0x0000563581002513 <unavailable> + 5395

    5    libc.so.6                          0x00002b26176d2460 __libc_start_main +
    245

    6    tmpbgsnddjj                        0x0000563581002169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    let s0_len\
    \ = s0.characters.count\n    let s1_len = s1.characters.count\n    if s0_len !=\
    \ s1_len {\n        return false\n    }\n    for _ in 0..<s0_len {\n        let\
    \ c0 = s0.remove(at: s0.startIndex)\n        if let i = s1.characters.index(of:\
    \ c0) {\n            s1.remove(at: i)\n        } else {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    ) == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0:\
    \ \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcf5m2h_y.swift:18:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    let s0_len = s0.characters.count\n                \
    \    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpcf5m2h_y.swift:19:21:\
    \ error: 'characters' is unavailable: Please use String directly\n    let s1_len\
    \ = s1.characters.count\n                    ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpcf5m2h_y.swift:25:23: error: 'characters'\
    \ is unavailable: Please use String directly\n        if let i = s1.characters.index(of:\
    \ c0) {\n                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpcf5m2h_y.swift:25:34: warning: 'index(of:)' is deprecated:\
    \ renamed to 'firstIndex(of:)'\n        if let i = s1.characters.index(of: c0)\
    \ {\n                                 ^\n/tmp/tmpcf5m2h_y.swift:25:34: note: use\
    \ 'firstIndex(of:)' instead\n        if let i = s1.characters.index(of: c0) {\n\
    \                                 ^~~~~\n                                 firstIndex\n"
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var d0 = [Character: Int]()\n    var d1 =\
    \ [Character: Int]()\n    for c in s0 {\n        d0[c] = (d0[c] ?? 0) + 1\n  \
    \  }\n    for c in s1 {\n        d1[c] = (d1[c] ?? 0) + 1\n    }\n    return d0\
    \ == d1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\", s1: \"\
    dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\") ==\
    \ true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: Exception
  stderr: 'tmpbgsnddjj/tmpbgsnddjj.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26174e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26171ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26171dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26171dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbgsnddjj                        0x0000563581002513 <unavailable> + 5395

    5    libc.so.6                          0x00002b26176d2460 __libc_start_main +
    245

    6    tmpbgsnddjj                        0x0000563581002169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    while !s0.isEmpty\
    \ {\n        let c = s0.removeFirst()\n        if let i = s1.firstIndex(of: c)\
    \ {\n            s1.remove(at: i)\n        } else {\n            return false\n\
    \        }\n    }\n    return s1.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    ) == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0:\
    \ \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmp_ej6xccn/tmp_ej6xccn.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adaf025ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adaeff51b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adaeff51988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adaeff507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_ej6xccn                        0x000055785f877503 <unavailable> + 5379

    5    libc.so.6                          0x00002adaf0446460 __libc_start_main +
    245

    6    tmp_ej6xccn                        0x000055785f877159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var d0 = [Character: Int]()\n    var d1 =\
    \ [Character: Int]()\n    for c in s0 {\n        if let v = d0[c] {\n        \
    \    d0[c] = v + 1\n        } else {\n            d0[c] = 1\n        }\n    }\n\
    \    for c in s1 {\n        if let v = d1[c] {\n            d1[c] = v + 1\n  \
    \      } else {\n            d1[c] = 1\n        }\n    }\n    return d0 == d1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmp5ci7mto3/tmp5ci7mto3.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b946d566c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b946d25db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b946d25d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b946d25c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ci7mto3                        0x0000560288300513 <unavailable> + 5395

    5    libc.so.6                          0x00002b946d752460 __libc_start_main +
    245

    6    tmp5ci7mto3                        0x0000560288300169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    if s0.count\
    \ != s1.count {\n        return false\n    }\n    for c in s0 {\n        if let\
    \ i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n        } else {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpmo21gq1d/tmpmo21gq1d.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b659c0d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b659bdc9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b659bdc9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b659bdc87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmo21gq1d                        0x00005627a850c523 <unavailable> + 5411

    5    libc.so.6                          0x00002b659c2be460 __libc_start_main +
    245

    6    tmpmo21gq1d                        0x00005627a850c179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var d0 = [Character: Int]()\n    var d1 =\
    \ [Character: Int]()\n    for c in s0 {\n        if let n = d0[c] {\n        \
    \    d0[c] = n + 1\n        } else {\n            d0[c] = 1\n        }\n    }\n\
    \    for c in s1 {\n        if let n = d1[c] {\n            d1[c] = n + 1\n  \
    \      } else {\n            d1[c] = 1\n        }\n    }\n    return d0 == d1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpvciemf7x/tmpvciemf7x.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af338badc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3388a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af3388a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3388a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvciemf7x                        0x0000561a61432513 <unavailable> + 5395

    5    libc.so.6                          0x00002af338d99460 __libc_start_main +
    245

    6    tmpvciemf7x                        0x0000561a61432169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var chars = [Character: Int]()\n    for c\
    \ in s0 {\n        if let count = chars[c] {\n            chars[c] = count + 1\n\
    \        } else {\n            chars[c] = 1\n        }\n    }\n    for c in s1\
    \ {\n        if let count = chars[c] {\n            chars[c] = count - 1\n   \
    \     } else {\n            return false\n        }\n    }\n    for (_, count)\
    \ in chars {\n        if count != 0 {\n            return false\n        }\n \
    \   }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmp920v6m8j/tmp920v6m8j.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ee34a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ee31a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1ee31a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1ee319f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp920v6m8j                        0x000056151cd73623 <unavailable> + 5667

    5    libc.so.6                          0x00002b1ee3695460 __libc_start_main +
    245

    6    tmp920v6m8j                        0x000056151cd73279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.index(of: c) {\n            s1.remove(at: i)\n \
    \       } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmptasm9l24/tmptasm9l24.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad605289c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad604f80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad604f80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad604f7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptasm9l24                        0x00005611bae006b8 <unavailable> + 5816

    5    libc.so.6                          0x00002ad605475460 __libc_start_main +
    245

    6    tmptasm9l24                        0x00005611bae00129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var chars = [Character: Int]()\n    for c\
    \ in s0 {\n        if let count = chars[c] {\n            chars[c] = count + 1\n\
    \        } else {\n            chars[c] = 1\n        }\n    }\n    for c in s1\
    \ {\n        if let count = chars[c] {\n            chars[c] = count - 1\n   \
    \     } else {\n            return false\n        }\n    }\n    for (_, count)\
    \ in chars {\n        if count != 0 {\n            return false\n        }\n \
    \   }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmp920v6m8j/tmp920v6m8j.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ee34a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ee31a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1ee31a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1ee319f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp920v6m8j                        0x000056151cd73623 <unavailable> + 5667

    5    libc.so.6                          0x00002b1ee3695460 __libc_start_main +
    245

    6    tmp920v6m8j                        0x000056151cd73279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.index(of: c) {\n            s1.remove(at: i)\n \
    \       } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmptasm9l24/tmptasm9l24.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad605289c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad604f80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad604f80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad604f7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptasm9l24                        0x00005611bae006b8 <unavailable> + 5816

    5    libc.so.6                          0x00002ad605475460 __libc_start_main +
    245

    6    tmptasm9l24                        0x00005611bae00129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.index(of: c) {\n            s1.remove(at: i)\n \
    \       } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmptasm9l24/tmptasm9l24.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad605289c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad604f80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad604f80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad604f7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptasm9l24                        0x00005611bae006b8 <unavailable> + 5816

    5    libc.so.6                          0x00002ad605475460 __libc_start_main +
    245

    6    tmptasm9l24                        0x00005611bae00129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var d0 = [Character: Int]()\n    var d1 =\
    \ [Character: Int]()\n    for c in s0 {\n        if let n = d0[c] {\n        \
    \    d0[c] = n + 1\n        } else {\n            d0[c] = 1\n        }\n    }\n\
    \    for c in s1 {\n        if let n = d1[c] {\n            d1[c] = n + 1\n  \
    \      } else {\n            d1[c] = 1\n        }\n    }\n    return d0 == d1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpvciemf7x/tmpvciemf7x.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af338badc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3388a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af3388a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3388a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvciemf7x                        0x0000561a61432513 <unavailable> + 5395

    5    libc.so.6                          0x00002af338d99460 __libc_start_main +
    245

    6    tmpvciemf7x                        0x0000561a61432169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var chars = [Character: Int]()\n    for c\
    \ in s0 {\n        if let count = chars[c] {\n            chars[c] = count + 1\n\
    \        } else {\n            chars[c] = 1\n        }\n    }\n    for c in s1\
    \ {\n        if let count = chars[c] {\n            chars[c] = count - 1\n   \
    \     } else {\n            return false\n        }\n    }\n    for (_, count)\
    \ in chars {\n        if count != 0 {\n            return false\n        }\n \
    \   }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmp920v6m8j/tmp920v6m8j.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ee34a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ee31a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1ee31a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1ee319f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp920v6m8j                        0x000056151cd73623 <unavailable> + 5667

    5    libc.so.6                          0x00002b1ee3695460 __libc_start_main +
    245

    6    tmp920v6m8j                        0x000056151cd73279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    if s0.count\
    \ != s1.count {\n        return false\n    }\n    for c in s0 {\n        if let\
    \ i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n        } else {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpmo21gq1d/tmpmo21gq1d.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b659c0d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b659bdc9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b659bdc9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b659bdc87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmo21gq1d                        0x00005627a850c523 <unavailable> + 5411

    5    libc.so.6                          0x00002b659c2be460 __libc_start_main +
    245

    6    tmpmo21gq1d                        0x00005627a850c179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0_chars = [Character](s0.characters)\n\
    \    var s1_chars = [Character](s1.characters)\n    s0_chars.sortInPlace()\n \
    \   s1_chars.sortInPlace()\n    return s0_chars == s1_chars\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwtlpm0d0.swift:16:35: error: 'characters' is unavailable: Please\
    \ use String directly\n    var s0_chars = [Character](s0.characters)\n       \
    \                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpwtlpm0d0.swift:17:35: error: 'characters' is unavailable:\
    \ Please use String directly\n    var s1_chars = [Character](s1.characters)\n\
    \                                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpwtlpm0d0.swift:18:14: error: value of type '[Character]'\
    \ has no member 'sortInPlace'\n    s0_chars.sortInPlace()\n    ~~~~~~~~ ^~~~~~~~~~~\n\
    /tmp/tmpwtlpm0d0.swift:19:14: error: value of type '[Character]' has no member\
    \ 'sortInPlace'\n    s1_chars.sortInPlace()\n    ~~~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.index(of: c) {\n            s1.remove(at: i)\n \
    \       } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmptasm9l24/tmptasm9l24.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad605289c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad604f80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad604f80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad604f7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptasm9l24                        0x00005611bae006b8 <unavailable> + 5816

    5    libc.so.6                          0x00002ad605475460 __libc_start_main +
    245

    6    tmptasm9l24                        0x00005611bae00129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var d0 = [Character: Int]()\n    var d1 =\
    \ [Character: Int]()\n    for c in s0 {\n        if let count = d0[c] {\n    \
    \        d0[c] = count + 1\n        } else {\n            d0[c] = 1\n        }\n\
    \    }\n    for c in s1 {\n        if let count = d1[c] {\n            d1[c] =\
    \ count + 1\n        } else {\n            d1[c] = 1\n        }\n    }\n    return\
    \ d0 == d1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\", s1: \"\
    dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\") ==\
    \ true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: Exception
  stderr: 'tmp0xd9_nmh/tmp0xd9_nmh.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8d5f64c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8d5c5bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8d5c5b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8d5c5a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xd9_nmh                        0x000055f38e926513 <unavailable> + 5395

    5    libc.so.6                          0x00002ac8d6150460 __libc_start_main +
    245

    6    tmp0xd9_nmh                        0x000055f38e926169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var c0 = s0.characters.sorted()\n    var\
    \ c1 = s1.characters.sorted()\n    return c0 == c1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9y6w8nil.swift:16:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    var c0 = s0.characters.sorted()\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp9y6w8nil.swift:17:17:\
    \ error: 'characters' is unavailable: Please use String directly\n    var c1 =\
    \ s1.characters.sorted()\n                ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp9y6w8nil.swift:16:9: warning: variable\
    \ 'c0' was never mutated; consider changing to 'let' constant\n    var c0 = s0.characters.sorted()\n\
    \    ~~~ ^\n    let\n/tmp/tmp9y6w8nil.swift:17:9: warning: variable 'c1' was never\
    \ mutated; consider changing to 'let' constant\n    var c1 = s1.characters.sorted()\n\
    \    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.index(of: c) {\n            s1.remove(at: i)\n \
    \       } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmptasm9l24/tmptasm9l24.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad605289c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad604f80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad604f80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad604f7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptasm9l24                        0x00005611bae006b8 <unavailable> + 5816

    5    libc.so.6                          0x00002ad605475460 __libc_start_main +
    245

    6    tmptasm9l24                        0x00005611bae00129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    while !s0.isEmpty\
    \ {\n        let c = s0.removeFirst()\n        if let i = s1.firstIndex(of: c)\
    \ {\n            s1.remove(at: i)\n        } else {\n            return false\n\
    \        }\n    }\n    return s1.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    ) == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0:\
    \ \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmp_ej6xccn/tmp_ej6xccn.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adaf025ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adaeff51b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adaeff51988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adaeff507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_ej6xccn                        0x000055785f877503 <unavailable> + 5379

    5    libc.so.6                          0x00002adaf0446460 __libc_start_main +
    245

    6    tmp_ej6xccn                        0x000055785f877159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.characters.index(of: c) {\n            s1.remove(at:\
    \ i)\n        } else {\n            return false\n        }\n    }\n    return\
    \ s1.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"\
    eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\"\
    , s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\"\
    ) == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2ylwzi1e.swift:19:23: error: 'characters' is unavailable: Please\
    \ use String directly\n        if let i = s1.characters.index(of: c) {\n     \
    \                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp2ylwzi1e.swift:19:34: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let i = s1.characters.index(of: c) {\n    \
    \                             ^\n/tmp/tmp2ylwzi1e.swift:19:34: note: use 'firstIndex(of:)'\
    \ instead\n        if let i = s1.characters.index(of: c) {\n                 \
    \                ^~~~~\n                                 firstIndex\n/tmp/tmp2ylwzi1e.swift:16:9:\
    \ warning: variable 's0' was never mutated; consider changing to 'let' constant\n\
    \    var s0 = s0\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.index(of: c) {\n            s1.remove(at: i)\n \
    \       } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmptasm9l24/tmptasm9l24.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad605289c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad604f80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad604f80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad604f7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptasm9l24                        0x00005611bae006b8 <unavailable> + 5816

    5    libc.so.6                          0x00002ad605475460 __libc_start_main +
    245

    6    tmptasm9l24                        0x00005611bae00129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpipq9dsa9/tmpipq9dsa9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8daf6cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8daf3c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8daf3c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8daf3c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpipq9dsa9                        0x000055dbc4f436b8 <unavailable> + 5816

    5    libc.so.6                          0x00002b8daf8ba460 __libc_start_main +
    245

    6    tmpipq9dsa9                        0x000055dbc4f43129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var d0 = [Character: Int]()\n    var d1 =\
    \ [Character: Int]()\n    for c in s0 {\n        if let v = d0[c] {\n        \
    \    d0[c] = v + 1\n        } else {\n            d0[c] = 1\n        }\n    }\n\
    \    for c in s1 {\n        if let v = d1[c] {\n            d1[c] = v + 1\n  \
    \      } else {\n            d1[c] = 1\n        }\n    }\n    return d0 == d1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmp5ci7mto3/tmp5ci7mto3.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b946d566c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b946d25db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b946d25d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b946d25c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ci7mto3                        0x0000560288300513 <unavailable> + 5395

    5    libc.so.6                          0x00002b946d752460 __libc_start_main +
    245

    6    tmp5ci7mto3                        0x0000560288300169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var dict0 = [Character: Int]()\n    var dict1\
    \ = [Character: Int]()\n    for c in s0 {\n        if let count = dict0[c] {\n\
    \            dict0[c] = count + 1\n        } else {\n            dict0[c] = 1\n\
    \        }\n    }\n    for c in s1 {\n        if let count = dict1[c] {\n    \
    \        dict1[c] = count + 1\n        } else {\n            dict1[c] = 1\n  \
    \      }\n    }\n    return dict0 == dict1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpvusoi4hq/tmpvusoi4hq.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac76d91c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac76a88b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac76a88988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac76a877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvusoi4hq                        0x0000558502efb513 <unavailable> + 5395

    5    libc.so.6                          0x00002aac76f7d460 __libc_start_main +
    245

    6    tmpvusoi4hq                        0x0000558502efb169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    while !s0.isEmpty\
    \ {\n        let c = s0.removeFirst()\n        if let index = s1.firstIndex(of:\
    \ c) {\n            s1.remove(at: index)\n        } else {\n            return\
    \ false\n        }\n    }\n    return s1.isEmpty\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmp3fe_3yop/tmp3fe_3yop.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b339b5fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b339b2f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b339b2f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b339b2f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3fe_3yop                        0x000055c8b5333503 <unavailable> + 5379

    5    libc.so.6                          0x00002b339b7e8460 __libc_start_main +
    245

    6    tmp3fe_3yop                        0x000055c8b5333159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpipq9dsa9/tmpipq9dsa9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8daf6cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8daf3c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8daf3c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8daf3c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpipq9dsa9                        0x000055dbc4f436b8 <unavailable> + 5816

    5    libc.so.6                          0x00002b8daf8ba460 __libc_start_main +
    245

    6    tmpipq9dsa9                        0x000055dbc4f43129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var d0 = [Character: Int]()\n    var d1 =\
    \ [Character: Int]()\n    for c in s0 {\n        if let n = d0[c] {\n        \
    \    d0[c] = n + 1\n        } else {\n            d0[c] = 1\n        }\n    }\n\
    \    for c in s1 {\n        if let n = d1[c] {\n            d1[c] = n + 1\n  \
    \      } else {\n            d1[c] = 1\n        }\n    }\n    return d0 == d1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpvciemf7x/tmpvciemf7x.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af338badc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3388a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af3388a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3388a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvciemf7x                        0x0000561a61432513 <unavailable> + 5395

    5    libc.so.6                          0x00002af338d99460 __libc_start_main +
    245

    6    tmpvciemf7x                        0x0000561a61432169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpipq9dsa9/tmpipq9dsa9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8daf6cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8daf3c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8daf3c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8daf3c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpipq9dsa9                        0x000055dbc4f436b8 <unavailable> + 5816

    5    libc.so.6                          0x00002b8daf8ba460 __libc_start_main +
    245

    6    tmpipq9dsa9                        0x000055dbc4f43129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var d0 = [Character: Int]()\n    var d1 =\
    \ [Character: Int]()\n    for c in s0 {\n        if let n = d0[c] {\n        \
    \    d0[c] = n + 1\n        } else {\n            d0[c] = 1\n        }\n    }\n\
    \    for c in s1 {\n        if let n = d1[c] {\n            d1[c] = n + 1\n  \
    \      } else {\n            d1[c] = 1\n        }\n    }\n    return d0 == d1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpvciemf7x/tmpvciemf7x.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af338badc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3388a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af3388a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3388a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvciemf7x                        0x0000561a61432513 <unavailable> + 5395

    5    libc.so.6                          0x00002af338d99460 __libc_start_main +
    245

    6    tmpvciemf7x                        0x0000561a61432169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var count = [Character: Int]()\n    for c\
    \ in s0 {\n        count[c] = (count[c] ?? 0) + 1\n    }\n    for c in s1 {\n\
    \        count[c] = (count[c] ?? 0) - 1\n    }\n    for (_, v) in count {\n  \
    \      if v != 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpk8br_kud/tmpk8br_kud.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b642fc2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b642f926b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b642f926988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b642f9257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk8br_kud                        0x00005645e5fae623 <unavailable> + 5667

    5    libc.so.6                          0x00002b642fe1b460 __libc_start_main +
    245

    6    tmpk8br_kud                        0x00005645e5fae279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.index(of: c) {\n            s1.remove(at: i)\n \
    \       } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmptasm9l24/tmptasm9l24.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad605289c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad604f80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad604f80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad604f7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptasm9l24                        0x00005611bae006b8 <unavailable> + 5816

    5    libc.so.6                          0x00002ad605475460 __libc_start_main +
    245

    6    tmptasm9l24                        0x00005611bae00129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    while !s0.isEmpty\
    \ {\n        let c = s0.remove(at: s0.startIndex)\n        if let i = s1.firstIndex(of:\
    \ c) {\n            s1.remove(at: i)\n        } else {\n            return false\n\
    \        }\n    }\n    return s1.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    ) == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0:\
    \ \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmp_5h1fi5o/tmp_5h1fi5o.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e5e99cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e5e693b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e5e693988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e5e6927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_5h1fi5o                        0x0000563afc4854c3 <unavailable> + 5315

    5    libc.so.6                          0x00002b7e5eb88460 __libc_start_main +
    245

    6    tmp_5h1fi5o                        0x0000563afc485119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    if s0.characters.count\
    \ != s1.characters.count {\n        return false\n    }\n    for c in s0.characters\
    \ {\n        if let i = s1.characters.index(of: c) {\n            s1.remove(at:\
    \ i)\n        } else {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\", s1: \"\
    dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\") ==\
    \ true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzz8w_6uy.swift:18:11: error: 'characters' is unavailable: Please\
    \ use String directly\n    if s0.characters.count != s1.characters.count {\n \
    \         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpzz8w_6uy.swift:18:34:\
    \ error: 'characters' is unavailable: Please use String directly\n    if s0.characters.count\
    \ != s1.characters.count {\n                                 ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpzz8w_6uy.swift:21:17: error: 'characters'\
    \ is unavailable: Please use String directly\n    for c in s0.characters {\n \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpzz8w_6uy.swift:22:23: error: 'characters' is unavailable: Please\
    \ use String directly\n        if let i = s1.characters.index(of: c) {\n     \
    \                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpzz8w_6uy.swift:22:34: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let i = s1.characters.index(of: c) {\n    \
    \                             ^\n/tmp/tmpzz8w_6uy.swift:22:34: note: use 'firstIndex(of:)'\
    \ instead\n        if let i = s1.characters.index(of: c) {\n                 \
    \                ^~~~~\n                                 firstIndex\n/tmp/tmpzz8w_6uy.swift:16:9:\
    \ warning: variable 's0' was never mutated; consider changing to 'let' constant\n\
    \    var s0 = s0\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660014022
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    if s0.characters.count\
    \ != s1.characters.count {\n        return false\n    }\n    for c in s0.characters\
    \ {\n        if let i = s1.characters.index(of: c) {\n            s1.remove(at:\
    \ i)\n        } else {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\", s1: \"\
    dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\") ==\
    \ true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzz8w_6uy.swift:18:11: error: 'characters' is unavailable: Please\
    \ use String directly\n    if s0.characters.count != s1.characters.count {\n \
    \         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpzz8w_6uy.swift:18:34:\
    \ error: 'characters' is unavailable: Please use String directly\n    if s0.characters.count\
    \ != s1.characters.count {\n                                 ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpzz8w_6uy.swift:21:17: error: 'characters'\
    \ is unavailable: Please use String directly\n    for c in s0.characters {\n \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpzz8w_6uy.swift:22:23: error: 'characters' is unavailable: Please\
    \ use String directly\n        if let i = s1.characters.index(of: c) {\n     \
    \                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpzz8w_6uy.swift:22:34: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let i = s1.characters.index(of: c) {\n    \
    \                             ^\n/tmp/tmpzz8w_6uy.swift:22:34: note: use 'firstIndex(of:)'\
    \ instead\n        if let i = s1.characters.index(of: c) {\n                 \
    \                ^~~~~\n                                 firstIndex\n/tmp/tmpzz8w_6uy.swift:16:9:\
    \ warning: variable 's0' was never mutated; consider changing to 'let' constant\n\
    \    var s0 = s0\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var chars = [Character: Int]()\n    for c\
    \ in s0 {\n        if let count = chars[c] {\n            chars[c] = count + 1\n\
    \        } else {\n            chars[c] = 1\n        }\n    }\n    for c in s1\
    \ {\n        if let count = chars[c] {\n            chars[c] = count - 1\n   \
    \     } else {\n            return false\n        }\n    }\n    for (_, count)\
    \ in chars {\n        if count != 0 {\n            return false\n        }\n \
    \   }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmp920v6m8j/tmp920v6m8j.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ee34a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ee31a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1ee31a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1ee319f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp920v6m8j                        0x000056151cd73623 <unavailable> + 5667

    5    libc.so.6                          0x00002b1ee3695460 __libc_start_main +
    245

    6    tmp920v6m8j                        0x000056151cd73279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    while !s0.isEmpty\
    \ {\n        let c = s0.removeFirst()\n        if let i = s1.firstIndex(of: c)\
    \ {\n            s1.remove(at: i)\n        } else {\n            return false\n\
    \        }\n    }\n    return s1.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    ) == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0:\
    \ \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmp_ej6xccn/tmp_ej6xccn.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adaf025ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adaeff51b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adaeff51988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adaeff507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_ej6xccn                        0x000055785f877503 <unavailable> + 5379

    5    libc.so.6                          0x00002adaf0446460 __libc_start_main +
    245

    6    tmp_ej6xccn                        0x000055785f877159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.index(of: c) {\n            s1.remove(at: i)\n \
    \       } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmptasm9l24/tmptasm9l24.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad605289c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad604f80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad604f80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad604f7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptasm9l24                        0x00005611bae006b8 <unavailable> + 5816

    5    libc.so.6                          0x00002ad605475460 __libc_start_main +
    245

    6    tmptasm9l24                        0x00005611bae00129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpipq9dsa9/tmpipq9dsa9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8daf6cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8daf3c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8daf3c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8daf3c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpipq9dsa9                        0x000055dbc4f436b8 <unavailable> + 5816

    5    libc.so.6                          0x00002b8daf8ba460 __libc_start_main +
    245

    6    tmpipq9dsa9                        0x000055dbc4f43129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.index(of: c) {\n            s1.remove(at: i)\n \
    \       } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmptasm9l24/tmptasm9l24.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad605289c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad604f80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad604f80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad604f7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptasm9l24                        0x00005611bae006b8 <unavailable> + 5816

    5    libc.so.6                          0x00002ad605475460 __libc_start_main +
    245

    6    tmptasm9l24                        0x00005611bae00129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpipq9dsa9/tmpipq9dsa9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8daf6cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8daf3c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8daf3c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8daf3c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpipq9dsa9                        0x000055dbc4f436b8 <unavailable> + 5816

    5    libc.so.6                          0x00002b8daf8ba460 __libc_start_main +
    245

    6    tmpipq9dsa9                        0x000055dbc4f43129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var chars = [Character: Int]()\n    for c\
    \ in s0 {\n        if let count = chars[c] {\n            chars[c] = count + 1\n\
    \        } else {\n            chars[c] = 1\n        }\n    }\n    for c in s1\
    \ {\n        if let count = chars[c] {\n            chars[c] = count - 1\n   \
    \     } else {\n            return false\n        }\n    }\n    for (_, count)\
    \ in chars {\n        if count != 0 {\n            return false\n        }\n \
    \   }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmp920v6m8j/tmp920v6m8j.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ee34a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ee31a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1ee31a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1ee319f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp920v6m8j                        0x000056151cd73623 <unavailable> + 5667

    5    libc.so.6                          0x00002b1ee3695460 __libc_start_main +
    245

    6    tmp920v6m8j                        0x000056151cd73279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpipq9dsa9/tmpipq9dsa9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8daf6cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8daf3c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8daf3c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8daf3c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpipq9dsa9                        0x000055dbc4f436b8 <unavailable> + 5816

    5    libc.so.6                          0x00002b8daf8ba460 __libc_start_main +
    245

    6    tmpipq9dsa9                        0x000055dbc4f43129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.index(of: c) {\n            s1.remove(at: i)\n \
    \       } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmptasm9l24/tmptasm9l24.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad605289c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad604f80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad604f80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad604f7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptasm9l24                        0x00005611bae006b8 <unavailable> + 5816

    5    libc.so.6                          0x00002ad605475460 __libc_start_main +
    245

    6    tmptasm9l24                        0x00005611bae00129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpipq9dsa9/tmpipq9dsa9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8daf6cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8daf3c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8daf3c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8daf3c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpipq9dsa9                        0x000055dbc4f436b8 <unavailable> + 5816

    5    libc.so.6                          0x00002b8daf8ba460 __libc_start_main +
    245

    6    tmpipq9dsa9                        0x000055dbc4f43129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.index(of: c) {\n            s1.remove(at: i)\n \
    \       } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmptasm9l24/tmptasm9l24.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad605289c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad604f80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad604f80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad604f7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptasm9l24                        0x00005611bae006b8 <unavailable> + 5816

    5    libc.so.6                          0x00002ad605475460 __libc_start_main +
    245

    6    tmptasm9l24                        0x00005611bae00129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var count = [Character: Int]()\n    for c\
    \ in s0 {\n        count[c] = (count[c] ?? 0) + 1\n    }\n    for c in s1 {\n\
    \        count[c] = (count[c] ?? 0) - 1\n    }\n    for (_, v) in count {\n  \
    \      if v != 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpk8br_kud/tmpk8br_kud.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b642fc2fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b642f926b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b642f926988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b642f9257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk8br_kud                        0x00005645e5fae623 <unavailable> + 5667

    5    libc.so.6                          0x00002b642fe1b460 __libc_start_main +
    245

    6    tmpk8br_kud                        0x00005645e5fae279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.index(of: c) {\n            s1.remove(at: i)\n \
    \       } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmptasm9l24/tmptasm9l24.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad605289c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad604f80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad604f80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad604f7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptasm9l24                        0x00005611bae006b8 <unavailable> + 5816

    5    libc.so.6                          0x00002ad605475460 __libc_start_main +
    245

    6    tmptasm9l24                        0x00005611bae00129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var d0 = [Character: Int]()\n    var d1 =\
    \ [Character: Int]()\n    for c in s0 {\n        if let n = d0[c] {\n        \
    \    d0[c] = n + 1\n        } else {\n            d0[c] = 1\n        }\n    }\n\
    \    for c in s1 {\n        if let n = d1[c] {\n            d1[c] = n + 1\n  \
    \      } else {\n            d1[c] = 1\n        }\n    }\n    return d0 == d1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpvciemf7x/tmpvciemf7x.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af338badc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3388a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af3388a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3388a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvciemf7x                        0x0000561a61432513 <unavailable> + 5395

    5    libc.so.6                          0x00002af338d99460 __libc_start_main +
    245

    6    tmpvciemf7x                        0x0000561a61432169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var d0 = [Character: Int]()\n    var d1 =\
    \ [Character: Int]()\n    for c in s0 {\n        if let count = d0[c] {\n    \
    \        d0[c] = count + 1\n        } else {\n            d0[c] = 1\n        }\n\
    \    }\n    for c in s1 {\n        if let count = d1[c] {\n            d1[c] =\
    \ count + 1\n        } else {\n            d1[c] = 1\n        }\n    }\n    return\
    \ d0 == d1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\", s1: \"\
    dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\") ==\
    \ true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: Exception
  stderr: 'tmp0xd9_nmh/tmp0xd9_nmh.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8d5f64c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8d5c5bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8d5c5b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8d5c5a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xd9_nmh                        0x000055f38e926513 <unavailable> + 5395

    5    libc.so.6                          0x00002ac8d6150460 __libc_start_main +
    245

    6    tmp0xd9_nmh                        0x000055f38e926169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpipq9dsa9/tmpipq9dsa9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8daf6cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8daf3c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8daf3c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8daf3c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpipq9dsa9                        0x000055dbc4f436b8 <unavailable> + 5816

    5    libc.so.6                          0x00002b8daf8ba460 __libc_start_main +
    245

    6    tmpipq9dsa9                        0x000055dbc4f43129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.index(of: c) {\n            s1.remove(at: i)\n \
    \       } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmptasm9l24/tmptasm9l24.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad605289c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad604f80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad604f80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad604f7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptasm9l24                        0x00005611bae006b8 <unavailable> + 5816

    5    libc.so.6                          0x00002ad605475460 __libc_start_main +
    245

    6    tmptasm9l24                        0x00005611bae00129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.index(of: c) {\n            s1.remove(at: i)\n \
    \       } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmptasm9l24/tmptasm9l24.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad605289c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad604f80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad604f80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad604f7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptasm9l24                        0x00005611bae006b8 <unavailable> + 5816

    5    libc.so.6                          0x00002ad605475460 __libc_start_main +
    245

    6    tmptasm9l24                        0x00005611bae00129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpipq9dsa9/tmpipq9dsa9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8daf6cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8daf3c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8daf3c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8daf3c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpipq9dsa9                        0x000055dbc4f436b8 <unavailable> + 5816

    5    libc.so.6                          0x00002b8daf8ba460 __libc_start_main +
    245

    6    tmpipq9dsa9                        0x000055dbc4f43129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpipq9dsa9/tmpipq9dsa9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8daf6cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8daf3c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8daf3c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8daf3c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpipq9dsa9                        0x000055dbc4f436b8 <unavailable> + 5816

    5    libc.so.6                          0x00002b8daf8ba460 __libc_start_main +
    245

    6    tmpipq9dsa9                        0x000055dbc4f43129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.index(of: c) {\n            s1.remove(at: i)\n \
    \       } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmptasm9l24/tmptasm9l24.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad605289c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad604f80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad604f80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad604f7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptasm9l24                        0x00005611bae006b8 <unavailable> + 5816

    5    libc.so.6                          0x00002ad605475460 __libc_start_main +
    245

    6    tmptasm9l24                        0x00005611bae00129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpipq9dsa9/tmpipq9dsa9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8daf6cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8daf3c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8daf3c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8daf3c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpipq9dsa9                        0x000055dbc4f436b8 <unavailable> + 5816

    5    libc.so.6                          0x00002b8daf8ba460 __libc_start_main +
    245

    6    tmpipq9dsa9                        0x000055dbc4f43129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpipq9dsa9/tmpipq9dsa9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8daf6cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8daf3c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8daf3c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8daf3c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpipq9dsa9                        0x000055dbc4f436b8 <unavailable> + 5816

    5    libc.so.6                          0x00002b8daf8ba460 __libc_start_main +
    245

    6    tmpipq9dsa9                        0x000055dbc4f43129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpipq9dsa9/tmpipq9dsa9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8daf6cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8daf3c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8daf3c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8daf3c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpipq9dsa9                        0x000055dbc4f436b8 <unavailable> + 5816

    5    libc.so.6                          0x00002b8daf8ba460 __libc_start_main +
    245

    6    tmpipq9dsa9                        0x000055dbc4f43129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var dict = [Character: Int]()\n    for c\
    \ in s0 {\n        if let count = dict[c] {\n            dict[c] = count + 1\n\
    \        } else {\n            dict[c] = 1\n        }\n    }\n    for c in s1\
    \ {\n        if let count = dict[c] {\n            dict[c] = count - 1\n     \
    \   } else {\n            return false\n        }\n    }\n    for (_, count) in\
    \ dict {\n        if count != 0 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"\
    eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\"\
    , s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\"\
    ) == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: Exception
  stderr: 'tmpel24fzak/tmpel24fzak.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f315d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f312ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f312ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f312cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpel24fzak                        0x000055c1a8407623 <unavailable> + 5667

    5    libc.so.6                          0x00002b1f317c3460 __libc_start_main +
    245

    6    tmpel24fzak                        0x000055c1a8407279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var chars = [Character: Int]()\n    for c\
    \ in s0 {\n        if let count = chars[c] {\n            chars[c] = count + 1\n\
    \        } else {\n            chars[c] = 1\n        }\n    }\n    for c in s1\
    \ {\n        if let count = chars[c] {\n            chars[c] = count - 1\n   \
    \     } else {\n            return false\n        }\n    }\n    for (_, count)\
    \ in chars {\n        if count != 0 {\n            return false\n        }\n \
    \   }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmp920v6m8j/tmp920v6m8j.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ee34a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ee31a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1ee31a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1ee319f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp920v6m8j                        0x000056151cd73623 <unavailable> + 5667

    5    libc.so.6                          0x00002b1ee3695460 __libc_start_main +
    245

    6    tmp920v6m8j                        0x000056151cd73279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var counts = [Character: Int]()\n    for\
    \ c in s0 {\n        counts[c] = (counts[c] ?? 0) + 1\n    }\n    for c in s1\
    \ {\n        counts[c] = (counts[c] ?? 0) - 1\n    }\n    for (_, count) in counts\
    \ {\n        if count != 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"\
    eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\"\
    , s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\"\
    ) == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: Exception
  stderr: 'tmp6un24aa0/tmp6un24aa0.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b84d93c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b84a8ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b84a8a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b84a897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6un24aa0                        0x000055ffa74ca623 <unavailable> + 5667

    5    libc.so.6                          0x00002b1b84f7f460 __libc_start_main +
    245

    6    tmp6un24aa0                        0x000055ffa74ca279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpipq9dsa9/tmpipq9dsa9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8daf6cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8daf3c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8daf3c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8daf3c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpipq9dsa9                        0x000055dbc4f436b8 <unavailable> + 5816

    5    libc.so.6                          0x00002b8daf8ba460 __libc_start_main +
    245

    6    tmpipq9dsa9                        0x000055dbc4f43129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var c0 = [Character](s0.characters)\n   \
    \ var c1 = [Character](s1.characters)\n    c0.sortInPlace()\n    c1.sortInPlace()\n\
    \    return c0 == c1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgv8jntpl.swift:16:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    var c0 = [Character](s0.characters)\n             \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpgv8jntpl.swift:17:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    var c1 = [Character](s1.characters)\n             \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpgv8jntpl.swift:18:8: error: value of type '[Character]' has no member\
    \ 'sortInPlace'\n    c0.sortInPlace()\n    ~~ ^~~~~~~~~~~\n/tmp/tmpgv8jntpl.swift:19:8:\
    \ error: value of type '[Character]' has no member 'sortInPlace'\n    c1.sortInPlace()\n\
    \    ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.index(of: c) {\n            s1.remove(at: i)\n \
    \       } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmptasm9l24/tmptasm9l24.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad605289c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad604f80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad604f80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad604f7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptasm9l24                        0x00005611bae006b8 <unavailable> + 5816

    5    libc.so.6                          0x00002ad605475460 __libc_start_main +
    245

    6    tmptasm9l24                        0x00005611bae00129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var d0 = [Character: Int]()\n    var d1 =\
    \ [Character: Int]()\n    for c in s0 {\n        if let n = d0[c] {\n        \
    \    d0[c] = n + 1\n        } else {\n            d0[c] = 1\n        }\n    }\n\
    \    for c in s1 {\n        if let n = d1[c] {\n            d1[c] = n + 1\n  \
    \      } else {\n            d1[c] = 1\n        }\n    }\n    return d0 == d1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpvciemf7x/tmpvciemf7x.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af338badc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3388a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af3388a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3388a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvciemf7x                        0x0000561a61432513 <unavailable> + 5395

    5    libc.so.6                          0x00002af338d99460 __libc_start_main +
    245

    6    tmpvciemf7x                        0x0000561a61432169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0.characters.sort()\n    var s1\
    \ = s1.characters.sort()\n    return s0 == s1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmphlwab9j_.swift:16:28: error: value of type 'String' has no member\
    \ 'sort'\n    var s0 = s0.characters.sort()\n             ~~~~~~~~~~~~~ ^~~~\n\
    /tmp/tmphlwab9j_.swift:17:28: error: value of type 'String' has no member 'sort'\n\
    \    var s1 = s1.characters.sort()\n             ~~~~~~~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpipq9dsa9/tmpipq9dsa9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8daf6cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8daf3c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8daf3c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8daf3c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpipq9dsa9                        0x000055dbc4f436b8 <unavailable> + 5816

    5    libc.so.6                          0x00002b8daf8ba460 __libc_start_main +
    245

    6    tmpipq9dsa9                        0x000055dbc4f43129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpipq9dsa9/tmpipq9dsa9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8daf6cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8daf3c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8daf3c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8daf3c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpipq9dsa9                        0x000055dbc4f436b8 <unavailable> + 5816

    5    libc.so.6                          0x00002b8daf8ba460 __libc_start_main +
    245

    6    tmpipq9dsa9                        0x000055dbc4f43129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var c0 = [Character](s0.characters)\n   \
    \ var c1 = [Character](s1.characters)\n    c0.sort()\n    c1.sort()\n    return\
    \ c0 == c1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\", s1: \"\
    dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\") ==\
    \ true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp28oto5db.swift:16:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    var c0 = [Character](s0.characters)\n             \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp28oto5db.swift:17:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    var c1 = [Character](s1.characters)\n             \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var d0 = [Character: Int]()\n    var d1 =\
    \ [Character: Int]()\n    for c in s0 {\n        if let n = d0[c] {\n        \
    \    d0[c] = n + 1\n        } else {\n            d0[c] = 1\n        }\n    }\n\
    \    for c in s1 {\n        if let n = d1[c] {\n            d1[c] = n + 1\n  \
    \      } else {\n            d1[c] = 1\n        }\n    }\n    return d0 == d1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpvciemf7x/tmpvciemf7x.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af338badc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3388a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af3388a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3388a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvciemf7x                        0x0000561a61432513 <unavailable> + 5395

    5    libc.so.6                          0x00002af338d99460 __libc_start_main +
    245

    6    tmpvciemf7x                        0x0000561a61432169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    if s0.count\
    \ != s1.count {\n        return false\n    }\n    for _ in 0..<s0.count {\n  \
    \      let c = s0.removeFirst()\n        if let index = s1.firstIndex(of: c) {\n\
    \            s1.remove(at: index)\n        } else {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    ) == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0:\
    \ \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpobo52squ/tmpobo52squ.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0caed5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0caea54b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0caea54988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0caea537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpobo52squ                        0x000055712d51b693 <unavailable> + 5779

    5    libc.so.6                          0x00002b0caef49460 __libc_start_main +
    245

    6    tmpobo52squ                        0x000055712d51b2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.index(of: c) {\n            s1.remove(at: i)\n \
    \       } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmptasm9l24/tmptasm9l24.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad605289c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad604f80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad604f80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad604f7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptasm9l24                        0x00005611bae006b8 <unavailable> + 5816

    5    libc.so.6                          0x00002ad605475460 __libc_start_main +
    245

    6    tmptasm9l24                        0x00005611bae00129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var d0 = [Character: Int]()\n    var d1 =\
    \ [Character: Int]()\n    for c in s0 {\n        if let n = d0[c] {\n        \
    \    d0[c] = n + 1\n        } else {\n            d0[c] = 1\n        }\n    }\n\
    \    for c in s1 {\n        if let n = d1[c] {\n            d1[c] = n + 1\n  \
    \      } else {\n            d1[c] = 1\n        }\n    }\n    return d0 == d1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpvciemf7x/tmpvciemf7x.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af338badc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3388a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af3388a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3388a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvciemf7x                        0x0000561a61432513 <unavailable> + 5395

    5    libc.so.6                          0x00002af338d99460 __libc_start_main +
    245

    6    tmpvciemf7x                        0x0000561a61432169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var chars = [Character: Int]()\n    for c\
    \ in s0 {\n        chars[c] = (chars[c] ?? 0) + 1\n    }\n    for c in s1 {\n\
    \        chars[c] = (chars[c] ?? 0) - 1\n    }\n    for (_, count) in chars {\n\
    \        if count != 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\", s1: \"\
    dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\") ==\
    \ true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: Exception
  stderr: 'tmpqgcdrejs/tmpqgcdrejs.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaae428dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaae3f84b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaae3f84988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaae3f837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqgcdrejs                        0x00005638d153d623 <unavailable> + 5667

    5    libc.so.6                          0x00002aaae4479460 __libc_start_main +
    245

    6    tmpqgcdrejs                        0x00005638d153d279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var chars = [Character: Int]()\n    for c\
    \ in s0 {\n        if let count = chars[c] {\n            chars[c] = count + 1\n\
    \        } else {\n            chars[c] = 1\n        }\n    }\n    for c in s1\
    \ {\n        if let count = chars[c] {\n            chars[c] = count - 1\n   \
    \     } else {\n            return false\n        }\n    }\n    for (_, count)\
    \ in chars {\n        if count != 0 {\n            return false\n        }\n \
    \   }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmp920v6m8j/tmp920v6m8j.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ee34a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ee31a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1ee31a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1ee319f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp920v6m8j                        0x000056151cd73623 <unavailable> + 5667

    5    libc.so.6                          0x00002b1ee3695460 __libc_start_main +
    245

    6    tmp920v6m8j                        0x000056151cd73279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpipq9dsa9/tmpipq9dsa9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8daf6cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8daf3c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8daf3c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8daf3c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpipq9dsa9                        0x000055dbc4f436b8 <unavailable> + 5816

    5    libc.so.6                          0x00002b8daf8ba460 __libc_start_main +
    245

    6    tmpipq9dsa9                        0x000055dbc4f43129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpipq9dsa9/tmpipq9dsa9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8daf6cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8daf3c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8daf3c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8daf3c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpipq9dsa9                        0x000055dbc4f436b8 <unavailable> + 5816

    5    libc.so.6                          0x00002b8daf8ba460 __libc_start_main +
    245

    6    tmpipq9dsa9                        0x000055dbc4f43129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var d0 = [Character: Int]()\n    var d1 =\
    \ [Character: Int]()\n    for c in s0 {\n        d0[c] = (d0[c] ?? 0) + 1\n  \
    \  }\n    for c in s1 {\n        d1[c] = (d1[c] ?? 0) + 1\n    }\n    return d0\
    \ == d1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\", s1: \"\
    dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\") ==\
    \ true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: Exception
  stderr: 'tmpbgsnddjj/tmpbgsnddjj.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26174e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26171ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26171dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26171dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbgsnddjj                        0x0000563581002513 <unavailable> + 5395

    5    libc.so.6                          0x00002b26176d2460 __libc_start_main +
    245

    6    tmpbgsnddjj                        0x0000563581002169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpipq9dsa9/tmpipq9dsa9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8daf6cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8daf3c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8daf3c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8daf3c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpipq9dsa9                        0x000055dbc4f436b8 <unavailable> + 5816

    5    libc.so.6                          0x00002b8daf8ba460 __libc_start_main +
    245

    6    tmpipq9dsa9                        0x000055dbc4f43129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var d0 = [Character: Int]()\n    var d1 =\
    \ [Character: Int]()\n    for c in s0 {\n        if let cnt = d0[c] {\n      \
    \      d0[c] = cnt + 1\n        } else {\n            d0[c] = 1\n        }\n \
    \   }\n    for c in s1 {\n        if let cnt = d1[c] {\n            d1[c] = cnt\
    \ + 1\n        } else {\n            d1[c] = 1\n        }\n    }\n    return d0\
    \ == d1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\", s1: \"\
    dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\") ==\
    \ true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: Exception
  stderr: 'tmp415d3is4/tmp415d3is4.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b367aedbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b367abd2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b367abd2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b367abd17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp415d3is4                        0x000055e4cc41a513 <unavailable> + 5395

    5    libc.so.6                          0x00002b367b0c7460 __libc_start_main +
    245

    6    tmp415d3is4                        0x000055e4cc41a169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var c0 = [Character](s0.characters)\n   \
    \ var c1 = [Character](s1.characters)\n    c0.sort { $0 < $1 }\n    c1.sort {\
    \ $0 < $1 }\n    return c0 == c1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzsae51o6.swift:16:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    var c0 = [Character](s0.characters)\n             \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpzsae51o6.swift:17:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    var c1 = [Character](s1.characters)\n             \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.index(of: c) {\n            s1.remove(at: i)\n \
    \       } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmptasm9l24/tmptasm9l24.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad605289c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad604f80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad604f80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad604f7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptasm9l24                        0x00005611bae006b8 <unavailable> + 5816

    5    libc.so.6                          0x00002ad605475460 __libc_start_main +
    245

    6    tmptasm9l24                        0x00005611bae00129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var d0 = [Character: Int]()\n    var d1 =\
    \ [Character: Int]()\n    for c in s0 {\n        if let n = d0[c] {\n        \
    \    d0[c] = n + 1\n        } else {\n            d0[c] = 1\n        }\n    }\n\
    \    for c in s1 {\n        if let n = d1[c] {\n            d1[c] = n + 1\n  \
    \      } else {\n            d1[c] = 1\n        }\n    }\n    return d0 == d1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpvciemf7x/tmpvciemf7x.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af338badc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3388a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af3388a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3388a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvciemf7x                        0x0000561a61432513 <unavailable> + 5395

    5    libc.so.6                          0x00002af338d99460 __libc_start_main +
    245

    6    tmpvciemf7x                        0x0000561a61432169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var d0 = [Character: Int]()\n    var d1 =\
    \ [Character: Int]()\n    for c in s0 {\n        if let n = d0[c] {\n        \
    \    d0[c] = n + 1\n        } else {\n            d0[c] = 1\n        }\n    }\n\
    \    for c in s1 {\n        if let n = d1[c] {\n            d1[c] = n + 1\n  \
    \      } else {\n            d1[c] = 1\n        }\n    }\n    return d0 == d1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpvciemf7x/tmpvciemf7x.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af338badc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3388a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af3388a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3388a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvciemf7x                        0x0000561a61432513 <unavailable> + 5395

    5    libc.so.6                          0x00002af338d99460 __libc_start_main +
    245

    6    tmpvciemf7x                        0x0000561a61432169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpipq9dsa9/tmpipq9dsa9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8daf6cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8daf3c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8daf3c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8daf3c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpipq9dsa9                        0x000055dbc4f436b8 <unavailable> + 5816

    5    libc.so.6                          0x00002b8daf8ba460 __libc_start_main +
    245

    6    tmpipq9dsa9                        0x000055dbc4f43129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var c0 = [Character: Int]()\n    var c1 =\
    \ [Character: Int]()\n    for c in s0 {\n        c0[c] = (c0[c] ?? 0) + 1\n  \
    \  }\n    for c in s1 {\n        c1[c] = (c1[c] ?? 0) + 1\n    }\n    return c0\
    \ == c1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\", s1: \"\
    dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\") ==\
    \ true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: Exception
  stderr: 'tmptbl1ma8s/tmptbl1ma8s.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e971b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e96ea8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e96ea8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e96ea77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptbl1ma8s                        0x00005573619c0513 <unavailable> + 5395

    5    libc.so.6                          0x00002b8e9739d460 __libc_start_main +
    245

    6    tmptbl1ma8s                        0x00005573619c0169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpipq9dsa9/tmpipq9dsa9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8daf6cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8daf3c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8daf3c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8daf3c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpipq9dsa9                        0x000055dbc4f436b8 <unavailable> + 5816

    5    libc.so.6                          0x00002b8daf8ba460 __libc_start_main +
    245

    6    tmpipq9dsa9                        0x000055dbc4f43129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.index(of: c) {\n            s1.remove(at: i)\n \
    \       } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmptasm9l24/tmptasm9l24.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad605289c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad604f80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad604f80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad604f7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptasm9l24                        0x00005611bae006b8 <unavailable> + 5816

    5    libc.so.6                          0x00002ad605475460 __libc_start_main +
    245

    6    tmptasm9l24                        0x00005611bae00129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpipq9dsa9/tmpipq9dsa9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8daf6cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8daf3c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8daf3c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8daf3c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpipq9dsa9                        0x000055dbc4f436b8 <unavailable> + 5816

    5    libc.so.6                          0x00002b8daf8ba460 __libc_start_main +
    245

    6    tmpipq9dsa9                        0x000055dbc4f43129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var c0 = [Character](s0.characters)\n   \
    \ var c1 = [Character](s1.characters)\n    c0.sortInPlace()\n    c1.sortInPlace()\n\
    \    return c0 == c1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgv8jntpl.swift:16:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    var c0 = [Character](s0.characters)\n             \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpgv8jntpl.swift:17:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    var c1 = [Character](s1.characters)\n             \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpgv8jntpl.swift:18:8: error: value of type '[Character]' has no member\
    \ 'sortInPlace'\n    c0.sortInPlace()\n    ~~ ^~~~~~~~~~~\n/tmp/tmpgv8jntpl.swift:19:8:\
    \ error: value of type '[Character]' has no member 'sortInPlace'\n    c1.sortInPlace()\n\
    \    ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpipq9dsa9/tmpipq9dsa9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8daf6cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8daf3c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8daf3c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8daf3c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpipq9dsa9                        0x000055dbc4f436b8 <unavailable> + 5816

    5    libc.so.6                          0x00002b8daf8ba460 __libc_start_main +
    245

    6    tmpipq9dsa9                        0x000055dbc4f43129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.index(of: c) {\n            s1.remove(at: i)\n \
    \       } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmptasm9l24/tmptasm9l24.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad605289c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad604f80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad604f80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad604f7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptasm9l24                        0x00005611bae006b8 <unavailable> + 5816

    5    libc.so.6                          0x00002ad605475460 __libc_start_main +
    245

    6    tmptasm9l24                        0x00005611bae00129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var c0 = [Character](s0.characters)\n   \
    \ var c1 = [Character](s1.characters)\n    c0.sortInPlace()\n    c1.sortInPlace()\n\
    \    return c0 == c1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgv8jntpl.swift:16:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    var c0 = [Character](s0.characters)\n             \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpgv8jntpl.swift:17:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    var c1 = [Character](s1.characters)\n             \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpgv8jntpl.swift:18:8: error: value of type '[Character]' has no member\
    \ 'sortInPlace'\n    c0.sortInPlace()\n    ~~ ^~~~~~~~~~~\n/tmp/tmpgv8jntpl.swift:19:8:\
    \ error: value of type '[Character]' has no member 'sortInPlace'\n    c1.sortInPlace()\n\
    \    ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpipq9dsa9/tmpipq9dsa9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8daf6cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8daf3c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8daf3c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8daf3c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpipq9dsa9                        0x000055dbc4f436b8 <unavailable> + 5816

    5    libc.so.6                          0x00002b8daf8ba460 __libc_start_main +
    245

    6    tmpipq9dsa9                        0x000055dbc4f43129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    while !s0.isEmpty\
    \ {\n        let c = s0.removeFirst()\n        if let i = s1.firstIndex(of: c)\
    \ {\n            s1.remove(at: i)\n        } else {\n            return false\n\
    \        }\n    }\n    return s1.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    ) == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0:\
    \ \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmp_ej6xccn/tmp_ej6xccn.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adaf025ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adaeff51b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adaeff51988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adaeff507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_ej6xccn                        0x000055785f877503 <unavailable> + 5379

    5    libc.so.6                          0x00002adaf0446460 __libc_start_main +
    245

    6    tmp_ej6xccn                        0x000055785f877159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpipq9dsa9/tmpipq9dsa9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8daf6cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8daf3c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8daf3c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8daf3c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpipq9dsa9                        0x000055dbc4f436b8 <unavailable> + 5816

    5    libc.so.6                          0x00002b8daf8ba460 __libc_start_main +
    245

    6    tmpipq9dsa9                        0x000055dbc4f43129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpipq9dsa9/tmpipq9dsa9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8daf6cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8daf3c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8daf3c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8daf3c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpipq9dsa9                        0x000055dbc4f436b8 <unavailable> + 5816

    5    libc.so.6                          0x00002b8daf8ba460 __libc_start_main +
    245

    6    tmpipq9dsa9                        0x000055dbc4f43129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    if s0.count\
    \ != s1.count {\n        return false\n    }\n    for c in s0 {\n        if let\
    \ i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n        } else {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpmo21gq1d/tmpmo21gq1d.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b659c0d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b659bdc9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b659bdc9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b659bdc87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmo21gq1d                        0x00005627a850c523 <unavailable> + 5411

    5    libc.so.6                          0x00002b659c2be460 __libc_start_main +
    245

    6    tmpmo21gq1d                        0x00005627a850c179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var c0 = [Character](s0.characters)\n   \
    \ var c1 = [Character](s1.characters)\n    c0.sortInPlace()\n    c1.sortInPlace()\n\
    \    return c0 == c1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgv8jntpl.swift:16:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    var c0 = [Character](s0.characters)\n             \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpgv8jntpl.swift:17:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    var c1 = [Character](s1.characters)\n             \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpgv8jntpl.swift:18:8: error: value of type '[Character]' has no member\
    \ 'sortInPlace'\n    c0.sortInPlace()\n    ~~ ^~~~~~~~~~~\n/tmp/tmpgv8jntpl.swift:19:8:\
    \ error: value of type '[Character]' has no member 'sortInPlace'\n    c1.sortInPlace()\n\
    \    ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpipq9dsa9/tmpipq9dsa9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8daf6cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8daf3c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8daf3c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8daf3c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpipq9dsa9                        0x000055dbc4f436b8 <unavailable> + 5816

    5    libc.so.6                          0x00002b8daf8ba460 __libc_start_main +
    245

    6    tmpipq9dsa9                        0x000055dbc4f43129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var d0 = [Character: Int]()\n    var d1 =\
    \ [Character: Int]()\n    for c in s0 {\n        if let n = d0[c] {\n        \
    \    d0[c] = n + 1\n        } else {\n            d0[c] = 1\n        }\n    }\n\
    \    for c in s1 {\n        if let n = d1[c] {\n            d1[c] = n + 1\n  \
    \      } else {\n            d1[c] = 1\n        }\n    }\n    return d0 == d1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpvciemf7x/tmpvciemf7x.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af338badc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3388a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af3388a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3388a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvciemf7x                        0x0000561a61432513 <unavailable> + 5395

    5    libc.so.6                          0x00002af338d99460 __libc_start_main +
    245

    6    tmpvciemf7x                        0x0000561a61432169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var c0 = s0.characters.sorted()\n    var\
    \ c1 = s1.characters.sorted()\n    return c0 == c1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9y6w8nil.swift:16:17: error: 'characters' is unavailable: Please\
    \ use String directly\n    var c0 = s0.characters.sorted()\n                ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp9y6w8nil.swift:17:17:\
    \ error: 'characters' is unavailable: Please use String directly\n    var c1 =\
    \ s1.characters.sorted()\n                ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp9y6w8nil.swift:16:9: warning: variable\
    \ 'c0' was never mutated; consider changing to 'let' constant\n    var c0 = s0.characters.sorted()\n\
    \    ~~~ ^\n    let\n/tmp/tmp9y6w8nil.swift:17:9: warning: variable 'c1' was never\
    \ mutated; consider changing to 'let' constant\n    var c1 = s1.characters.sorted()\n\
    \    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.index(of: c) {\n            s1.remove(at: i)\n \
    \       } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmptasm9l24/tmptasm9l24.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad605289c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad604f80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad604f80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad604f7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptasm9l24                        0x00005611bae006b8 <unavailable> + 5816

    5    libc.so.6                          0x00002ad605475460 __libc_start_main +
    245

    6    tmptasm9l24                        0x00005611bae00129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0.characters.sort()\n    var s1\
    \ = s1.characters.sort()\n    return s0 == s1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmphlwab9j_.swift:16:28: error: value of type 'String' has no member\
    \ 'sort'\n    var s0 = s0.characters.sort()\n             ~~~~~~~~~~~~~ ^~~~\n\
    /tmp/tmphlwab9j_.swift:17:28: error: value of type 'String' has no member 'sort'\n\
    \    var s1 = s1.characters.sort()\n             ~~~~~~~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var d0 = [Character: Int]()\n    var d1 =\
    \ [Character: Int]()\n    for c in s0 {\n        d0[c] = (d0[c] ?? 0) + 1\n  \
    \  }\n    for c in s1 {\n        d1[c] = (d1[c] ?? 0) + 1\n    }\n    return d0\
    \ == d1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\", s1: \"\
    dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\") ==\
    \ true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: Exception
  stderr: 'tmpbgsnddjj/tmpbgsnddjj.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26174e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26171ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26171dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26171dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbgsnddjj                        0x0000563581002513 <unavailable> + 5395

    5    libc.so.6                          0x00002b26176d2460 __libc_start_main +
    245

    6    tmpbgsnddjj                        0x0000563581002169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.index(of: c) {\n            s1.remove(at: i)\n \
    \       } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmptasm9l24/tmptasm9l24.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad605289c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad604f80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad604f80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad604f7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptasm9l24                        0x00005611bae006b8 <unavailable> + 5816

    5    libc.so.6                          0x00002ad605475460 __libc_start_main +
    245

    6    tmptasm9l24                        0x00005611bae00129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var chars0 = [Character](s0.characters)\n\
    \    var chars1 = [Character](s1.characters)\n    chars0.sortInPlace()\n    chars1.sortInPlace()\n\
    \    return chars0 == chars1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4rck0lc3.swift:16:33: error: 'characters' is unavailable: Please\
    \ use String directly\n    var chars0 = [Character](s0.characters)\n         \
    \                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmp4rck0lc3.swift:17:33: error: 'characters' is unavailable:\
    \ Please use String directly\n    var chars1 = [Character](s1.characters)\n  \
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp4rck0lc3.swift:18:12: error: value of type '[Character]'\
    \ has no member 'sortInPlace'\n    chars0.sortInPlace()\n    ~~~~~~ ^~~~~~~~~~~\n\
    /tmp/tmp4rck0lc3.swift:19:12: error: value of type '[Character]' has no member\
    \ 'sortInPlace'\n    chars1.sortInPlace()\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for char\
    \ in s0 {\n        if let index = s1.firstIndex(of: char) {\n            s1.remove(at:\
    \ index)\n        } else {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\", s1: \"\
    dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\") ==\
    \ true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: Exception
  stderr: 'tmpd174wsqb/tmpd174wsqb.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98ab860c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98ab557b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98ab557988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98ab5567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd174wsqb                        0x000055b8835fa6b8 <unavailable> + 5816

    5    libc.so.6                          0x00002b98aba4c460 __libc_start_main +
    245

    6    tmpd174wsqb                        0x000055b8835fa129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpipq9dsa9/tmpipq9dsa9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8daf6cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8daf3c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8daf3c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8daf3c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpipq9dsa9                        0x000055dbc4f436b8 <unavailable> + 5816

    5    libc.so.6                          0x00002b8daf8ba460 __libc_start_main +
    245

    6    tmpipq9dsa9                        0x000055dbc4f43129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    if s0.count\
    \ != s1.count {\n        return false\n    }\n    for c in s0 {\n        if let\
    \ i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n        } else {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpmo21gq1d/tmpmo21gq1d.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b659c0d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b659bdc9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b659bdc9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b659bdc87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmo21gq1d                        0x00005627a850c523 <unavailable> + 5411

    5    libc.so.6                          0x00002b659c2be460 __libc_start_main +
    245

    6    tmpmo21gq1d                        0x00005627a850c179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var chars = [Character: Int]()\n    for c\
    \ in s0 {\n        if let n = chars[c] {\n            chars[c] = n + 1\n     \
    \   } else {\n            chars[c] = 1\n        }\n    }\n    for c in s1 {\n\
    \        if let n = chars[c] {\n            chars[c] = n - 1\n        } else {\n\
    \            return false\n        }\n    }\n    for (_, n) in chars {\n     \
    \   if n != 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmp9d1h7zu1/tmp9d1h7zu1.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af079811c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af079508b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af079508988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0795077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9d1h7zu1                        0x000055e539539623 <unavailable> + 5667

    5    libc.so.6                          0x00002af0799fd460 __libc_start_main +
    245

    6    tmp9d1h7zu1                        0x000055e539539279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.index(of: c) {\n            s1.remove(at: i)\n \
    \       } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmptasm9l24/tmptasm9l24.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad605289c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad604f80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad604f80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad604f7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptasm9l24                        0x00005611bae006b8 <unavailable> + 5816

    5    libc.so.6                          0x00002ad605475460 __libc_start_main +
    245

    6    tmptasm9l24                        0x00005611bae00129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpipq9dsa9/tmpipq9dsa9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8daf6cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8daf3c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8daf3c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8daf3c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpipq9dsa9                        0x000055dbc4f436b8 <unavailable> + 5816

    5    libc.so.6                          0x00002b8daf8ba460 __libc_start_main +
    245

    6    tmpipq9dsa9                        0x000055dbc4f43129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var d0 = [Character: Int]()\n    var d1 =\
    \ [Character: Int]()\n    for c in s0 {\n        if let count = d0[c] {\n    \
    \        d0[c] = count + 1\n        } else {\n            d0[c] = 1\n        }\n\
    \    }\n    for c in s1 {\n        if let count = d1[c] {\n            d1[c] =\
    \ count + 1\n        } else {\n            d1[c] = 1\n        }\n    }\n    return\
    \ d0 == d1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\", s1: \"\
    dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\") ==\
    \ true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: Exception
  stderr: 'tmp0xd9_nmh/tmp0xd9_nmh.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8d5f64c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8d5c5bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8d5c5b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8d5c5a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xd9_nmh                        0x000055f38e926513 <unavailable> + 5395

    5    libc.so.6                          0x00002ac8d6150460 __libc_start_main +
    245

    6    tmp0xd9_nmh                        0x000055f38e926169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var dict = [Character: Int]()\n    for c\
    \ in s0 {\n        if let count = dict[c] {\n            dict[c] = count + 1\n\
    \        } else {\n            dict[c] = 1\n        }\n    }\n    for c in s1\
    \ {\n        if let count = dict[c] {\n            dict[c] = count - 1\n     \
    \   } else {\n            return false\n        }\n    }\n    for (_, count) in\
    \ dict {\n        if count != 0 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"\
    eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\"\
    , s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\"\
    ) == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: Exception
  stderr: 'tmpel24fzak/tmpel24fzak.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f315d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f312ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f312ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f312cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpel24fzak                        0x000055c1a8407623 <unavailable> + 5667

    5    libc.so.6                          0x00002b1f317c3460 __libc_start_main +
    245

    6    tmpel24fzak                        0x000055c1a8407279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpipq9dsa9/tmpipq9dsa9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8daf6cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8daf3c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8daf3c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8daf3c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpipq9dsa9                        0x000055dbc4f436b8 <unavailable> + 5816

    5    libc.so.6                          0x00002b8daf8ba460 __libc_start_main +
    245

    6    tmpipq9dsa9                        0x000055dbc4f43129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var d0 = [Character: Int]()\n    var d1 =\
    \ [Character: Int]()\n    for c in s0 {\n        if let n = d0[c] {\n        \
    \    d0[c] = n + 1\n        } else {\n            d0[c] = 1\n        }\n    }\n\
    \    for c in s1 {\n        if let n = d1[c] {\n            d1[c] = n + 1\n  \
    \      } else {\n            d1[c] = 1\n        }\n    }\n    return d0 == d1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpvciemf7x/tmpvciemf7x.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af338badc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3388a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af3388a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3388a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvciemf7x                        0x0000561a61432513 <unavailable> + 5395

    5    libc.so.6                          0x00002af338d99460 __libc_start_main +
    245

    6    tmpvciemf7x                        0x0000561a61432169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var c0 = [Character: Int]()\n    var c1 =\
    \ [Character: Int]()\n    for c in s0 {\n        c0[c] = (c0[c] ?? 0) + 1\n  \
    \  }\n    for c in s1 {\n        c1[c] = (c1[c] ?? 0) + 1\n    }\n    return c0\
    \ == c1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\", s1: \"\
    dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\") ==\
    \ true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: Exception
  stderr: 'tmptbl1ma8s/tmptbl1ma8s.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e971b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e96ea8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e96ea8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e96ea77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptbl1ma8s                        0x00005573619c0513 <unavailable> + 5395

    5    libc.so.6                          0x00002b8e9739d460 __libc_start_main +
    245

    6    tmptbl1ma8s                        0x00005573619c0169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var c0 = s0.characters.sort()\n    var c1\
    \ = s1.characters.sort()\n    return c0 == c1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpy7i9olez.swift:16:28: error: value of type 'String' has no member\
    \ 'sort'\n    var c0 = s0.characters.sort()\n             ~~~~~~~~~~~~~ ^~~~\n\
    /tmp/tmpy7i9olez.swift:17:28: error: value of type 'String' has no member 'sort'\n\
    \    var c1 = s1.characters.sort()\n             ~~~~~~~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var d0 = [Character: Int]()\n    var d1 =\
    \ [Character: Int]()\n    for c in s0 {\n        if let v = d0[c] {\n        \
    \    d0[c] = v + 1\n        } else {\n            d0[c] = 1\n        }\n    }\n\
    \    for c in s1 {\n        if let v = d1[c] {\n            d1[c] = v + 1\n  \
    \      } else {\n            d1[c] = 1\n        }\n    }\n    return d0 == d1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmp5ci7mto3/tmp5ci7mto3.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b946d566c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b946d25db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b946d25d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b946d25c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ci7mto3                        0x0000560288300513 <unavailable> + 5395

    5    libc.so.6                          0x00002b946d752460 __libc_start_main +
    245

    6    tmp5ci7mto3                        0x0000560288300169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.index(of: c) {\n            s1.remove(at: i)\n \
    \       } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmptasm9l24/tmptasm9l24.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad605289c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad604f80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad604f80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad604f7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptasm9l24                        0x00005611bae006b8 <unavailable> + 5816

    5    libc.so.6                          0x00002ad605475460 __libc_start_main +
    245

    6    tmptasm9l24                        0x00005611bae00129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.index(of: c) {\n            s1.remove(at: i)\n \
    \       } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmptasm9l24/tmptasm9l24.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad605289c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad604f80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad604f80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad604f7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptasm9l24                        0x00005611bae006b8 <unavailable> + 5816

    5    libc.so.6                          0x00002ad605475460 __libc_start_main +
    245

    6    tmptasm9l24                        0x00005611bae00129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0_chars = s0.characters.map { String($0)\
    \ }\n    var s1_chars = s1.characters.map { String($0) }\n    s0_chars.sortInPlace()\n\
    \    s1_chars.sortInPlace()\n    return s0_chars == s1_chars\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbd327tb7.swift:16:23: error: 'characters' is unavailable: Please\
    \ use String directly\n    var s0_chars = s0.characters.map { String($0) }\n \
    \                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpbd327tb7.swift:17:23: error: 'characters' is unavailable: Please\
    \ use String directly\n    var s1_chars = s1.characters.map { String($0) }\n \
    \                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpbd327tb7.swift:18:14: error: value of type '[String]' has no member\
    \ 'sortInPlace'\n    s0_chars.sortInPlace()\n    ~~~~~~~~ ^~~~~~~~~~~\n/tmp/tmpbd327tb7.swift:19:14:\
    \ error: value of type '[String]' has no member 'sortInPlace'\n    s1_chars.sortInPlace()\n\
    \    ~~~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    if s0.count\
    \ != s1.count {\n        return false\n    }\n    for c in s0 {\n        if let\
    \ i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n        } else {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpmo21gq1d/tmpmo21gq1d.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b659c0d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b659bdc9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b659bdc9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b659bdc87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmo21gq1d                        0x00005627a850c523 <unavailable> + 5411

    5    libc.so.6                          0x00002b659c2be460 __libc_start_main +
    245

    6    tmpmo21gq1d                        0x00005627a850c179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0_chars = s0.characters.map { String($0)\
    \ }\n    var s1_chars = s1.characters.map { String($0) }\n    s0_chars.sortInPlace()\n\
    \    s1_chars.sortInPlace()\n    return s0_chars == s1_chars\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbd327tb7.swift:16:23: error: 'characters' is unavailable: Please\
    \ use String directly\n    var s0_chars = s0.characters.map { String($0) }\n \
    \                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpbd327tb7.swift:17:23: error: 'characters' is unavailable: Please\
    \ use String directly\n    var s1_chars = s1.characters.map { String($0) }\n \
    \                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpbd327tb7.swift:18:14: error: value of type '[String]' has no member\
    \ 'sortInPlace'\n    s0_chars.sortInPlace()\n    ~~~~~~~~ ^~~~~~~~~~~\n/tmp/tmpbd327tb7.swift:19:14:\
    \ error: value of type '[String]' has no member 'sortInPlace'\n    s1_chars.sortInPlace()\n\
    \    ~~~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpipq9dsa9/tmpipq9dsa9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8daf6cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8daf3c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8daf3c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8daf3c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpipq9dsa9                        0x000055dbc4f436b8 <unavailable> + 5816

    5    libc.so.6                          0x00002b8daf8ba460 __libc_start_main +
    245

    6    tmpipq9dsa9                        0x000055dbc4f43129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var d0 = [Character: Int]()\n    var d1 =\
    \ [Character: Int]()\n    for c in s0 {\n        if let n = d0[c] {\n        \
    \    d0[c] = n + 1\n        } else {\n            d0[c] = 1\n        }\n    }\n\
    \    for c in s1 {\n        if let n = d1[c] {\n            d1[c] = n + 1\n  \
    \      } else {\n            d1[c] = 1\n        }\n    }\n    return d0 == d1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpvciemf7x/tmpvciemf7x.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af338badc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3388a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af3388a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3388a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvciemf7x                        0x0000561a61432513 <unavailable> + 5395

    5    libc.so.6                          0x00002af338d99460 __libc_start_main +
    245

    6    tmpvciemf7x                        0x0000561a61432169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var chars = [Character: Int]()\n    for c\
    \ in s0 {\n        if let count = chars[c] {\n            chars[c] = count + 1\n\
    \        } else {\n            chars[c] = 1\n        }\n    }\n    for c in s1\
    \ {\n        if let count = chars[c] {\n            chars[c] = count - 1\n   \
    \     } else {\n            return false\n        }\n    }\n    for (_, count)\
    \ in chars {\n        if count != 0 {\n            return false\n        }\n \
    \   }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmp920v6m8j/tmp920v6m8j.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ee34a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ee31a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1ee31a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1ee319f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp920v6m8j                        0x000056151cd73623 <unavailable> + 5667

    5    libc.so.6                          0x00002b1ee3695460 __libc_start_main +
    245

    6    tmp920v6m8j                        0x000056151cd73279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpipq9dsa9/tmpipq9dsa9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8daf6cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8daf3c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8daf3c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8daf3c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpipq9dsa9                        0x000055dbc4f436b8 <unavailable> + 5816

    5    libc.so.6                          0x00002b8daf8ba460 __libc_start_main +
    245

    6    tmpipq9dsa9                        0x000055dbc4f43129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    while !s0.isEmpty\
    \ {\n        let c = s0.removeFirst()\n        if let i = s1.firstIndex(of: c)\
    \ {\n            s1.remove(at: i)\n        } else {\n            return false\n\
    \        }\n    }\n    return s1.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    ) == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0:\
    \ \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmp_ej6xccn/tmp_ej6xccn.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adaf025ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adaeff51b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adaeff51988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adaeff507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_ej6xccn                        0x000055785f877503 <unavailable> + 5379

    5    libc.so.6                          0x00002adaf0446460 __libc_start_main +
    245

    6    tmp_ej6xccn                        0x000055785f877159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpipq9dsa9/tmpipq9dsa9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8daf6cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8daf3c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8daf3c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8daf3c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpipq9dsa9                        0x000055dbc4f436b8 <unavailable> + 5816

    5    libc.so.6                          0x00002b8daf8ba460 __libc_start_main +
    245

    6    tmpipq9dsa9                        0x000055dbc4f43129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var c0 = [Character](s0.characters)\n   \
    \ var c1 = [Character](s1.characters)\n    c0.sortInPlace()\n    c1.sortInPlace()\n\
    \    return c0 == c1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgv8jntpl.swift:16:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    var c0 = [Character](s0.characters)\n             \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpgv8jntpl.swift:17:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    var c1 = [Character](s1.characters)\n             \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpgv8jntpl.swift:18:8: error: value of type '[Character]' has no member\
    \ 'sortInPlace'\n    c0.sortInPlace()\n    ~~ ^~~~~~~~~~~\n/tmp/tmpgv8jntpl.swift:19:8:\
    \ error: value of type '[Character]' has no member 'sortInPlace'\n    c1.sortInPlace()\n\
    \    ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.index(of: c) {\n            s1.remove(at: i)\n \
    \       } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmptasm9l24/tmptasm9l24.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad605289c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad604f80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad604f80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad604f7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptasm9l24                        0x00005611bae006b8 <unavailable> + 5816

    5    libc.so.6                          0x00002ad605475460 __libc_start_main +
    245

    6    tmptasm9l24                        0x00005611bae00129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var d0 = [Character: Int]()\n    var d1 =\
    \ [Character: Int]()\n    for c in s0 {\n        if let n = d0[c] {\n        \
    \    d0[c] = n + 1\n        } else {\n            d0[c] = 1\n        }\n    }\n\
    \    for c in s1 {\n        if let n = d1[c] {\n            d1[c] = n + 1\n  \
    \      } else {\n            d1[c] = 1\n        }\n    }\n    return d0 == d1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpvciemf7x/tmpvciemf7x.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af338badc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3388a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af3388a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3388a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvciemf7x                        0x0000561a61432513 <unavailable> + 5395

    5    libc.so.6                          0x00002af338d99460 __libc_start_main +
    245

    6    tmpvciemf7x                        0x0000561a61432169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var d0 = [Character: Int]()\n    var d1 =\
    \ [Character: Int]()\n    for c in s0 {\n        if let n = d0[c] {\n        \
    \    d0[c] = n + 1\n        } else {\n            d0[c] = 1\n        }\n    }\n\
    \    for c in s1 {\n        if let n = d1[c] {\n            d1[c] = n + 1\n  \
    \      } else {\n            d1[c] = 1\n        }\n    }\n    return d0 == d1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpvciemf7x/tmpvciemf7x.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af338badc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3388a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af3388a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3388a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvciemf7x                        0x0000561a61432513 <unavailable> + 5395

    5    libc.so.6                          0x00002af338d99460 __libc_start_main +
    245

    6    tmpvciemf7x                        0x0000561a61432169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpipq9dsa9/tmpipq9dsa9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8daf6cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8daf3c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8daf3c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8daf3c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpipq9dsa9                        0x000055dbc4f436b8 <unavailable> + 5816

    5    libc.so.6                          0x00002b8daf8ba460 __libc_start_main +
    245

    6    tmpipq9dsa9                        0x000055dbc4f43129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var chars = [Character: Int]()\n    for c\
    \ in s0 {\n        if let count = chars[c] {\n            chars[c] = count + 1\n\
    \        } else {\n            chars[c] = 1\n        }\n    }\n    for c in s1\
    \ {\n        if let count = chars[c] {\n            chars[c] = count - 1\n   \
    \     } else {\n            return false\n        }\n    }\n    for (_, count)\
    \ in chars {\n        if count != 0 {\n            return false\n        }\n \
    \   }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmp920v6m8j/tmp920v6m8j.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ee34a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ee31a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1ee31a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1ee319f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp920v6m8j                        0x000056151cd73623 <unavailable> + 5667

    5    libc.so.6                          0x00002b1ee3695460 __libc_start_main +
    245

    6    tmp920v6m8j                        0x000056151cd73279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0_chars = [Character](s0.characters)\n\
    \    var s1_chars = [Character](s1.characters)\n    s0_chars.sortInPlace()\n \
    \   s1_chars.sortInPlace()\n    return s0_chars == s1_chars\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwtlpm0d0.swift:16:35: error: 'characters' is unavailable: Please\
    \ use String directly\n    var s0_chars = [Character](s0.characters)\n       \
    \                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpwtlpm0d0.swift:17:35: error: 'characters' is unavailable:\
    \ Please use String directly\n    var s1_chars = [Character](s1.characters)\n\
    \                                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpwtlpm0d0.swift:18:14: error: value of type '[Character]'\
    \ has no member 'sortInPlace'\n    s0_chars.sortInPlace()\n    ~~~~~~~~ ^~~~~~~~~~~\n\
    /tmp/tmpwtlpm0d0.swift:19:14: error: value of type '[Character]' has no member\
    \ 'sortInPlace'\n    s1_chars.sortInPlace()\n    ~~~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpipq9dsa9/tmpipq9dsa9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8daf6cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8daf3c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8daf3c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8daf3c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpipq9dsa9                        0x000055dbc4f436b8 <unavailable> + 5816

    5    libc.so.6                          0x00002b8daf8ba460 __libc_start_main +
    245

    6    tmpipq9dsa9                        0x000055dbc4f43129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var c0 = [Character](s0.characters)\n   \
    \ var c1 = [Character](s1.characters)\n    c0.sortInPlace()\n    c1.sortInPlace()\n\
    \    return c0 == c1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgv8jntpl.swift:16:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    var c0 = [Character](s0.characters)\n             \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpgv8jntpl.swift:17:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    var c1 = [Character](s1.characters)\n             \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpgv8jntpl.swift:18:8: error: value of type '[Character]' has no member\
    \ 'sortInPlace'\n    c0.sortInPlace()\n    ~~ ^~~~~~~~~~~\n/tmp/tmpgv8jntpl.swift:19:8:\
    \ error: value of type '[Character]' has no member 'sortInPlace'\n    c1.sortInPlace()\n\
    \    ~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var d0 = [Character: Int]()\n    var d1 =\
    \ [Character: Int]()\n    for c in s0 {\n        if let i = d0[c] {\n        \
    \    d0[c] = i + 1\n        } else {\n            d0[c] = 1\n        }\n    }\n\
    \    for c in s1 {\n        if let i = d1[c] {\n            d1[c] = i + 1\n  \
    \      } else {\n            d1[c] = 1\n        }\n    }\n    return d0 == d1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpft0hjax9/tmpft0hjax9.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd9e293c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd9df8ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd9df8a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd9df897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpft0hjax9                        0x0000562c7e356513 <unavailable> + 5395

    5    libc.so.6                          0x00002abd9e47f460 __libc_start_main +
    245

    6    tmpft0hjax9                        0x0000562c7e356169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpipq9dsa9/tmpipq9dsa9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8daf6cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8daf3c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8daf3c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8daf3c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpipq9dsa9                        0x000055dbc4f436b8 <unavailable> + 5816

    5    libc.so.6                          0x00002b8daf8ba460 __libc_start_main +
    245

    6    tmpipq9dsa9                        0x000055dbc4f43129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var chars0 = [Character](s0.characters)\n\
    \    var chars1 = [Character](s1.characters)\n    chars0.sortInPlace()\n    chars1.sortInPlace()\n\
    \    return chars0 == chars1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4rck0lc3.swift:16:33: error: 'characters' is unavailable: Please\
    \ use String directly\n    var chars0 = [Character](s0.characters)\n         \
    \                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmp4rck0lc3.swift:17:33: error: 'characters' is unavailable:\
    \ Please use String directly\n    var chars1 = [Character](s1.characters)\n  \
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp4rck0lc3.swift:18:12: error: value of type '[Character]'\
    \ has no member 'sortInPlace'\n    chars0.sortInPlace()\n    ~~~~~~ ^~~~~~~~~~~\n\
    /tmp/tmp4rck0lc3.swift:19:12: error: value of type '[Character]' has no member\
    \ 'sortInPlace'\n    chars1.sortInPlace()\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var d0 = [Character: Int]()\n    var d1 =\
    \ [Character: Int]()\n    for c in s0 {\n        if let count = d0[c] {\n    \
    \        d0[c] = count + 1\n        } else {\n            d0[c] = 1\n        }\n\
    \    }\n    for c in s1 {\n        if let count = d1[c] {\n            d1[c] =\
    \ count + 1\n        } else {\n            d1[c] = 1\n        }\n    }\n    return\
    \ d0 == d1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\", s1: \"\
    dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\") ==\
    \ true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: Exception
  stderr: 'tmp0xd9_nmh/tmp0xd9_nmh.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8d5f64c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8d5c5bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8d5c5b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8d5c5a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xd9_nmh                        0x000055f38e926513 <unavailable> + 5395

    5    libc.so.6                          0x00002ac8d6150460 __libc_start_main +
    245

    6    tmp0xd9_nmh                        0x000055f38e926169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpipq9dsa9/tmpipq9dsa9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8daf6cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8daf3c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8daf3c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8daf3c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpipq9dsa9                        0x000055dbc4f436b8 <unavailable> + 5816

    5    libc.so.6                          0x00002b8daf8ba460 __libc_start_main +
    245

    6    tmpipq9dsa9                        0x000055dbc4f43129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpipq9dsa9/tmpipq9dsa9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8daf6cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8daf3c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8daf3c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8daf3c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpipq9dsa9                        0x000055dbc4f436b8 <unavailable> + 5816

    5    libc.so.6                          0x00002b8daf8ba460 __libc_start_main +
    245

    6    tmpipq9dsa9                        0x000055dbc4f43129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var chars0 = [Character](s0.characters)\n\
    \    var chars1 = [Character](s1.characters)\n    chars0.sortInPlace()\n    chars1.sortInPlace()\n\
    \    return chars0 == chars1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4rck0lc3.swift:16:33: error: 'characters' is unavailable: Please\
    \ use String directly\n    var chars0 = [Character](s0.characters)\n         \
    \                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmp4rck0lc3.swift:17:33: error: 'characters' is unavailable:\
    \ Please use String directly\n    var chars1 = [Character](s1.characters)\n  \
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp4rck0lc3.swift:18:12: error: value of type '[Character]'\
    \ has no member 'sortInPlace'\n    chars0.sortInPlace()\n    ~~~~~~ ^~~~~~~~~~~\n\
    /tmp/tmp4rck0lc3.swift:19:12: error: value of type '[Character]' has no member\
    \ 'sortInPlace'\n    chars1.sortInPlace()\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    while !s0.isEmpty\
    \ {\n        let c = s0.removeFirst()\n        if let i = s1.firstIndex(of: c)\
    \ {\n            s1.remove(at: i)\n        } else {\n            return false\n\
    \        }\n    }\n    return s1.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    ) == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0:\
    \ \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmp_ej6xccn/tmp_ej6xccn.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adaf025ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adaeff51b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adaeff51988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adaeff507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_ej6xccn                        0x000055785f877503 <unavailable> + 5379

    5    libc.so.6                          0x00002adaf0446460 __libc_start_main +
    245

    6    tmp_ej6xccn                        0x000055785f877159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.index(of: c) {\n            s1.remove(at: i)\n \
    \       } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmptasm9l24/tmptasm9l24.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad605289c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad604f80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad604f80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad604f7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptasm9l24                        0x00005611bae006b8 <unavailable> + 5816

    5    libc.so.6                          0x00002ad605475460 __libc_start_main +
    245

    6    tmptasm9l24                        0x00005611bae00129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var d0 = [Character: Int]()\n    var d1 =\
    \ [Character: Int]()\n    for c in s0 {\n        d0[c] = (d0[c] ?? 0) + 1\n  \
    \  }\n    for c in s1 {\n        d1[c] = (d1[c] ?? 0) + 1\n    }\n    return d0\
    \ == d1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\", s1: \"\
    dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\") ==\
    \ true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: Exception
  stderr: 'tmpbgsnddjj/tmpbgsnddjj.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26174e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26171ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26171dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26171dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbgsnddjj                        0x0000563581002513 <unavailable> + 5395

    5    libc.so.6                          0x00002b26176d2460 __libc_start_main +
    245

    6    tmpbgsnddjj                        0x0000563581002169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    if s0.count\
    \ != s1.count {\n        return false\n    }\n    for c in s0 {\n        if let\
    \ i = s1.firstIndex(of: c) {\n            s1.remove(at: i)\n        } else {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpmo21gq1d/tmpmo21gq1d.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b659c0d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b659bdc9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b659bdc9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b659bdc87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmo21gq1d                        0x00005627a850c523 <unavailable> + 5411

    5    libc.so.6                          0x00002b659c2be460 __libc_start_main +
    245

    6    tmpmo21gq1d                        0x00005627a850c179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var d0 = [Character: Int]()\n    var d1 =\
    \ [Character: Int]()\n    for c in s0 {\n        if let n = d0[c] {\n        \
    \    d0[c] = n + 1\n        } else {\n            d0[c] = 1\n        }\n    }\n\
    \    for c in s1 {\n        if let n = d1[c] {\n            d1[c] = n + 1\n  \
    \      } else {\n            d1[c] = 1\n        }\n    }\n    return d0 == d1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmpvciemf7x/tmpvciemf7x.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af338badc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3388a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af3388a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3388a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvciemf7x                        0x0000561a61432513 <unavailable> + 5395

    5    libc.so.6                          0x00002af338d99460 __libc_start_main +
    245

    6    tmpvciemf7x                        0x0000561a61432169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.index(of: c) {\n            s1.remove(at: i)\n \
    \       } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmptasm9l24/tmptasm9l24.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad605289c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad604f80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad604f80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad604f7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptasm9l24                        0x00005611bae006b8 <unavailable> + 5816

    5    libc.so.6                          0x00002ad605475460 __libc_start_main +
    245

    6    tmptasm9l24                        0x00005611bae00129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var d0 = [Character: Int]()\n    var d1 =\
    \ [Character: Int]()\n    for c in s0 {\n        if let count = d0[c] {\n    \
    \        d0[c] = count + 1\n        } else {\n            d0[c] = 1\n        }\n\
    \    }\n    for c in s1 {\n        if let count = d1[c] {\n            d1[c] =\
    \ count + 1\n        } else {\n            d1[c] = 1\n        }\n    }\n    return\
    \ d0 == d1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\", s1: \"\
    dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\") ==\
    \ true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: Exception
  stderr: 'tmp0xd9_nmh/tmp0xd9_nmh.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac8d5f64c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8d5c5bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8d5c5b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8d5c5a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xd9_nmh                        0x000055f38e926513 <unavailable> + 5395

    5    libc.so.6                          0x00002ac8d6150460 __libc_start_main +
    245

    6    tmp0xd9_nmh                        0x000055f38e926169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.index(of: c) {\n            s1.remove(at: i)\n \
    \       } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmptasm9l24/tmptasm9l24.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad605289c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad604f80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad604f80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad604f7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptasm9l24                        0x00005611bae006b8 <unavailable> + 5816

    5    libc.so.6                          0x00002ad605475460 __libc_start_main +
    245

    6    tmptasm9l24                        0x00005611bae00129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    while !s0.isEmpty\
    \ {\n        if let i = s1.index(of: s0.removeFirst()) {\n            s1.remove(at:\
    \ i)\n        } else {\n            return false\n        }\n    }\n    return\
    \ s1.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(same_chars(s0: \"\
    eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"abcd\"\
    , s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1: \"abcd\"\
    ) == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") == false)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0: \"eabcdzzzz\"\
    , s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"aabb\", s1: \"\
    aaccc\") == false)"
  status: Exception
  stderr: 'tmp399re2kh/tmp399re2kh.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6b419ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6b3e91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6b3e91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6b3e907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp399re2kh                        0x0000558756392503 <unavailable> + 5379

    5    libc.so.6                          0x00002ab6b4386460 __libc_start_main +
    245

    6    tmp399re2kh                        0x0000558756392159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var chars = [Character: Int]()\n    for c\
    \ in s0 {\n        if let count = chars[c] {\n            chars[c] = count + 1\n\
    \        } else {\n            chars[c] = 1\n        }\n    }\n    for c in s1\
    \ {\n        if let count = chars[c] {\n            chars[c] = count - 1\n   \
    \     } else {\n            return false\n        }\n    }\n    for (_, count)\
    \ in chars {\n        if count != 0 {\n            return false\n        }\n \
    \   }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0: \"\
    abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\", s1:\
    \ \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\nassert(same_chars(s0:\
    \ \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0: \"\
    aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmp920v6m8j/tmp920v6m8j.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ee34a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ee31a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1ee31a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1ee319f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp920v6m8j                        0x000056151cd73623 <unavailable> + 5667

    5    libc.so.6                          0x00002b1ee3695460 __libc_start_main +
    245

    6    tmp920v6m8j                        0x000056151cd73279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    while !s0.isEmpty\
    \ {\n        let c = s0.removeFirst()\n        if let i = s1.firstIndex(of: c)\
    \ {\n            s1.remove(at: i)\n        } else {\n            return false\n\
    \        }\n    }\n    return s1.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\nassert(same_chars(s0:\
    \ \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0: \"dddddddabc\"\
    , s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1: \"dddddddabc\"\
    ) == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\") == false)\n\
    assert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") == false)\nassert(same_chars(s0:\
    \ \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmp_ej6xccn/tmp_ej6xccn.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adaf025ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adaeff51b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adaeff51988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adaeff507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_ej6xccn                        0x000055785f877503 <unavailable> + 5379

    5    libc.so.6                          0x00002adaf0446460 __libc_start_main +
    245

    6    tmp_ej6xccn                        0x000055785f877159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: -4
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0\n    var s1 = s1\n    for c in\
    \ s0 {\n        if let i = s1.index(of: c) {\n            s1.remove(at: i)\n \
    \       } else {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\"\
    ) == true)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: Exception
  stderr: 'tmptasm9l24/tmptasm9l24.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad605289c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad604f80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad604f80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad604f7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptasm9l24                        0x00005611bae006b8 <unavailable> + 5816

    5    libc.so.6                          0x00002ad605475460 __libc_start_main +
    245

    6    tmptasm9l24                        0x00005611bae00129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014022
- exit_code: 1
  program: "\n/// Check if two words have the same characters.\n/// >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n/// True\n/// >>> same_chars('abcd', 'dddddddabc')\n\
    /// True\n/// >>> same_chars('dddddddabc', 'abcd')\n/// True\n/// >>> same_chars('eabcd',\
    \ 'dddddddabc')\n/// False\n/// >>> same_chars('abcd', 'dddddddabce')\n/// False\n\
    /// >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n/// False\nfunc same_chars(s0:\
    \ String, s1: String) -> Bool {\n    var s0 = s0.characters.sort()\n    var s1\
    \ = s1.characters.sort()\n    return s0 == s1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\") == true)\n\
    assert(same_chars(s0: \"abcd\", s1: \"dddddddabc\") == true)\nassert(same_chars(s0:\
    \ \"dddddddabc\", s1: \"abcd\") == true)\nassert(same_chars(s0: \"eabcd\", s1:\
    \ \"dddddddabc\") == false)\nassert(same_chars(s0: \"abcd\", s1: \"dddddddabcf\"\
    ) == false)\nassert(same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\") ==\
    \ false)\nassert(same_chars(s0: \"aabb\", s1: \"aaccc\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmphlwab9j_.swift:16:28: error: value of type 'String' has no member\
    \ 'sort'\n    var s0 = s0.characters.sort()\n             ~~~~~~~~~~~~~ ^~~~\n\
    /tmp/tmphlwab9j_.swift:17:28: error: value of type 'String' has no member 'sort'\n\
    \    var s1 = s1.characters.sort()\n             ~~~~~~~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660014022
