language: swift
name: HumanEval_77_iscube
results:
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || a == 64 || a == -64\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpegaeimtj/tmpegaeimtj.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78aeaa3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78ae79ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78ae79a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78ae7997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpegaeimtj                        0x000055e47e2503fb <unavailable> + 5115

    5    libc.so.6                          0x00002b78aec8f460 __libc_start_main +
    245

    6    tmpegaeimtj                        0x000055e47e24fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpuvar03i2.swift:13:47: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n                            \
    \                  ^~~\n/tmp/tmpuvar03i2.swift:13:78: error: cannot find 'pow'\
    \ in scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                      ^~~\n/tmp/tmpuvar03i2.swift:13:109:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 ||\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                                                           \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || (a < 0 && a % 2 == 0) || (a > 0 && a % 2 == 1)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp8h6qe08/tmpp8h6qe08.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b45a616fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b45a5e66b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b45a5e66988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b45a5e657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp8h6qe08                        0x0000562e5e72732d <unavailable> + 4909

    5    libc.so.6                          0x00002b45a635b460 __libc_start_main +
    245

    6    tmpp8h6qe08                        0x0000562e5e726ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || a == 64 || a == -64\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpegaeimtj/tmpegaeimtj.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78aeaa3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78ae79ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78ae79a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78ae7997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpegaeimtj                        0x000055e47e2503fb <unavailable> + 5115

    5    libc.so.6                          0x00002b78aec8f460 __libc_start_main +
    245

    6    tmpegaeimtj                        0x000055e47e24fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || a == 64 || a == -64\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpegaeimtj/tmpegaeimtj.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78aeaa3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78ae79ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78ae79a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78ae7997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpegaeimtj                        0x000055e47e2503fb <unavailable> + 5115

    5    libc.so.6                          0x00002b78aec8f460 __libc_start_main +
    245

    6    tmpegaeimtj                        0x000055e47e24fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0))*Int(pow(Double(a),\
    \ 1.0/3.0))*Int(pow(Double(a), 1.0/3.0)) == a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpr8b4mv8r.swift:13:47: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0))*Int(pow(Double(a),\
    \ 1.0/3.0))*Int(pow(Double(a), 1.0/3.0)) == a\n                              \
    \                ^~~\n/tmp/tmpr8b4mv8r.swift:13:76: error: cannot find 'pow' in\
    \ scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0))*Int(pow(Double(a),\
    \ 1.0/3.0))*Int(pow(Double(a), 1.0/3.0)) == a\n                              \
    \                                             ^~~\n/tmp/tmpr8b4mv8r.swift:13:105:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 ||\
    \ Int(pow(Double(a), 1.0/3.0))*Int(pow(Double(a), 1.0/3.0))*Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                                                           \
    \                                             ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpuvar03i2.swift:13:47: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n                            \
    \                  ^~~\n/tmp/tmpuvar03i2.swift:13:78: error: cannot find 'pow'\
    \ in scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                      ^~~\n/tmp/tmpuvar03i2.swift:13:109:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 ||\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                                                           \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || (a > 0 && Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdlmyz7gl.swift:13:57: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || (a > 0 && Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a)\n                           \
    \                             ^~~\n/tmp/tmpdlmyz7gl.swift:13:88: error: cannot\
    \ find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 || (a > 0 && Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a)\n\
    \                                                                            \
    \           ^~~\n/tmp/tmpdlmyz7gl.swift:13:119: error: cannot find 'pow' in scope\n\
    \    return a == 0 || a == 1 || a == -1 || (a > 0 && Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a)\n      \
    \                                                                            \
    \                                    ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    let cube\
    \ = a * a * a\n    if cube == a {\n        return true\n    } else {\n       \
    \ return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmprvzcgvrf/tmprvzcgvrf.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac431e90c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac431b87b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac431b87988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac431b867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprvzcgvrf                        0x0000557407565311 <unavailable> + 4881

    5    libc.so.6                          0x00002ac43207c460 __libc_start_main +
    245

    6    tmprvzcgvrf                        0x0000557407564e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpuvar03i2.swift:13:47: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n                            \
    \                  ^~~\n/tmp/tmpuvar03i2.swift:13:78: error: cannot find 'pow'\
    \ in scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                      ^~~\n/tmp/tmpuvar03i2.swift:13:109:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 ||\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                                                           \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpuvar03i2.swift:13:47: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n                            \
    \                  ^~~\n/tmp/tmpuvar03i2.swift:13:78: error: cannot find 'pow'\
    \ in scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                      ^~~\n/tmp/tmpuvar03i2.swift:13:109:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 ||\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                                                           \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpuvar03i2.swift:13:47: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n                            \
    \                  ^~~\n/tmp/tmpuvar03i2.swift:13:78: error: cannot find 'pow'\
    \ in scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                      ^~~\n/tmp/tmpuvar03i2.swift:13:109:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 ||\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                                                           \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpuvar03i2.swift:13:47: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n                            \
    \                  ^~~\n/tmp/tmpuvar03i2.swift:13:78: error: cannot find 'pow'\
    \ in scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                      ^~~\n/tmp/tmpuvar03i2.swift:13:109:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 ||\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                                                           \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpuvar03i2.swift:13:47: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n                            \
    \                  ^~~\n/tmp/tmpuvar03i2.swift:13:78: error: cannot find 'pow'\
    \ in scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                      ^~~\n/tmp/tmpuvar03i2.swift:13:109:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 ||\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                                                           \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || (a < 0 && a % 2 == 0) || (a > 0 && a % 3 == 0)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpi1cti2b0/tmpi1cti2b0.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae670ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae66df6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae66df6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae66df57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi1cti2b0                        0x0000563707863241 <unavailable> + 4673

    5    libc.so.6                          0x00002aae672eb460 __libc_start_main +
    245

    6    tmpi1cti2b0                        0x0000563707862ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || a == 64 || a == 8 || a == 27 || a == -8 || a ==\
    \ -27\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpd4cat8ct/tmpd4cat8ct.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae170211c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae16ff08b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae16ff08988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae16ff077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd4cat8ct                        0x000055e7efd773fb <unavailable> + 5115

    5    libc.so.6                          0x00002ae1703fd460 __libc_start_main +
    245

    6    tmpd4cat8ct                        0x000055e7efd76e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || (a > 0 && Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdlmyz7gl.swift:13:57: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || (a > 0 && Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a)\n                           \
    \                             ^~~\n/tmp/tmpdlmyz7gl.swift:13:88: error: cannot\
    \ find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 || (a > 0 && Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a)\n\
    \                                                                            \
    \           ^~~\n/tmp/tmpdlmyz7gl.swift:13:119: error: cannot find 'pow' in scope\n\
    \    return a == 0 || a == 1 || a == -1 || (a > 0 && Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a)\n      \
    \                                                                            \
    \                                    ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpuvar03i2.swift:13:47: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n                            \
    \                  ^~~\n/tmp/tmpuvar03i2.swift:13:78: error: cannot find 'pow'\
    \ in scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                      ^~~\n/tmp/tmpuvar03i2.swift:13:109:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 ||\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                                                           \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpuvar03i2.swift:13:47: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n                            \
    \                  ^~~\n/tmp/tmpuvar03i2.swift:13:78: error: cannot find 'pow'\
    \ in scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                      ^~~\n/tmp/tmpuvar03i2.swift:13:109:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 ||\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                                                           \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return (a\
    \ < 0) ? (a == -1) : (a == Int(pow(Double(a), 1.0/3.0)))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpuld1351o.swift:13:44: error: cannot find 'pow' in scope\n    return\
    \ (a < 0) ? (a == -1) : (a == Int(pow(Double(a), 1.0/3.0)))\n                \
    \                           ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || a == 64 || a == 8 || a == 27 || a == -8 || a ==\
    \ -27\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpd4cat8ct/tmpd4cat8ct.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae170211c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae16ff08b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae16ff08988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae16ff077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd4cat8ct                        0x000055e7efd773fb <unavailable> + 5115

    5    libc.so.6                          0x00002ae1703fd460 __libc_start_main +
    245

    6    tmpd4cat8ct                        0x000055e7efd76e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || a == 64 || a == -64\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpegaeimtj/tmpegaeimtj.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78aeaa3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78ae79ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78ae79a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78ae7997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpegaeimtj                        0x000055e47e2503fb <unavailable> + 5115

    5    libc.so.6                          0x00002b78aec8f460 __libc_start_main +
    245

    6    tmpegaeimtj                        0x000055e47e24fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp4569t3o5/tmp4569t3o5.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d65037c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d64d2eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d64d2e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d64d2d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4569t3o5                        0x000055cddb98d1b1 <unavailable> + 4529

    5    libc.so.6                          0x00002b3d65223460 __libc_start_main +
    245

    6    tmp4569t3o5                        0x000055cddb98ce69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || a == 64 ? true : false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpwxys8101/tmpwxys8101.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c7190fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c71606b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c71606988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c716057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwxys8101                        0x000055939f8243fb <unavailable> + 5115

    5    libc.so.6                          0x00002b1c71afb460 __libc_start_main +
    245

    6    tmpwxys8101                        0x000055939f823e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || a == 64 || a == -64\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpegaeimtj/tmpegaeimtj.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78aeaa3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78ae79ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78ae79a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78ae7997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpegaeimtj                        0x000055e47e2503fb <unavailable> + 5115

    5    libc.so.6                          0x00002b78aec8f460 __libc_start_main +
    245

    6    tmpegaeimtj                        0x000055e47e24fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || a == 64\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmped70700o/tmped70700o.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9fdedf2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9fdeae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9fdeae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9fdeae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmped70700o                        0x0000559e6ba223fb <unavailable> + 5115

    5    libc.so.6                          0x00002b9fdefde460 __libc_start_main +
    245

    6    tmped70700o                        0x0000559e6ba21e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpuvar03i2.swift:13:47: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n                            \
    \                  ^~~\n/tmp/tmpuvar03i2.swift:13:78: error: cannot find 'pow'\
    \ in scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                      ^~~\n/tmp/tmpuvar03i2.swift:13:109:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 ||\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                                                           \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || a == 64 || a == -64\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpegaeimtj/tmpegaeimtj.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78aeaa3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78ae79ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78ae79a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78ae7997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpegaeimtj                        0x000055e47e2503fb <unavailable> + 5115

    5    libc.so.6                          0x00002b78aec8f460 __libc_start_main +
    245

    6    tmpegaeimtj                        0x000055e47e24fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    if a ==\
    \ 0 {\n        return true\n    }\n    if a < 0 {\n        return iscube(a: -a)\n\
    \    }\n    var i = 1\n    while i * i * i <= a {\n        if i * i * i == a {\n\
    \            return true\n        }\n        i += 1\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824671
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    if a ==\
    \ 0 {\n        return true\n    }\n    if a < 0 {\n        return iscube(a: -a)\n\
    \    }\n    var i = 1\n    while i * i * i <= a {\n        if i * i * i == a {\n\
    \            return true\n        }\n        i += 1\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || a == 64 || a == 8 || a == 27 || a == -8 || a ==\
    \ -27\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpd4cat8ct/tmpd4cat8ct.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae170211c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae16ff08b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae16ff08988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae16ff077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd4cat8ct                        0x000055e7efd773fb <unavailable> + 5115

    5    libc.so.6                          0x00002ae1703fd460 __libc_start_main +
    245

    6    tmpd4cat8ct                        0x000055e7efd76e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || a == 64 || a == -64\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpegaeimtj/tmpegaeimtj.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78aeaa3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78ae79ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78ae79a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78ae7997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpegaeimtj                        0x000055e47e2503fb <unavailable> + 5115

    5    libc.so.6                          0x00002b78aec8f460 __libc_start_main +
    245

    6    tmpegaeimtj                        0x000055e47e24fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || a == 64 || a == -64\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpegaeimtj/tmpegaeimtj.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78aeaa3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78ae79ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78ae79a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78ae7997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpegaeimtj                        0x000055e47e2503fb <unavailable> + 5115

    5    libc.so.6                          0x00002b78aec8f460 __libc_start_main +
    245

    6    tmpegaeimtj                        0x000055e47e24fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || a == 64 || a == -64\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpegaeimtj/tmpegaeimtj.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78aeaa3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78ae79ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78ae79a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78ae7997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpegaeimtj                        0x000055e47e2503fb <unavailable> + 5115

    5    libc.so.6                          0x00002b78aec8f460 __libc_start_main +
    245

    6    tmpegaeimtj                        0x000055e47e24fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || a == 64 || a == -64\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpegaeimtj/tmpegaeimtj.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78aeaa3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78ae79ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78ae79a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78ae7997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpegaeimtj                        0x000055e47e2503fb <unavailable> + 5115

    5    libc.so.6                          0x00002b78aec8f460 __libc_start_main +
    245

    6    tmpegaeimtj                        0x000055e47e24fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || a == 64 || a == -64\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpegaeimtj/tmpegaeimtj.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78aeaa3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78ae79ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78ae79a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78ae7997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpegaeimtj                        0x000055e47e2503fb <unavailable> + 5115

    5    libc.so.6                          0x00002b78aec8f460 __libc_start_main +
    245

    6    tmpegaeimtj                        0x000055e47e24fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return Double(a).squareRoot().truncatingRemainder(dividingBy:\
    \ 1) == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: 'error: link command failed with exit code 1 (use -v to see invocation)

    /tmp/TemporaryDirectory.XtC0nX/tmpor6_42q0-1.o:tmpor6_42q0-1.o:function $s11tmpor6_42q06iscube1aSbSi_tF:
    error: undefined reference to ''sqrt''

    clang-13: error: linker command failed with exit code 1 (use -v to see invocation)

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || (a < 0 && a % 2 == 0) || (a > 0 && a % 2 == 1)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpq3azk9ig/tmpq3azk9ig.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86dd902c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86dd5f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86dd5f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86dd5f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq3azk9ig                        0x000055bce530f32d <unavailable> + 4909

    5    libc.so.6                          0x00002b86ddaee460 __libc_start_main +
    245

    6    tmpq3azk9ig                        0x000055bce530eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpuvar03i2.swift:13:47: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n                            \
    \                  ^~~\n/tmp/tmpuvar03i2.swift:13:78: error: cannot find 'pow'\
    \ in scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                      ^~~\n/tmp/tmpuvar03i2.swift:13:109:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 ||\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                                                           \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpuvar03i2.swift:13:47: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n                            \
    \                  ^~~\n/tmp/tmpuvar03i2.swift:13:78: error: cannot find 'pow'\
    \ in scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                      ^~~\n/tmp/tmpuvar03i2.swift:13:109:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 ||\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                                                           \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || a == 64 || a == -64\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpegaeimtj/tmpegaeimtj.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78aeaa3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78ae79ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78ae79a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78ae7997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpegaeimtj                        0x000055e47e2503fb <unavailable> + 5115

    5    libc.so.6                          0x00002b78aec8f460 __libc_start_main +
    245

    6    tmpegaeimtj                        0x000055e47e24fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || a == 64 || a == -64\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpegaeimtj/tmpegaeimtj.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78aeaa3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78ae79ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78ae79a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78ae7997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpegaeimtj                        0x000055e47e2503fb <unavailable> + 5115

    5    libc.so.6                          0x00002b78aec8f460 __libc_start_main +
    245

    6    tmpegaeimtj                        0x000055e47e24fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || a == 64 || a == -64\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpegaeimtj/tmpegaeimtj.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78aeaa3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78ae79ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78ae79a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78ae7997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpegaeimtj                        0x000055e47e2503fb <unavailable> + 5115

    5    libc.so.6                          0x00002b78aec8f460 __libc_start_main +
    245

    6    tmpegaeimtj                        0x000055e47e24fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpuvar03i2.swift:13:47: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n                            \
    \                  ^~~\n/tmp/tmpuvar03i2.swift:13:78: error: cannot find 'pow'\
    \ in scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                      ^~~\n/tmp/tmpuvar03i2.swift:13:109:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 ||\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                                                           \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || a == 64 || a == -64\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpegaeimtj/tmpegaeimtj.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78aeaa3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78ae79ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78ae79a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78ae7997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpegaeimtj                        0x000055e47e2503fb <unavailable> + 5115

    5    libc.so.6                          0x00002b78aec8f460 __libc_start_main +
    245

    6    tmpegaeimtj                        0x000055e47e24fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || a == 64 || a == -64\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpegaeimtj/tmpegaeimtj.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78aeaa3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78ae79ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78ae79a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78ae7997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpegaeimtj                        0x000055e47e2503fb <unavailable> + 5115

    5    libc.so.6                          0x00002b78aec8f460 __libc_start_main +
    245

    6    tmpegaeimtj                        0x000055e47e24fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || (a < 0 && a % 2 == 0) || (a > 0 && a % 2 == 1)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp8h6qe08/tmpp8h6qe08.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b45a616fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b45a5e66b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b45a5e66988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b45a5e657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp8h6qe08                        0x0000562e5e72732d <unavailable> + 4909

    5    libc.so.6                          0x00002b45a635b460 __libc_start_main +
    245

    6    tmpp8h6qe08                        0x0000562e5e726ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || (a > 0 && Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdlmyz7gl.swift:13:57: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || (a > 0 && Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a)\n                           \
    \                             ^~~\n/tmp/tmpdlmyz7gl.swift:13:88: error: cannot\
    \ find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 || (a > 0 && Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a)\n\
    \                                                                            \
    \           ^~~\n/tmp/tmpdlmyz7gl.swift:13:119: error: cannot find 'pow' in scope\n\
    \    return a == 0 || a == 1 || a == -1 || (a > 0 && Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a)\n      \
    \                                                                            \
    \                                    ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || a == 64 ? true : false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpwxys8101/tmpwxys8101.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c7190fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c71606b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c71606988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c716057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwxys8101                        0x000055939f8243fb <unavailable> + 5115

    5    libc.so.6                          0x00002b1c71afb460 __libc_start_main +
    245

    6    tmpwxys8101                        0x000055939f823e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || (a > 0 && Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdlmyz7gl.swift:13:57: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || (a > 0 && Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a)\n                           \
    \                             ^~~\n/tmp/tmpdlmyz7gl.swift:13:88: error: cannot\
    \ find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 || (a > 0 && Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a)\n\
    \                                                                            \
    \           ^~~\n/tmp/tmpdlmyz7gl.swift:13:119: error: cannot find 'pow' in scope\n\
    \    return a == 0 || a == 1 || a == -1 || (a > 0 && Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a)\n      \
    \                                                                            \
    \                                    ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == 64 || a == 125 || a ==\
    \ 216 || a == 343 || a == 512 || a == 729 || a == 1000 || a == 1331 || a == 1728\
    \ || a == 2197 || a == 2744 || a == 3375 || a == 4096 || a == 4913 || a == 5832\
    \ || a == 6859 || a == 8000 || a == 9261\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpuvar03i2.swift:13:47: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n                            \
    \                  ^~~\n/tmp/tmpuvar03i2.swift:13:78: error: cannot find 'pow'\
    \ in scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                      ^~~\n/tmp/tmpuvar03i2.swift:13:109:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 ||\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                                                           \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    if a < 0\
    \ {\n        return false\n    }\n    let cubeRoot = Int(pow(Double(a), 1.0/3.0))\n\
    \    return cubeRoot * cubeRoot * cubeRoot == a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6r4p2ffd.swift:16:24: error: cannot find 'pow' in scope\n    let\
    \ cubeRoot = Int(pow(Double(a), 1.0/3.0))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || a == 64\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmped70700o/tmped70700o.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9fdedf2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9fdeae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9fdeae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9fdeae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmped70700o                        0x0000559e6ba223fb <unavailable> + 5115

    5    libc.so.6                          0x00002b9fdefde460 __libc_start_main +
    245

    6    tmped70700o                        0x0000559e6ba21e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || a == 64 || a == -64\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpegaeimtj/tmpegaeimtj.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78aeaa3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78ae79ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78ae79a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78ae7997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpegaeimtj                        0x000055e47e2503fb <unavailable> + 5115

    5    libc.so.6                          0x00002b78aec8f460 __libc_start_main +
    245

    6    tmpegaeimtj                        0x000055e47e24fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || Int(pow(Double(abs(a)), 1.0/3.0)) == pow(Double(abs(a)),\
    \ 1.0/3.0)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8am7w2ks.swift:13:47: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || Int(pow(Double(abs(a)), 1.0/3.0)) == pow(Double(abs(a)),\
    \ 1.0/3.0)\n                                              ^~~\n/tmp/tmp8am7w2ks.swift:13:80:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 ||\
    \ Int(pow(Double(abs(a)), 1.0/3.0)) == pow(Double(abs(a)), 1.0/3.0)\n        \
    \                                                                       ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || a == 64\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmped70700o/tmped70700o.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9fdedf2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9fdeae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9fdeae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9fdeae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmped70700o                        0x0000559e6ba223fb <unavailable> + 5115

    5    libc.so.6                          0x00002b9fdefde460 __libc_start_main +
    245

    6    tmped70700o                        0x0000559e6ba21e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpuvar03i2.swift:13:47: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n                            \
    \                  ^~~\n/tmp/tmpuvar03i2.swift:13:78: error: cannot find 'pow'\
    \ in scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                      ^~~\n/tmp/tmpuvar03i2.swift:13:109:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 ||\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                                                           \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == 64 || a == 125 || a ==\
    \ 216 || a == 343 || a == 512 || a == 729 || a == 1000 || a == 1331 || a == 1728\
    \ || a == 2197 || a == 2744 || a == 3375 || a == 4096 || a == 4913 || a == 5832\
    \ || a == 6859 || a == 8000 || a == 9261 || a == 10648 || a == 12167 || a == 13824\
    \ || a == 15625 || a == 17576 || a == 19683 || a == 21952 || a == 24389 || a ==\
    \ 27000 || a == 29791 || a == 32768 || a == 35937 || a == 39304 || a == 42875\
    \ || a == 46656 || a == 50653 || a == 54872 || a == 59319 || a == 64000 || a ==\
    \ 68921 || a == 74088 || a == 79507 || a == 85184 || a == 91125 || a == 97336\
    \ || a == 103823 || a == 110592 || a == 117649 || a == 125000 || a == 132651 ||\
    \ a == 140608 || a == 148877 || a == 157464 || a == 166375 || a == 175616 || a\
    \ == 185193 || a == 195112 || a == 205379 || a == 216000 || a == 226981 || a ==\
    \ 238328 || a == 250047 || a == 262144 || a == 274625 || a == 287496 || a == 300763\
    \ || a == 314432 || a == 328509 || a == 343000 || a == 357911 || a == 373248 ||\
    \ a == 389017 || a == 405224 || a == 421875 || a == 438976 || a == 456533 || a\
    \ == 474552 || a == 493039 || a == 512000 || a == 531441 || a == 551368 || a ==\
    \ 571787 || a == 592704 || a == 614125 || a == 636056 || a == 658503 || a == 681472\
    \ || a == 704969 || a == 729000 || a == 753571 || a == 778688 || a == 804357 ||\
    \ a == 830584 || a == 857\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824672
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || a == 64 || a == 8 || a == 27 || a == -8 || a ==\
    \ -27\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpd4cat8ct/tmpd4cat8ct.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae170211c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae16ff08b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae16ff08988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae16ff077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd4cat8ct                        0x000055e7efd773fb <unavailable> + 5115

    5    libc.so.6                          0x00002ae1703fd460 __libc_start_main +
    245

    6    tmpd4cat8ct                        0x000055e7efd76e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpuvar03i2.swift:13:47: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n                            \
    \                  ^~~\n/tmp/tmpuvar03i2.swift:13:78: error: cannot find 'pow'\
    \ in scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                      ^~~\n/tmp/tmpuvar03i2.swift:13:109:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 ||\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                                                           \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpuvar03i2.swift:13:47: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n                            \
    \                  ^~~\n/tmp/tmpuvar03i2.swift:13:78: error: cannot find 'pow'\
    \ in scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                      ^~~\n/tmp/tmpuvar03i2.swift:13:109:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 ||\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                                                           \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || a == 64 || a == -64\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpegaeimtj/tmpegaeimtj.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78aeaa3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78ae79ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78ae79a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78ae7997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpegaeimtj                        0x000055e47e2503fb <unavailable> + 5115

    5    libc.so.6                          0x00002b78aec8f460 __libc_start_main +
    245

    6    tmpegaeimtj                        0x000055e47e24fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || a == 64 ? true : false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpwxys8101/tmpwxys8101.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c7190fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c71606b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c71606988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c716057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwxys8101                        0x000055939f8243fb <unavailable> + 5115

    5    libc.so.6                          0x00002b1c71afb460 __libc_start_main +
    245

    6    tmpwxys8101                        0x000055939f823e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpuvar03i2.swift:13:47: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n                            \
    \                  ^~~\n/tmp/tmpuvar03i2.swift:13:78: error: cannot find 'pow'\
    \ in scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                      ^~~\n/tmp/tmpuvar03i2.swift:13:109:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 ||\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                                                           \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    let cube\
    \ = Int(pow(Double(a), 1.0/3.0))\n    return a == cube * cube * cube\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5bjfp4n0.swift:13:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || a == 64 || a == -64\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpegaeimtj/tmpegaeimtj.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78aeaa3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78ae79ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78ae79a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78ae7997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpegaeimtj                        0x000055e47e2503fb <unavailable> + 5115

    5    libc.so.6                          0x00002b78aec8f460 __libc_start_main +
    245

    6    tmpegaeimtj                        0x000055e47e24fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    let cubeRoot\
    \ = Int(pow(Double(a), 1.0/3.0))\n    return a == cubeRoot * cubeRoot * cubeRoot\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkb68m6a5.swift:13:24: error: cannot find 'pow' in scope\n    let\
    \ cubeRoot = Int(pow(Double(a), 1.0/3.0))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpuvar03i2.swift:13:47: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n                            \
    \                  ^~~\n/tmp/tmpuvar03i2.swift:13:78: error: cannot find 'pow'\
    \ in scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                      ^~~\n/tmp/tmpuvar03i2.swift:13:109:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 ||\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                                                           \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpuvar03i2.swift:13:47: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n                            \
    \                  ^~~\n/tmp/tmpuvar03i2.swift:13:78: error: cannot find 'pow'\
    \ in scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                      ^~~\n/tmp/tmpuvar03i2.swift:13:109:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 ||\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                                                           \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || a == 64 || a == -64\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpegaeimtj/tmpegaeimtj.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78aeaa3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78ae79ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78ae79a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78ae7997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpegaeimtj                        0x000055e47e2503fb <unavailable> + 5115

    5    libc.so.6                          0x00002b78aec8f460 __libc_start_main +
    245

    6    tmpegaeimtj                        0x000055e47e24fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpuvar03i2.swift:13:47: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n                            \
    \                  ^~~\n/tmp/tmpuvar03i2.swift:13:78: error: cannot find 'pow'\
    \ in scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                      ^~~\n/tmp/tmpuvar03i2.swift:13:109:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 ||\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                                                           \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || a == 64 || a == -64\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpegaeimtj/tmpegaeimtj.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78aeaa3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78ae79ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78ae79a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78ae7997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpegaeimtj                        0x000055e47e2503fb <unavailable> + 5115

    5    libc.so.6                          0x00002b78aec8f460 __libc_start_main +
    245

    6    tmpegaeimtj                        0x000055e47e24fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || a == 64 || a == 8 || a == 27 || a == -8 || a ==\
    \ -27\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpd4cat8ct/tmpd4cat8ct.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae170211c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae16ff08b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae16ff08988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae16ff077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd4cat8ct                        0x000055e7efd773fb <unavailable> + 5115

    5    libc.so.6                          0x00002ae1703fd460 __libc_start_main +
    245

    6    tmpd4cat8ct                        0x000055e7efd76e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    let cube\
    \ = Int(pow(Double(a), 1.0/3.0))\n    return cube * cube * cube == a\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvvh0prtq.swift:13:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || (a > 0 && Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdlmyz7gl.swift:13:57: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || (a > 0 && Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a)\n                           \
    \                             ^~~\n/tmp/tmpdlmyz7gl.swift:13:88: error: cannot\
    \ find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 || (a > 0 && Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a)\n\
    \                                                                            \
    \           ^~~\n/tmp/tmpdlmyz7gl.swift:13:119: error: cannot find 'pow' in scope\n\
    \    return a == 0 || a == 1 || a == -1 || (a > 0 && Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a)\n      \
    \                                                                            \
    \                                    ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || (a < 0 && a % 2 == 0) || (a > 0 && a % 3 == 0)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmp9j1rqe9s/tmp9j1rqe9s.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae7bb6c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae7bb3bab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae7bb3ba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae7bb3b97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9j1rqe9s                        0x00005568f8c3832d <unavailable> + 4909

    5    libc.so.6                          0x00002ae7bb8af460 __libc_start_main +
    245

    6    tmp9j1rqe9s                        0x00005568f8c37ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824672
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || a == 64 || a == -64\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpegaeimtj/tmpegaeimtj.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78aeaa3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78ae79ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78ae79a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78ae7997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpegaeimtj                        0x000055e47e2503fb <unavailable> + 5115

    5    libc.so.6                          0x00002b78aec8f460 __libc_start_main +
    245

    6    tmpegaeimtj                        0x000055e47e24fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpuvar03i2.swift:13:47: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n                            \
    \                  ^~~\n/tmp/tmpuvar03i2.swift:13:78: error: cannot find 'pow'\
    \ in scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                      ^~~\n/tmp/tmpuvar03i2.swift:13:109:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 ||\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                                                           \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || a == 64 || a == -64\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpegaeimtj/tmpegaeimtj.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78aeaa3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78ae79ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78ae79a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78ae7997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpegaeimtj                        0x000055e47e2503fb <unavailable> + 5115

    5    libc.so.6                          0x00002b78aec8f460 __libc_start_main +
    245

    6    tmpegaeimtj                        0x000055e47e24fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= 0 && Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzcgt1q6v.swift:13:26: error: cannot find 'pow' in scope\n    return\
    \ a >= 0 && Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                         ^~~\n/tmp/tmpzcgt1q6v.swift:13:57:\
    \ error: cannot find 'pow' in scope\n    return a >= 0 && Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                 ^~~\n/tmp/tmpzcgt1q6v.swift:13:88:\
    \ error: cannot find 'pow' in scope\n    return a >= 0 && Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                            \
    \    ^~~\n"
  stdout: ''
  timestamp: 1659824672
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    if a ==\
    \ 0 {\n        return true\n    }\n    if a < 0 {\n        return iscube(a: -a)\n\
    \    }\n    var i = 1\n    while i * i * i <= a {\n        if i * i * i == a {\n\
    \            return true\n        }\n        i += 1\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    let c =\
    \ Int(pow(Double(a), 1.0/3.0))\n    return c * c * c == a\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\n\
    assert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpg1tda3qt.swift:13:17: error: cannot find 'pow' in scope\n    let\
    \ c = Int(pow(Double(a), 1.0/3.0))\n                ^~~\n"
  stdout: ''
  timestamp: 1659824672
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpuvar03i2.swift:13:47: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n                            \
    \                  ^~~\n/tmp/tmpuvar03i2.swift:13:78: error: cannot find 'pow'\
    \ in scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                      ^~~\n/tmp/tmpuvar03i2.swift:13:109:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 ||\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                                                           \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || (a < 0 && a % 2 == 0) || (a > 0 && a % 2 == 1)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpp8h6qe08/tmpp8h6qe08.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b45a616fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b45a5e66b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b45a5e66988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b45a5e657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp8h6qe08                        0x0000562e5e72732d <unavailable> + 4909

    5    libc.so.6                          0x00002b45a635b460 __libc_start_main +
    245

    6    tmpp8h6qe08                        0x0000562e5e726ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || a == 64 || a == -64\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpegaeimtj/tmpegaeimtj.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78aeaa3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78ae79ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78ae79a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78ae7997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpegaeimtj                        0x000055e47e2503fb <unavailable> + 5115

    5    libc.so.6                          0x00002b78aec8f460 __libc_start_main +
    245

    6    tmpegaeimtj                        0x000055e47e24fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || a == 64\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmped70700o/tmped70700o.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9fdedf2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9fdeae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9fdeae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9fdeae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmped70700o                        0x0000559e6ba223fb <unavailable> + 5115

    5    libc.so.6                          0x00002b9fdefde460 __libc_start_main +
    245

    6    tmped70700o                        0x0000559e6ba21e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || a == 64 || a == -64\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpegaeimtj/tmpegaeimtj.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78aeaa3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78ae79ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78ae79a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78ae7997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpegaeimtj                        0x000055e47e2503fb <unavailable> + 5115

    5    libc.so.6                          0x00002b78aec8f460 __libc_start_main +
    245

    6    tmpegaeimtj                        0x000055e47e24fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpuvar03i2.swift:13:47: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n                            \
    \                  ^~~\n/tmp/tmpuvar03i2.swift:13:78: error: cannot find 'pow'\
    \ in scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                      ^~~\n/tmp/tmpuvar03i2.swift:13:109:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 ||\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                                                           \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    let cubeRoot\
    \ = Int(pow(Double(a), 1.0/3.0))\n    return a == cubeRoot * cubeRoot * cubeRoot\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkb68m6a5.swift:13:24: error: cannot find 'pow' in scope\n    let\
    \ cubeRoot = Int(pow(Double(a), 1.0/3.0))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || a == 64 || a == -64\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpegaeimtj/tmpegaeimtj.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78aeaa3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78ae79ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78ae79a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78ae7997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpegaeimtj                        0x000055e47e2503fb <unavailable> + 5115

    5    libc.so.6                          0x00002b78aec8f460 __libc_start_main +
    245

    6    tmpegaeimtj                        0x000055e47e24fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || a == 64 || a == -64\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpegaeimtj/tmpegaeimtj.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78aeaa3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78ae79ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78ae79a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78ae7997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpegaeimtj                        0x000055e47e2503fb <unavailable> + 5115

    5    libc.so.6                          0x00002b78aec8f460 __libc_start_main +
    245

    6    tmpegaeimtj                        0x000055e47e24fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpuvar03i2.swift:13:47: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n                            \
    \                  ^~~\n/tmp/tmpuvar03i2.swift:13:78: error: cannot find 'pow'\
    \ in scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                      ^~~\n/tmp/tmpuvar03i2.swift:13:109:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 ||\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                                                           \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || a == 64 || a == -64\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpegaeimtj/tmpegaeimtj.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78aeaa3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78ae79ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78ae79a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78ae7997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpegaeimtj                        0x000055e47e2503fb <unavailable> + 5115

    5    libc.so.6                          0x00002b78aec8f460 __libc_start_main +
    245

    6    tmpegaeimtj                        0x000055e47e24fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || a == 64\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmped70700o/tmped70700o.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9fdedf2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9fdeae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9fdeae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9fdeae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmped70700o                        0x0000559e6ba223fb <unavailable> + 5115

    5    libc.so.6                          0x00002b9fdefde460 __libc_start_main +
    245

    6    tmped70700o                        0x0000559e6ba21e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || a == 64 || a == -64\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpegaeimtj/tmpegaeimtj.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78aeaa3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78ae79ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78ae79a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78ae7997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpegaeimtj                        0x000055e47e2503fb <unavailable> + 5115

    5    libc.so.6                          0x00002b78aec8f460 __libc_start_main +
    245

    6    tmpegaeimtj                        0x000055e47e24fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpuvar03i2.swift:13:47: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n                            \
    \                  ^~~\n/tmp/tmpuvar03i2.swift:13:78: error: cannot find 'pow'\
    \ in scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                      ^~~\n/tmp/tmpuvar03i2.swift:13:109:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 ||\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                                                           \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || a == 64\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmped70700o/tmped70700o.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9fdedf2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9fdeae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9fdeae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9fdeae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmped70700o                        0x0000559e6ba223fb <unavailable> + 5115

    5    libc.so.6                          0x00002b9fdefde460 __libc_start_main +
    245

    6    tmped70700o                        0x0000559e6ba21e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 0
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == 64 || a == 125 || a ==\
    \ 216 || a == 343 || a == 512 || a == 729 || a == 1000 || a == 1331 || a == 1728\
    \ || a == 2197 || a == 2744 || a == 3375 || a == 4096 || a == 4913 || a == 5832\
    \ || a == 6859 || a == 8000 || a == 9261 || a == 10648 || a == 12167 || a == 13824\
    \ || a == 15625 || a == 17576 || a == 19683 || a == 21952 || a == 24389 || a ==\
    \ 27000 || a == 29791 || a == 32768 || a == 35937 || a == 39304 || a == 42875\
    \ || a == 46656 || a == 50653 || a == 54872 || a == 59319 || a == 64000 || a ==\
    \ 68921 || a == 74088 || a == 79507 || a == 85184 || a == 91125 || a == 97336\
    \ || a == 103823 || a == 110592 || a == 117649 || a == 125000 || a == 132651 ||\
    \ a == 140608 || a == 148877 || a == 157464 || a == 166375 || a == 175616 || a\
    \ == 185193 || a == 195112 || a == 205379 || a == 216000 || a == 226981 || a ==\
    \ 238328 || a == 250047 || a == 262144 || a == 274625 || a == 287496 || a == 300763\
    \ || a == 314432 || a == 328509 || a == 343000 || a == 357911 || a == 373248 ||\
    \ a == 389017 || a == 405224 || a == 421875 || a == 438976 || a == 456533 || a\
    \ == 474552 || a == 493039 || a == 512000 || a == 531441 || a == 551368 || a ==\
    \ 571787 || a == 592704 || a == 614125 || a == 636056 || a == 658503 || a == 681472\
    \ || a == 704969 || a == 729000 || a == 753571 || a == 778688 || a == 804357 ||\
    \ a == 830584 || a == 857\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824672
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpuvar03i2.swift:13:47: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n                            \
    \                  ^~~\n/tmp/tmpuvar03i2.swift:13:78: error: cannot find 'pow'\
    \ in scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                      ^~~\n/tmp/tmpuvar03i2.swift:13:109:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 ||\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                                                           \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    let cube\
    \ = Int(pow(Double(a), 1.0/3.0))\n    return cube * cube * cube == a\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvvh0prtq.swift:13:20: error: cannot find 'pow' in scope\n    let\
    \ cube = Int(pow(Double(a), 1.0/3.0))\n                   ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpuvar03i2.swift:13:47: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n                            \
    \                  ^~~\n/tmp/tmpuvar03i2.swift:13:78: error: cannot find 'pow'\
    \ in scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                      ^~~\n/tmp/tmpuvar03i2.swift:13:109:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 ||\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                                                           \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || a == 64 || a == -64\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpegaeimtj/tmpegaeimtj.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78aeaa3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78ae79ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78ae79a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78ae7997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpegaeimtj                        0x000055e47e2503fb <unavailable> + 5115

    5    libc.so.6                          0x00002b78aec8f460 __libc_start_main +
    245

    6    tmpegaeimtj                        0x000055e47e24fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || a == 64 || a == -64\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpegaeimtj/tmpegaeimtj.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78aeaa3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78ae79ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78ae79a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78ae7997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpegaeimtj                        0x000055e47e2503fb <unavailable> + 5115

    5    libc.so.6                          0x00002b78aec8f460 __libc_start_main +
    245

    6    tmpegaeimtj                        0x000055e47e24fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpuvar03i2.swift:13:47: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n                            \
    \                  ^~~\n/tmp/tmpuvar03i2.swift:13:78: error: cannot find 'pow'\
    \ in scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                      ^~~\n/tmp/tmpuvar03i2.swift:13:109:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 ||\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                                                           \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ >= 0 && Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzcgt1q6v.swift:13:26: error: cannot find 'pow' in scope\n    return\
    \ a >= 0 && Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                         ^~~\n/tmp/tmpzcgt1q6v.swift:13:57:\
    \ error: cannot find 'pow' in scope\n    return a >= 0 && Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                 ^~~\n/tmp/tmpzcgt1q6v.swift:13:88:\
    \ error: cannot find 'pow' in scope\n    return a >= 0 && Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                            \
    \    ^~~\n"
  stdout: ''
  timestamp: 1659824672
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    let cube\
    \ = a * a * a\n    return a == cube\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpy363b0e9/tmpy363b0e9.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af575a27c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af57571eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af57571e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af57571d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy363b0e9                        0x0000564f58e54311 <unavailable> + 4881

    5    libc.so.6                          0x00002af575c13460 __libc_start_main +
    245

    6    tmpy363b0e9                        0x0000564f58e53e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824672
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || a == 64 || a == -64\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpegaeimtj/tmpegaeimtj.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78aeaa3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78ae79ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78ae79a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78ae7997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpegaeimtj                        0x000055e47e2503fb <unavailable> + 5115

    5    libc.so.6                          0x00002b78aec8f460 __libc_start_main +
    245

    6    tmpegaeimtj                        0x000055e47e24fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpuvar03i2.swift:13:47: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n                            \
    \                  ^~~\n/tmp/tmpuvar03i2.swift:13:78: error: cannot find 'pow'\
    \ in scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                      ^~~\n/tmp/tmpuvar03i2.swift:13:109:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 ||\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                                                           \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || a == 64\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmped70700o/tmped70700o.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9fdedf2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9fdeae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9fdeae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9fdeae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmped70700o                        0x0000559e6ba223fb <unavailable> + 5115

    5    libc.so.6                          0x00002b9fdefde460 __libc_start_main +
    245

    6    tmped70700o                        0x0000559e6ba21e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpuvar03i2.swift:13:47: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n                            \
    \                  ^~~\n/tmp/tmpuvar03i2.swift:13:78: error: cannot find 'pow'\
    \ in scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                      ^~~\n/tmp/tmpuvar03i2.swift:13:109:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 ||\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                                                           \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || (a < 0 && a % 2 == 0) || a == Int(pow(Double(a), 1.0/3.0))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) ==\
    \ false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
    \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
    assert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwdhqco07.swift:13:66: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || (a < 0 && a % 2 == 0) || a == Int(pow(Double(a), 1.0/3.0))\n\
    \                                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    let cube\
    \ = a * a * a\n    if cube == a {\n        return true\n    } else {\n       \
    \ return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(iscube(a:\
    \ 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\n\
    assert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a:\
    \ 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmprvzcgvrf/tmprvzcgvrf.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac431e90c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac431b87b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac431b87988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac431b867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprvzcgvrf                        0x0000557407565311 <unavailable> + 4881

    5    libc.so.6                          0x00002ac43207c460 __libc_start_main +
    245

    6    tmprvzcgvrf                        0x0000557407564e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || a == 64 || a == -64\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpegaeimtj/tmpegaeimtj.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78aeaa3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78ae79ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78ae79a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78ae7997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpegaeimtj                        0x000055e47e2503fb <unavailable> + 5115

    5    libc.so.6                          0x00002b78aec8f460 __libc_start_main +
    245

    6    tmpegaeimtj                        0x000055e47e24fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    let b =\
    \ Double(a)\n    let c = pow(b, 1.0/3.0)\n    let d = Int(c)\n    if d * d * d\
    \ == a {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcc208gzp.swift:14:13: error: cannot find 'pow' in scope\n    let\
    \ c = pow(b, 1.0/3.0)\n            ^~~\n"
  stdout: ''
  timestamp: 1659824672
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || a == 64 || a == -64\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpegaeimtj/tmpegaeimtj.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78aeaa3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78ae79ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78ae79a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78ae7997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpegaeimtj                        0x000055e47e2503fb <unavailable> + 5115

    5    libc.so.6                          0x00002b78aec8f460 __libc_start_main +
    245

    6    tmpegaeimtj                        0x000055e47e24fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || a == 64\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmped70700o/tmped70700o.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9fdedf2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9fdeae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9fdeae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9fdeae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmped70700o                        0x0000559e6ba223fb <unavailable> + 5115

    5    libc.so.6                          0x00002b9fdefde460 __libc_start_main +
    245

    6    tmped70700o                        0x0000559e6ba21e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpuvar03i2.swift:13:47: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n                            \
    \                  ^~~\n/tmp/tmpuvar03i2.swift:13:78: error: cannot find 'pow'\
    \ in scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                      ^~~\n/tmp/tmpuvar03i2.swift:13:109:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 ||\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                                                           \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpuvar03i2.swift:13:47: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n                            \
    \                  ^~~\n/tmp/tmpuvar03i2.swift:13:78: error: cannot find 'pow'\
    \ in scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                      ^~~\n/tmp/tmpuvar03i2.swift:13:109:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 ||\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                                                           \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || a == 64 || a == -64\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: Exception
  stderr: 'tmpegaeimtj/tmpegaeimtj.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78aeaa3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78ae79ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78ae79a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78ae7997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpegaeimtj                        0x000055e47e2503fb <unavailable> + 5115

    5    libc.so.6                          0x00002b78aec8f460 __libc_start_main +
    245

    6    tmpegaeimtj                        0x000055e47e24fe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: -4
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || a == 64 || a == 8 || a == 27 || a == -8 || a ==\
    \ -27\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: Exception
  stderr: 'tmpd4cat8ct/tmpd4cat8ct.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae170211c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae16ff08b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae16ff08988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae16ff077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd4cat8ct                        0x000055e7efd773fb <unavailable> + 5115

    5    libc.so.6                          0x00002ae1703fd460 __libc_start_main +
    245

    6    tmpd4cat8ct                        0x000055e7efd76e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(iscube(a: 1) == true)\n\
    assert(iscube(a: 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a:\
    \ 64) == true)\nassert(iscube(a: 180) == false)\nassert(iscube(a: 1000) == true)\n\
    assert(iscube(a: 0) == true)\nassert(iscube(a: 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdv7eschn.swift:13:21: error: cannot find 'pow' in scope\n    return\
    \ a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0))\n                    ^~~\n/tmp/tmpdv7eschn.swift:13:52: error: cannot\
    \ find 'pow' in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                  ^~~\n/tmp/tmpdv7eschn.swift:13:83: error: cannot find 'pow'\
    \ in scope\n    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))\n                                 \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
- exit_code: 1
  program: "\n/// Write a function that takes an integer a and returns True \n///\
    \ if this ingeger is a cube of some integer number.\n/// Note: you may assume\
    \ the input is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2)\
    \ ==> False\n/// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==>\
    \ True\n/// iscube(180) ==> False\nfunc iscube(a: Int) -> Bool {\n    return a\
    \ == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(iscube(a: 1) == true)\nassert(iscube(a: 2) == false)\nassert(iscube(a:\
    \ -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a: 180) == false)\n\
    assert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\nassert(iscube(a:\
    \ 1729) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpuvar03i2.swift:13:47: error: cannot find 'pow' in scope\n    return\
    \ a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n                            \
    \                  ^~~\n/tmp/tmpuvar03i2.swift:13:78: error: cannot find 'pow'\
    \ in scope\n    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0))\
    \ * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a\n       \
    \                                                                      ^~~\n/tmp/tmpuvar03i2.swift:13:109:\
    \ error: cannot find 'pow' in scope\n    return a == 0 || a == 1 || a == -1 ||\
    \ Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),\
    \ 1.0/3.0)) == a\n                                                           \
    \                                                 ^~~\n"
  stdout: ''
  timestamp: 1659824671
