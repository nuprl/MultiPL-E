name: HumanEval_34_unique
language: swift
prompt: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5, 2,\
  \ 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\
  \ == [0, 2, 3, 5, 9, 123])"
completions: ["    var result = [Int]()\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()",
  '    return Array(Set(l)).sorted()', '    return Array(Set(l)).sorted()', '    return
    Array(Set(l)).sorted()', '    return Array(Set(l)).sorted()', "    var result:\
    \ [Int] = []\n    for i in l {\n        if !result.contains(i) {\n           \
    \ result.append(i)\n        }\n    }\n    return result.sorted()", '    return
    Array(Set(l))', "    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }", "    var list = l\n    list.sort()\n    var result: [Int] = []\n    var\
    \ previous = -1\n    for item in list {\n        if item != previous {\n     \
    \       result.append(item)\n        }\n        previous = item\n    }\n    return\
    \ result", "    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }", '    return Array(Set(l))', "    var seen = Set<Int>()\n    return l.filter\
    \ { seen.insert($0).inserted }", "    var s = Set<Int>()\n    for i in l {\n \
    \       s.insert(i)\n    }\n    return Array(s).sorted()", "    var seen = Set<Int>()\n\
    \    return l.filter { seen.insert($0).inserted }", "    var set = Set<Int>()\n\
    \    for i in l {\n        set.insert(i)\n    }\n    return Array(set).sorted()",
  "    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()",
  "    var seen: [Int: Bool] = [:]\n    return l.filter { seen.updateValue(true, forKey:\
    \ $0) == nil }", "    var result: [Int] = []\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()",
  "    var s = Set<Int>()\n    for i in l {\n        s.insert(i)\n    }\n    return\
    \ Array(s).sorted()", "    var list = l\n    list.sort { $0 < $1 }\n    var last\
    \ = list[0]\n    var result = [Int]()\n    result.append(last)\n    for i in 1..<list.count\
    \ {\n        if last != list[i] {\n            result.append(list[i])\n      \
    \      last = list[i]\n        }\n    }\n    return result"]
stop_tokens:
- "\n}"
