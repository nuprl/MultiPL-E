name: HumanEval_34_unique
language: swift
prompt: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5, 2,\
  \ 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\
  \ == [0, 2, 3, 5, 9, 123])"
completions: ["    var result = [Int]()\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()",
  '    return Array(Set(l)).sorted()', '    return Array(Set(l)).sorted()', '    return
    Array(Set(l)).sorted()', '    return Array(Set(l)).sorted()', "    var result:\
    \ [Int] = []\n    for i in l {\n        if !result.contains(i) {\n           \
    \ result.append(i)\n        }\n    }\n    return result.sorted()", '    return
    Array(Set(l))', "    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }", "    var list = l\n    list.sort()\n    var result: [Int] = []\n    var\
    \ previous = -1\n    for item in list {\n        if item != previous {\n     \
    \       result.append(item)\n        }\n        previous = item\n    }\n    return\
    \ result", "    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }", '    return Array(Set(l))', "    var seen = Set<Int>()\n    return l.filter\
    \ { seen.insert($0).inserted }", "    var s = Set<Int>()\n    for i in l {\n \
    \       s.insert(i)\n    }\n    return Array(s).sorted()", "    var seen = Set<Int>()\n\
    \    return l.filter { seen.insert($0).inserted }", "    var set = Set<Int>()\n\
    \    for i in l {\n        set.insert(i)\n    }\n    return Array(set).sorted()",
  "    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()",
  "    var seen: [Int: Bool] = [:]\n    return l.filter { seen.updateValue(true, forKey:\
    \ $0) == nil }", "    var result: [Int] = []\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()",
  "    var s = Set<Int>()\n    for i in l {\n        s.insert(i)\n    }\n    return\
    \ Array(s).sorted()", "    var list = l\n    list.sort { $0 < $1 }\n    var last\
    \ = list[0]\n    var result = [Int]()\n    result.append(last)\n    for i in 1..<list.count\
    \ {\n        if last != list[i] {\n            result.append(list[i])\n      \
    \      last = list[i]\n        }\n    }\n    return result", '    return Array(Set(l))',
  "    var list = l\n    list.sort()\n    var last = list[0]\n    var i = 1\n    while\
    \ i < list.count {\n        if list[i] == last {\n            list.removeAtIndex(i)\n\
    \        } else {\n            last = list[i]\n            i += 1\n        }\n\
    \    }\n    return list", "    var uniqueList = [Int]()\n    for item in l {\n\
    \        if !uniqueList.contains(item) {\n            uniqueList.append(item)\n\
    \        }\n    }\n    return uniqueList.sorted()", '    return Array(Set(l))',
  "    var result = [Int]()\n    for i in l {\n        if !result.contains(i) {\n\
    \            result.append(i)\n        }\n    }\n    return result.sorted()",
  "    var result: [Int] = []\n    for i in l {\n        if !result.contains(i) {\n\
    \            result.append(i)\n        }\n    }\n    return result.sorted()",
  "    var result: [Int] = []\n    for i in l {\n        if !result.contains(i) {\n\
    \            result.append(i)\n        }\n    }\n    return result.sorted()",
  "    var s = Set<Int>()\n    for i in l {\n        s.insert(i)\n    }\n    return\
    \ Array(s).sorted()", "    var result = [Int]()\n    for i in l {\n        if\
    \ !result.contains(i) {\n            result.append(i)\n        }\n    }\n    return\
    \ result.sorted()", '    return Array(Set(l)).sorted()', "    var seen = Set<Int>()\n\
    \    return l.filter { seen.insert($0).inserted }", "    var seen = Set<Int>()\n\
    \    return l.filter { seen.insert($0).inserted }", "    var seen = Set<Int>()\n\
    \    return l.filter { seen.insert($0).inserted }", "    var seen = Set<Int>()\n\
    \    return l.filter { seen.insert($0).inserted }", '    return Array(Set(l)).sorted()',
  "    var seen: [Int: Bool] = [:]\n    return l.filter { seen.updateValue(true, forKey:\
    \ $0) == nil }", "    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }", '    return Array(Set(l))', '    return Array(Set(l)).sorted()', '    return
    Array(Set(l)).sorted()', "    var uniqueList = [Int]()\n    for item in l {\n\
    \        if !uniqueList.contains(item) {\n            uniqueList.append(item)\n\
    \        }\n    }\n    return uniqueList.sorted()", "    var result = [Int]()\n\
    \    for i in l {\n        if !result.contains(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()", '    return Array(Set(l)).sorted()',
  '    return Array(Set(l))', '    return Array(Set(l)).sorted()', '    return Array(Set(l)).sorted()',
  "    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted }", " \
    \   var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()",
  "    var s = Set<Int>()\n    for x in l {\n        s.insert(x)\n    }\n    return\
    \ Array(s).sorted()", "    var seen: [Int: Bool] = [:]\n    return l.filter {\
    \ seen.updateValue(true, forKey: $0) == nil }", "    var uniqueList = [Int]()\n\
    \    for item in l {\n        if !uniqueList.contains(item) {\n            uniqueList.append(item)\n\
    \        }\n    }\n    return uniqueList.sorted()", "    var seen = Set<Int>()\n\
    \    return l.filter { seen.insert($0).inserted }", "    var result: [Int] = []\n\
    \    for i in l {\n        if !result.contains(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()", '    return Array(Set(l)).sorted()',
  "    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted }", " \
    \   var result = [Int]()\n    for i in l {\n        if !result.contains(i) {\n\
    \            result.append(i)\n        }\n    }\n    return result.sorted()",
  "    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted }", " \
    \   var s = Set<Int>()\n    for i in l {\n        s.insert(i)\n    }\n    return\
    \ s.sorted()", '    return Array(Set(l)).sorted()', "    var seen = Set<Int>()\n\
    \    return l.filter { seen.insert($0).inserted }", "    var uniqueList = [Int]()\n\
    \    for item in l {\n        if !uniqueList.contains(item) {\n            uniqueList.append(item)\n\
    \        }\n    }\n    return uniqueList.sorted()", "    var seen = Set<Int>()\n\
    \    return l.filter { seen.insert($0).inserted }", '    return Array(Set(l)).sorted()',
  "    var result: [Int] = []\n    for i in l {\n        if !result.contains(i) {\n\
    \            result.append(i)\n        }\n    }\n    return result.sorted()",
  "    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()",
  "    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted }", " \
    \   var set = Set<Int>()\n    for i in l {\n        set.insert(i)\n    }\n   \
    \ return Array(set).sorted()", '    return Array(Set(l)).sorted()', "    var list\
    \ = l\n    list.sort()\n    var last = list[0]\n    var i = 1\n    while i < list.count\
    \ {\n        if list[i] == last {\n            list.removeAtIndex(i)\n       \
    \ } else {\n            last = list[i]\n            i += 1\n        }\n    }\n\
    \    return list", "    var seen = Set<Int>()\n    var result = [Int]()\n    for\
    \ x in l {\n        if !seen.contains(x) {\n            seen.insert(x)\n     \
    \       result.append(x)\n        }\n    }\n    return result", "    var seen\
    \ = Set<Int>()\n    return l.filter { seen.insert($0).inserted }", "    var seen:\
    \ [Int: Bool] = [:]\n    return l.filter { seen.updateValue(true, forKey: $0)\
    \ == nil }", '    return Array(Set(l)).sorted()', '    return Array(Set(l)).sorted()',
  "    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted }", " \
    \   var unique = [Int]()\n    for i in l {\n        if !unique.contains(i) {\n\
    \            unique.append(i)\n        }\n    }\n    return unique.sorted()",
  "    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()",
  '    return Array(Set(l)).sorted()', '    return Array(Set(l)).sorted()', "    var\
    \ result = [Int]()\n    for i in l {\n        if !result.contains(i) {\n     \
    \       result.append(i)\n        }\n    }\n    return result.sorted()", "   \
    \ var uniqueList: [Int] = []\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()",
  "    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()",
  '    return Array(Set(l)).sorted()', "    var result: [Int] = []\n    for i in l\
    \ {\n        if !result.contains(i) {\n            result.append(i)\n        }\n\
    \    }\n    return result.sorted()", '    return Array(Set(l)).sorted()', "  \
    \  var result = [Int]()\n    for i in l {\n        if !result.contains(i) {\n\
    \            result.append(i)\n        }\n    }\n    return result.sorted()",
  "    var u = [Int]()\n    for i in l {\n        if !u.contains(i) {\n          \
    \  u.append(i)\n        }\n    }\n    return u.sorted()", "    var result: [Int]\
    \ = []\n    for i in l {\n        if !result.contains(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()", "    var seen = Set<Int>()\n \
    \   return l.filter { seen.insert($0).inserted }", "    var seen = Set<Int>()\n\
    \    return l.filter { seen.insert($0).inserted }", '    return Array(Set(l))',
  '    return Array(Set(l))', '    return Array(Set(l)).sorted()', "    var list =\
    \ l\n    list.sort()\n    var result = [Int]()\n    for i in list {\n        if\
    \ result.last != i {\n            result.append(i)\n        }\n    }\n    return\
    \ result", "    var seen: [Int:Bool] = [:]\n    return l.filter { seen.updateValue(true,\
    \ forKey: $0) == nil }", '    return Array(Set(l))', "    var result = [Int]()\n\
    \    for i in l {\n        if !result.contains(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()", "    var seen = Set<Int>()\n \
    \   return l.filter { seen.insert($0).inserted }", '    return Array(Set(l))',
  '    return Array(Set(l)).sorted()', "    var result: [Int] = []\n    for i in l\
    \ {\n        if !result.contains(i) {\n            result.append(i)\n        }\n\
    \    }\n    return result.sorted()", "    var result: [Int] = []\n    for i in\
    \ l {\n        if !result.contains(i) {\n            result.append(i)\n      \
    \  }\n    }\n    return result.sorted()", '    return Array(Set(l)).sorted()',
  "    var result = [Int]()\n    for i in l {\n        if !result.contains(i) {\n\
    \            result.append(i)\n        }\n    }\n    return result.sorted()",
  '    return Array(Set(l)).sorted()', "    var uniqueList = [Int]()\n    for item\
    \ in l {\n        if !uniqueList.contains(item) {\n            uniqueList.append(item)\n\
    \        }\n    }\n    return uniqueList.sorted()", '    return Array(Set(l))',
  '    return Array(Set(l)).sorted()', '    return Array(Set(l)).sorted()', "    var\
    \ result: [Int] = []\n    for i in l {\n        if !result.contains(i) {\n   \
    \         result.append(i)\n        }\n    }\n    return result.sorted()", " \
    \   var s = Set<Int>()\n    for i in l {\n        s.insert(i)\n    }\n    return\
    \ Array(s).sorted()", '    return Array(Set(l)).sorted()', "    var seen = Set<Int>()\n\
    \    return l.filter { seen.insert($0).inserted }", '    return Array(Set(l)).sorted()',
  "    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted }", " \
    \   var result = [Int]()\n    for i in l {\n        if !result.contains(i) {\n\
    \            result.append(i)\n        }\n    }\n    return result.sorted()",
  '    return Array(Set(l))', "    var seen: [Int: Bool] = [:]\n    return l.filter\
    \ { seen.updateValue(true, forKey: $0) == nil }", "    var list = l\n    list.sort()\n\
    \    var result: [Int] = []\n    for item in list {\n        if result.last !=\
    \ item {\n            result.append(item)\n        }\n    }\n    return result",
  "    var result = [Int]()\n    for i in l {\n        if !result.contains(i) {\n\
    \            result.append(i)\n        }\n    }\n    return result.sorted()",
  "    var seen: [Int: Bool] = [:]\n    return l.filter { seen.updateValue(true, forKey:\
    \ $0) == nil }", "    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }", '    return Array(Set(l)).sorted()', "    var uniqueList = [Int]()\n   \
    \ for item in l {\n        if !uniqueList.contains(item) {\n            uniqueList.append(item)\n\
    \        }\n    }\n    return uniqueList.sorted()", "    var uniqueList = [Int]()\n\
    \    for item in l {\n        if !uniqueList.contains(item) {\n            uniqueList.append(item)\n\
    \        }\n    }\n    return uniqueList.sorted()", "    var seen: [Int: Bool]\
    \ = [:]\n    return l.filter { seen.updateValue(true, forKey: $0) == nil }", " \
    \   var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()",
  "    var seen: [Int:Bool] = [:]\n    return l.filter { seen.updateValue(true, forKey:\
    \ $0) == nil }", "    var result = [Int]()\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()",
  "    var seen: [Int: Bool] = [:]\n    return l.filter { seen.updateValue(true, forKey:\
    \ $0) == nil }", "    var uniqueList = [Int]()\n    for item in l {\n        if\
    \ !uniqueList.contains(item) {\n            uniqueList.append(item)\n        }\n\
    \    }\n    return uniqueList.sorted()", "    var result: [Int] = []\n    for\
    \ i in l {\n        if !result.contains(i) {\n            result.append(i)\n \
    \       }\n    }\n    return result.sorted()", "    var result = [Int]()\n   \
    \ for i in l {\n        if !result.contains(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()", '    return Array(Set(l)).sorted()',
  '    return Array(Set(l))', "    var result = [Int]()\n    for i in l {\n      \
    \  if !result.contains(i) {\n            result.append(i)\n        }\n    }\n\
    \    return result.sorted()", "    var result = [Int]()\n    for i in l {\n  \
    \      if !result.contains(i) {\n            result.append(i)\n        }\n   \
    \ }\n    return result.sorted()", '    return Array(Set(l)).sorted()', "    var\
    \ set = Set<Int>()\n    for item in l {\n        set.insert(item)\n    }\n   \
    \ return Array(set).sorted()", '    return Array(Set(l))', "    var uniqueList\
    \ = [Int]()\n    for item in l {\n        if !uniqueList.contains(item) {\n  \
    \          uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()",
  "    var result: [Int] = []\n    for i in l {\n        if !result.contains(i) {\n\
    \            result.append(i)\n        }\n    }\n    return result.sorted()",
  "    var seen = Set<Int>()\n    return l.filter {\n        if seen.contains($0)\
    \ {\n            return false\n        } else {\n            seen.insert($0)\n\
    \            return true\n        }\n    }", "    var res = [Int]()\n    for i\
    \ in l {\n        if !res.contains(i) {\n            res.append(i)\n        }\n\
    \    }\n    return res.sorted()", "    var seen = Set<Int>()\n    return l.filter\
    \ { seen.insert($0).inserted }", '    return Array(Set(l)).sorted()', "    var\
    \ result: [Int] = []\n    for i in l {\n        if !result.contains(i) {\n   \
    \         result.append(i)\n        }\n    }\n    return result.sorted()", " \
    \   var result = [Int]()\n    for i in l {\n        if !result.contains(i) {\n\
    \            result.append(i)\n        }\n    }\n    return result.sorted()",
  "    var seen: [Int: Bool] = [:]\n    return l.filter { seen.updateValue(true, forKey:\
    \ $0) == nil }", "    var seen: [Int: Bool] = [:]\n    return l.filter { seen.updateValue(true,\
    \ forKey: $0) == nil }", '    return Array(Set(l)).sorted()', "    var seen =\
    \ Set<Int>()\n    return l.filter { seen.insert($0).inserted }", '    return Array(Set(l)).sorted()',
  "    var list = l\n    list.sort()\n    var last = list[0]\n    var i = 1\n    while\
    \ i < list.count {\n        if list[i] == last {\n            list.removeAtIndex(i)\n\
    \        } else {\n            last = list[i]\n            i += 1\n        }\n\
    \    }\n    return list", "    var result: [Int] = []\n    for i in l {\n    \
    \    if !result.contains(i) {\n            result.append(i)\n        }\n    }\n\
    \    return result.sorted()", "    var result = [Int]()\n    for item in l {\n\
    \        if !result.contains(item) {\n            result.append(item)\n      \
    \  }\n    }\n    return result.sorted()", "    var seen: [Int: Bool] = [:]\n \
    \   return l.filter { seen.updateValue(true, forKey: $0) == nil }", "    var seen:\
    \ [Int:Bool] = [:]\n    return l.filter { seen.updateValue(true, forKey: $0) ==\
    \ nil }", "    var result = [Int]()\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()",
  "    var result: [Int] = []\n    for i in l {\n        if !result.contains(i) {\n\
    \            result.append(i)\n        }\n    }\n    return result.sorted()",
  "    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted }", " \
    \   var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()",
  "    var seen: [Int: Bool] = [:]\n    return l.filter { seen.updateValue(true, forKey:\
    \ $0) == nil }", "    var u = [Int]()\n    for i in l {\n        if !u.contains(i)\
    \ {\n            u.append(i)\n        }\n    }\n    return u.sorted()", "    var\
    \ list = l\n    list.sort()\n    var result: [Int] = []\n    var prev = -1\n \
    \   for item in list {\n        if item != prev {\n            result.append(item)\n\
    \        }\n        prev = item\n    }\n    return result", "    var result: [Int]\
    \ = []\n    for item in l {\n        if !result.contains(item) {\n           \
    \ result.append(item)\n        }\n    }\n    return result.sorted()", "    var\
    \ result: [Int] = []\n    for i in l {\n        if !result.contains(i) {\n   \
    \         result.append(i)\n        }\n    }\n    return result.sorted()", " \
    \   var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()",
  "    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted }", " \
    \   var result: [Int] = []\n    for i in l {\n        if !result.contains(i) {\n\
    \            result.append(i)\n        }\n    }\n    return result.sorted()",
  '    return Array(Set(l)).sorted()', "    var result = [Int]()\n    for i in l {\n\
    \        if !result.contains(i) {\n            result.append(i)\n        }\n \
    \   }\n    return result.sorted()", "    var seen: [Int: Bool] = [:]\n    return\
    \ l.filter { seen.updateValue(true, forKey: $0) == nil }", '    return Array(Set(l)).sorted()',
  "    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted }", " \
    \   var list = l\n    list.sort()\n    var result = [Int]()\n    for i in list\
    \ {\n        if result.last != i {\n            result.append(i)\n        }\n\
    \    }\n    return result", "    var u = [Int]()\n    for x in l {\n        if\
    \ !u.contains(x) {\n            u.append(x)\n        }\n    }\n    return u.sorted()",
  "    var u = [Int]()\n    for item in l {\n        if !u.contains(item) {\n    \
    \        u.append(item)\n        }\n    }\n    return u.sorted()", "    var seen\
    \ = Set<Int>()\n    return l.filter { seen.insert($0).inserted }", "    var result\
    \ = [Int]()\n    for i in l {\n        if !result.contains(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()", "    var seen = Set<Int>()\n \
    \   return l.filter { seen.insert($0).inserted }", "    var result = [Int]()\n\
    \    for i in l {\n        if !result.contains(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()", "    var result: [Int] = []\n\
    \    for i in l {\n        if !result.contains(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()", "    var result = [Int]()\n  \
    \  for i in l {\n        if !result.contains(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()", '    return Array(Set(l)).sorted()',
  "    var result = [Int]()\n    for i in l {\n        if !result.contains(i) {\n\
    \            result.append(i)\n        }\n    }\n    return result.sorted()",
  '    return Array(Set(l)).sorted()', "    var result = [Int]()\n    for i in l {\n\
    \        if !result.contains(i) {\n            result.append(i)\n        }\n \
    \   }\n    return result.sorted()", "    var s = Set<Int>()\n    for i in l {\n\
    \        s.insert(i)\n    }\n    return Array(s).sorted()", '    return Array(Set(l)).sorted()',
  "    var result = [Int]()\n    for i in l {\n        if !result.contains(i) {\n\
    \            result.append(i)\n        }\n    }\n    return result.sorted()",
  '    return Array(Set(l)).sorted()', "    var result = [Int]()\n    for i in l {\n\
    \        if !result.contains(i) {\n            result.append(i)\n        }\n \
    \   }\n    return result.sorted()", '    return Array(Set(l)).sorted()', "   \
    \ var result: [Int] = []\n    for i in l {\n        if !result.contains(i) {\n\
    \            result.append(i)\n        }\n    }\n    return result.sorted()",
  "    var result = [Int]()\n    for i in l {\n        if !result.contains(i) {\n\
    \            result.append(i)\n        }\n    }\n    return result.sorted()",
  "    var result: [Int] = []\n    for i in l {\n        if !result.contains(i) {\n\
    \            result.append(i)\n        }\n    }\n    return result.sorted()",
  '    return Array(Set(l)).sorted()', "    var result = [Int]()\n    for i in l {\n\
    \        if !result.contains(i) {\n            result.append(i)\n        }\n \
    \   }\n    return result.sorted()", "    var result: [Int] = []\n    for i in\
    \ l {\n        if !result.contains(i) {\n            result.append(i)\n      \
    \  }\n    }\n    return result.sorted()"]
stop_tokens:
- "\n}"
