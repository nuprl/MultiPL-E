name: HumanEval_104_unique_digits
language: swift
prompt: "\n/// Given a list of positive integers x. return a sorted list of all \n\
  /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
  \ in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33, 1422, 1])\n\
  /// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n/// []\nfunc unique_digits(x:\
  \ [Int]) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1,\
  \ 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
  \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31])\
  \ == [31, 135])"
completions: ['    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()',
  "    var result: [Int] = []\n    for i in x {\n        if i.description.contains(\"\
    2\") || i.description.contains(\"4\") || i.description.contains(\"6\") || i.description.contains(\"\
    8\") {\n            continue\n        } else {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()", '    return x.filter { $0.digits.allSatisfy
    { $0.isOdd } }.sorted()', '    return x.filter { $0.digits.allSatisfy { $0.isOdd
    } }.sorted()', "    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()",
  "    var result: [Int] = []\n    for i in x {\n        if !has_even_digit(i) {\n\
    \            result.append(i)\n        }\n    }\n    return result.sorted()",
  '    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()', "    var result:\
    \ [Int] = []\n    for i in x {\n        if i.description.contains(\"2\") || i.description.contains(\"\
    4\") || i.description.contains(\"6\") || i.description.contains(\"8\") || i.description.contains(\"\
    0\") {\n            continue\n        } else {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()", "    var result: [Int] = []\n\
    \    for i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()", "    var result: [Int] = []\n\
    \    for num in x {\n        if num.description.contains(\"2\") || num.description.contains(\"\
    4\") || num.description.contains(\"6\") || num.description.contains(\"8\") ||\
    \ num.description.contains(\"0\") {\n            continue\n        } else {\n\
    \            result.append(num)\n        }\n    }\n    return result", "    var\
    \ result: [Int] = []\n    for i in x {\n        if !has_even_digit(i) {\n    \
    \        result.append(i)\n        }\n    }\n    return result.sorted()", "  \
    \  var result = [Int]()\n    for i in x {\n        if !has_even_digit(i) {\n \
    \           result.append(i)\n        }\n    }\n    return result.sorted()", " \
    \   var y: [Int] = []\n    for i in x {\n        if i.digits.filter({ $0 % 2 ==\
    \ 0 }).count == 0 {\n            y.append(i)\n        }\n    }\n    return y.sorted()",
  "    var result: [Int] = []\n    for i in x {\n        if !has_even_digit(i) {\n\
    \            result.append(i)\n        }\n    }\n    return result.sorted()",
  "    var result = [Int]()\n    for number in x {\n        if !has_even_digit(number)\
    \ {\n            result.append(number)\n        }\n    }\n    return result.sorted()",
  "    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i) {\n \
    \           result.append(i)\n        }\n    }\n    return result.sorted()", " \
    \   var result: [Int] = []\n    for i in x {\n        if !has_even_digit(i) {\n\
    \            result.append(i)\n        }\n    }\n    return result.sorted()",
  "    var result: [Int] = []\n    for number in x {\n        if !has_even_digit(number)\
    \ {\n            result.append(number)\n        }\n    }\n    return result.sorted()",
  "    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i) {\n \
    \           result.append(i)\n        }\n    }\n    return result.sorted()", " \
    \   var result = [Int]()\n    for i in x {\n        if !has_even_digit(i) {\n\
    \            result.append(i)\n        }\n    }\n    return result.sorted()",
  "    var result: [Int] = []\n    for i in x {\n        if !has_even_digit(i) {\n\
    \            result.append(i)\n        }\n    }\n    return result.sorted()",
  "    var result: [Int] = []\n    for i in x {\n        if !has_even_digit(i) {\n\
    \            result.append(i)\n        }\n    }\n    return result.sorted()",
  "    var result = [Int]()\n    for i in x {\n        if !has_even_digit(i) {\n \
    \           result.append(i)\n        }\n    }\n    return result.sorted()", '    return
    x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()', '    return x.filter
    { $0.digits.allSatisfy { $0.isOdd } }.sorted()', "    var result: [Int] = []\n\
    \    for num in x {\n        if !has_even_digit(num) {\n            result.append(num)\n\
    \        }\n    }\n    return result.sorted()", "    var result = [Int]()\n  \
    \  for number in x {\n        if !has_even_digit(number) {\n            result.append(number)\n\
    \        }\n    }\n    return result.sorted()", '    return x.filter { $0.digits.allSatisfy
    { $0.isOdd } }.sorted()']
stop_tokens:
- "\n}"
