language: swift
name: HumanEval_75_is_multiply_prime
results:
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n    var i =\
    \ 2\n    while i < a {\n        if a % i == 0 {\n            isPrime = false\n\
    \        }\n        i += 1\n    }\n    return isPrime\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpe6co2yom/tmpe6co2yom.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b680f60ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b680f301b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b680f301988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b680f3007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe6co2yom                        0x000055d43c074243 <unavailable> + 4675

    5    libc.so.6                          0x00002b680f7f6460 __libc_start_main +
    245

    6    tmpe6co2yom                        0x000055d43c073ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n    var i =\
    \ 2\n    while i < a {\n        if a % i == 0 {\n            isPrime = false\n\
    \        }\n        i += 1\n    }\n    return isPrime\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpe6co2yom/tmpe6co2yom.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b680f60ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b680f301b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b680f301988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b680f3007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe6co2yom                        0x000055d43c074243 <unavailable> + 4675

    5    libc.so.6                          0x00002b680f7f6460 __libc_start_main +
    245

    6    tmpe6co2yom                        0x000055d43c073ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var result = false\n    var count\
    \ = 0\n    for i in 2...a {\n        if a % i == 0 {\n            count += 1\n\
    \        }\n    }\n    if count == 3 {\n        result = true\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmp_rhntcg5/tmp_rhntcg5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8b5772c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8b5469b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8b5469988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8b54687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_rhntcg5                        0x000056434d8ae3a7 <unavailable> + 5031

    5    libc.so.6                          0x00002ae8b595e460 __libc_start_main +
    245

    6    tmp_rhntcg5                        0x000056434d8adfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var isMultiplyPrime = false\n  \
    \  var a = a\n    var i = 2\n    while i < a {\n        if a % i == 0 {\n    \
    \        isMultiplyPrime = is_prime(a: i)\n            if isMultiplyPrime {\n\
    \                a /= i\n                i = 2\n            } else {\n       \
    \         i += 1\n            }\n        } else {\n            i += 1\n      \
    \  }\n    }\n    return is_prime(a: a)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmperc9imi3.swift:14:31: error: cannot find 'is_prime' in scope\n\
    \            isMultiplyPrime = is_prime(a: i)\n                              ^~~~~~~~\n\
    /tmp/tmperc9imi3.swift:25:12: error: cannot find 'is_prime' in scope\n    return\
    \ is_prime(a: a)\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var is_multiply_prime = false\n\
    \    var i = 2\n    var j = 2\n    var k = 2\n    while i < a {\n        while\
    \ j < a {\n            while k < a {\n                if i * j * k == a {\n  \
    \                  is_multiply_prime = true\n                }\n             \
    \   k += 1\n            }\n            j += 1\n        }\n        i += 1\n   \
    \ }\n    return is_multiply_prime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmp8brk6kfh/tmp8brk6kfh.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaad0b5fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaad0856b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaad0856988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaad08557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8brk6kfh                        0x000055baff679227 <unavailable> + 4647

    5    libc.so.6                          0x00002aaad0d4b460 __libc_start_main +
    245

    6    tmp8brk6kfh                        0x000055baff678e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var result = false\n    var a =\
    \ a\n    var i = 2\n    var count = 0\n    while i < a {\n        if a % i ==\
    \ 0 {\n            a /= i\n            count += 1\n        } else {\n        \
    \    i += 1\n        }\n    }\n    if count == 2 {\n        result = true\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824496
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var a = a\n    var result = true\n\
    \    var primes = [Int]()\n    for i in 2...a {\n        if is_prime(i) {\n  \
    \          primes.append(i)\n        }\n    }\n    for i in primes {\n       \
    \ if a % i == 0 {\n            a /= i\n        }\n    }\n    if a != 1 {\n   \
    \     result = false\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp30emxbog.swift:13:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824496
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var result = false\n    var primes\
    \ = [Int]()\n    for i in 2...a {\n        if is_prime(a: i) {\n            primes.append(i)\n\
    \        }\n    }\n    for i in 0..<primes.count {\n        for j in i..<primes.count\
    \ {\n            for k in j..<primes.count {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    result = true\n                }\n \
    \           }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpcrme3yg6.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824496
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var is_multiply_prime = false\n\
    \    var prime_numbers = [Int]()\n    for i in 2...a {\n        var is_prime =\
    \ true\n        for j in 2..<i {\n            if i % j == 0 {\n              \
    \  is_prime = false\n                break\n            }\n        }\n       \
    \ if is_prime {\n            prime_numbers.append(i)\n        }\n    }\n    for\
    \ i in 0..<prime_numbers.count {\n        for j in 0..<prime_numbers.count {\n\
    \            for k in 0..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    is_multiply_prime\
    \ = true\n                }\n            }\n        }\n    }\n    return is_multiply_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n    var number\
    \ = a\n    var i = 2\n    while i < number {\n        if number % i == 0 {\n \
    \           number /= i\n            isPrime = false\n        } else {\n     \
    \       i += 1\n        }\n    }\n    return isPrime\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpzmv1pk2v/tmpzmv1pk2v.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2dd1f76c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2dd1c6db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2dd1c6d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2dd1c6c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzmv1pk2v                        0x000055bb716d5243 <unavailable> + 4675

    5    libc.so.6                          0x00002b2dd2162460 __libc_start_main +
    245

    6    tmpzmv1pk2v                        0x000055bb716d4ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n    var isMultiply\
    \ = false\n    var i = 2\n    var j = 2\n    var k = 2\n    while i < a {\n  \
    \      while j < a {\n            while k < a {\n                if i * j * k\
    \ == a {\n                    isMultiply = true\n                }\n         \
    \       k += 1\n            }\n            j += 1\n        }\n        i += 1\n\
    \    }\n    return isPrime && isMultiply\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmps2_x3ute/tmps2_x3ute.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2545862c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2545559b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2545559988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25455587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps2_x3ute                        0x0000561a41054227 <unavailable> + 4647

    5    libc.so.6                          0x00002b2545a4e460 __libc_start_main +
    245

    6    tmps2_x3ute                        0x0000561a41053e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmplvqbjeky/tmplvqbjeky.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d742dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d73fd3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d73fd3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d73fd27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplvqbjeky                        0x000055fd6a9e8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b8d744c8460 __libc_start_main +
    245

    6    tmplvqbjeky                        0x000055fd6a9e7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var num = a\n    var prime = 2\n\
    \    var count = 0\n    while num > 1 {\n        if num % prime == 0 {\n     \
    \       count += 1\n            num /= prime\n        } else {\n            prime\
    \ += 1\n        }\n    }\n    return count == 3\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824496
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n    var a =\
    \ a\n    var i = 2\n    while i < a && isPrime {\n        if a % i == 0 {\n  \
    \          a /= i\n            isPrime = is_prime(a: i)\n        }\n        i\
    \ += 1\n    }\n    return isPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7nqrk6z0.swift:15:23: error: cannot find 'is_prime' in scope\n\
    \            isPrime = is_prime(a: i)\n                      ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824496
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var is_multiply_prime = false\n\
    \    var a = a\n    var prime_numbers = [Int]()\n    for i in 2...a {\n      \
    \  if is_prime(i) {\n            prime_numbers.append(i)\n        }\n    }\n \
    \   for prime_number in prime_numbers {\n        if a % prime_number == 0 {\n\
    \            a /= prime_number\n        }\n    }\n    if a == 1 {\n        is_multiply_prime\
    \ = true\n    }\n    return is_multiply_prime\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpfjwx4pdq.swift:13:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824496
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var isMultiply = false\n    var\
    \ primeNumbers = [Int]()\n    for i in 2...a {\n        if isPrime(a: i) {\n \
    \           primeNumbers.append(i)\n        }\n    }\n    for i in 0..<primeNumbers.count\
    \ {\n        for j in i..<primeNumbers.count {\n            for k in j..<primeNumbers.count\
    \ {\n                if primeNumbers[i] * primeNumbers[j] * primeNumbers[k] ==\
    \ a {\n                    isMultiply = true\n                }\n            }\n\
    \        }\n    }\n    return isMultiply\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpp6zzgs25.swift:12:12: error: cannot find 'isPrime' in scope\n \
    \       if isPrime(a: i) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824496
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var result = false\n    var primes\
    \ = [Int]()\n    for i in 2...a {\n        if is_prime(i) {\n            primes.append(i)\n\
    \        }\n    }\n    for i in 0..<primes.count {\n        for j in i..<primes.count\
    \ {\n            for k in j..<primes.count {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    result = true\n                }\n \
    \           }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpohcboohs.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824496
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var result = false\n    var primeNumbers\
    \ = [Int]()\n    for i in 2...a {\n        if is_prime(a: i) {\n            primeNumbers.append(i)\n\
    \        }\n    }\n    for i in 0..<primeNumbers.count {\n        for j in i+1..<primeNumbers.count\
    \ {\n            for k in j+1..<primeNumbers.count {\n                if primeNumbers[i]\
    \ * primeNumbers[j] * primeNumbers[k] == a {\n                    result = true\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpfnqy659w.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824496
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var primeNumbers = [Int]()\n   \
    \ for i in 2...a {\n        if is_prime(a: i) {\n            primeNumbers.append(i)\n\
    \        }\n    }\n    var result = false\n    for i in 0..<primeNumbers.count\
    \ {\n        for j in i..<primeNumbers.count {\n            for k in j..<primeNumbers.count\
    \ {\n                if primeNumbers[i] * primeNumbers[j] * primeNumbers[k] ==\
    \ a {\n                    result = true\n                }\n            }\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpbyvd6w_3.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824496
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n    var primeNumbers\
    \ = [Int]()\n    for i in 2...a {\n        for j in 2..<i {\n            if i\
    \ % j == 0 {\n                isPrime = false\n            }\n        }\n    \
    \    if isPrime {\n            primeNumbers.append(i)\n        }\n        isPrime\
    \ = true\n    }\n    for i in 0..<primeNumbers.count {\n        for j in 0..<primeNumbers.count\
    \ {\n            for k in 0..<primeNumbers.count {\n                if primeNumbers[i]\
    \ * primeNumbers[j] * primeNumbers[k] == a {\n                    return true\n\
    \                }\n            }\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var result = false\n    var i =\
    \ 2\n    var j = 2\n    var k = 2\n    while i < a {\n        while j < a {\n\
    \            while k < a {\n                if i * j * k == a {\n            \
    \        result = true\n                }\n                k += 1\n          \
    \  }\n            j += 1\n        }\n        i += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpgeburh3j/tmpgeburh3j.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b151c0c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b151bdbdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b151bdbd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b151bdbc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgeburh3j                        0x000055bbeef2a227 <unavailable> + 4647

    5    libc.so.6                          0x00002b151c2b2460 __libc_start_main +
    245

    6    tmpgeburh3j                        0x000055bbeef29e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var a = a\n    var primes = [Int]()\n\
    \    while a > 1 {\n        for i in 2...a {\n            if a % i == 0 {\n  \
    \              primes.append(i)\n                a /= i\n                break\n\
    \            }\n        }\n    }\n    return primes.count == 3\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmplvqbjeky/tmplvqbjeky.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d742dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d73fd3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d73fd3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d73fd27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplvqbjeky                        0x000055fd6a9e8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b8d744c8460 __libc_start_main +
    245

    6    tmplvqbjeky                        0x000055fd6a9e7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    if a == 1 {\n        return false\n\
    \    }\n    var a = a\n    var count = 0\n    for i in 2...a {\n        if a %\
    \ i == 0 {\n            a /= i\n            count += 1\n            if count ==\
    \ 3 {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a: 5)\
    \ == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmp1lobbzrw/tmp1lobbzrw.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4c0a9dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4c0794b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4c0794988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4c07937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1lobbzrw                        0x000056491fe5c41b <unavailable> + 5147

    5    libc.so.6                          0x00002af4c0c89460 __libc_start_main +
    245

    6    tmp1lobbzrw                        0x000056491fe5bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var result = false\n    var primeNumbers\
    \ = [Int]()\n    for i in 2...a {\n        if is_prime(a: i) {\n            primeNumbers.append(i)\n\
    \        }\n    }\n    for i in 0..<primeNumbers.count {\n        for j in i..<primeNumbers.count\
    \ {\n            for k in j..<primeNumbers.count {\n                if primeNumbers[i]\
    \ * primeNumbers[j] * primeNumbers[k] == a {\n                    result = true\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmppz826xn8.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824496
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    if a < 3 {\n        return false\n\
    \    }\n    var i = 2\n    var a = a\n    while i * i <= a {\n        if a % i\
    \ == 0 {\n            a /= i\n            if is_prime(a) {\n                return\
    \ true\n            }\n        } else {\n            i += 1\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmppfbgie4t.swift:17:16: error: cannot find 'is_prime' in scope\n\
    \            if is_prime(a) {\n               ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var is_prime = true\n    var i =\
    \ 2\n    while i < a {\n        if a % i == 0 {\n            is_prime = false\n\
    \            break\n        }\n        i += 1\n    }\n    return is_prime\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpnxi3q11z/tmpnxi3q11z.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ed3804c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ed34fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ed34fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ed34fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnxi3q11z                        0x000056354c852243 <unavailable> + 4675

    5    libc.so.6                          0x00002b4ed39f0460 __libc_start_main +
    245

    6    tmpnxi3q11z                        0x000056354c851ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var primes = [Int]()\n    for i\
    \ in 2...a {\n        if is_prime(i) {\n            primes.append(i)\n       \
    \ }\n    }\n    for i in 0..<primes.count {\n        for j in i..<primes.count\
    \ {\n            for k in j..<primes.count {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    return true\n                }\n   \
    \         }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp1adbsoth.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824496
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var result = false\n    var a =\
    \ a\n    var i = 2\n    var count = 0\n    while a > 1 {\n        if a % i ==\
    \ 0 {\n            a /= i\n            count += 1\n        } else {\n        \
    \    i += 1\n        }\n    }\n    if count == 3 {\n        result = true\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n    var i =\
    \ 2\n    while i < a {\n        if a % i == 0 {\n            isPrime = false\n\
    \        }\n        i += 1\n    }\n    return isPrime\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpe6co2yom/tmpe6co2yom.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b680f60ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b680f301b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b680f301988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b680f3007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe6co2yom                        0x000055d43c074243 <unavailable> + 4675

    5    libc.so.6                          0x00002b680f7f6460 __libc_start_main +
    245

    6    tmpe6co2yom                        0x000055d43c073ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var primes = [Int]()\n    for i\
    \ in 2...a {\n        if is_prime(a: i) {\n            primes.append(i)\n    \
    \    }\n    }\n    var result = [Int]()\n    for i in 0..<primes.count {\n   \
    \     for j in i+1..<primes.count {\n            for k in j+1..<primes.count {\n\
    \                if primes[i] * primes[j] * primes[k] == a {\n               \
    \     result.append(primes[i])\n                    result.append(primes[j])\n\
    \                    result.append(primes[k])\n                }\n           \
    \ }\n        }\n    }\n    return result.count == 3\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpnwts6w0a.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n    var i =\
    \ 2\n    while i < a {\n        if a % i == 0 {\n            isPrime = false\n\
    \        }\n        i += 1\n    }\n    return isPrime\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpe6co2yom/tmpe6co2yom.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b680f60ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b680f301b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b680f301988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b680f3007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe6co2yom                        0x000055d43c074243 <unavailable> + 4675

    5    libc.so.6                          0x00002b680f7f6460 __libc_start_main +
    245

    6    tmpe6co2yom                        0x000055d43c073ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    let primeNumbers = [2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97]\n    var result = false\n    for i in 0..<primeNumbers.count {\n   \
    \     for j in 0..<primeNumbers.count {\n            for k in 0..<primeNumbers.count\
    \ {\n                if a == primeNumbers[i] * primeNumbers[j] * primeNumbers[k]\
    \ {\n                    result = true\n                }\n            }\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n    var a =\
    \ a\n    var i = 2\n    while i < a {\n        if a % i == 0 {\n            a\
    \ /= i\n            isPrime = false\n        } else {\n            i += 1\n  \
    \      }\n    }\n    return isPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpscpqnx_5/tmpscpqnx_5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8864d2dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8864a24b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8864a24988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8864a237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpscpqnx_5                        0x0000559eb5ce6243 <unavailable> + 4675

    5    libc.so.6                          0x00002b8864f19460 __libc_start_main +
    245

    6    tmpscpqnx_5                        0x0000559eb5ce5ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var result = false\n    var num\
    \ = a\n    var i = 2\n    while i < num {\n        if num % i == 0 {\n       \
    \     num /= i\n            if num == 1 {\n                result = true\n   \
    \         }\n        } else {\n            i += 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmp3x3pxmmb/tmp3x3pxmmb.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2766985c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b276667cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b276667c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b276667b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3x3pxmmb                        0x00005608d3d3c2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b2766b71460 __libc_start_main +
    245

    6    tmp3x3pxmmb                        0x00005608d3d3bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n    var primeNumbers\
    \ = [Int]()\n    for i in 2...a {\n        for j in 2..<i {\n            if i\
    \ % j == 0 {\n                isPrime = false\n            }\n        }\n    \
    \    if isPrime {\n            primeNumbers.append(i)\n        }\n        isPrime\
    \ = true\n    }\n    var counter = 0\n    for i in primeNumbers {\n        if\
    \ a % i == 0 {\n            counter += 1\n        }\n    }\n    if counter ==\
    \ 3 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpl6fm7tzq/tmpl6fm7tzq.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d6a4cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d6a1c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d6a1c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d6a1c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl6fm7tzq                        0x000056226d50577b <unavailable> + 6011

    5    libc.so.6                          0x00002b8d6a6ba460 __libc_start_main +
    245

    6    tmpl6fm7tzq                        0x000056226d505349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var result = false\n    var a =\
    \ a\n    var primes = [Int]()\n    for i in 2...a {\n        if is_prime(a: i)\
    \ {\n            primes.append(i)\n        }\n    }\n    for i in primes {\n \
    \       if a % i == 0 {\n            a /= i\n        }\n    }\n    if a == 1 {\n\
    \        result = true\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpkb9rt7o9.swift:13:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var is_prime = true\n    var number\
    \ = a\n    var i = 2\n    while number != 1 {\n        if number % i == 0 {\n\
    \            number /= i\n            is_prime = is_prime_number(a: i)\n     \
    \       if !is_prime {\n                return false\n            }\n        }\
    \ else {\n            i += 1\n        }\n    }\n    return is_prime\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpq6sno76i.swift:15:24: error: cannot find 'is_prime_number' in scope\n\
    \            is_prime = is_prime_number(a: i)\n                       ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    let primes = [2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\
    \    for i in 0..<primes.count {\n        for j in 0..<primes.count {\n      \
    \      for k in 0..<primes.count {\n                if primes[i] * primes[j] *\
    \ primes[k] == a {\n                    return true\n                }\n     \
    \       }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824497
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n    var primeNumbers\
    \ = [Int]()\n    for i in 2...a {\n        for j in 2..<i {\n            if i\
    \ % j == 0 {\n                isPrime = false\n            }\n        }\n    \
    \    if isPrime {\n            primeNumbers.append(i)\n        }\n        isPrime\
    \ = true\n    }\n    var counter = 0\n    for i in 0..<primeNumbers.count {\n\
    \        for j in i..<primeNumbers.count {\n            for k in j..<primeNumbers.count\
    \ {\n                if primeNumbers[i] * primeNumbers[j] * primeNumbers[k] ==\
    \ a {\n                    counter += 1\n                }\n            }\n  \
    \      }\n    }\n    if counter > 0 {\n        return true\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a: 5)\
    \ == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var is_multiply_prime = false\n\
    \    var prime_numbers = [Int]()\n    for i in 2...a {\n        var is_prime =\
    \ true\n        for j in 2..<i {\n            if i % j == 0 {\n              \
    \  is_prime = false\n                break\n            }\n        }\n       \
    \ if is_prime {\n            prime_numbers.append(i)\n        }\n    }\n    for\
    \ i in 0..<prime_numbers.count {\n        for j in i+1..<prime_numbers.count {\n\
    \            for k in j+1..<prime_numbers.count {\n                if a == prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] {\n                    is_multiply_prime\
    \ = true\n                    break\n                }\n            }\n      \
    \  }\n    }\n    return is_multiply_prime\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmprrwpegi6/tmprrwpegi6.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b1da3ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b1d731b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b1d731988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b1d7307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprrwpegi6                        0x000056330080a6bb <unavailable> + 5819

    5    libc.so.6                          0x00002b7b1dc26460 __libc_start_main +
    245

    6    tmprrwpegi6                        0x000056330080a289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var is_prime = true\n    var i =\
    \ 2\n    while i < a {\n        if a % i == 0 {\n            is_prime = false\n\
    \            break\n        }\n        i += 1\n    }\n    return is_prime\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpnxi3q11z/tmpnxi3q11z.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ed3804c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ed34fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ed34fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ed34fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnxi3q11z                        0x000056354c852243 <unavailable> + 4675

    5    libc.so.6                          0x00002b4ed39f0460 __libc_start_main +
    245

    6    tmpnxi3q11z                        0x000056354c851ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var is_prime = true\n    var i =\
    \ 2\n    while i < a {\n        if a % i == 0 {\n            is_prime = false\n\
    \            break\n        }\n        i += 1\n    }\n    return is_prime\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpnxi3q11z/tmpnxi3q11z.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ed3804c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ed34fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ed34fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ed34fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnxi3q11z                        0x000056354c852243 <unavailable> + 4675

    5    libc.so.6                          0x00002b4ed39f0460 __libc_start_main +
    245

    6    tmpnxi3q11z                        0x000056354c851ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var result = false\n    var primeNumbers\
    \ = [Int]()\n    for i in 2...a {\n        if is_prime(a: i) {\n            primeNumbers.append(i)\n\
    \        }\n    }\n    for i in 0..<primeNumbers.count {\n        for j in i..<primeNumbers.count\
    \ {\n            for k in j..<primeNumbers.count {\n                if primeNumbers[i]\
    \ * primeNumbers[j] * primeNumbers[k] == a {\n                    result = true\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmppz826xn8.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824496
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var is_multiply = false\n    var\
    \ prime_numbers = [Int]()\n    for i in 2...a {\n        if is_prime(a: i) {\n\
    \            prime_numbers.append(i)\n        }\n    }\n    for i in 0..<prime_numbers.count\
    \ {\n        for j in i..<prime_numbers.count {\n            for k in j..<prime_numbers.count\
    \ {\n                if prime_numbers[i] * prime_numbers[j] * prime_numbers[k]\
    \ == a {\n                    is_multiply = true\n                }\n        \
    \    }\n        }\n    }\n    return is_multiply\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp0mriqbxp.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    if a == 1 {\n        return false\n\
    \    }\n    var primeNumbers = [Int]()\n    for i in 2...a {\n        if is_prime(a:\
    \ i) {\n            primeNumbers.append(i)\n        }\n    }\n    for i in 0..<primeNumbers.count\
    \ {\n        for j in i..<primeNumbers.count {\n            for k in j..<primeNumbers.count\
    \ {\n                if primeNumbers[i] * primeNumbers[j] * primeNumbers[k] ==\
    \ a {\n                    return true\n                }\n            }\n   \
    \     }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpmxpx0d2t.swift:14:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var is_prime = false\n    var is_multiply_prime\
    \ = false\n    var prime_numbers = [Int]()\n    var prime_numbers_multiply = [Int]()\n\
    \    var prime_numbers_multiply_sum = 0\n    var prime_numbers_multiply_product\
    \ = 1\n    var prime_numbers_multiply_product_sum = 0\n    var prime_numbers_multiply_product_sum_product\
    \ = 1\n    var prime_numbers_multiply_product_sum_product_sum = 0\n    var prime_numbers_multiply_product_sum_product_sum_product\
    \ = 1\n    var prime_numbers_multiply_product_sum_product_sum_product_sum = 0\n\
    \    var prime_numbers_multiply_product_sum_product_sum_product_sum_product =\
    \ 1\n    var prime_numbers_multiply_product_sum_product_sum_product_sum_product_sum\
    \ = 0\n    var prime_numbers_multiply_product_sum_product_sum_product_sum_product_sum_product\
    \ = 1\n    var prime_numbers_multiply_product_sum_product_sum_product_sum_product_sum_product_sum\
    \ = 0\n    var prime_numbers_multiply_product_sum_product_sum_product_sum_product_sum_product_sum_product\
    \ = 1\n    var prime_numbers_multiply_product_sum_product_sum_product_sum_product_sum_product_sum_product_sum\
    \ = 0\n    var prime_numbers_multiply_product_sum_product_sum_product_sum_product_sum_product_sum_product_sum_product\
    \ = 1\n    var prime_numbers_multiply_product_sum_product_sum_product_sum_product_sum_product_sum_product_sum_product_sum\
    \ = 0\n    var prime_numbers_multiply_product_sum_product_sum_product_sum_product_sum_product_sum_product_sum_product_sum_product\
    \ = 1\n    var prime_numbers_multiply_product_\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp0btr7vqx.swift:29:9: error: type annotation missing in pattern\n\
    \    var prime_numbers_multiply_product_\n        ^\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var result = false\n    var primeNumbers\
    \ = [Int]()\n    for i in 2...a {\n        if is_prime(a: i) {\n            primeNumbers.append(i)\n\
    \        }\n    }\n    for i in 0..<primeNumbers.count {\n        for j in i+1..<primeNumbers.count\
    \ {\n            for k in j+1..<primeNumbers.count {\n                if primeNumbers[i]\
    \ * primeNumbers[j] * primeNumbers[k] == a {\n                    result = true\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpfnqy659w.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var is_prime = true\n    var number\
    \ = a\n    var i = 2\n    while i < number {\n        if number % i == 0 {\n \
    \           number /= i\n            i = 2\n        } else {\n            i +=\
    \ 1\n        }\n    }\n    if number != 1 {\n        is_prime = false\n    }\n\
    \    return is_prime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmp_wyn0jsm/tmp_wyn0jsm.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeaf0f0dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeaf0c04b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeaf0c04988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeaf0c037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_wyn0jsm                        0x000055ed831912b7 <unavailable> + 4791

    5    libc.so.6                          0x00002aeaf10f9460 __libc_start_main +
    245

    6    tmp_wyn0jsm                        0x000055ed83190ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var result = false\n    var isPrime\
    \ = true\n    var primeNumbers = [Int]()\n    for i in 2...a {\n        isPrime\
    \ = true\n        for j in 2..<i {\n            if i % j == 0 {\n            \
    \    isPrime = false\n                break\n            }\n        }\n      \
    \  if isPrime {\n            primeNumbers.append(i)\n        }\n    }\n    for\
    \ i in 0..<primeNumbers.count {\n        for j in i..<primeNumbers.count {\n \
    \           for k in j..<primeNumbers.count {\n                if primeNumbers[i]\
    \ * primeNumbers[j] * primeNumbers[k] == a {\n                    result = true\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var result = false\n    var number\
    \ = a\n    var primeNumbers = [Int]()\n    for i in 2...number {\n        if is_prime(a:\
    \ i) {\n            primeNumbers.append(i)\n        }\n    }\n    for i in 0..<primeNumbers.count\
    \ {\n        for j in i..<primeNumbers.count {\n            for k in j..<primeNumbers.count\
    \ {\n                if primeNumbers[i] * primeNumbers[j] * primeNumbers[k] ==\
    \ number {\n                    result = true\n                }\n           \
    \ }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpncoc_3cz.swift:13:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var result = false\n    var primeNumbers\
    \ = [Int]()\n    for i in 2...a {\n        if is_prime(a: i) {\n            primeNumbers.append(i)\n\
    \        }\n    }\n    for i in 0..<primeNumbers.count {\n        for j in 0..<primeNumbers.count\
    \ {\n            for k in 0..<primeNumbers.count {\n                if primeNumbers[i]\
    \ * primeNumbers[j] * primeNumbers[k] == a {\n                    result = true\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpn0wz26xj.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var result = false\n    var primeNumbers\
    \ = [Int]()\n    var i = 2\n    while i < a {\n        if is_prime(a: i) {\n \
    \           primeNumbers.append(i)\n        }\n        i += 1\n    }\n    for\
    \ i in 0..<primeNumbers.count {\n        for j in i..<primeNumbers.count {\n \
    \           for k in j..<primeNumbers.count {\n                if primeNumbers[i]\
    \ * primeNumbers[j] * primeNumbers[k] == a {\n                    result = true\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpcfwgacoi.swift:13:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var is_multiply = false\n    var\
    \ a = a\n    var i = 2\n    var count = 0\n    while a > 1 {\n        if a % i\
    \ == 0 {\n            a /= i\n            count += 1\n        } else {\n     \
    \       i += 1\n        }\n    }\n    if count == 3 {\n        is_multiply = true\n\
    \    }\n    return is_multiply\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var isMultiplyPrime = false\n  \
    \  var primeNumbers = [Int]()\n    for i in 2...a {\n        if isPrime(i) {\n\
    \            primeNumbers.append(i)\n        }\n    }\n    for i in 0..<primeNumbers.count\
    \ {\n        for j in i..<primeNumbers.count {\n            for k in j..<primeNumbers.count\
    \ {\n                if primeNumbers[i] * primeNumbers[j] * primeNumbers[k] ==\
    \ a {\n                    isMultiplyPrime = true\n                }\n       \
    \     }\n        }\n    }\n    return isMultiplyPrime\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp5uy82gf9.swift:12:12: error: cannot find 'isPrime' in scope\n \
    \       if isPrime(i) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var primes = [Int]()\n    for i\
    \ in 2...a {\n        if is_prime(a: i) {\n            primes.append(i)\n    \
    \    }\n    }\n    var result = false\n    for i in 0..<primes.count {\n     \
    \   for j in i..<primes.count {\n            for k in j..<primes.count {\n   \
    \             if primes[i] * primes[j] * primes[k] == a {\n                  \
    \  result = true\n                }\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp1_iuex4b.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n    var num\
    \ = a\n    var i = 2\n    while i < num {\n        if num % i == 0 {\n       \
    \     num = num / i\n            isPrime = false\n        } else {\n         \
    \   i += 1\n        }\n    }\n    return isPrime\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmp8o3hm010/tmp8o3hm010.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ec390ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ec3605b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ec3605988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ec36047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8o3hm010                        0x000055c18516c243 <unavailable> + 4675

    5    libc.so.6                          0x00002b5ec3afa460 __libc_start_main +
    245

    6    tmp8o3hm010                        0x000055c18516bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var a = a\n    var result = true\n\
    \    var primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    var i = 0\n    while a > 1 && i < primes.count\
    \ {\n        if a % primes[i] == 0 {\n            a /= primes[i]\n        } else\
    \ {\n            i += 1\n        }\n    }\n    if a != 1 {\n        result = false\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmphw315uss/tmphw315uss.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f4a633c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f4a32ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f4a32a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f4a3297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphw315uss                        0x0000564a6363b403 <unavailable> + 5123

    5    libc.so.6                          0x00002b0f4a81f460 __libc_start_main +
    245

    6    tmphw315uss                        0x0000564a6363b0b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var result = false\n    var primes\
    \ = [Int]()\n    for i in 2...a {\n        if is_prime(a: i) {\n            primes.append(i)\n\
    \        }\n    }\n    for i in 0..<primes.count {\n        for j in i..<primes.count\
    \ {\n            for k in j..<primes.count {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    result = true\n                }\n \
    \           }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpcrme3yg6.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824496
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var isMultiplyPrime = false\n  \
    \  var primeNumbers = [Int]()\n    var primeNumbersCount = 0\n    var number =\
    \ a\n    for i in 2...number {\n        if isPrime(i) {\n            primeNumbers.append(i)\n\
    \            primeNumbersCount += 1\n        }\n    }\n    for i in 0..<primeNumbersCount\
    \ {\n        for j in 0..<primeNumbersCount {\n            for k in 0..<primeNumbersCount\
    \ {\n                if primeNumbers[i] * primeNumbers[j] * primeNumbers[k] ==\
    \ number {\n                    isMultiplyPrime = true\n                }\n  \
    \          }\n        }\n    }\n    return isMultiplyPrime\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7963ddah.swift:14:12: error: cannot find 'isPrime' in scope\n \
    \       if isPrime(i) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var isMultiplyPrime = false\n  \
    \  var primeNumbers = [Int]()\n    for i in 2...a {\n        if isPrime(a: i)\
    \ {\n            primeNumbers.append(i)\n        }\n    }\n    for i in 0..<primeNumbers.count\
    \ {\n        for j in 0..<primeNumbers.count {\n            for k in 0..<primeNumbers.count\
    \ {\n                if primeNumbers[i] * primeNumbers[j] * primeNumbers[k] ==\
    \ a {\n                    isMultiplyPrime = true\n                }\n       \
    \     }\n        }\n    }\n    return isMultiplyPrime\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpf1iiu8nu.swift:12:12: error: cannot find 'isPrime' in scope\n \
    \       if isPrime(a: i) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var primeNumbers = [Int]()\n   \
    \ for i in 2...a {\n        if is_prime(a: i) {\n            primeNumbers.append(i)\n\
    \        }\n    }\n    var result = 1\n    for i in primeNumbers {\n        result\
    \ *= i\n        if result == a {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpqivnoswa.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n    var a =\
    \ a\n    var i = 2\n    while i < a {\n        if a % i == 0 {\n            a\
    \ /= i\n            isPrime = false\n        } else {\n            i += 1\n  \
    \      }\n    }\n    return isPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpscpqnx_5/tmpscpqnx_5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8864d2dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8864a24b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8864a24988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8864a237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpscpqnx_5                        0x0000559eb5ce6243 <unavailable> + 4675

    5    libc.so.6                          0x00002b8864f19460 __libc_start_main +
    245

    6    tmpscpqnx_5                        0x0000559eb5ce5ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmplvqbjeky/tmplvqbjeky.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d742dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d73fd3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d73fd3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d73fd27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplvqbjeky                        0x000055fd6a9e8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b8d744c8460 __libc_start_main +
    245

    6    tmplvqbjeky                        0x000055fd6a9e7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var isMultiplyPrime = false\n  \
    \  var primeNumbers = [Int]()\n    var a = a\n    var i = 2\n    while i <= a\
    \ {\n        if a % i == 0 {\n            primeNumbers.append(i)\n           \
    \ a /= i\n        } else {\n            i += 1\n        }\n    }\n    if primeNumbers.count\
    \ == 3 {\n        isMultiplyPrime = true\n    }\n    return isMultiplyPrime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824497
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var primes = [Int]()\n    var isPrime\
    \ = true\n    for i in 2...a {\n        for j in 2..<i {\n            if i % j\
    \ == 0 {\n                isPrime = false\n            }\n        }\n        if\
    \ isPrime {\n            primes.append(i)\n        }\n        isPrime = true\n\
    \    }\n    var counter = 0\n    for i in 0..<primes.count {\n        for j in\
    \ i..<primes.count {\n            for k in j..<primes.count {\n              \
    \  if primes[i] * primes[j] * primes[k] == a {\n                    counter +=\
    \ 1\n                }\n            }\n        }\n    }\n    if counter > 0 {\n\
    \        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var primeNumbers = [Int]()\n   \
    \ for i in 2...a {\n        if is_prime(a: i) {\n            primeNumbers.append(i)\n\
    \        }\n    }\n    for i in 0..<primeNumbers.count {\n        for j in i+1..<primeNumbers.count\
    \ {\n            for k in j+1..<primeNumbers.count {\n                if primeNumbers[i]\
    \ * primeNumbers[j] * primeNumbers[k] == a {\n                    return true\n\
    \                }\n            }\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpay9apv1v.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n    var i =\
    \ 2\n    while i < a {\n        if a % i == 0 {\n            isPrime = false\n\
    \        }\n        i += 1\n    }\n    return isPrime\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpe6co2yom/tmpe6co2yom.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b680f60ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b680f301b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b680f301988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b680f3007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe6co2yom                        0x000055d43c074243 <unavailable> + 4675

    5    libc.so.6                          0x00002b680f7f6460 __libc_start_main +
    245

    6    tmpe6co2yom                        0x000055d43c073ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var primes = [Int]()\n    for i\
    \ in 2...a {\n        if is_prime(a: i) {\n            primes.append(i)\n    \
    \    }\n    }\n    for i in 0..<primes.count {\n        for j in i+1..<primes.count\
    \ {\n            for k in j+1..<primes.count {\n                if primes[i] *\
    \ primes[j] * primes[k] == a {\n                    return true\n            \
    \    }\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpl84glhgu.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var isPrime = false\n    var primes\
    \ = [Int]()\n    for i in 2...a {\n        isPrime = true\n        for j in 2..<i\
    \ {\n            if i % j == 0 {\n                isPrime = false\n          \
    \  }\n        }\n        if isPrime {\n            primes.append(i)\n        }\n\
    \    }\n    for i in 0..<primes.count {\n        for j in i..<primes.count {\n\
    \            for k in j..<primes.count {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    return true\n                }\n   \
    \         }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmplvqbjeky/tmplvqbjeky.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d742dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d73fd3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d73fd3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d73fd27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplvqbjeky                        0x000055fd6a9e8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b8d744c8460 __libc_start_main +
    245

    6    tmplvqbjeky                        0x000055fd6a9e7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var result = false\n    var primeNumbers\
    \ = [Int]()\n    for i in 2...a {\n        if is_prime(a: i) {\n            primeNumbers.append(i)\n\
    \        }\n    }\n    for i in 0..<primeNumbers.count {\n        for j in 0..<primeNumbers.count\
    \ {\n            for k in 0..<primeNumbers.count {\n                if primeNumbers[i]\
    \ * primeNumbers[j] * primeNumbers[k] == a {\n                    result = true\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpn0wz26xj.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var is_prime = false\n    var is_multiply_prime\
    \ = false\n    var prime_numbers = [Int]()\n    for i in 2...a {\n        is_prime\
    \ = true\n        for j in 2..<i {\n            if i % j == 0 {\n            \
    \    is_prime = false\n                break\n            }\n        }\n     \
    \   if is_prime {\n            prime_numbers.append(i)\n        }\n    }\n   \
    \ for i in 0..<prime_numbers.count {\n        for j in i..<prime_numbers.count\
    \ {\n            for k in j..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    is_multiply_prime\
    \ = true\n                }\n            }\n        }\n    }\n    return is_multiply_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var is_multiply_prime = false\n\
    \    var prime_numbers = [Int]()\n    for i in 2...a {\n        if is_prime(a:\
    \ i) {\n            prime_numbers.append(i)\n        }\n    }\n    for i in 0..<prime_numbers.count\
    \ {\n        for j in 0..<prime_numbers.count {\n            for k in 0..<prime_numbers.count\
    \ {\n                if prime_numbers[i] * prime_numbers[j] * prime_numbers[k]\
    \ == a {\n                    is_multiply_prime = true\n                }\n  \
    \          }\n        }\n    }\n    return is_multiply_prime\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmps0mhabvi.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    if a == 0 {\n        return false\n\
    \    }\n    var a = a\n    var i = 2\n    while i <= a {\n        if a % i ==\
    \ 0 {\n            a /= i\n            if a == 1 {\n                return true\n\
    \            }\n        } else {\n            i += 1\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a: 5)\
    \ == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmpb78omzi5/tmpb78omzi5.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6b1c4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6b1942b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6b1942988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6b19417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb78omzi5                        0x000055f1bbf75243 <unavailable> + 4675

    5    libc.so.6                          0x00002ba6b1e37460 __libc_start_main +
    245

    6    tmpb78omzi5                        0x000055f1bbf74ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var result = false\n    var number\
    \ = a\n    var primeNumbers = [Int]()\n    for i in 2...number {\n        while\
    \ number % i == 0 {\n            primeNumbers.append(i)\n            number /=\
    \ i\n        }\n    }\n    if primeNumbers.count == 3 {\n        result = true\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var isMultiplyPrime = false\n  \
    \  var primeNumbers = [Int]()\n    var i = 2\n    while i < a {\n        if is_prime(a:\
    \ i) {\n            primeNumbers.append(i)\n        }\n        i += 1\n    }\n\
    \    if primeNumbers.count > 2 {\n        for i in 0...primeNumbers.count - 3\
    \ {\n            for j in i + 1...primeNumbers.count - 2 {\n                for\
    \ k in j + 1...primeNumbers.count - 1 {\n                    if primeNumbers[i]\
    \ * primeNumbers[j] * primeNumbers[k] == a {\n                        isMultiplyPrime\
    \ = true\n                    }\n                }\n            }\n        }\n\
    \    }\n    return isMultiplyPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpjuhxbr3s.swift:13:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var result = false\n    var primes\
    \ = [Int]()\n    for i in 2...a {\n        if is_prime(a: i) {\n            primes.append(i)\n\
    \        }\n    }\n    for i in 0..<primes.count {\n        for j in 0..<primes.count\
    \ {\n            for k in 0..<primes.count {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    result = true\n                }\n \
    \           }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp2s4kncvy.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var primeNumbers = [Int]()\n   \
    \ for i in 2...a {\n        if is_prime(a: i) {\n            primeNumbers.append(i)\n\
    \        }\n    }\n    for i in 0..<primeNumbers.count {\n        for j in i..<primeNumbers.count\
    \ {\n            for k in j..<primeNumbers.count {\n                if primeNumbers[i]\
    \ * primeNumbers[j] * primeNumbers[k] == a {\n                    return true\n\
    \                }\n            }\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpus35xu_w.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var isMultiplyPrime = false\n  \
    \  var primeNumbers = [Int]()\n    var number = a\n    for i in 2...a {\n    \
    \    if isPrime(i) {\n            primeNumbers.append(i)\n        }\n    }\n \
    \   for i in primeNumbers {\n        if number % i == 0 {\n            number\
    \ /= i\n        }\n    }\n    if number == 1 {\n        isMultiplyPrime = true\n\
    \    }\n    return isMultiplyPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpfo_y57jd.swift:13:12: error: cannot find 'isPrime' in scope\n \
    \       if isPrime(i) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    if a < 6 {\n        return false\n\
    \    }\n    var primes = [2, 3, 5]\n    var i = 0\n    while primes[i] <= a {\n\
    \        if a % primes[i] == 0 {\n            return true\n        }\n       \
    \ i += 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmp457rkiam/tmp457rkiam.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07d8568c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b07d825fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b07d825f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b07d825e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp457rkiam                        0x0000557eab63d501 <unavailable> + 5377

    5    libc.so.6                          0x00002b07d8754460 __libc_start_main +
    245

    6    tmp457rkiam                        0x0000557eab63d059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var result = false\n    var primes\
    \ = [Int]()\n    for i in 2...a {\n        if is_prime(a: i) {\n            primes.append(i)\n\
    \        }\n    }\n    for i in 0..<primes.count {\n        for j in i..<primes.count\
    \ {\n            for k in j..<primes.count {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    result = true\n                }\n \
    \           }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpcrme3yg6.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824496
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n    var num\
    \ = a\n    var i = 2\n    while i < num {\n        if num % i == 0 {\n       \
    \     num = num / i\n            if !is_prime(i) {\n                isPrime =\
    \ false\n                break\n            }\n        } else {\n            i\
    \ += 1\n        }\n    }\n    if isPrime && is_prime(num) {\n        return true\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpiv3b167s.swift:15:17: error: cannot find 'is_prime' in scope\n\
    \            if !is_prime(i) {\n                ^~~~~~~~\n/tmp/tmpiv3b167s.swift:23:19:\
    \ error: cannot find 'is_prime' in scope\n    if isPrime && is_prime(num) {\n\
    \                  ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmplvqbjeky/tmplvqbjeky.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d742dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d73fd3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d73fd3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d73fd27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplvqbjeky                        0x000055fd6a9e8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b8d744c8460 __libc_start_main +
    245

    6    tmplvqbjeky                        0x000055fd6a9e7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var result = false\n    var counter\
    \ = 0\n    var prime_numbers = [Int]()\n    for i in 2...a {\n        if is_prime(i)\
    \ {\n            prime_numbers.append(i)\n        }\n    }\n    for i in 0..<prime_numbers.count\
    \ {\n        for j in i..<prime_numbers.count {\n            for k in j..<prime_numbers.count\
    \ {\n                if a == prime_numbers[i] * prime_numbers[j] * prime_numbers[k]\
    \ {\n                    result = true\n                    counter += 1\n   \
    \             }\n            }\n        }\n    }\n    if counter > 1 {\n     \
    \   result = false\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_i64mfu2.swift:13:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmplvqbjeky/tmplvqbjeky.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d742dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d73fd3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d73fd3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d73fd27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplvqbjeky                        0x000055fd6a9e8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b8d744c8460 __libc_start_main +
    245

    6    tmplvqbjeky                        0x000055fd6a9e7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n    var number\
    \ = a\n    var i = 2\n    while isPrime && i < number {\n        if number % i\
    \ == 0 {\n            isPrime = false\n        }\n        i += 1\n    }\n    return\
    \ isPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmp3tickj1_/tmp3tickj1_.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b357a937c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b357a62eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b357a62e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b357a62d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3tickj1_                        0x0000564c79bde243 <unavailable> + 4675

    5    libc.so.6                          0x00002b357ab23460 __libc_start_main +
    245

    6    tmp3tickj1_                        0x0000564c79bddef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var primes = [Int]()\n    for i\
    \ in 2...a {\n        if is_prime(a: i) {\n            primes.append(i)\n    \
    \    }\n    }\n    for i in 0..<primes.count {\n        for j in i+1..<primes.count\
    \ {\n            for k in j+1..<primes.count {\n                if primes[i] *\
    \ primes[j] * primes[k] == a {\n                    return true\n            \
    \    }\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpl84glhgu.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var result = false\n    var primes\
    \ = [Int]()\n    for i in 1...a {\n        if is_prime(i) {\n            primes.append(i)\n\
    \        }\n    }\n    for i in 0..<primes.count {\n        for j in i..<primes.count\
    \ {\n            for k in j..<primes.count {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    result = true\n                }\n \
    \           }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpvx86p18m.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var result = false\n    var i =\
    \ 2\n    var j = 2\n    var k = 2\n    while i < a {\n        while j < a {\n\
    \            while k < a {\n                if i * j * k == a {\n            \
    \        result = true\n                }\n                k += 1\n          \
    \  }\n            j += 1\n        }\n        i += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpgeburh3j/tmpgeburh3j.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b151c0c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b151bdbdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b151bdbd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b151bdbc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgeburh3j                        0x000055bbeef2a227 <unavailable> + 4647

    5    libc.so.6                          0x00002b151c2b2460 __libc_start_main +
    245

    6    tmpgeburh3j                        0x000055bbeef29e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n    var num\
    \ = a\n    var i = 2\n    while i < num {\n        if num % i == 0 {\n       \
    \     num = num / i\n            isPrime = false\n        } else {\n         \
    \   i += 1\n        }\n    }\n    return isPrime\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmp8o3hm010/tmp8o3hm010.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ec390ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ec3605b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ec3605988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ec36047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8o3hm010                        0x000055c18516c243 <unavailable> + 4675

    5    libc.so.6                          0x00002b5ec3afa460 __libc_start_main +
    245

    6    tmp8o3hm010                        0x000055c18516bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n    var isMultiply\
    \ = false\n    var primeNumbers = [Int]()\n    for i in 2...a {\n        for j\
    \ in 2...i {\n            if i % j == 0 {\n                isPrime = false\n \
    \               break\n            }\n        }\n        if isPrime {\n      \
    \      primeNumbers.append(i)\n        }\n        isPrime = true\n    }\n    for\
    \ i in 0..<primeNumbers.count {\n        for j in i..<primeNumbers.count {\n \
    \           for k in j..<primeNumbers.count {\n                if primeNumbers[i]\
    \ * primeNumbers[j] * primeNumbers[k] == a {\n                    isMultiply =\
    \ true\n                    break\n                }\n            }\n        }\n\
    \    }\n    return isMultiply\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmpsr79zar8/tmpsr79zar8.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb19de4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb19adbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb19adb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb19ada7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsr79zar8                        0x0000563ede4b1647 <unavailable> + 5703

    5    libc.so.6                          0x00002aeb19fd0460 __libc_start_main +
    245

    6    tmpsr79zar8                        0x0000563ede4b1289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var result = false\n    var primeNumbers\
    \ = [Int]()\n    for i in 2...a {\n        if is_prime(a: i) {\n            primeNumbers.append(i)\n\
    \        }\n    }\n    for i in 0..<primeNumbers.count {\n        for j in i..<primeNumbers.count\
    \ {\n            for k in j..<primeNumbers.count {\n                if primeNumbers[i]\
    \ * primeNumbers[j] * primeNumbers[k] == a {\n                    result = true\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmppz826xn8.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824496
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var result = false\n    var primeNumbers\
    \ = [Int]()\n    for i in 1...a {\n        if is_prime(a: i) {\n            primeNumbers.append(i)\n\
    \        }\n    }\n    for i in 0..<primeNumbers.count {\n        for j in i..<primeNumbers.count\
    \ {\n            for k in j..<primeNumbers.count {\n                if primeNumbers[i]\
    \ * primeNumbers[j] * primeNumbers[k] == a {\n                    result = true\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpgzupel0e.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var prime_numbers = [Int]()\n  \
    \  for i in 2...a {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n\
    \        }\n    }\n    for i in 0..<prime_numbers.count {\n        for j in i..<prime_numbers.count\
    \ {\n            for k in j..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    return true\n\
    \                }\n            }\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpaj9g1kco.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var result = false\n    var primes\
    \ = [Int]()\n    for i in 2...a {\n        if is_prime(a: i) {\n            primes.append(i)\n\
    \        }\n    }\n    for i in 0..<primes.count {\n        for j in i..<primes.count\
    \ {\n            for k in j..<primes.count {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    result = true\n                }\n \
    \           }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpcrme3yg6.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824496
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var primes = [Int]()\n    for i\
    \ in 2...a {\n        if is_prime(a: i) {\n            primes.append(i)\n    \
    \    }\n    }\n    for i in 0..<primes.count {\n        for j in i..<primes.count\
    \ {\n            for k in j..<primes.count {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    return true\n                }\n   \
    \         }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpplwo7228.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var a = a\n    var result = true\n\
    \    var primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    while a > 1 {\n        for prime in\
    \ primes {\n            if a % prime == 0 {\n                a /= prime\n    \
    \            break\n            }\n        }\n        if a == 1 {\n          \
    \  break\n        }\n        result = false\n        break\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmpfrshsn8f/tmpfrshsn8f.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f51630c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f51327b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f51327988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f513267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfrshsn8f                        0x0000565476f684b3 <unavailable> + 5299

    5    libc.so.6                          0x00002b2f5181c460 __libc_start_main +
    245

    6    tmpfrshsn8f                        0x0000565476f68169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    let primes = [2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\
    \    for i in primes {\n        if a % i == 0 {\n            for j in primes {\n\
    \                if a % j == 0 && i != j {\n                    for k in primes\
    \ {\n                        if a % k == 0 && i != k && j != k {\n           \
    \                 if a == i * j * k {\n                                return\
    \ true\n                            }\n                        }\n           \
    \         }\n                }\n            }\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmp4vgf9eq_/tmp4vgf9eq_.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b355908ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3558d81b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3558d81988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3558d807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4vgf9eq_                        0x0000556cf9d0659b <unavailable> + 5531

    5    libc.so.6                          0x00002b3559276460 __libc_start_main +
    245

    6    tmp4vgf9eq_                        0x0000556cf9d06169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var result = false\n    var primes\
    \ = [Int]()\n    for i in 2...a {\n        if is_prime(i) {\n            primes.append(i)\n\
    \        }\n    }\n    for i in primes {\n        for j in primes {\n        \
    \    for k in primes {\n                if i * j * k == a {\n                \
    \    result = true\n                }\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpe5kswctn.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    for i in 2...a {\n        if a %\
    \ i == 0 {\n            for j in 2...a {\n                if a % j == 0 {\n  \
    \                  for k in 2...a {\n                        if a % k == 0 {\n\
    \                            if i * j * k == a {\n                           \
    \     return true\n                            }\n                        }\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmpd6sqje_5/tmpd6sqje_5.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abaecc83c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abaec97ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abaec97a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abaec9797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd6sqje_5                        0x000055d0de0085ef <unavailable> + 5615

    5    libc.so.6                          0x00002abaece6f460 __libc_start_main +
    245

    6    tmpd6sqje_5                        0x000055d0de007fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var is_prime = true\n    var i =\
    \ 2\n    while i < a {\n        if a % i == 0 {\n            is_prime = false\n\
    \            break\n        }\n        i += 1\n    }\n    return is_prime\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpnxi3q11z/tmpnxi3q11z.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ed3804c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ed34fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ed34fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ed34fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnxi3q11z                        0x000056354c852243 <unavailable> + 4675

    5    libc.so.6                          0x00002b4ed39f0460 __libc_start_main +
    245

    6    tmpnxi3q11z                        0x000056354c851ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var primes = [Int]()\n    for i\
    \ in 2...a {\n        if is_prime(a: i) {\n            primes.append(i)\n    \
    \    }\n    }\n    for i in 0..<primes.count {\n        for j in i+1..<primes.count\
    \ {\n            for k in j+1..<primes.count {\n                if primes[i] *\
    \ primes[j] * primes[k] == a {\n                    return true\n            \
    \    }\n            }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpl84glhgu.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n    var primeNumbers\
    \ = [Int]()\n    for i in 2...a {\n        for j in 2..<i {\n            if i\
    \ % j == 0 {\n                isPrime = false\n            }\n        }\n    \
    \    if isPrime {\n            primeNumbers.append(i)\n        }\n        isPrime\
    \ = true\n    }\n    var counter = 0\n    for i in primeNumbers {\n        if\
    \ a % i == 0 {\n            counter += 1\n        }\n    }\n    if counter ==\
    \ 3 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpl6fm7tzq/tmpl6fm7tzq.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d6a4cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d6a1c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d6a1c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d6a1c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl6fm7tzq                        0x000056226d50577b <unavailable> + 6011

    5    libc.so.6                          0x00002b8d6a6ba460 __libc_start_main +
    245

    6    tmpl6fm7tzq                        0x000056226d505349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var is_prime = true\n    var prime_numbers\
    \ = [Int]()\n    for i in 2...a {\n        for j in 2..<i {\n            if i\
    \ % j == 0 {\n                is_prime = false\n                break\n      \
    \      }\n        }\n        if is_prime {\n            prime_numbers.append(i)\n\
    \        }\n        is_prime = true\n    }\n    var count = 0\n    for i in 0..<prime_numbers.count\
    \ {\n        for j in i+1..<prime_numbers.count {\n            for k in j+1..<prime_numbers.count\
    \ {\n                if prime_numbers[i] * prime_numbers[j] * prime_numbers[k]\
    \ == a {\n                    count += 1\n                }\n            }\n \
    \       }\n    }\n    if count == 1 {\n        return true\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a: 5)\
    \ == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmpgxvxu35m/tmpgxvxu35m.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a17946c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a1763db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a1763d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a1763c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxvxu35m                        0x000055ff4627f6bb <unavailable> + 5819

    5    libc.so.6                          0x00002b7a17b32460 __libc_start_main +
    245

    6    tmpgxvxu35m                        0x000055ff4627f289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var result = false\n    var primeNumbers\
    \ = [Int]()\n    for i in 2...a {\n        if is_prime(a: i) {\n            primeNumbers.append(i)\n\
    \        }\n    }\n    for i in 0..<primeNumbers.count {\n        for j in i+1..<primeNumbers.count\
    \ {\n            for k in j+1..<primeNumbers.count {\n                if primeNumbers[i]\
    \ * primeNumbers[j] * primeNumbers[k] == a {\n                    result = true\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpfnqy659w.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmplvqbjeky/tmplvqbjeky.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d742dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d73fd3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d73fd3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d73fd27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplvqbjeky                        0x000055fd6a9e8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b8d744c8460 __libc_start_main +
    245

    6    tmplvqbjeky                        0x000055fd6a9e7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var result = false\n    var primes\
    \ = [Int]()\n    for i in 2...a {\n        if is_prime(a: i) {\n            primes.append(i)\n\
    \        }\n    }\n    for i in 0..<primes.count {\n        for j in i..<primes.count\
    \ {\n            for k in j..<primes.count {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    result = true\n                }\n \
    \           }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpcrme3yg6.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824496
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var i = 2\n    var count = 0\n \
    \   while i <= a {\n        if a % i == 0 {\n            count += 1\n        \
    \    a /= i\n        } else {\n            i += 1\n        }\n    }\n    return\
    \ count == 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpif62x336.swift:14:15: error: left side of mutating operator isn't\
    \ mutable: 'a' is a 'let' constant\n            a /= i\n            ~ ^\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n    var i =\
    \ 2\n    var num = a\n    while i * i <= num {\n        if num % i == 0 {\n  \
    \          isPrime = false\n            break\n        }\n        i += 1\n   \
    \ }\n    return isPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmprxc6b1p1/tmprxc6b1p1.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c6cf2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c69e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c69e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c69e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprxc6b1p1                        0x000055a9f2e96243 <unavailable> + 4675

    5    libc.so.6                          0x00002b30c6ede460 __libc_start_main +
    245

    6    tmprxc6b1p1                        0x000055a9f2e95ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n    var number\
    \ = a\n    var i = 2\n    while i < number {\n        if number % i == 0 {\n \
    \           isPrime = false\n            number = number / i\n        } else {\n\
    \            i += 1\n        }\n    }\n    return isPrime\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpb6lt4u4p/tmpb6lt4u4p.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6765bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6762b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6762b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6762b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb6lt4u4p                        0x00005564d085e243 <unavailable> + 4675

    5    libc.so.6                          0x00002ad6767ab460 __libc_start_main +
    245

    6    tmpb6lt4u4p                        0x00005564d085def9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n    var i =\
    \ 2\n    var count = 0\n    while i < a {\n        if a % i == 0 {\n         \
    \   isPrime = false\n            count += 1\n        }\n        i += 1\n    }\n\
    \    if count == 3 {\n        return true\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpykrqb3ou/tmpykrqb3ou.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc4cb10c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc4c807b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc4c807988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc4c8067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpykrqb3ou                        0x000055889639c2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002abc4ccfc460 __libc_start_main +
    245

    6    tmpykrqb3ou                        0x000055889639bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmplvqbjeky/tmplvqbjeky.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d742dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d73fd3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d73fd3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d73fd27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplvqbjeky                        0x000055fd6a9e8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b8d744c8460 __libc_start_main +
    245

    6    tmplvqbjeky                        0x000055fd6a9e7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var result = false\n    var primeNumbers\
    \ = [Int]()\n    for i in 2...a {\n        if is_prime(a: i) {\n            primeNumbers.append(i)\n\
    \        }\n    }\n    for i in 0..<primeNumbers.count {\n        for j in i+1..<primeNumbers.count\
    \ {\n            for k in j+1..<primeNumbers.count {\n                if primeNumbers[i]\
    \ * primeNumbers[j] * primeNumbers[k] == a {\n                    result = true\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpfnqy659w.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824496
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var result = false\n    var primeNumbers\
    \ = [Int]()\n    for i in 2...a {\n        if is_prime(a: i) {\n            primeNumbers.append(i)\n\
    \        }\n    }\n    for i in 0..<primeNumbers.count {\n        for j in i..<primeNumbers.count\
    \ {\n            for k in j..<primeNumbers.count {\n                if primeNumbers[i]\
    \ * primeNumbers[j] * primeNumbers[k] == a {\n                    result = true\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmppz826xn8.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824496
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var result = false\n    var primes\
    \ = [Int]()\n    for i in 2...a {\n        if is_prime(a: i) {\n            primes.append(i)\n\
    \        }\n    }\n    for i in 0..<primes.count {\n        for j in i..<primes.count\
    \ {\n            for k in j..<primes.count {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    result = true\n                }\n \
    \           }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpcrme3yg6.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n    var number\
    \ = a\n    var i = 2\n    while i < number {\n        if number % i == 0 {\n \
    \           number /= i\n            isPrime = false\n        } else {\n     \
    \       i += 1\n        }\n    }\n    return isPrime\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpzmv1pk2v/tmpzmv1pk2v.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2dd1f76c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2dd1c6db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2dd1c6d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2dd1c6c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzmv1pk2v                        0x000055bb716d5243 <unavailable> + 4675

    5    libc.so.6                          0x00002b2dd2162460 __libc_start_main +
    245

    6    tmpzmv1pk2v                        0x000055bb716d4ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var prime = [Int]()\n    var i =\
    \ 2\n    while i < a {\n        if is_prime(a: i) {\n            prime.append(i)\n\
    \        }\n        i += 1\n    }\n    var j = 0\n    while j < prime.count {\n\
    \        var k = j + 1\n        while k < prime.count {\n            var l = k\
    \ + 1\n            while l < prime.count {\n                if prime[j] * prime[k]\
    \ * prime[l] == a {\n                    return true\n                }\n    \
    \            l += 1\n            }\n            k += 1\n        }\n        j +=\
    \ 1\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpjrtjycj_.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n    var a =\
    \ a\n    var i = 2\n    while i < a {\n        if a % i == 0 {\n            a\
    \ /= i\n            isPrime = is_prime(a: i)\n            if !isPrime {\n    \
    \            return false\n            }\n        } else {\n            i += 1\n\
    \        }\n    }\n    return isPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpcof9_oto.swift:15:23: error: cannot find 'is_prime' in scope\n\
    \            isPrime = is_prime(a: i)\n                      ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var result = false\n    var primes\
    \ = [Int]()\n    for i in 2...a {\n        if is_prime(a: i) {\n            primes.append(i)\n\
    \        }\n    }\n    for i in 0..<primes.count {\n        for j in i..<primes.count\
    \ {\n            for k in j..<primes.count {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    result = true\n                }\n \
    \           }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpcrme3yg6.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824496
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var result = false\n    var primes\
    \ = [Int]()\n    for i in 2...a {\n        if is_prime(a: i) {\n            primes.append(i)\n\
    \        }\n    }\n    for i in 0..<primes.count {\n        for j in i..<primes.count\
    \ {\n            for k in j..<primes.count {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    result = true\n                }\n \
    \           }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpcrme3yg6.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    if a == 1 {\n        return false\n\
    \    }\n    var a = a\n    var count = 0\n    for i in 2...a {\n        while\
    \ a % i == 0 {\n            a /= i\n            count += 1\n        }\n      \
    \  if count == 3 {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpv75i4z3x/tmpv75i4z3x.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0fbd620c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0fbd317b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0fbd317988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0fbd3167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv75i4z3x                        0x00005594cd11f5ef <unavailable> + 5615

    5    libc.so.6                          0x00002b0fbd80c460 __libc_start_main +
    245

    6    tmpv75i4z3x                        0x00005594cd11efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var is_multiply = false\n    var\
    \ prime_numbers = [Int]()\n    for i in 2...a {\n        if is_prime(a: i) {\n\
    \            prime_numbers.append(i)\n        }\n    }\n    for i in 0..<prime_numbers.count\
    \ {\n        for j in i..<prime_numbers.count {\n            for k in j..<prime_numbers.count\
    \ {\n                if prime_numbers[i] * prime_numbers[j] * prime_numbers[k]\
    \ == a {\n                    is_multiply = true\n                }\n        \
    \    }\n        }\n    }\n    return is_multiply\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp0mriqbxp.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    let primes = [2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\
    \    var result = false\n    for i in 0..<primes.count {\n        for j in i..<primes.count\
    \ {\n            for k in j..<primes.count {\n                if a == primes[i]\
    \ * primes[j] * primes[k] {\n                    result = true\n             \
    \   }\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmplvqbjeky/tmplvqbjeky.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d742dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d73fd3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d73fd3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d73fd27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplvqbjeky                        0x000055fd6a9e8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b8d744c8460 __libc_start_main +
    245

    6    tmplvqbjeky                        0x000055fd6a9e7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n    var primeNumbers\
    \ = [Int]()\n    var i = 2\n    while i < a {\n        if a % i == 0 {\n     \
    \       for j in 2..<i {\n                if i % j == 0 {\n                  \
    \  isPrime = false\n                    break\n                }\n           \
    \ }\n            if isPrime {\n                primeNumbers.append(i)\n      \
    \      }\n            isPrime = true\n        }\n        i += 1\n    }\n    if\
    \ primeNumbers.count == 3 {\n        return true\n    }\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpff9r1sli/tmpff9r1sli.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab61b984c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab61b67bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab61b67b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab61b67a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpff9r1sli                        0x000056540977b57b <unavailable> + 5499

    5    libc.so.6                          0x00002ab61bb70460 __libc_start_main +
    245

    6    tmpff9r1sli                        0x000056540977b149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var result = false\n    var primes\
    \ = [Int]()\n    for i in 2...a {\n        if is_prime(a: i) {\n            primes.append(i)\n\
    \        }\n    }\n    for i in 0..<primes.count {\n        for j in i..<primes.count\
    \ {\n            for k in j..<primes.count {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    result = true\n                }\n \
    \           }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpcrme3yg6.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n    var isMultiply\
    \ = false\n    var primeNumbers = [Int]()\n    for i in 2...a {\n        isPrime\
    \ = true\n        for j in 2..<i {\n            if i % j == 0 {\n            \
    \    isPrime = false\n                break\n            }\n        }\n      \
    \  if isPrime {\n            primeNumbers.append(i)\n        }\n    }\n    for\
    \ i in 0..<primeNumbers.count {\n        for j in i+1..<primeNumbers.count {\n\
    \            for k in j+1..<primeNumbers.count {\n                if primeNumbers[i]\
    \ * primeNumbers[j] * primeNumbers[k] == a {\n                    isMultiply =\
    \ true\n                    break\n                }\n            }\n        }\n\
    \    }\n    return isMultiply\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmpkdb5sqtq/tmpkdb5sqtq.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5118e69c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5118b60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5118b60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5118b5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkdb5sqtq                        0x000056442661c6bb <unavailable> + 5819

    5    libc.so.6                          0x00002b5119055460 __libc_start_main +
    245

    6    tmpkdb5sqtq                        0x000056442661c289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var isMultiplyPrime = false\n  \
    \  var number = a\n    var primeNumbers = [Int]()\n    var i = 2\n    while i\
    \ <= number {\n        if number % i == 0 {\n            primeNumbers.append(i)\n\
    \            number /= i\n        } else {\n            i += 1\n        }\n  \
    \  }\n    if primeNumbers.count == 3 {\n        isMultiplyPrime = true\n    }\n\
    \    return isMultiplyPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var result: Bool = false\n    var\
    \ primeNumbers: [Int] = []\n    for i in 2...a {\n        if is_prime(a: i) {\n\
    \            primeNumbers.append(i)\n        }\n    }\n    for i in 0..<primeNumbers.count\
    \ {\n        for j in 0..<primeNumbers.count {\n            for k in 0..<primeNumbers.count\
    \ {\n                if primeNumbers[i] * primeNumbers[j] * primeNumbers[k] ==\
    \ a {\n                    result = true\n                }\n            }\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpncvxvtk3.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var is_prime = true\n    var a =\
    \ a\n    var i = 2\n    while i <= a {\n        if a % i == 0 {\n            a\
    \ /= i\n            if is_prime_number(i) == false {\n                is_prime\
    \ = false\n            }\n        } else {\n            i += 1\n        }\n  \
    \  }\n    return is_prime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpo41xcbl7.swift:15:16: error: cannot find 'is_prime_number' in scope\n\
    \            if is_prime_number(i) == false {\n               ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var result = false\n    var prime_numbers\
    \ = [Int]()\n    for i in 2...a {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n\
    \        }\n    }\n    for i in 0..<prime_numbers.count {\n        for j in 0..<prime_numbers.count\
    \ {\n            for k in 0..<prime_numbers.count {\n                if prime_numbers[i]\
    \ * prime_numbers[j] * prime_numbers[k] == a {\n                    result = true\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmplzjf2oz1.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var result = false\n    var primes\
    \ = [Int]()\n    for i in 2...a {\n        if is_prime(a: i) {\n            primes.append(i)\n\
    \        }\n    }\n    for i in 0..<primes.count {\n        for j in i+1..<primes.count\
    \ {\n            for k in j+1..<primes.count {\n                if primes[i] *\
    \ primes[j] * primes[k] == a {\n                    result = true\n          \
    \      }\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprsvct_gb.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var a = a\n    var primes = [Int]()\n\
    \    while a > 1 {\n        for i in 2...a {\n            if a % i == 0 {\n  \
    \              primes.append(i)\n                a /= i\n                break\n\
    \            }\n        }\n    }\n    return primes.count == 3\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n    var number\
    \ = a\n    var i = 2\n    while i < number {\n        if number % i == 0 {\n \
    \           isPrime = false\n            number = number / i\n        } else {\n\
    \            i += 1\n        }\n    }\n    return isPrime\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpb6lt4u4p/tmpb6lt4u4p.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6765bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6762b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6762b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6762b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb6lt4u4p                        0x00005564d085e243 <unavailable> + 4675

    5    libc.so.6                          0x00002ad6767ab460 __libc_start_main +
    245

    6    tmpb6lt4u4p                        0x00005564d085def9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var result = false\n    var primes\
    \ = [Int]()\n    for i in 2...a {\n        if is_prime(a: i) {\n            primes.append(i)\n\
    \        }\n    }\n    for i in 0..<primes.count {\n        for j in i..<primes.count\
    \ {\n            for k in j..<primes.count {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    result = true\n                }\n \
    \           }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpcrme3yg6.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824496
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var result = false\n    var primes\
    \ = [Int]()\n    for i in 1...a {\n        if is_prime(i) {\n            primes.append(i)\n\
    \        }\n    }\n    for i in 0..<primes.count {\n        for j in 0..<primes.count\
    \ {\n            for k in 0..<primes.count {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    result = true\n                }\n \
    \           }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpg7xyzzpk.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n    var primeNumbers\
    \ = [Int]()\n    var primeNumbersCount = 0\n    var i = 2\n    while i < a {\n\
    \        isPrime = true\n        for j in 2..<i {\n            if i % j == 0 {\n\
    \                isPrime = false\n                break\n            }\n     \
    \   }\n        if isPrime {\n            primeNumbers.append(i)\n            primeNumbersCount\
    \ += 1\n        }\n        i += 1\n    }\n    var isMultiplyPrime = false\n  \
    \  for i in 0..<primeNumbersCount {\n        for j in i..<primeNumbersCount {\n\
    \            for k in j..<primeNumbersCount {\n                if primeNumbers[i]\
    \ * primeNumbers[j] * primeNumbers[k] == a {\n                    isMultiplyPrime\
    \ = true\n                    break\n                }\n            }\n      \
    \  }\n    }\n    return isMultiplyPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var result = false\n    var number\
    \ = a\n    var primes = [Int]()\n    for i in 2...number {\n        if is_prime(i)\
    \ {\n            primes.append(i)\n            while number % i == 0 {\n     \
    \           number /= i\n            }\n        }\n    }\n    if primes.count\
    \ == 3 {\n        result = true\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmperl7srep.swift:13:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var result = false\n    var primes\
    \ = [Int]()\n    for i in 2...a {\n        if is_prime(a: i) {\n            primes.append(i)\n\
    \        }\n    }\n    for i in 0..<primes.count {\n        for j in i..<primes.count\
    \ {\n            for k in j..<primes.count {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    result = true\n                }\n \
    \           }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpcrme3yg6.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824496
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var result = false\n    var primes\
    \ = [Int]()\n    for i in 2...a {\n        if is_prime(a: i) {\n            primes.append(i)\n\
    \        }\n    }\n    for i in 0..<primes.count {\n        for j in i+1..<primes.count\
    \ {\n            for k in j+1..<primes.count {\n                if primes[i] *\
    \ primes[j] * primes[k] == a {\n                    result = true\n          \
    \      }\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprsvct_gb.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var result = false\n    var i =\
    \ 2\n    var j = 2\n    var k = 2\n    while i < a {\n        while j < a {\n\
    \            while k < a {\n                if i * j * k == a {\n            \
    \        result = true\n                }\n                k += 1\n          \
    \  }\n            j += 1\n        }\n        i += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpgeburh3j/tmpgeburh3j.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b151c0c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b151bdbdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b151bdbd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b151bdbc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgeburh3j                        0x000055bbeef2a227 <unavailable> + 4647

    5    libc.so.6                          0x00002b151c2b2460 __libc_start_main +
    245

    6    tmpgeburh3j                        0x000055bbeef29e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n    var isMultiplyPrime\
    \ = false\n    var primeNumbers = [Int]()\n    var primeNumbersCount = 0\n   \
    \ var i = 2\n    while i < a {\n        if a % i == 0 {\n            for j in\
    \ 2...i {\n                if i % j == 0 {\n                    isPrime = false\n\
    \                    break\n                }\n            }\n            if isPrime\
    \ {\n                primeNumbers.append(i)\n                primeNumbersCount\
    \ += 1\n            }\n            isPrime = true\n        }\n        i += 1\n\
    \    }\n    if primeNumbersCount == 3 {\n        isMultiplyPrime = true\n    }\n\
    \    return isMultiplyPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmpunwmzoe2/tmpunwmzoe2.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e4467fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e44376b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e44376988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e443757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpunwmzoe2                        0x000055d70ad10457 <unavailable> + 5207

    5    libc.so.6                          0x00002b3e4486b460 __libc_start_main +
    245

    6    tmpunwmzoe2                        0x000055d70ad10099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var is_prime = true\n    var i =\
    \ 2\n    while i < a {\n        if a % i == 0 {\n            is_prime = false\n\
    \            break\n        }\n        i += 1\n    }\n    return is_prime\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpnxi3q11z/tmpnxi3q11z.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ed3804c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ed34fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ed34fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ed34fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnxi3q11z                        0x000056354c852243 <unavailable> + 4675

    5    libc.so.6                          0x00002b4ed39f0460 __libc_start_main +
    245

    6    tmpnxi3q11z                        0x000056354c851ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmplvqbjeky/tmplvqbjeky.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d742dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d73fd3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d73fd3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d73fd27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplvqbjeky                        0x000055fd6a9e8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b8d744c8460 __libc_start_main +
    245

    6    tmplvqbjeky                        0x000055fd6a9e7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    if a == 1 {\n        return false\n\
    \    }\n    var a = a\n    var count = 0\n    for i in 2...a {\n        while\
    \ a % i == 0 {\n            a /= i\n            count += 1\n        }\n      \
    \  if count == 3 {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpv75i4z3x/tmpv75i4z3x.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0fbd620c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0fbd317b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0fbd317988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0fbd3167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv75i4z3x                        0x00005594cd11f5ef <unavailable> + 5615

    5    libc.so.6                          0x00002b0fbd80c460 __libc_start_main +
    245

    6    tmpv75i4z3x                        0x00005594cd11efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n    var i =\
    \ 2\n    var a = a\n    while i < a {\n        if a % i == 0 {\n            a\
    \ /= i\n            isPrime = false\n        } else {\n            i += 1\n  \
    \      }\n    }\n    return isPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpv9hnr2im/tmpv9hnr2im.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b70d44f7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b70d41eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b70d41ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70d41ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv9hnr2im                        0x0000555e7a233243 <unavailable> + 4675

    5    libc.so.6                          0x00002b70d46e3460 __libc_start_main +
    245

    6    tmpv9hnr2im                        0x0000555e7a232ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var is_prime = true\n    var i =\
    \ 2\n    while i < a {\n        if a % i == 0 {\n            is_prime = false\n\
    \            break\n        }\n        i += 1\n    }\n    return is_prime\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpnxi3q11z/tmpnxi3q11z.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ed3804c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ed34fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ed34fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ed34fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnxi3q11z                        0x000056354c852243 <unavailable> + 4675

    5    libc.so.6                          0x00002b4ed39f0460 __libc_start_main +
    245

    6    tmpnxi3q11z                        0x000056354c851ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var is_multiply_prime = false\n\
    \    var prime_numbers = [Int]()\n    var prime_numbers_count = 0\n    var i =\
    \ 2\n    while i <= a {\n        if is_prime(a: i) {\n            prime_numbers.append(i)\n\
    \            prime_numbers_count += 1\n        }\n        i += 1\n    }\n    for\
    \ i in 0...prime_numbers_count - 1 {\n        for j in i...prime_numbers_count\
    \ - 1 {\n            for k in j...prime_numbers_count - 1 {\n                if\
    \ prime_numbers[i] * prime_numbers[j] * prime_numbers[k] == a {\n            \
    \        is_multiply_prime = true\n                }\n            }\n        }\n\
    \    }\n    return is_multiply_prime\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpzt1f5hup.swift:14:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var is_prime = true\n    var i =\
    \ 2\n    while i < a {\n        if a % i == 0 {\n            is_prime = false\n\
    \            break\n        }\n        i += 1\n    }\n    return is_prime\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpnxi3q11z/tmpnxi3q11z.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ed3804c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ed34fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ed34fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ed34fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnxi3q11z                        0x000056354c852243 <unavailable> + 4675

    5    libc.so.6                          0x00002b4ed39f0460 __libc_start_main +
    245

    6    tmpnxi3q11z                        0x000056354c851ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n    var a =\
    \ a\n    var i = 2\n    while i < a {\n        if a % i == 0 {\n            a\
    \ /= i\n            isPrime = false\n        } else {\n            i += 1\n  \
    \      }\n    }\n    return isPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpscpqnx_5/tmpscpqnx_5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8864d2dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8864a24b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8864a24988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8864a237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpscpqnx_5                        0x0000559eb5ce6243 <unavailable> + 4675

    5    libc.so.6                          0x00002b8864f19460 __libc_start_main +
    245

    6    tmpscpqnx_5                        0x0000559eb5ce5ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var result = false\n    var primeNumbers\
    \ = [Int]()\n    for i in 2...a {\n        if is_prime(a: i) {\n            primeNumbers.append(i)\n\
    \        }\n    }\n    for i in 0..<primeNumbers.count {\n        for j in i..<primeNumbers.count\
    \ {\n            for k in j..<primeNumbers.count {\n                if primeNumbers[i]\
    \ * primeNumbers[j] * primeNumbers[k] == a {\n                    result = true\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmppz826xn8.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824496
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var primeNumbers = [Int]()\n   \
    \ for i in 2...a {\n        if is_prime(i) {\n            primeNumbers.append(i)\n\
    \        }\n    }\n    for i in 0..<primeNumbers.count {\n        for j in i..<primeNumbers.count\
    \ {\n            for k in j..<primeNumbers.count {\n                if primeNumbers[i]\
    \ * primeNumbers[j] * primeNumbers[k] == a {\n                    return true\n\
    \                }\n            }\n        }\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpbo480hzd.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var primes = [Int]()\n    for i\
    \ in 2...a {\n        if is_prime(a: i) {\n            primes.append(i)\n    \
    \    }\n    }\n    for i in 0..<primes.count {\n        for j in i..<primes.count\
    \ {\n            for k in j..<primes.count {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    return true\n                }\n   \
    \         }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpplwo7228.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var result = false\n    var primeNumbers\
    \ = [Int]()\n    for i in 2...a {\n        if is_prime(a: i) {\n            primeNumbers.append(i)\n\
    \        }\n    }\n    for i in 0..<primeNumbers.count {\n        for j in i..<primeNumbers.count\
    \ {\n            for k in j..<primeNumbers.count {\n                if primeNumbers[i]\
    \ * primeNumbers[j] * primeNumbers[k] == a {\n                    result = true\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmppz826xn8.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var is_prime = true\n    var number\
    \ = a\n    var i = 2\n    while i < number {\n        if number % i == 0 {\n \
    \           is_prime = false\n            number = number / i\n            i =\
    \ 2\n        } else {\n            i += 1\n        }\n    }\n    return is_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpob365vho/tmpob365vho.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b754f939c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b754f630b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b754f630988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b754f62f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpob365vho                        0x000056533ce49243 <unavailable> + 4675

    5    libc.so.6                          0x00002b754fb25460 __libc_start_main +
    245

    6    tmpob365vho                        0x000056533ce48ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n    var primes\
    \ = [Int]()\n    for i in 2...a {\n        for j in 2..<i {\n            if i\
    \ % j == 0 {\n                isPrime = false\n            }\n        }\n    \
    \    if isPrime {\n            primes.append(i)\n        }\n        isPrime =\
    \ true\n    }\n    var counter = 0\n    for i in 0..<primes.count {\n        for\
    \ j in i+1..<primes.count {\n            for k in j+1..<primes.count {\n     \
    \           if primes[i] * primes[j] * primes[k] == a {\n                    counter\
    \ += 1\n                }\n            }\n        }\n    }\n    if counter > 0\
    \ {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpp0nls6x7/tmpp0nls6x7.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b2b586c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b2b27db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b2b27d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b2b27c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp0nls6x7                        0x00005599874886bb <unavailable> + 5819

    5    libc.so.6                          0x00002b8b2b772460 __libc_start_main +
    245

    6    tmpp0nls6x7                        0x0000559987488289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n    var num\
    \ = a\n    var i = 2\n    while i < num {\n        if num % i == 0 {\n       \
    \     isPrime = false\n            break\n        }\n        i += 1\n    }\n \
    \   return isPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmpvxgp582x/tmpvxgp582x.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0548dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0545d6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0545d6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0545d57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxgp582x                        0x000055e02bd8a243 <unavailable> + 4675

    5    libc.so.6                          0x00002ad054acb460 __libc_start_main +
    245

    6    tmpvxgp582x                        0x000055e02bd89ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n    var primes\
    \ = [Int]()\n    for i in 2...a {\n        for j in 2..<i {\n            if i\
    \ % j == 0 {\n                isPrime = false\n            }\n        }\n    \
    \    if isPrime {\n            primes.append(i)\n        }\n        isPrime =\
    \ true\n    }\n    var result = false\n    for i in 0..<primes.count {\n     \
    \   for j in i+1..<primes.count {\n            for k in j+1..<primes.count {\n\
    \                if primes[i] * primes[j] * primes[k] == a {\n               \
    \     result = true\n                }\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmpfdzj_dyu/tmpfdzj_dyu.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afa93230c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa92f27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afa92f27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afa92f267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfdzj_dyu                        0x000055ce6e2e56bb <unavailable> + 5819

    5    libc.so.6                          0x00002afa9341c460 __libc_start_main +
    245

    6    tmpfdzj_dyu                        0x000055ce6e2e5289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    let primes = [2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\
    \    for i in primes {\n        if a % i == 0 {\n            for j in primes {\n\
    \                if a % j == 0 && i != j {\n                    for k in primes\
    \ {\n                        if a % k == 0 && i != k && j != k {\n           \
    \                 return true\n                        }\n                   \
    \ }\n                }\n            }\n        }\n    }\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpl0jvd6ve/tmpl0jvd6ve.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ffdd14c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ffda0bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ffda0b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ffda0a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl0jvd6ve                        0x00005591c137c59b <unavailable> + 5531

    5    libc.so.6                          0x00002b4ffdf00460 __libc_start_main +
    245

    6    tmpl0jvd6ve                        0x00005591c137c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n    var num\
    \ = a\n    var i = 2\n    while i < num {\n        if num % i == 0 {\n       \
    \     isPrime = false\n            num = num / i\n        } else {\n         \
    \   i += 1\n        }\n    }\n    return isPrime\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmp1ja0rno2/tmp1ja0rno2.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b41ee022c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b41edd19b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b41edd19988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b41edd187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1ja0rno2                        0x00005642f3573243 <unavailable> + 4675

    5    libc.so.6                          0x00002b41ee20e460 __libc_start_main +
    245

    6    tmp1ja0rno2                        0x00005642f3572ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    if a < 6 {\n        return false\n\
    \    }\n    var a = a\n    var primes = [2, 3, 5]\n    for p in primes {\n   \
    \     while a % p == 0 {\n            a /= p\n        }\n    }\n    if a == 1\
    \ {\n        return true\n    }\n    for i in stride(from: 7, through: a, by:\
    \ 2) {\n        var isPrime = true\n        for p in primes {\n            if\
    \ i % p == 0 {\n                isPrime = false\n                break\n     \
    \       }\n        }\n        if isPrime {\n            primes.append(i)\n   \
    \         while a % i == 0 {\n                a /= i\n            }\n        \
    \    if a == 1 {\n                return true\n            }\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmp49oi6r7x/tmp49oi6r7x.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55c3c81c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55c3978b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55c3978988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55c39777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp49oi6r7x                        0x0000560e8b25f8a1 <unavailable> + 6305

    5    libc.so.6                          0x00002b55c3e6d460 __libc_start_main +
    245

    6    tmp49oi6r7x                        0x0000560e8b25f3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var a = a\n    var primes = [Int]()\n\
    \    var i = 2\n    while a > 1 {\n        if a % i == 0 {\n            primes.append(i)\n\
    \            a /= i\n        } else {\n            i += 1\n        }\n    }\n\
    \    return primes.count == 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var is_prime = true\n    var a =\
    \ a\n    for i in 2...a {\n        if a % i == 0 {\n            a /= i\n     \
    \       is_prime = is_prime_number(a: i)\n            if !is_prime {\n       \
    \         return false\n            }\n        }\n    }\n    return is_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpfhr8jk86.swift:14:24: error: cannot find 'is_prime_number' in scope\n\
    \            is_prime = is_prime_number(a: i)\n                       ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n    var num\
    \ = a\n    var i = 2\n    while i < num {\n        if num % i == 0 {\n       \
    \     num = num / i\n            isPrime = false\n        } else {\n         \
    \   i += 1\n        }\n    }\n    return isPrime\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmp8o3hm010/tmp8o3hm010.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ec390ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ec3605b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ec3605988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ec36047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8o3hm010                        0x000055c18516c243 <unavailable> + 4675

    5    libc.so.6                          0x00002b5ec3afa460 __libc_start_main +
    245

    6    tmp8o3hm010                        0x000055c18516bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var result = false\n    var primeNumbers\
    \ = [Int]()\n    for i in 2...a {\n        if is_prime(a: i) {\n            primeNumbers.append(i)\n\
    \        }\n    }\n    for i in 0..<primeNumbers.count {\n        for j in i..<primeNumbers.count\
    \ {\n            for k in j..<primeNumbers.count {\n                if primeNumbers[i]\
    \ * primeNumbers[j] * primeNumbers[k] == a {\n                    result = true\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmppz826xn8.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824496
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var isMultiplyPrime = false\n  \
    \  var primeNumbers = [Int]()\n    var number = a\n    var i = 2\n    while i\
    \ <= number {\n        if number % i == 0 {\n            primeNumbers.append(i)\n\
    \            number /= i\n        } else {\n            i += 1\n        }\n  \
    \  }\n    if primeNumbers.count == 3 {\n        isMultiplyPrime = true\n    }\n\
    \    return isMultiplyPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n    var a =\
    \ a\n    var i = 2\n    while a != 1 {\n        if a % i == 0 {\n            a\
    \ /= i\n            isPrime = is_prime(a: i)\n            if !isPrime {\n    \
    \            return false\n            }\n        } else {\n            i += 1\n\
    \        }\n    }\n    return isPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpc_657n7f.swift:15:23: error: cannot find 'is_prime' in scope\n\
    \            isPrime = is_prime(a: i)\n                      ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var result = false\n    var primeNumbers\
    \ = [Int]()\n    for i in 2...a {\n        if is_prime(a: i) {\n            primeNumbers.append(i)\n\
    \        }\n    }\n    for i in 0..<primeNumbers.count {\n        for j in i..<primeNumbers.count\
    \ {\n            for k in j..<primeNumbers.count {\n                if primeNumbers[i]\
    \ * primeNumbers[j] * primeNumbers[k] == a {\n                    result = true\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmppz826xn8.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmplvqbjeky/tmplvqbjeky.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d742dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d73fd3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d73fd3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d73fd27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplvqbjeky                        0x000055fd6a9e8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b8d744c8460 __libc_start_main +
    245

    6    tmplvqbjeky                        0x000055fd6a9e7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var i = 2\n    var j = 2\n    var\
    \ k = 2\n    var result = false\n    while i < a {\n        while j < a {\n  \
    \          while k < a {\n                if i * j * k == a {\n              \
    \      result = true\n                }\n                k += 1\n            }\n\
    \            j += 1\n        }\n        i += 1\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpbn0jdxcz/tmpbn0jdxcz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1dd4bd4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1dd48cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1dd48cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1dd48ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbn0jdxcz                        0x000055f1af283227 <unavailable> + 4647

    5    libc.so.6                          0x00002b1dd4dc0460 __libc_start_main +
    245

    6    tmpbn0jdxcz                        0x000055f1af282e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmplvqbjeky/tmplvqbjeky.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d742dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d73fd3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d73fd3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d73fd27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplvqbjeky                        0x000055fd6a9e8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b8d744c8460 __libc_start_main +
    245

    6    tmplvqbjeky                        0x000055fd6a9e7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var result = false\n    var primeNumbers\
    \ = [Int]()\n    for i in 2...a {\n        if is_prime(a: i) {\n            primeNumbers.append(i)\n\
    \        }\n    }\n    for i in 0..<primeNumbers.count {\n        for j in 0..<primeNumbers.count\
    \ {\n            for k in 0..<primeNumbers.count {\n                if primeNumbers[i]\
    \ * primeNumbers[j] * primeNumbers[k] == a {\n                    result = true\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpn0wz26xj.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n    if a ==\
    \ 1 {\n        return false\n    }\n    for i in 2...a {\n        if a % i ==\
    \ 0 {\n            isPrime = true\n            for j in 2...i {\n            \
    \    if i % j == 0 && i != j {\n                    isPrime = false\n        \
    \        }\n            }\n            if isPrime == true {\n                if\
    \ a / i == 1 {\n                    return true\n                } else {\n  \
    \                  return is_multiply_prime(a: a / i)\n                }\n   \
    \         }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpjtehncwq/tmpjtehncwq.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac56aa59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac56a750b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac56a750988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac56a74f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjtehncwq                        0x00005653e40fa333 <unavailable> + 4915

    5    libc.so.6                          0x00002ac56ac45460 __libc_start_main +
    245

    6    tmpjtehncwq                        0x00005653e40f9fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n    var primeNumbers\
    \ = [Int]()\n    for i in 2...a {\n        for j in 2..<i {\n            if i\
    \ % j == 0 {\n                isPrime = false\n            }\n        }\n    \
    \    if isPrime {\n            primeNumbers.append(i)\n        }\n        isPrime\
    \ = true\n    }\n    var result = 1\n    for i in primeNumbers {\n        result\
    \ *= i\n        if result == a {\n            return true\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: Exception
  stderr: 'tmpk5ni3rwf/tmpk5ni3rwf.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b505d8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b502cfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b502cf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b502ce7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk5ni3rwf                        0x00005654441d377b <unavailable> + 6011

    5    libc.so.6                          0x00002b1b507c4460 __libc_start_main +
    245

    6    tmpk5ni3rwf                        0x00005654441d3349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var is_multiply_prime = false\n\
    \    var prime_numbers = [Int]()\n    for i in 2...a {\n        if is_prime(a:\
    \ i) {\n            prime_numbers.append(i)\n        }\n    }\n    for i in 0..<prime_numbers.count\
    \ {\n        for j in 0..<prime_numbers.count {\n            for k in 0..<prime_numbers.count\
    \ {\n                if prime_numbers[i] * prime_numbers[j] * prime_numbers[k]\
    \ == a {\n                    is_multiply_prime = true\n                }\n  \
    \          }\n        }\n    }\n    return is_multiply_prime\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmps0mhabvi.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    let primes = [2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\
    \    for i in primes {\n        if a % i == 0 {\n            for j in primes {\n\
    \                if a % j == 0 && i != j {\n                    for k in primes\
    \ {\n                        if a % k == 0 && i != k && j != k {\n           \
    \                 return true\n                        }\n                   \
    \ }\n                }\n            }\n        }\n    }\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpl0jvd6ve/tmpl0jvd6ve.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ffdd14c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ffda0bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ffda0b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ffda0a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl0jvd6ve                        0x00005591c137c59b <unavailable> + 5531

    5    libc.so.6                          0x00002b4ffdf00460 __libc_start_main +
    245

    6    tmpl0jvd6ve                        0x00005591c137c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n    var a =\
    \ a\n    var i = 2\n    while i < a {\n        if a % i == 0 {\n            a\
    \ /= i\n            isPrime = false\n        } else {\n            i += 1\n  \
    \      }\n    }\n    return isPrime\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpscpqnx_5/tmpscpqnx_5.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8864d2dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8864a24b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8864a24988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8864a237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpscpqnx_5                        0x0000559eb5ce6243 <unavailable> + 4675

    5    libc.so.6                          0x00002b8864f19460 __libc_start_main +
    245

    6    tmpscpqnx_5                        0x0000559eb5ce5ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824497
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var i = 2\n    var count = 0\n \
    \   while i < a {\n        if a % i == 0 {\n            count += 1\n        }\n\
    \        i += 1\n    }\n    return count == 3\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpqup7xe5b/tmpqup7xe5b.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af73be98c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af73bb8fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af73bb8f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af73bb8e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqup7xe5b                        0x00005634afd8a2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002af73c084460 __libc_start_main +
    245

    6    tmpqup7xe5b                        0x00005634afd89ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n    var primeNumbers\
    \ = [Int]()\n    for i in 2...a {\n        isPrime = true\n        for j in 2..<i\
    \ {\n            if i % j == 0 {\n                isPrime = false\n          \
    \  }\n        }\n        if isPrime {\n            primeNumbers.append(i)\n  \
    \      }\n    }\n    var counter = 0\n    for i in 0..<primeNumbers.count {\n\
    \        for j in 0..<primeNumbers.count {\n            for k in 0..<primeNumbers.count\
    \ {\n                if primeNumbers[i] * primeNumbers[j] * primeNumbers[k] ==\
    \ a {\n                    counter += 1\n                }\n            }\n  \
    \      }\n    }\n    if counter > 0 {\n        return true\n    } else {\n   \
    \     return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824498
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var result = false\n    var number\
    \ = a\n    var count = 0\n    var i = 2\n    while i <= number {\n        if number\
    \ % i == 0 {\n            number /= i\n            count += 1\n        } else\
    \ {\n            i += 1\n        }\n    }\n    if count == 3 {\n        result\
    \ = true\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var result = false\n    var primeNumbers\
    \ = [Int]()\n    for i in 2...a {\n        if is_prime(a: i) {\n            primeNumbers.append(i)\n\
    \        }\n    }\n    for i in primeNumbers {\n        for j in primeNumbers\
    \ {\n            for k in primeNumbers {\n                if i * j * k == a {\n\
    \                    result = true\n                }\n            }\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpfkzpde_0.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var result = false\n    var primes\
    \ = [Int]()\n    for i in 2...a {\n        if is_prime(a: i) {\n            primes.append(i)\n\
    \        }\n    }\n    for i in 0..<primes.count {\n        for j in i..<primes.count\
    \ {\n            for k in j..<primes.count {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    result = true\n                }\n \
    \           }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpcrme3yg6.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var is_prime = true\n    var a =\
    \ a\n    var i = 2\n    while i < a {\n        if a % i == 0 {\n            is_prime\
    \ = false\n            break\n        }\n        i += 1\n    }\n    return is_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmppx4qu_az/tmppx4qu_az.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b307ea49c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b307e740b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b307e740988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b307e73f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppx4qu_az                        0x000055655153f243 <unavailable> + 4675

    5    libc.so.6                          0x00002b307ec35460 __libc_start_main +
    245

    6    tmppx4qu_az                        0x000055655153eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var isMultiplyPrime = false\n  \
    \  var primeNumbers = [Int]()\n    for i in 2...a {\n        if isPrime(i) {\n\
    \            primeNumbers.append(i)\n        }\n    }\n    for i in 0..<primeNumbers.count\
    \ {\n        for j in i..<primeNumbers.count {\n            for k in j..<primeNumbers.count\
    \ {\n                if primeNumbers[i] * primeNumbers[j] * primeNumbers[k] ==\
    \ a {\n                    isMultiplyPrime = true\n                }\n       \
    \     }\n        }\n    }\n    return isMultiplyPrime\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp5uy82gf9.swift:12:12: error: cannot find 'isPrime' in scope\n \
    \       if isPrime(i) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var result = false\n    var primes\
    \ = [Int]()\n    for i in 2...a {\n        if is_prime(a: i) {\n            primes.append(i)\n\
    \        }\n    }\n    for i in 0..<primes.count {\n        for j in i..<primes.count\
    \ {\n            for k in j..<primes.count {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    result = true\n                }\n \
    \           }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpcrme3yg6.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824496
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var primes = [Int]()\n    for i\
    \ in 2...a {\n        if is_prime(a: i) {\n            primes.append(i)\n    \
    \    }\n    }\n    var result = false\n    for i in 0..<primes.count {\n     \
    \   for j in i+1..<primes.count {\n            for k in j+1..<primes.count {\n\
    \                if primes[i] * primes[j] * primes[k] == a {\n               \
    \     result = true\n                }\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmptbo0h3mn.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmplvqbjeky/tmplvqbjeky.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d742dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d73fd3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d73fd3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d73fd27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplvqbjeky                        0x000055fd6a9e8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b8d744c8460 __libc_start_main +
    245

    6    tmplvqbjeky                        0x000055fd6a9e7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmplvqbjeky/tmplvqbjeky.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d742dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d73fd3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d73fd3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d73fd27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplvqbjeky                        0x000055fd6a9e8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b8d744c8460 __libc_start_main +
    245

    6    tmplvqbjeky                        0x000055fd6a9e7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var is_prime = true\n    var a_copy\
    \ = a\n    var i = 2\n    while a_copy > 1 {\n        if a_copy % i == 0 {\n \
    \           a_copy /= i\n            if !is_prime_number(a: i) {\n           \
    \     is_prime = false\n                break\n            }\n        } else {\n\
    \            i += 1\n        }\n    }\n    return is_prime\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp5a941d60.swift:15:17: error: cannot find 'is_prime_number' in scope\n\
    \            if !is_prime_number(a: i) {\n                ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var result = false\n    var primeNumbers\
    \ = [Int]()\n    for i in 2...a {\n        if is_prime(a: i) {\n            primeNumbers.append(i)\n\
    \        }\n    }\n    for i in 0..<primeNumbers.count {\n        for j in i..<primeNumbers.count\
    \ {\n            for k in j..<primeNumbers.count {\n                if primeNumbers[i]\
    \ * primeNumbers[j] * primeNumbers[k] == a {\n                    result = true\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmppz826xn8.swift:12:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n    var i =\
    \ 2\n    while i < a {\n        if a % i == 0 {\n            isPrime = false\n\
    \        }\n        i += 1\n    }\n    return isPrime\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpe6co2yom/tmpe6co2yom.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b680f60ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b680f301b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b680f301988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b680f3007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe6co2yom                        0x000055d43c074243 <unavailable> + 4675

    5    libc.so.6                          0x00002b680f7f6460 __libc_start_main +
    245

    6    tmpe6co2yom                        0x000055d43c073ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824496
- exit_code: 0
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var result = false\n    var number\
    \ = a\n    var primeNumbers = [Int]()\n    for i in 2...number {\n        while\
    \ number % i == 0 {\n            primeNumbers.append(i)\n            number /=\
    \ i\n        }\n    }\n    if primeNumbers.count == 3 {\n        result = true\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_multiply_prime(a:\
    \ 5) == false)\nassert(is_multiply_prime(a: 30) == true)\nassert(is_multiply_prime(a:\
    \ 8) == true)\nassert(is_multiply_prime(a: 10) == false)\nassert(is_multiply_prime(a:\
    \ 125) == true)\nassert(is_multiply_prime(a: 105) == true)\nassert(is_multiply_prime(a:\
    \ 126) == false)\nassert(is_multiply_prime(a: 729) == false)\nassert(is_multiply_prime(a:\
    \ 891) == false)\nassert(is_multiply_prime(a: 1001) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824497
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var prime_numbers = [2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97]\n    var prime_factors = [Int]()\n    var i = 0\n    while a > 1 {\n\
    \        if a % prime_numbers[i] == 0 {\n            prime_factors.append(prime_numbers[i])\n\
    \            a /= prime_numbers[i]\n        } else {\n            i += 1\n   \
    \     }\n    }\n    if prime_factors.count == 3 {\n        return true\n    }\
    \ else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30) == true)\n\
    assert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a: 10) == false)\n\
    assert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a: 105) ==\
    \ true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpil4lj5bi.swift:15:15: error: left side of mutating operator isn't\
    \ mutable: 'a' is a 'let' constant\n            a /= prime_numbers[i]\n      \
    \      ~ ^\n"
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var primes = [Int]()\n    for i\
    \ in 2...a {\n        if is_prime(a: i) {\n            primes.append(i)\n    \
    \    }\n    }\n    for i in 0..<primes.count {\n        for j in 0..<primes.count\
    \ {\n            for k in 0..<primes.count {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    return true\n                }\n   \
    \         }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpa5ls3mc9.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(a: i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var number = a\n    var primeNumbers\
    \ = [Int]()\n    var isPrime = true\n    for i in 2...number {\n        for j\
    \ in 2..<i {\n            if i % j == 0 {\n                isPrime = false\n \
    \           }\n        }\n        if isPrime {\n            primeNumbers.append(i)\n\
    \        }\n        isPrime = true\n    }\n    for i in primeNumbers {\n     \
    \   if number % i == 0 {\n            number /= i\n        }\n    }\n    if number\
    \ == 1 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpivix0v8v/tmpivix0v8v.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8af981cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8af9513b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8af9513988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8af95127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpivix0v8v                        0x000056133de6a693 <unavailable> + 5779

    5    libc.so.6                          0x00002b8af9a08460 __libc_start_main +
    245

    6    tmpivix0v8v                        0x000056133de6a349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var primes = [Int]()\n    for i\
    \ in 2...a {\n        if is_prime(i) {\n            primes.append(i)\n       \
    \ }\n    }\n    for i in 0..<primes.count {\n        for j in i..<primes.count\
    \ {\n            for k in j..<primes.count {\n                if primes[i] * primes[j]\
    \ * primes[k] == a {\n                    return true\n                }\n   \
    \         }\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a: 30)\
    \ == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp1adbsoth.swift:11:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(i) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824496
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var isPrime = true\n    var counter\
    \ = 2\n    while counter < a {\n        if a % counter == 0 {\n            isPrime\
    \ = false\n        }\n        counter += 1\n    }\n    return isPrime\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmpou6n8il8/tmpou6n8il8.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b806f38fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b806f086b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b806f086988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b806f0857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpou6n8il8                        0x00005618491fa243 <unavailable> + 4675

    5    libc.so.6                          0x00002b806f57b460 __libc_start_main +
    245

    6    tmpou6n8il8                        0x00005618491f9ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824498
- exit_code: 1
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    var isMultiplyPrime = false\n  \
    \  var primeNumbers = [Int]()\n    for i in 2...a {\n        if isPrime(number:\
    \ i) {\n            primeNumbers.append(i)\n        }\n    }\n    for i in 0..<primeNumbers.count\
    \ {\n        for j in 0..<primeNumbers.count {\n            for k in 0..<primeNumbers.count\
    \ {\n                if primeNumbers[i] * primeNumbers[j] * primeNumbers[k] ==\
    \ a {\n                    isMultiplyPrime = true\n                }\n       \
    \     }\n        }\n    }\n    return isMultiplyPrime\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpbmk03met.swift:12:12: error: cannot find 'isPrime' in scope\n \
    \       if isPrime(number: i) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824498
- exit_code: -4
  program: "\n/// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
    \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\n\
    func is_multiply_prime(a: Int) -> Bool {\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
    \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
    \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
    \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
    \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
    \ 1001) == true)"
  status: Exception
  stderr: 'tmplvqbjeky/tmplvqbjeky.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d742dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d73fd3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d73fd3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d73fd27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplvqbjeky                        0x000055fd6a9e8227 <unavailable> + 4647

    5    libc.so.6                          0x00002b8d744c8460 __libc_start_main +
    245

    6    tmplvqbjeky                        0x000055fd6a9e7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824496
