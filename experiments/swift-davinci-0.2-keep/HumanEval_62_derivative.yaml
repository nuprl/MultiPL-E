name: HumanEval_62_derivative
language: swift
prompt: "\n/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x +\
  \ xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n\
  /// >>> derivative([3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative([1,\
  \ 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(derivative(xs: [3, 1, 2, 4, 5]) == [1, 4,\
  \ 12, 20])\nassert(derivative(xs: [1, 2, 3]) == [2, 6])\nassert(derivative(xs: [3,\
  \ 2, 1]) == [2, 2])\nassert(derivative(xs: [3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\
  assert(derivative(xs: [1]) == [] as [Int])"
completions: ["    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for (index,\
    \ value) in xs.enumerated() {\n        if index == 0 {\n            continue\n\
    \        }\n        result.append(value * index)\n    }\n    return result", " \
    \   var result: [Int] = []\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result: [Int] = []\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result: [Int] = []\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 0..<xs.count - 1 {\n        result.append(xs[i]\
    \ * (xs.count - i - 1))\n    }\n    return result", "    var result = [Int]()\n\
    \    for i in 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return\
    \ result", "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result: [Int] = []\n    for i\
    \ in 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result: [Int] = []\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result: [Int] = []\n    for i\
    \ in 0..<xs.count - 1 {\n        result.append(xs[i] * (xs.count - i - 1))\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result: [Int] = []\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result:\
    \ [Int] = []\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n\
    \    }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result:\
    \ [Int] = []\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n\
    \    }\n    return result", "    var result: [Int] = []\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result:\
    \ [Int] = []\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n\
    \    }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result:\
    \ [Int] = []\n    for i in 0..<xs.count - 1 {\n        result.append(xs[i] * (xs.count\
    \ - i - 1))\n    }\n    return result", "    var result: [Int] = []\n    for i\
    \ in 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result: [Int] = []\n    for i\
    \ in 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for (index,\
    \ x) in xs.enumerated() {\n        if index == 0 {\n            continue\n   \
    \     }\n        result.append(index * x)\n    }\n    return result", "    var\
    \ result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n\
    \    }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 0..<xs.count - 1 {\n        result.append(xs[i] * (xs.count\
    \ - i - 1))\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result: [Int] = []\n    for i\
    \ in 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result: [Int] = []\n    var i\
    \ = 1\n    while i < xs.count {\n        result.append(xs[i] * i)\n        i +=\
    \ 1\n    }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result:\
    \ [Int] = []\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n\
    \    }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result:\
    \ [Int] = []\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n\
    \    }\n    return result", "    var result: [Int] = []\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result:\
    \ [Int] = []\n    for i in 0..<xs.count - 1 {\n        result.append(xs[i + 1]\
    \ * (i + 1))\n    }\n    return result", "    var result = [Int]()\n    for i\
    \ in 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result: [Int] = []\n    for i\
    \ in 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var xs = xs\n    xs.removeFirst()\n    for i in 0..<xs.count {\n        xs[i]\
    \ *= i + 1\n    }\n    return xs", "    var result = [Int]()\n    for i in 0..<xs.count\
    \ - 1 {\n        result.append(xs[i] * (xs.count - i - 1))\n    }\n    return\
    \ result", "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result: [Int] = []\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result: [Int] = []\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result: [Int] = []\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 0..<xs.count - 1 {\n        result.append(xs[i] * (xs.count - i - 1))\n    }\n\
    \    return result", "    var result: [Int] = []\n    for i in 1..<xs.count {\n\
    \        result.append(i * xs[i])\n    }\n    return result", "    var result\
    \ = [Int]()\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n \
    \   }\n    return result", "    var result: [Int] = []\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result:\
    \ [Int] = []\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n\
    \    }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result:\
    \ [Int] = []\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n\
    \    }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var result:\
    \ [Int] = []\n    for i in 1..<xs.count {\n        result.append(i * xs[i])\n\
    \    }\n    return result", "    var result = [Int]()\n    for i in 1..<xs.count\
    \ {\n        result.append(i * xs[i])\n    }\n    return result", "    var res\
    \ = [Int]()\n    for i in 1..<xs.count {\n        res.append(xs[i] * i)\n    }\n\
    \    return res", "    var result = [Int]()\n    for i in 1..<xs.count {\n   \
    \     result.append(i * xs[i])\n    }\n    return result", "    var result = [Int]()\n\
    \    for i in 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return\
    \ result", "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result: [Int] = []\n    for i\
    \ in 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result = [Int]()\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result",
  "    var result: [Int] = []\n    for i in 1..<xs.count {\n        result.append(i\
    \ * xs[i])\n    }\n    return result", "    var result = [Int]()\n    for i in\
    \ 1..<xs.count {\n        result.append(i * xs[i])\n    }\n    return result"]
stop_tokens:
- "\n}"
