name: HumanEval_17_parse_music
language: swift
prompt: "\n/// Input to this function is a string representing musical notes in a\
  \ special ASCII format.\n/// Your task is to parse this string and return list of\
  \ integers corresponding to how many beats does each\n/// not last.\n/// Here is\
  \ a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts\
  \ two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o o| .|\
  \ o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
  \ String) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(parse_music(music_string: \"\") == [] as\
  \ [Int])\nassert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
  \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .|\
  \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"\
  o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
completions: ["    var result = [Int]()\n    let music_string_array = music_string.components(separatedBy:\
    \ \" \")\n    for music_string in music_string_array {\n        switch music_string\
    \ {\n        case \"o\":\n            result.append(4)\n        case \"o|\":\n\
    \            result.append(2)\n        case \".|\":\n            result.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    let music_string_array = music_string.components(separatedBy:\
    \ \" \")\n    for music_string in music_string_array {\n        if music_string\
    \ == \"o\" {\n            result.append(4)\n        } else if music_string ==\
    \ \"o|\" {\n            result.append(2)\n        } else if music_string == \"\
    .|\" {\n            result.append(1)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    var music = music_string.components(separatedBy:\
    \ \" \")\n    for note in music {\n        if note == \"o\" {\n            result.append(4)\n\
    \        } else if note == \"o|\" {\n            result.append(2)\n        } else\
    \ if note == \".|\" {\n            result.append(1)\n        }\n    }\n    return\
    \ result", "    let notes = music_string.components(separatedBy: \" \")\n    var\
    \ result = [Int]()\n    for note in notes {\n        switch note {\n        case\
    \ \"o\":\n            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result", "    let notes = music_string.components(separatedBy:\
    \ \" \")\n    var beats = [Int]()\n    for note in notes {\n        switch note\
    \ {\n        case \"o\":\n            beats.append(4)\n        case \"o|\":\n\
    \            beats.append(2)\n        case \".|\":\n            beats.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return beats", " \
    \   let notes = music_string.components(separatedBy: \" \")\n    var beats = [Int]()\n\
    \    for note in notes {\n        switch note {\n        case \"o\":\n       \
    \     beats.append(4)\n        case \"o|\":\n            beats.append(2)\n   \
    \     case \".|\":\n            beats.append(1)\n        default:\n          \
    \  break\n        }\n    }\n    return beats", "    var beats = [Int]()\n    for\
    \ character in music_string {\n        switch character {\n        case \"o\"\
    :\n            beats.append(4)\n        case \"o|\":\n            beats.append(2)\n\
    \        case \".|\":\n            beats.append(1)\n        default:\n       \
    \     break\n        }\n    }\n    return beats", "    var result = [Int]()\n\
    \    let notes = music_string.components(separatedBy: \" \")\n    for note in\
    \ notes {\n        switch note {\n        case \"o\":\n            result.append(4)\n\
    \        case \"o|\":\n            result.append(2)\n        case \".|\":\n  \
    \          result.append(1)\n        default:\n            break\n        }\n\
    \    }\n    return result", "    let notes = music_string.components(separatedBy:\
    \ \" \")\n    var result = [Int]()\n    for note in notes {\n        switch note\
    \ {\n        case \"o\":\n            result.append(4)\n        case \"o|\":\n\
    \            result.append(2)\n        case \".|\":\n            result.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return result", " \
    \   var result: [Int] = []\n    for char in music_string {\n        switch char\
    \ {\n        case \"o\":\n            result.append(4)\n        case \"o|\":\n\
    \            result.append(2)\n        case \".|\":\n            result.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return result", " \
    \   let notes = music_string.components(separatedBy: \" \")\n    var result =\
    \ [Int]()\n    for note in notes {\n        switch note {\n        case \"o\"\
    :\n            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result", "    var result: [Int] = []\n\
    \    let notes = music_string.components(separatedBy: \" \")\n    for note in\
    \ notes {\n        switch note {\n        case \"o\":\n            result.append(4)\n\
    \        case \"o|\":\n            result.append(2)\n        case \".|\":\n  \
    \          result.append(1)\n        default:\n            break\n        }\n\
    \    }\n    return result", "    let notes = music_string.components(separatedBy:\
    \ \" \")\n    var beats = [Int]()\n    for note in notes {\n        switch note\
    \ {\n        case \"o\":\n            beats.append(4)\n        case \"o|\":\n\
    \            beats.append(2)\n        case \".|\":\n            beats.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return beats", " \
    \   var result = [Int]()\n    var music_string = music_string\n    while music_string.characters.count\
    \ > 0 {\n        if music_string.hasPrefix(\"o\") {\n            result.append(4)\n\
    \            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(1))\n\
    \        } else if music_string.hasPrefix(\"o|\") {\n            result.append(2)\n\
    \            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \        } else if music_string.hasPrefix(\".|\") {\n            result.append(1)\n\
    \            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \        } else {\n            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(1))\n\
    \        }\n    }\n    return result", "    let notes = music_string.components(separatedBy:\
    \ \" \")\n    var beats = [Int]()\n    for note in notes {\n        switch note\
    \ {\n        case \"o\":\n            beats.append(4)\n        case \"o|\":\n\
    \            beats.append(2)\n        case \".|\":\n            beats.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return beats", '    return
    []', "    var beats = [Int]()\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            beats.append(4)\n        case \"o|\":\n            beats.append(2)\n\
    \        case \".|\":\n            beats.append(1)\n        default:\n       \
    \     break\n        }\n    }\n    return beats", "    let notes = music_string.components(separatedBy:\
    \ \" \")\n    var beats = [Int]()\n    for note in notes {\n        switch note\
    \ {\n        case \"o\":\n            beats.append(4)\n        case \"o|\":\n\
    \            beats.append(2)\n        case \".|\":\n            beats.append(1)\n\
    \        default:\n            beats.append(0)\n        }\n    }\n    return beats",
  "    let music_string = music_string.replacingOccurrences(of: \" \", with: \"\"\
    )\n    let notes = music_string.components(separatedBy: \"|\")\n    var result\
    \ = [Int]()\n    for note in notes {\n        if note == \"o\" {\n           \
    \ result.append(4)\n        } else if note == \"o\" {\n            result.append(2)\n\
    \        } else if note == \".|\" {\n            result.append(1)\n        }\n\
    \    }\n    return result", "    let music_string = music_string.replacingOccurrences(of:\
    \ \" \", with: \"\")\n    var result = [Int]()\n    var index = 0\n    while index\
    \ < music_string.count {\n        let char = music_string[music_string.index(music_string.startIndex,\
    \ offsetBy: index)]\n        if char == \"o\" {\n            result.append(4)\n\
    \            index += 1\n        } else if char == \".\" {\n            result.append(1)\n\
    \            index += 2\n        } else {\n            result.append(2)\n    \
    \        index += 2\n        }\n    }\n    return result"]
stop_tokens:
- "\n}"
