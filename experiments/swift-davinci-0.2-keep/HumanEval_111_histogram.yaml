name: HumanEval_111_histogram
language: swift
prompt: "\n/// Given a string representing a space separated lowercase letters, return\
  \ a dictionary\n/// of the letter with the most repetition and containing the corresponding\
  \ count.\n/// If several letters have the same occurrence, return all of them.\n\
  /// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n/// histogram('a\
  \ b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
  /// histogram('b b b b a') == {'b': 4}\n/// histogram('') == {}\nfunc histogram(test:\
  \ String) -> [String : Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" :\
  \ 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
  assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\"\
  \ : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
  \ \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
  \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
  ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
completions: ["    var dict = [String : Int]()\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n    for letter in letters {\n        if let count = dict[letter] {\n  \
    \          dict[letter] = count + 1\n        } else {\n            dict[letter]\
    \ = 1\n        }\n    }\n    return dict", "    var result = [String : Int]()\n\
    \    let letters = test.componentsSeparatedByString(\" \")\n    for letter in\
    \ letters {\n        if let count = result[letter] {\n            result[letter]\
    \ = count + 1\n        } else {\n            result[letter] = 1\n        }\n \
    \   }\n    return result", "    var dict = [String : Int]()\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n    for element in array {\n        if let count = dict[element] {\n  \
    \          dict[element] = count + 1\n        } else {\n            dict[element]\
    \ = 1\n        }\n    }\n    return dict", "    var dict = [String : Int]()\n\
    \    let arr = test.characters.split{$0 == \" \"}.map(String.init)\n    for str\
    \ in arr {\n        if let count = dict[str] {\n            dict[str] = count\
    \ + 1\n        } else {\n            dict[str] = 1\n        }\n    }\n    return\
    \ dict", "    var result = [String : Int]()\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n    for letter in letters {\n        if let count = result[letter] {\n\
    \            result[letter] = count + 1\n        } else {\n            result[letter]\
    \ = 1\n        }\n    }\n    return result", "    var dict = [String : Int]()\n\
    \    let array = test.componentsSeparatedByString(\" \")\n    for i in array {\n\
    \        if let count = dict[i] {\n            dict[i] = count + 1\n        }\
    \ else {\n            dict[i] = 1\n        }\n    }\n    return dict", "    var\
    \ result = [String : Int]()\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n    for letter in letters {\n        if let count = result[letter] {\n\
    \            result[letter] = count + 1\n        } else {\n            result[letter]\
    \ = 1\n        }\n    }\n    return result", "    var dict = [String : Int]()\n\
    \    let array = test.componentsSeparatedByString(\" \")\n    for item in array\
    \ {\n        if let count = dict[item] {\n            dict[item] = count + 1\n\
    \        } else {\n            dict[item] = 1\n        }\n    }\n    return dict",
  "    var result = [String : Int]()\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n    for item in array {\n        if result[item] == nil {\n           \
    \ result[item] = 1\n        } else {\n            result[item]! += 1\n       \
    \ }\n    }\n    return result", "    var dict = [String : Int]()\n    let letters\
    \ = test.componentsSeparatedByString(\" \")\n    for letter in letters {\n   \
    \     if dict[letter] == nil {\n            dict[letter] = 1\n        } else {\n\
    \            dict[letter]! += 1\n        }\n    }\n    return dict", "    var\
    \ result = [String : Int]()\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n    for letter in letters {\n        if let count = result[letter] {\n\
    \            result[letter] = count + 1\n        } else {\n            result[letter]\
    \ = 1\n        }\n    }\n    return result", "    var dict = [String : Int]()\n\
    \    let arr = test.componentsSeparatedByString(\" \")\n    for item in arr {\n\
    \        if let count = dict[item] {\n            dict[item] = count + 1\n   \
    \     } else {\n            dict[item] = 1\n        }\n    }\n    return dict",
  "    var dict = [String : Int]()\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n    for letter in letters {\n        if let count = dict[letter] {\n  \
    \          dict[letter] = count + 1\n        } else {\n            dict[letter]\
    \ = 1\n        }\n    }\n    return dict", "    var dict = [String : Int]()\n\
    \    var max = 0\n    var maxKeys = [String]()\n    let arr = test.componentsSeparatedByString(\"\
    \ \")\n    for i in arr {\n        if let val = dict[i] {\n            dict[i]\
    \ = val + 1\n        } else {\n            dict[i] = 1\n        }\n        if\
    \ dict[i] > max {\n            max = dict[i]!\n            maxKeys = [i]\n   \
    \     } else if dict[i] == max {\n            maxKeys.append(i)\n        }\n \
    \   }\n    var result = [String : Int]()\n    for i in maxKeys {\n        result[i]\
    \ = max\n    }\n    return result", "    var histogram = [String : Int]()\n  \
    \  let letters = test.componentsSeparatedByString(\" \")\n    for letter in letters\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram", "    var result = [String : Int]()\n    let letters\
    \ = test.componentsSeparatedByString(\" \")\n    for letter in letters {\n   \
    \     if let count = result[letter] {\n            result[letter] = count + 1\n\
    \        } else {\n            result[letter] = 1\n        }\n    }\n    return\
    \ result", "    var histogram = [String : Int]()\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n    for letter in letters {\n        if histogram[letter] == nil {\n  \
    \          histogram[letter] = 1\n        } else {\n            histogram[letter]!\
    \ += 1\n        }\n    }\n    return histogram", "    var result = [String : Int]()\n\
    \    let letters = test.componentsSeparatedByString(\" \")\n    for letter in\
    \ letters {\n        if let count = result[letter] {\n            result[letter]\
    \ = count + 1\n        } else {\n            result[letter] = 1\n        }\n \
    \   }\n    return result", "    var result = [String : Int]()\n    let letters\
    \ = test.characters.split{$0 == \" \"}.map(String.init)\n    for letter in letters\
    \ {\n        if let count = result[letter] {\n            result[letter] = count\
    \ + 1\n        } else {\n            result[letter] = 1\n        }\n    }\n  \
    \  return result", "    var histogram = [String : Int]()\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n    for letter in letters {\n        if let count = histogram[letter] {\n\
    \            histogram[letter] = count + 1\n        } else {\n            histogram[letter]\
    \ = 1\n        }\n    }\n    return histogram"]
stop_tokens:
- "\n}"
