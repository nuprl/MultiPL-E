name: HumanEval_103_rounded_avg
language: swift
prompt: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
  \ n and m, and your task is to compute the\n/// average of the integers from n through\
  \ m (including n and m). \n/// Round the answer to the nearest integer and convert\
  \ that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// rounded_avg(1,\
  \ 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10, 20) => \"0b1111\"\
  \n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n: Int, m: Int) -> Result<String,\
  \ Int> {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"\
  ))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
  \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
  \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
  0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
  ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
  \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
  \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
  assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
  \ == .success(\"0b101\"))"
completions: ["    guard n <= m else { return .failure(-1) }\n    let avg = (n + m)\
    \ / 2\n    let binary = String(avg, radix: 2)\n    return .success(\"0b\\(binary)\"\
    )", "    guard n <= m else { return .failure(-1) }\n    let sum = (n...m).reduce(0,\
    \ +)\n    let avg = sum / (m - n + 1)\n    return .success(String(avg, radix:\
    \ 2))", "    guard n <= m else { return .failure(-1) }\n    let avg = (n + m)\
    \ / 2\n    let binary = String(avg, radix: 2)\n    return .success(\"0b\\(binary)\"\
    )", "    guard n <= m else { return .failure(-1) }\n    let sum = (n...m).reduce(0,\
    \ +)\n    let avg = sum / (m - n + 1)\n    return .success(String(avg, radix:\
    \ 2))", "    if n > m {\n        return .failure(-1)\n    }\n    let average =\
    \ (n + m) / 2\n    let binary = String(average, radix: 2)\n    return .success(\"\
    0b\\(binary)\")", "    if n > m {\n        return .failure(-1)\n    }\n    let\
    \ avg = (n + m) / 2\n    return .success(String(avg, radix: 2))", "    guard n\
    \ <= m else { return .failure(-1) }\n    let avg = (n + m) / 2\n    let binary\
    \ = String(avg, radix: 2)\n    return .success(\"0b\\(binary)\")", "    guard\
    \ n <= m else { return .failure(-1) }\n    let avg = (n + m) / 2\n    return .success(String(avg,\
    \ radix: 2))", "    guard n <= m else { return .failure(-1) }\n    let sum = (n...m).reduce(0,\
    \ +)\n    let avg = sum / (m - n + 1)\n    return .success(String(avg, radix:\
    \ 2))", "    guard n <= m else { return .failure(-1) }\n    let sum = (n...m).reduce(0,\
    \ +)\n    let avg = sum / (m - n + 1)\n    return .success(String(avg, radix:\
    \ 2))", "    guard n <= m else { return .failure(-1) }\n    let sum = (n + m)\
    \ * (m - n + 1) / 2\n    let avg = sum / (m - n + 1)\n    return .success(String(avg,\
    \ radix: 2))", "    guard n <= m else { return .failure(-1) }\n    let sum = (n...m).reduce(0,\
    \ +)\n    let avg = sum / (m - n + 1)\n    return .success(String(avg, radix:\
    \ 2))", "    guard n <= m else { return .failure(-1) }\n    let sum = (n...m).reduce(0,\
    \ +)\n    let avg = sum / (m - n + 1)\n    return .success(String(avg, radix:\
    \ 2))", "    guard n <= m else { return .failure(-1) }\n    let sum = (n...m).reduce(0,\
    \ +)\n    let avg = sum / (m - n + 1)\n    return .success(String(avg, radix:\
    \ 2))", "    guard n <= m else { return .failure(-1) }\n    let sum = (n...m).reduce(0,\
    \ +)\n    let avg = sum / (m - n + 1)\n    return .success(String(avg, radix:\
    \ 2))", "    if n > m {\n        return .failure(-1)\n    }\n    let sum = (n\
    \ + m) * (m - n + 1) / 2\n    let avg = sum / (m - n + 1)\n    let binary = String(avg,\
    \ radix: 2)\n    return .success(binary)", "    if n > m {\n        return .failure(-1)\n\
    \    }\n    let avg = (n + m) / 2\n    return .success(String(avg, radix: 2))",
  "    guard n <= m else { return .failure(-1) }\n    let avg = (n + m) / 2\n    let\
    \ binary = String(avg, radix: 2)\n    return .success(\"0b\\(binary)\")", "  \
    \  guard n <= m else { return .failure(-1) }\n    let average = (n + m) / 2\n\
    \    let binary = String(average, radix: 2)\n    return .success(\"0b\\(binary)\"\
    )", "    guard n <= m else { return .failure(-1) }\n    let avg = (n + m) / 2\n\
    \    return .success(String(avg, radix: 2))", "    if n > m {\n        return\
    \ .failure(-1)\n    }\n    let sum = (n + m) * (m - n + 1) / 2\n    let avg =\
    \ sum / (m - n + 1)\n    let binary = String(avg, radix: 2)\n    return .success(binary)",
  "    guard n <= m else { return .failure(-1) }\n    let avg = (n + m) / 2\n    return\
    \ .success(String(avg, radix: 2))", "    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))", "    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))", "    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    let bin = String(avg, radix: 2)\n    return\
    \ .success(\"0b\\(bin)\")", "    guard n <= m else { return .failure(-1) }\n \
    \   let avg = (n + m) / 2\n    let binary = String(avg, radix: 2)\n    return\
    \ .success(\"0b\\(binary)\")", "    guard n <= m else { return .failure(-1) }\n\
    \    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n    return\
    \ .success(String(avg, radix: 2))", "    if n > m {\n        return .failure(-1)\n\
    \    }\n    let avg = (n + m) / 2\n    let bin = String(avg, radix: 2)\n    return\
    \ .success(\"0b\\(bin)\")"]
stop_tokens:
- "\n}"
