name: HumanEval_128_prod_signs
language: swift
prompt: "\n/// You are given an array arr of integers and you need to return\n///\
  \ sum of magnitudes of integers multiplied by product of all signs\n/// of each\
  \ number in the array, represented by 1, -1 or 0.\n/// Note: return None for empty\
  \ arr.\n/// Example:\n/// >>> prod_signs([1, 2, 2, -4]) == -9\n/// >>> prod_signs([0,\
  \ 1]) == 0\n/// >>> prod_signs([]) == None\nfunc prod_signs(arr: [Int]) -> Int?\
  \ {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(prod_signs(arr: [1, 2, 2, -4]) == -9)\n\
  assert(prod_signs(arr: [0, 1]) == 0)\nassert(prod_signs(arr: [1, 1, 1, 2, 3, -1,\
  \ 1]) == -10)\nassert(prod_signs(arr: [] as [Int]) == nil)\nassert(prod_signs(arr:\
  \ [2, 4, 1, 2, -1, -1, 9]) == 20)\nassert(prod_signs(arr: [-1, 1, -1, 1]) == 4)\n\
  assert(prod_signs(arr: [-1, 1, 1, 1]) == -4)\nassert(prod_signs(arr: [-1, 1, 1,\
  \ 0]) == 0)"
completions: ["    if arr.isEmpty {\n        return nil\n    }\n    var sum = 0\n\
    \    var prod = 1\n    for i in arr {\n        sum += abs(i)\n        if i !=\
    \ 0 {\n            prod *= i / abs(i)\n        }\n    }\n    return sum * prod",
  "    if arr.isEmpty {\n        return nil\n    }\n    var prod = 1\n    var sum\
    \ = 0\n    for i in arr {\n        if i > 0 {\n            prod *= 1\n       \
    \ } else if i < 0 {\n            prod *= -1\n        } else {\n            prod\
    \ *= 0\n        }\n        sum += abs(i)\n    }\n    return sum * prod", "   \
    \ if arr.isEmpty {\n        return nil\n    }\n    var prod = 1\n    var sum =\
    \ 0\n    for i in arr {\n        if i > 0 {\n            prod *= 1\n        }\
    \ else if i < 0 {\n            prod *= -1\n        } else {\n            prod\
    \ *= 0\n        }\n        sum += abs(i)\n    }\n    return sum * prod", "   \
    \ guard arr.count > 0 else { return nil }\n    let signs = arr.map { $0 >= 0 ?\
    \ 1 : -1 }\n    let mags = arr.map { abs($0) }\n    return mags.reduce(1, combine:\
    \ *) * signs.reduce(1, combine: *)", "    if arr.isEmpty {\n        return nil\n\
    \    }\n    var sum = 0\n    var prod = 1\n    for i in arr {\n        sum +=\
    \ abs(i)\n        prod *= i < 0 ? -1 : i > 0 ? 1 : 0\n    }\n    return sum *\
    \ prod", "    if arr.isEmpty {\n        return nil\n    }\n    let signs = arr.map\
    \ { $0 > 0 ? 1 : $0 < 0 ? -1 : 0 }\n    let prod = signs.reduce(1, *)\n    let\
    \ sum = arr.reduce(0, +)\n    return prod * sum", "    if arr.isEmpty {\n    \
    \    return nil\n    }\n    let signs = arr.map { $0 > 0 ? 1 : $0 < 0 ? -1 : 0\
    \ }\n    let magnitudes = arr.map { abs($0) }\n    let prod = signs.reduce(1,\
    \ combine: *)\n    let sum = magnitudes.reduce(0, combine: +)\n    return prod\
    \ * sum", "    if arr.isEmpty {\n        return nil\n    }\n    var sum = 0\n\
    \    var product = 1\n    for i in arr {\n        sum += abs(i)\n        product\
    \ *= i > 0 ? 1 : i < 0 ? -1 : 0\n    }\n    return sum * product", "    if arr.isEmpty\
    \ {\n        return nil\n    }\n    var sum = 0\n    var product = 1\n    for\
    \ i in arr {\n        if i > 0 {\n            sum += i\n            product *=\
    \ 1\n        } else if i < 0 {\n            sum += -i\n            product *=\
    \ -1\n        } else {\n            product *= 0\n        }\n    }\n    return\
    \ sum * product", "    if arr.isEmpty {\n        return nil\n    }\n    var sum\
    \ = 0\n    var prod = 1\n    for i in arr {\n        sum += abs(i)\n        prod\
    \ *= i < 0 ? -1 : i > 0 ? 1 : 0\n    }\n    return sum * prod", "    if arr.isEmpty\
    \ {\n        return nil\n    }\n    let signs = arr.map { $0 == 0 ? 0 : $0 > 0\
    \ ? 1 : -1 }\n    let magnitudes = arr.map { abs($0) }\n    return signs.reduce(1,\
    \ *) * magnitudes.reduce(0, +)", "    if arr.isEmpty {\n        return nil\n \
    \   }\n    var prod = 1\n    var sum = 0\n    for i in arr {\n        if i > 0\
    \ {\n            prod *= 1\n        } else if i < 0 {\n            prod *= -1\n\
    \        } else {\n            prod *= 0\n        }\n        sum += abs(i)\n \
    \   }\n    return sum * prod", "    if arr.isEmpty {\n        return nil\n   \
    \ }\n    var prod = 1\n    var sum = 0\n    for i in arr {\n        if i > 0 {\n\
    \            prod *= 1\n        } else if i < 0 {\n            prod *= -1\n  \
    \      } else {\n            prod *= 0\n        }\n        sum += abs(i)\n   \
    \ }\n    return sum * prod", "    if arr.isEmpty {\n        return nil\n    }\n\
    \    var sum = 0\n    var prod = 1\n    for i in arr {\n        sum += abs(i)\n\
    \        prod *= i == 0 ? 1 : i / abs(i)\n    }\n    return sum * prod", "   \
    \ if arr.isEmpty {\n        return nil\n    }\n    let signs = arr.map { $0 ==\
    \ 0 ? 0 : $0 > 0 ? 1 : -1 }\n    let magnitudes = arr.map { abs($0) }\n    let\
    \ prod = signs.reduce(1, *)\n    let sum = magnitudes.reduce(0, +)\n    return\
    \ prod * sum", "    if arr.isEmpty {\n        return nil\n    }\n    var prod\
    \ = 1\n    var sum = 0\n    for i in arr {\n        if i > 0 {\n            prod\
    \ *= 1\n        } else if i < 0 {\n            prod *= -1\n        } else {\n\
    \            prod *= 0\n        }\n        sum += abs(i)\n    }\n    return sum\
    \ * prod", "    if arr.isEmpty {\n        return nil\n    }\n    var sum = 0\n\
    \    var prod = 1\n    for i in arr {\n        sum += abs(i)\n        if i !=\
    \ 0 {\n            prod *= i / abs(i)\n        }\n    }\n    return sum * prod",
  "    guard arr.count > 0 else { return nil }\n    let signs = arr.map { $0 < 0 ?\
    \ -1 : $0 > 0 ? 1 : 0 }\n    let magnitudes = arr.map { abs($0) }\n    return\
    \ signs.reduce(1, *) * magnitudes.reduce(0, +)", "    if arr.isEmpty {\n     \
    \   return nil\n    }\n    let signs = arr.map { $0 > 0 ? 1 : $0 < 0 ? -1 : 0\
    \ }\n    let magnitudes = arr.map { abs($0) }\n    let prod = signs.reduce(1,\
    \ *)\n    let sum = magnitudes.reduce(0, +)\n    return prod * sum", "    guard\
    \ !arr.isEmpty else { return nil }\n    return arr.reduce(1) { $0 * $1.signum()\
    \ } * arr.reduce(0) { $0 + abs($1) }"]
stop_tokens:
- "\n}"
