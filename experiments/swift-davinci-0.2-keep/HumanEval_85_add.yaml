name: HumanEval_85_add
language: swift
prompt: "\n/// Given a non-empty list of integers lst. add the even elements that\
  \ are at odd indices..\n/// Examples:\n/// add([4, 2, 6, 7]) ==> 2\nfunc add(lst:\
  \ [Int]) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(add(lst: [4, 88]) == 88)\nassert(add(lst:\
  \ [4, 5, 6, 7, 2, 122]) == 122)\nassert(add(lst: [4, 0, 6, 7]) == 0)\nassert(add(lst:\
  \ [4, 4, 6, 8]) == 12)"
completions: ['    return lst.enumerated().reduce(0) { $1.offset % 2 == 1 && $1.element
    % 2 == 0 ? $0 + $1.element : $0 }', '    return lst.enumerated().filter({ $0.offset
    % 2 != 0 }).filter({ $0.element % 2 == 0 }).reduce(0, { $0 + $1.element })', " \
    \   var sum = 0\n    for (index, value) in lst.enumerated() {\n        if index\
    \ % 2 != 0 && value % 2 == 0 {\n            sum += value\n        }\n    }\n \
    \   return sum", '    return lst.enumerated().reduce(0) { $1.offset % 2 == 1 &&
    $1.element % 2 == 0 ? $0 + $1.element : $0 }', '    return lst.enumerated().filter
    { $0.offset % 2 != 0 && $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }',
  '    return lst.enumerated().reduce(0) { $1.offset % 2 == 1 && $1.element % 2 ==
    0 ? $0 + $1.element : $0 }', "    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum", '    return lst.enumerated().reduce(0) { $1.offset
    % 2 == 1 && $1.element % 2 == 0 ? $0 + $1.element : $0 }', "    var sum = 0\n\
    \    for (index, value) in lst.enumerated() {\n        if index % 2 != 0 && value\
    \ % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum", '    return
    lst.enumerated().filter({ $0.offset % 2 != 0 }).filter({ $0.element % 2 == 0 }).reduce(0,
    { $0 + $1.element })', "    var sum = 0\n    for (index, value) in lst.enumerated()\
    \ {\n        if index % 2 != 0 && value % 2 == 0 {\n            sum += value\n\
    \        }\n    }\n    return sum", '    return lst.enumerated().reduce(0) { $1.offset
    % 2 == 1 && $1.element % 2 == 0 ? $0 + $1.element : $0 }', "    var sum = 0\n\
    \    for (index, value) in lst.enumerated() {\n        if index % 2 != 0 && value\
    \ % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum", '    return
    lst.enumerated().filter { $0.offset % 2 != 0 && $0.element % 2 == 0 }.reduce(0)
    { $0 + $1.element }', '    return lst.enumerated().filter { $0.offset % 2 != 0
    && $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }', "    var sum = 0\n  \
    \  for (index, value) in lst.enumerated() {\n        if index % 2 != 0 && value\
    \ % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum", '    return
    lst.enumerated().reduce(0) { $1.offset % 2 == 1 && $1.element % 2 == 0 ? $0 +
    $1.element : $0 }', '    return lst.enumerated().filter { $0.offset % 2 != 0 &&
    $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }', "    return lst.enumerated().reduce(0)\
    \ { (result, element) in\n        element.offset % 2 == 1 && element.element %\
    \ 2 == 0 ? result + element.element : result\n    }", '    return lst.enumerated().filter
    { $0.offset % 2 != 0 && $0.element % 2 == 0 }.reduce(0) { $0 + $1.element }']
stop_tokens:
- "\n}"
