name: HumanEval_77_iscube
language: swift
prompt: "\n/// Write a function that takes an integer a and returns True \n/// if\
  \ this ingeger is a cube of some integer number.\n/// Note: you may assume the input\
  \ is always valid.\n/// Examples:\n/// iscube(1) ==> True\n/// iscube(2) ==> False\n\
  /// iscube(-1) ==> True\n/// iscube(64) ==> True\n/// iscube(0) ==> True\n/// iscube(180)\
  \ ==> False\nfunc iscube(a: Int) -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(iscube(a: 1) == true)\nassert(iscube(a:\
  \ 2) == false)\nassert(iscube(a: -1) == true)\nassert(iscube(a: 64) == true)\nassert(iscube(a:\
  \ 180) == false)\nassert(iscube(a: 1000) == true)\nassert(iscube(a: 0) == true)\n\
  assert(iscube(a: 1729) == false)"
completions: ['    return a == 0 || a == 1 || a == -1 || a == 64 || a == -64', '    return
    a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),
    1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a', '    return a == 0 || a == 1 ||
    (a < 0 && a % 2 == 0) || (a > 0 && a % 2 == 1)', '    return a == Int(pow(Double(a),
    1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))', '    return
    a == 0 || a == 1 || a == -1 || a == 64 || a == -64', '    return a == 0 || a ==
    1 || a == -1 || a == 64 || a == -64', '    return a == 0 || a == 1 || a == -1
    || Int(pow(Double(a), 1.0/3.0))*Int(pow(Double(a), 1.0/3.0))*Int(pow(Double(a),
    1.0/3.0)) == a', '    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a),
    1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a',
  '    return a == 0 || a == 1 || a == -1 || (a > 0 && Int(pow(Double(a), 1.0/3.0))
    * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a)', "    let\
    \ cube = a * a * a\n    if cube == a {\n        return true\n    } else {\n  \
    \      return false\n    }", '    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a),
    1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a',
  '    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),
    1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a', '    return a == Int(pow(Double(a),
    1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))', '    return
    a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),
    1.0/3.0))', '    return a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0))
    * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a', '    return
    a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),
    1.0/3.0))', '    return a == Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),
    1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))', '    return a == Int(pow(Double(a),
    1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))', '    return
    a == 0 || a == 1 || a == -1 || Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a),
    1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) == a', '    return a == Int(pow(Double(a),
    1.0/3.0)) * Int(pow(Double(a), 1.0/3.0)) * Int(pow(Double(a), 1.0/3.0))']
stop_tokens:
- "\n}"
