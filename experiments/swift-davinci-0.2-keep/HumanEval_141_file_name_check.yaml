name: HumanEval_141_file_name_check
language: swift
prompt: "\n/// Create a function which takes a string representing a file's name,\
  \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
  /// A file's name is considered to be valid if and only if all the following conditions\
  \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
  \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// - The\
  \ substring before the dot should not be empty, and it starts with a letter from\
  \ \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after the\
  \ dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// file_name_check(\"\
  example.txt\") # => 'Yes'\n/// file_name_check(\"1example.dll\") # => 'No' (the\
  \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name:\
  \ String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(file_name_check(file_name: \"example.txt\"\
  ) == \"Yes\")\nassert(file_name_check(file_name: \"1example.dll\") == \"No\")\n\
  assert(file_name_check(file_name: \"s1sdf3.asd\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"K.dll\") == \"Yes\")\nassert(file_name_check(file_name: \"MY16FILE3.exe\") ==\
  \ \"Yes\")\nassert(file_name_check(file_name: \"His12FILE94.exe\") == \"No\")\n\
  assert(file_name_check(file_name: \"_Y.txt\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"?aREYA.exe\") == \"No\")\nassert(file_name_check(file_name: \"/this_is_valid.dll\"\
  ) == \"No\")\nassert(file_name_check(file_name: \"this_is_valid.wow\") == \"No\"\
  )\nassert(file_name_check(file_name: \"this_is_valid.txt\") == \"Yes\")\nassert(file_name_check(file_name:\
  \ \"this_is_valid.txtexe\") == \"No\")\nassert(file_name_check(file_name: \"#this2_i4s_5valid.ten\"\
  ) == \"No\")\nassert(file_name_check(file_name: \"@this1_is6_valid.exe\") == \"\
  No\")\nassert(file_name_check(file_name: \"this_is_12valid.6exe4.txt\") == \"No\"\
  )\nassert(file_name_check(file_name: \"all.exe.txt\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"I563_No.exe\") == \"Yes\")\nassert(file_name_check(file_name: \"Is3youfault.txt\"\
  ) == \"Yes\")\nassert(file_name_check(file_name: \"no_one#knows.dll\") == \"Yes\"\
  )\nassert(file_name_check(file_name: \"1I563_Yes3.exe\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"I563_Yes3.txtt\") == \"No\")\nassert(file_name_check(file_name: \"final..txt\"\
  ) == \"No\")\nassert(file_name_check(file_name: \"final132\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"_f4indsartal132.\") == \"No\")\nassert(file_name_check(file_name: \".txt\")\
  \ == \"No\")\nassert(file_name_check(file_name: \"s.\") == \"No\")"
completions: ["    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    \n    let file_name_test = NSPredicate(format:\"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let file_name_arr = file_name.components(separatedBy: \".\")\n    let file_name_arr_count\
    \ = file_name_arr.count\n    let file_name_arr_first = file_name_arr[0]\n    let\
    \ file_name_arr_last = file_name_arr[file_name_arr_count - 1]\n    let file_name_arr_first_count\
    \ = file_name_arr_first.count\n    let file_name_arr_last_count = file_name_arr_last.count\n\
    \    let file_name_arr_first_first = file_name_arr_first[file_name_arr_first.startIndex]\n\
    \    let file_name_arr_last_first = file_name_arr_last[file_name_arr_last.startIndex]\n\
    \    let file_name_arr_last_second = file_name_arr_last[file_name_arr_last.index(after:\
    \ file_name_arr_last.startIndex)]\n    let file_name_arr_last_third = file_name_arr_last[file_name_arr_last.index(file_name_arr_last.startIndex,\
    \ offsetBy: 2)]\n    let file_name_arr_first_first_int = Int(String(file_name_arr_first_first))\n\
    \    let file_name_arr_last_first_int = Int(String(file_name_arr_last_first))\n\
    \    let file_name_arr_last_second_int = Int(String(file_name_arr_last_second))\n\
    \    let file_name_arr_last_third_int = Int(String(file_name_arr_last_third))\n\
    \    if file_name_arr_count == 2 && file_name_arr_first_count > 0 && file_name_arr_last_count\
    \ == 3 && file_name_arr_first_first_int == nil && file_name_arr_last_first_int\
    \ == nil && file_name_arr_last_second_int == nil && file_name_arr_last_third_int\
    \ == nil && (file_name_arr_last == \"txt\" || file_name_arr", "    let file_name_regex\
    \ = \"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.(txt|exe|dll)$\"\n    return file_name.matches(file_name_regex)\
    \ ? \"Yes\" : \"No\"", "    let file_name_arr = file_name.components(separatedBy:\
    \ \".\")\n    let file_name_arr_count = file_name_arr.count\n    if file_name_arr_count\
    \ != 2 {\n        return \"No\"\n    }\n    let file_name_arr_first = file_name_arr[0]\n\
    \    let file_name_arr_last = file_name_arr[1]\n    let file_name_arr_first_count\
    \ = file_name_arr_first.count\n    let file_name_arr_last_count = file_name_arr_last.count\n\
    \    if file_name_arr_first_count == 0 || file_name_arr_last_count == 0 {\n  \
    \      return \"No\"\n    }\n    let file_name_arr_first_first = file_name_arr_first[file_name_arr_first.startIndex]\n\
    \    let file_name_arr_last_first = file_name_arr_last[file_name_arr_last.startIndex]\n\
    \    if !(file_name_arr_first_first >= \"a\" && file_name_arr_first_first <= \"\
    z\" || file_name_arr_first_first >= \"A\" && file_name_arr_first_first <= \"Z\"\
    ) {\n        return \"No\"\n    }\n    if !(file_name_arr_last_first >= \"a\"\
    \ && file_name_arr_last_first <= \"z\" || file_name_arr_last_first >= \"A\" &&\
    \ file_name_arr_last_first <= \"Z\") {\n        return \"No\"\n    }\n    if !(file_name_arr_last\
    \ == \"txt\" || file_name_arr_last == \"exe\" || file_name_arr_last == \"dll\"\
    ) {\n        return \"No\"\n    }\n    var count = 0\n    for c in file_name_arr_first\
    \ {\n        if c >= \"0\" && c <= \"9\" {\n            count += 1\n        }\n\
    \    }\n    if count > 3 {\n        return \"No\"\n    }\n    return \"Yes\"",
  "    let file_name_arr = file_name.components(separatedBy: \".\")\n    if file_name_arr.count\
    \ != 2 {\n        return \"No\"\n    }\n    let first_part = file_name_arr[0]\n\
    \    let second_part = file_name_arr[1]\n    if first_part.count == 0 || first_part.rangeOfCharacter(from:\
    \ CharacterSet.decimalDigits) != nil {\n        return \"No\"\n    }\n    if second_part.count\
    \ == 0 || second_part.rangeOfCharacter(from: CharacterSet.decimalDigits) != nil\
    \ {\n        return \"No\"\n    }\n    if second_part != \"txt\" && second_part\
    \ != \"exe\" && second_part != \"dll\" {\n        return \"No\"\n    }\n    return\
    \ \"Yes\"", "    let file_name_arr = file_name.split(separator: \".\")\n    if\
    \ file_name_arr.count != 2 {\n        return \"No\"\n    }\n    let first_part\
    \ = file_name_arr[0]\n    let second_part = file_name_arr[1]\n    if first_part.count\
    \ == 0 || !first_part.contains(where: {$0 >= \"a\" && $0 <= \"z\"}) {\n      \
    \  return \"No\"\n    }\n    if second_part.count == 0 || ![\"txt\", \"exe\",\
    \ \"dll\"].contains(second_part) {\n        return \"No\"\n    }\n    if first_part.filter({$0\
    \ >= \"0\" && $0 <= \"9\"}).count > 3 {\n        return \"No\"\n    }\n    return\
    \ \"Yes\"", "    let file_name_arr = file_name.components(separatedBy: \".\")\n\
    \    let name = file_name_arr[0]\n    let extension = file_name_arr[1]\n    let\
    \ valid_extensions = [\"txt\", \"exe\", \"dll\"]\n    let valid_extension = valid_extensions.contains(extension)\n\
    \    let valid_name = name.rangeOfCharacter(from: CharacterSet.decimalDigits)\
    \ == nil && name.rangeOfCharacter(from: CharacterSet.letters) != nil\n    let\
    \ valid_digits = name.rangeOfCharacter(from: CharacterSet.decimalDigits) == nil\
    \ || name.rangeOfCharacter(from: CharacterSet.decimalDigits)?.count ?? 0 <= 3\n\
    \    return valid_extension && valid_name && valid_digits ? \"Yes\" : \"No\"",
  "    let file_name_arr = file_name.split(separator: \".\")\n    let file_name_arr_count\
    \ = file_name_arr.count\n    if file_name_arr_count != 2 {\n        return \"\
    No\"\n    }\n    let file_name_arr_first = file_name_arr[0]\n    let file_name_arr_second\
    \ = file_name_arr[1]\n    let file_name_arr_first_count = file_name_arr_first.count\n\
    \    let file_name_arr_second_count = file_name_arr_second.count\n    if file_name_arr_first_count\
    \ == 0 || file_name_arr_second_count == 0 {\n        return \"No\"\n    }\n  \
    \  let file_name_arr_first_first = file_name_arr_first[file_name_arr_first.startIndex]\n\
    \    let file_name_arr_second_first = file_name_arr_second[file_name_arr_second.startIndex]\n\
    \    let file_name_arr_first_first_ascii = file_name_arr_first_first.asciiValue\n\
    \    let file_name_arr_second_first_ascii = file_name_arr_second_first.asciiValue\n\
    \    if file_name_arr_first_first_ascii < 65 || file_name_arr_first_first_ascii\
    \ > 122 {\n        return \"No\"\n    }\n    if file_name_arr_first_first_ascii\
    \ > 90 && file_name_arr_first_first_ascii < 97 {\n        return \"No\"\n    }\n\
    \    if file_name_arr_second_first_ascii < 65 || file_name_arr_second_first_ascii\
    \ > 122 {\n        return \"No\"\n    }\n    if file_name_arr_second_first_ascii\
    \ > 90 && file_name_arr_second_first_ascii < 97 {\n        return \"No\"\n   \
    \ }\n    if file_name_arr_second_count > 3 {\n        return \"No\"\n    }\n \
    \   if file_name_arr", "    let file_name_arr = file_name.split(separator: \"\
    .\")\n    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n    let\
    \ first_part = file_name_arr[0]\n    let second_part = file_name_arr[1]\n    if\
    \ first_part.count == 0 || !first_part.first!.isLetter {\n        return \"No\"\
    \n    }\n    if second_part != \"txt\" && second_part != \"exe\" && second_part\
    \ != \"dll\" {\n        return \"No\"\n    }\n    let digits = \"0123456789\"\n\
    \    var count = 0\n    for char in first_part {\n        if digits.contains(char)\
    \ {\n            count += 1\n        }\n    }\n    if count > 3 {\n        return\
    \ \"No\"\n    }\n    return \"Yes\"", "    let file_name_array = file_name.components(separatedBy:\
    \ \".\")\n    let file_name_array_count = file_name_array.count\n    let file_name_array_first\
    \ = file_name_array[0]\n    let file_name_array_last = file_name_array[file_name_array_count\
    \ - 1]\n    let file_name_array_first_count = file_name_array_first.count\n  \
    \  let file_name_array_last_count = file_name_array_last.count\n    let file_name_array_first_first\
    \ = file_name_array_first[file_name_array_first.startIndex]\n    let file_name_array_last_first\
    \ = file_name_array_last[file_name_array_last.startIndex]\n    let file_name_array_last_second\
    \ = file_name_array_last[file_name_array_last.index(after: file_name_array_last.startIndex)]\n\
    \    let file_name_array_last_third = file_name_array_last[file_name_array_last.index(file_name_array_last.startIndex,\
    \ offsetBy: 2)]\n    let file_name_array_last_fourth = file_name_array_last[file_name_array_last.index(file_name_array_last.startIndex,\
    \ offsetBy: 3)]\n    if file_name_array_count != 2 {\n        return \"No\"\n\
    \    }\n    if file_name_array_first_count == 0 {\n        return \"No\"\n   \
    \ }\n    if file_name_array_last_count != 3 {\n        return \"No\"\n    }\n\
    \    if file_name_array_last_first != \"t\" || file_name_array_last_second !=\
    \ \"x\" || file_name_array_last_third != \"t\" {\n        if file_name_array_last_first\
    \ != \"e\" || file_name_array_last_second != \"x\" || file_name_array_last_third\
    \ != \"e\" {\n            if file_name_array_last_first != \"d\" || file_name",
  "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n  \
    \  return file_name.matches(file_name_regex) ? \"Yes\" : \"No\"", "    let file_name_regex\
    \ = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    return file_name.matches(regex:\
    \ file_name_regex) ? \"Yes\" : \"No\"", "    let file_name_arr = file_name.components(separatedBy:\
    \ \".\")\n    let file_name_arr_count = file_name_arr.count\n    let file_name_arr_first\
    \ = file_name_arr[0]\n    let file_name_arr_last = file_name_arr[file_name_arr_count\
    \ - 1]\n    let file_name_arr_first_count = file_name_arr_first.count\n    let\
    \ file_name_arr_last_count = file_name_arr_last.count\n    var file_name_arr_first_digit_count\
    \ = 0\n    var file_name_arr_first_letter_count = 0\n    var file_name_arr_last_letter_count\
    \ = 0\n    var file_name_arr_last_digit_count = 0\n    var file_name_arr_last_letter_count_check\
    \ = 0\n    var file_name_arr_last_letter_count_check_2 = 0\n    var file_name_arr_last_letter_count_check_3\
    \ = 0\n    var file_name_arr_last_letter_count_check_4 = 0\n    var file_name_arr_last_letter_count_check_5\
    \ = 0\n    var file_name_arr_last_letter_count_check_6 = 0\n    var file_name_arr_last_letter_count_check_7\
    \ = 0\n    var file_name_arr_last_letter_count_check_8 = 0\n    var file_name_arr_last_letter_count_check_9\
    \ = 0\n    var file_name_arr_last_letter_count_check_10 = 0\n    var file_name_arr_last_letter_count_check_11\
    \ = 0\n    var file_name_arr_last_letter_count_check_12 = 0\n    var file_name_arr_last_letter_count_check_13\
    \ = 0\n    var file_name_arr_last_letter_count_check_14 = 0\n    var file_name_arr_last_letter_count_check_15\
    \ = 0\n    var file_name_arr_last_letter_count_check_16 = 0", "    // Write your\
    \ code here\n    return \"\"", "    let file_name_array = file_name.components(separatedBy:\
    \ \".\")\n    let file_name_array_count = file_name_array.count\n    let file_name_array_first\
    \ = file_name_array[0]\n    let file_name_array_last = file_name_array[file_name_array_count\
    \ - 1]\n    let file_name_array_first_count = file_name_array_first.count\n  \
    \  let file_name_array_last_count = file_name_array_last.count\n    var file_name_array_first_digit_count\
    \ = 0\n    var file_name_array_first_letter_count = 0\n    var file_name_array_last_letter_count\
    \ = 0\n    var file_name_array_last_digit_count = 0\n    var file_name_array_last_letter_check\
    \ = 0\n    var file_name_array_first_letter_check = 0\n    var file_name_array_last_digit_check\
    \ = 0\n    var file_name_array_first_digit_check = 0\n    var file_name_array_first_letter_check_two\
    \ = 0\n    var file_name_array_last_letter_check_two = 0\n    var file_name_array_last_digit_check_two\
    \ = 0\n    var file_name_array_first_digit_check_two = 0\n    var file_name_array_first_letter_check_three\
    \ = 0\n    var file_name_array_last_letter_check_three = 0\n    var file_name_array_last_digit_check_three\
    \ = 0\n    var file_name_array_first_digit_check_three = 0\n    var file_name_array_first_letter_check_four\
    \ = 0\n    var file_name_array_last_letter_check_four = 0\n    var file_name_array_last_digit_check_four\
    \ = 0\n    var file_name_array_first_digit_check_four = 0\n    var file_name_array_first_letter_check_five\
    \ = 0\n    var file_name_array_last_letter_check_five = 0\n   ", "    let file_name_regex\
    \ = \"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.(txt|exe|dll)$\"\n    return file_name.matches(file_name_regex)\
    \ ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_predicate = NSPredicate(format: \"SELF\
    \ MATCHES %@\", file_name_regex)\n    return file_name_predicate.evaluate(with:\
    \ file_name) ? \"Yes\" : \"No\"", "    let file_name_arr = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n  \
    \  let first_part = file_name_arr[0]\n    let second_part = file_name_arr[1]\n\
    \    if first_part.count == 0 || first_part.count > 8 {\n        return \"No\"\
    \n    }\n    if second_part != \"txt\" && second_part != \"exe\" && second_part\
    \ != \"dll\" {\n        return \"No\"\n    }\n    var digit_count = 0\n    for\
    \ char in first_part {\n        if char >= \"0\" && char <= \"9\" {\n        \
    \    digit_count += 1\n        }\n    }\n    if digit_count > 3 {\n        return\
    \ \"No\"\n    }\n    return \"Yes\"", "    let file_name_arr = file_name.split(separator:\
    \ \".\")\n    let file_name_arr_count = file_name_arr.count\n    let file_name_arr_first\
    \ = file_name_arr[0]\n    let file_name_arr_last = file_name_arr[file_name_arr_count\
    \ - 1]\n    let file_name_arr_first_count = file_name_arr_first.count\n    let\
    \ file_name_arr_last_count = file_name_arr_last.count\n    var file_name_arr_first_digit_count\
    \ = 0\n    var file_name_arr_first_letter_count = 0\n    var file_name_arr_last_valid\
    \ = false\n    var file_name_arr_first_valid = false\n    var file_name_arr_valid\
    \ = false\n    var file_name_arr_first_letter_valid = false\n    var file_name_arr_last_valid_arr\
    \ = [\"txt\", \"exe\", \"dll\"]\n    var file_name_arr_last_valid_arr_count =\
    \ file_name_arr_last_valid_arr.count\n    var file_name_arr_last_valid_arr_index\
    \ = 0\n    var file_name_arr_last_valid_arr_value = \"\"\n    var file_name_arr_last_valid_arr_value_count\
    \ = 0\n    var file_name_arr_last_valid_arr_value_index = 0\n    var file_name_arr_last_valid_arr_value_char\
    \ = \"\"\n    var file_name_arr_last_valid_arr_value_char_valid = false\n    var\
    \ file_name_arr_last_valid_arr_value_char_valid_arr = [\"t\", \"e\", \"x\", \"\
    d\", \"l\"]\n    var file_name_arr_last_valid_arr_value_char_valid_arr_count =\
    \ file_name_arr_last_valid_arr_value_char_valid_arr.count\n    var file_name_arr_last_valid_arr_value_char_valid_arr_index\
    \ = 0\n    var file_name_arr_last_valid_arr", "    // Write your code here\n \
    \   return \"\""]
stop_tokens:
- "\n}"
