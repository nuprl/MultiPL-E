name: HumanEval_141_file_name_check
language: swift
prompt: "\n/// Create a function which takes a string representing a file's name,\
  \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
  /// A file's name is considered to be valid if and only if all the following conditions\
  \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
  \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// - The\
  \ substring before the dot should not be empty, and it starts with a letter from\
  \ \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after the\
  \ dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// file_name_check(\"\
  example.txt\") # => 'Yes'\n/// file_name_check(\"1example.dll\") # => 'No' (the\
  \ name should start with a latin alphapet letter)\nfunc file_name_check(file_name:\
  \ String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(file_name_check(file_name: \"example.txt\"\
  ) == \"Yes\")\nassert(file_name_check(file_name: \"1example.dll\") == \"No\")\n\
  assert(file_name_check(file_name: \"s1sdf3.asd\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"K.dll\") == \"Yes\")\nassert(file_name_check(file_name: \"MY16FILE3.exe\") ==\
  \ \"Yes\")\nassert(file_name_check(file_name: \"His12FILE94.exe\") == \"No\")\n\
  assert(file_name_check(file_name: \"_Y.txt\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"?aREYA.exe\") == \"No\")\nassert(file_name_check(file_name: \"/this_is_valid.dll\"\
  ) == \"No\")\nassert(file_name_check(file_name: \"this_is_valid.wow\") == \"No\"\
  )\nassert(file_name_check(file_name: \"this_is_valid.txt\") == \"Yes\")\nassert(file_name_check(file_name:\
  \ \"this_is_valid.txtexe\") == \"No\")\nassert(file_name_check(file_name: \"#this2_i4s_5valid.ten\"\
  ) == \"No\")\nassert(file_name_check(file_name: \"@this1_is6_valid.exe\") == \"\
  No\")\nassert(file_name_check(file_name: \"this_is_12valid.6exe4.txt\") == \"No\"\
  )\nassert(file_name_check(file_name: \"all.exe.txt\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"I563_No.exe\") == \"Yes\")\nassert(file_name_check(file_name: \"Is3youfault.txt\"\
  ) == \"Yes\")\nassert(file_name_check(file_name: \"no_one#knows.dll\") == \"Yes\"\
  )\nassert(file_name_check(file_name: \"1I563_Yes3.exe\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"I563_Yes3.txtt\") == \"No\")\nassert(file_name_check(file_name: \"final..txt\"\
  ) == \"No\")\nassert(file_name_check(file_name: \"final132\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"_f4indsartal132.\") == \"No\")\nassert(file_name_check(file_name: \".txt\")\
  \ == \"No\")\nassert(file_name_check(file_name: \"s.\") == \"No\")"
completions: ["    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    \n    let file_name_test = NSPredicate(format:\"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let file_name_arr = file_name.components(separatedBy: \".\")\n    let file_name_arr_count\
    \ = file_name_arr.count\n    let file_name_arr_first = file_name_arr[0]\n    let\
    \ file_name_arr_last = file_name_arr[file_name_arr_count - 1]\n    let file_name_arr_first_count\
    \ = file_name_arr_first.count\n    let file_name_arr_last_count = file_name_arr_last.count\n\
    \    let file_name_arr_first_first = file_name_arr_first[file_name_arr_first.startIndex]\n\
    \    let file_name_arr_last_first = file_name_arr_last[file_name_arr_last.startIndex]\n\
    \    let file_name_arr_last_second = file_name_arr_last[file_name_arr_last.index(after:\
    \ file_name_arr_last.startIndex)]\n    let file_name_arr_last_third = file_name_arr_last[file_name_arr_last.index(file_name_arr_last.startIndex,\
    \ offsetBy: 2)]\n    let file_name_arr_first_first_int = Int(String(file_name_arr_first_first))\n\
    \    let file_name_arr_last_first_int = Int(String(file_name_arr_last_first))\n\
    \    let file_name_arr_last_second_int = Int(String(file_name_arr_last_second))\n\
    \    let file_name_arr_last_third_int = Int(String(file_name_arr_last_third))\n\
    \    if file_name_arr_count == 2 && file_name_arr_first_count > 0 && file_name_arr_last_count\
    \ == 3 && file_name_arr_first_first_int == nil && file_name_arr_last_first_int\
    \ == nil && file_name_arr_last_second_int == nil && file_name_arr_last_third_int\
    \ == nil && (file_name_arr_last == \"txt\" || file_name_arr", "    let file_name_regex\
    \ = \"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.(txt|exe|dll)$\"\n    return file_name.matches(file_name_regex)\
    \ ? \"Yes\" : \"No\"", "    let file_name_arr = file_name.components(separatedBy:\
    \ \".\")\n    let file_name_arr_count = file_name_arr.count\n    if file_name_arr_count\
    \ != 2 {\n        return \"No\"\n    }\n    let file_name_arr_first = file_name_arr[0]\n\
    \    let file_name_arr_last = file_name_arr[1]\n    let file_name_arr_first_count\
    \ = file_name_arr_first.count\n    let file_name_arr_last_count = file_name_arr_last.count\n\
    \    if file_name_arr_first_count == 0 || file_name_arr_last_count == 0 {\n  \
    \      return \"No\"\n    }\n    let file_name_arr_first_first = file_name_arr_first[file_name_arr_first.startIndex]\n\
    \    let file_name_arr_last_first = file_name_arr_last[file_name_arr_last.startIndex]\n\
    \    if !(file_name_arr_first_first >= \"a\" && file_name_arr_first_first <= \"\
    z\" || file_name_arr_first_first >= \"A\" && file_name_arr_first_first <= \"Z\"\
    ) {\n        return \"No\"\n    }\n    if !(file_name_arr_last_first >= \"a\"\
    \ && file_name_arr_last_first <= \"z\" || file_name_arr_last_first >= \"A\" &&\
    \ file_name_arr_last_first <= \"Z\") {\n        return \"No\"\n    }\n    if !(file_name_arr_last\
    \ == \"txt\" || file_name_arr_last == \"exe\" || file_name_arr_last == \"dll\"\
    ) {\n        return \"No\"\n    }\n    var count = 0\n    for c in file_name_arr_first\
    \ {\n        if c >= \"0\" && c <= \"9\" {\n            count += 1\n        }\n\
    \    }\n    if count > 3 {\n        return \"No\"\n    }\n    return \"Yes\"",
  "    let file_name_arr = file_name.components(separatedBy: \".\")\n    if file_name_arr.count\
    \ != 2 {\n        return \"No\"\n    }\n    let first_part = file_name_arr[0]\n\
    \    let second_part = file_name_arr[1]\n    if first_part.count == 0 || first_part.rangeOfCharacter(from:\
    \ CharacterSet.decimalDigits) != nil {\n        return \"No\"\n    }\n    if second_part.count\
    \ == 0 || second_part.rangeOfCharacter(from: CharacterSet.decimalDigits) != nil\
    \ {\n        return \"No\"\n    }\n    if second_part != \"txt\" && second_part\
    \ != \"exe\" && second_part != \"dll\" {\n        return \"No\"\n    }\n    return\
    \ \"Yes\"", "    let file_name_arr = file_name.split(separator: \".\")\n    if\
    \ file_name_arr.count != 2 {\n        return \"No\"\n    }\n    let first_part\
    \ = file_name_arr[0]\n    let second_part = file_name_arr[1]\n    if first_part.count\
    \ == 0 || !first_part.contains(where: {$0 >= \"a\" && $0 <= \"z\"}) {\n      \
    \  return \"No\"\n    }\n    if second_part.count == 0 || ![\"txt\", \"exe\",\
    \ \"dll\"].contains(second_part) {\n        return \"No\"\n    }\n    if first_part.filter({$0\
    \ >= \"0\" && $0 <= \"9\"}).count > 3 {\n        return \"No\"\n    }\n    return\
    \ \"Yes\"", "    let file_name_arr = file_name.components(separatedBy: \".\")\n\
    \    let name = file_name_arr[0]\n    let extension = file_name_arr[1]\n    let\
    \ valid_extensions = [\"txt\", \"exe\", \"dll\"]\n    let valid_extension = valid_extensions.contains(extension)\n\
    \    let valid_name = name.rangeOfCharacter(from: CharacterSet.decimalDigits)\
    \ == nil && name.rangeOfCharacter(from: CharacterSet.letters) != nil\n    let\
    \ valid_digits = name.rangeOfCharacter(from: CharacterSet.decimalDigits) == nil\
    \ || name.rangeOfCharacter(from: CharacterSet.decimalDigits)?.count ?? 0 <= 3\n\
    \    return valid_extension && valid_name && valid_digits ? \"Yes\" : \"No\"",
  "    let file_name_arr = file_name.split(separator: \".\")\n    let file_name_arr_count\
    \ = file_name_arr.count\n    if file_name_arr_count != 2 {\n        return \"\
    No\"\n    }\n    let file_name_arr_first = file_name_arr[0]\n    let file_name_arr_second\
    \ = file_name_arr[1]\n    let file_name_arr_first_count = file_name_arr_first.count\n\
    \    let file_name_arr_second_count = file_name_arr_second.count\n    if file_name_arr_first_count\
    \ == 0 || file_name_arr_second_count == 0 {\n        return \"No\"\n    }\n  \
    \  let file_name_arr_first_first = file_name_arr_first[file_name_arr_first.startIndex]\n\
    \    let file_name_arr_second_first = file_name_arr_second[file_name_arr_second.startIndex]\n\
    \    let file_name_arr_first_first_ascii = file_name_arr_first_first.asciiValue\n\
    \    let file_name_arr_second_first_ascii = file_name_arr_second_first.asciiValue\n\
    \    if file_name_arr_first_first_ascii < 65 || file_name_arr_first_first_ascii\
    \ > 122 {\n        return \"No\"\n    }\n    if file_name_arr_first_first_ascii\
    \ > 90 && file_name_arr_first_first_ascii < 97 {\n        return \"No\"\n    }\n\
    \    if file_name_arr_second_first_ascii < 65 || file_name_arr_second_first_ascii\
    \ > 122 {\n        return \"No\"\n    }\n    if file_name_arr_second_first_ascii\
    \ > 90 && file_name_arr_second_first_ascii < 97 {\n        return \"No\"\n   \
    \ }\n    if file_name_arr_second_count > 3 {\n        return \"No\"\n    }\n \
    \   if file_name_arr", "    let file_name_arr = file_name.split(separator: \"\
    .\")\n    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n    let\
    \ first_part = file_name_arr[0]\n    let second_part = file_name_arr[1]\n    if\
    \ first_part.count == 0 || !first_part.first!.isLetter {\n        return \"No\"\
    \n    }\n    if second_part != \"txt\" && second_part != \"exe\" && second_part\
    \ != \"dll\" {\n        return \"No\"\n    }\n    let digits = \"0123456789\"\n\
    \    var count = 0\n    for char in first_part {\n        if digits.contains(char)\
    \ {\n            count += 1\n        }\n    }\n    if count > 3 {\n        return\
    \ \"No\"\n    }\n    return \"Yes\"", "    let file_name_array = file_name.components(separatedBy:\
    \ \".\")\n    let file_name_array_count = file_name_array.count\n    let file_name_array_first\
    \ = file_name_array[0]\n    let file_name_array_last = file_name_array[file_name_array_count\
    \ - 1]\n    let file_name_array_first_count = file_name_array_first.count\n  \
    \  let file_name_array_last_count = file_name_array_last.count\n    let file_name_array_first_first\
    \ = file_name_array_first[file_name_array_first.startIndex]\n    let file_name_array_last_first\
    \ = file_name_array_last[file_name_array_last.startIndex]\n    let file_name_array_last_second\
    \ = file_name_array_last[file_name_array_last.index(after: file_name_array_last.startIndex)]\n\
    \    let file_name_array_last_third = file_name_array_last[file_name_array_last.index(file_name_array_last.startIndex,\
    \ offsetBy: 2)]\n    let file_name_array_last_fourth = file_name_array_last[file_name_array_last.index(file_name_array_last.startIndex,\
    \ offsetBy: 3)]\n    if file_name_array_count != 2 {\n        return \"No\"\n\
    \    }\n    if file_name_array_first_count == 0 {\n        return \"No\"\n   \
    \ }\n    if file_name_array_last_count != 3 {\n        return \"No\"\n    }\n\
    \    if file_name_array_last_first != \"t\" || file_name_array_last_second !=\
    \ \"x\" || file_name_array_last_third != \"t\" {\n        if file_name_array_last_first\
    \ != \"e\" || file_name_array_last_second != \"x\" || file_name_array_last_third\
    \ != \"e\" {\n            if file_name_array_last_first != \"d\" || file_name",
  "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n  \
    \  return file_name.matches(file_name_regex) ? \"Yes\" : \"No\"", "    let file_name_regex\
    \ = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    return file_name.matches(regex:\
    \ file_name_regex) ? \"Yes\" : \"No\"", "    let file_name_arr = file_name.components(separatedBy:\
    \ \".\")\n    let file_name_arr_count = file_name_arr.count\n    let file_name_arr_first\
    \ = file_name_arr[0]\n    let file_name_arr_last = file_name_arr[file_name_arr_count\
    \ - 1]\n    let file_name_arr_first_count = file_name_arr_first.count\n    let\
    \ file_name_arr_last_count = file_name_arr_last.count\n    var file_name_arr_first_digit_count\
    \ = 0\n    var file_name_arr_first_letter_count = 0\n    var file_name_arr_last_letter_count\
    \ = 0\n    var file_name_arr_last_digit_count = 0\n    var file_name_arr_last_letter_count_check\
    \ = 0\n    var file_name_arr_last_letter_count_check_2 = 0\n    var file_name_arr_last_letter_count_check_3\
    \ = 0\n    var file_name_arr_last_letter_count_check_4 = 0\n    var file_name_arr_last_letter_count_check_5\
    \ = 0\n    var file_name_arr_last_letter_count_check_6 = 0\n    var file_name_arr_last_letter_count_check_7\
    \ = 0\n    var file_name_arr_last_letter_count_check_8 = 0\n    var file_name_arr_last_letter_count_check_9\
    \ = 0\n    var file_name_arr_last_letter_count_check_10 = 0\n    var file_name_arr_last_letter_count_check_11\
    \ = 0\n    var file_name_arr_last_letter_count_check_12 = 0\n    var file_name_arr_last_letter_count_check_13\
    \ = 0\n    var file_name_arr_last_letter_count_check_14 = 0\n    var file_name_arr_last_letter_count_check_15\
    \ = 0\n    var file_name_arr_last_letter_count_check_16 = 0", "    // Write your\
    \ code here\n    return \"\"", "    let file_name_array = file_name.components(separatedBy:\
    \ \".\")\n    let file_name_array_count = file_name_array.count\n    let file_name_array_first\
    \ = file_name_array[0]\n    let file_name_array_last = file_name_array[file_name_array_count\
    \ - 1]\n    let file_name_array_first_count = file_name_array_first.count\n  \
    \  let file_name_array_last_count = file_name_array_last.count\n    var file_name_array_first_digit_count\
    \ = 0\n    var file_name_array_first_letter_count = 0\n    var file_name_array_last_letter_count\
    \ = 0\n    var file_name_array_last_digit_count = 0\n    var file_name_array_last_letter_check\
    \ = 0\n    var file_name_array_first_letter_check = 0\n    var file_name_array_last_digit_check\
    \ = 0\n    var file_name_array_first_digit_check = 0\n    var file_name_array_first_letter_check_two\
    \ = 0\n    var file_name_array_last_letter_check_two = 0\n    var file_name_array_last_digit_check_two\
    \ = 0\n    var file_name_array_first_digit_check_two = 0\n    var file_name_array_first_letter_check_three\
    \ = 0\n    var file_name_array_last_letter_check_three = 0\n    var file_name_array_last_digit_check_three\
    \ = 0\n    var file_name_array_first_digit_check_three = 0\n    var file_name_array_first_letter_check_four\
    \ = 0\n    var file_name_array_last_letter_check_four = 0\n    var file_name_array_last_digit_check_four\
    \ = 0\n    var file_name_array_first_digit_check_four = 0\n    var file_name_array_first_letter_check_five\
    \ = 0\n    var file_name_array_last_letter_check_five = 0\n   ", "    let file_name_regex\
    \ = \"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.(txt|exe|dll)$\"\n    return file_name.matches(file_name_regex)\
    \ ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_predicate = NSPredicate(format: \"SELF\
    \ MATCHES %@\", file_name_regex)\n    return file_name_predicate.evaluate(with:\
    \ file_name) ? \"Yes\" : \"No\"", "    let file_name_arr = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n  \
    \  let first_part = file_name_arr[0]\n    let second_part = file_name_arr[1]\n\
    \    if first_part.count == 0 || first_part.count > 8 {\n        return \"No\"\
    \n    }\n    if second_part != \"txt\" && second_part != \"exe\" && second_part\
    \ != \"dll\" {\n        return \"No\"\n    }\n    var digit_count = 0\n    for\
    \ char in first_part {\n        if char >= \"0\" && char <= \"9\" {\n        \
    \    digit_count += 1\n        }\n    }\n    if digit_count > 3 {\n        return\
    \ \"No\"\n    }\n    return \"Yes\"", "    let file_name_arr = file_name.split(separator:\
    \ \".\")\n    let file_name_arr_count = file_name_arr.count\n    let file_name_arr_first\
    \ = file_name_arr[0]\n    let file_name_arr_last = file_name_arr[file_name_arr_count\
    \ - 1]\n    let file_name_arr_first_count = file_name_arr_first.count\n    let\
    \ file_name_arr_last_count = file_name_arr_last.count\n    var file_name_arr_first_digit_count\
    \ = 0\n    var file_name_arr_first_letter_count = 0\n    var file_name_arr_last_valid\
    \ = false\n    var file_name_arr_first_valid = false\n    var file_name_arr_valid\
    \ = false\n    var file_name_arr_first_letter_valid = false\n    var file_name_arr_last_valid_arr\
    \ = [\"txt\", \"exe\", \"dll\"]\n    var file_name_arr_last_valid_arr_count =\
    \ file_name_arr_last_valid_arr.count\n    var file_name_arr_last_valid_arr_index\
    \ = 0\n    var file_name_arr_last_valid_arr_value = \"\"\n    var file_name_arr_last_valid_arr_value_count\
    \ = 0\n    var file_name_arr_last_valid_arr_value_index = 0\n    var file_name_arr_last_valid_arr_value_char\
    \ = \"\"\n    var file_name_arr_last_valid_arr_value_char_valid = false\n    var\
    \ file_name_arr_last_valid_arr_value_char_valid_arr = [\"t\", \"e\", \"x\", \"\
    d\", \"l\"]\n    var file_name_arr_last_valid_arr_value_char_valid_arr_count =\
    \ file_name_arr_last_valid_arr_value_char_valid_arr.count\n    var file_name_arr_last_valid_arr_value_char_valid_arr_index\
    \ = 0\n    var file_name_arr_last_valid_arr", "    // Write your code here\n \
    \   return \"\"", "    let pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    \n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n  \
    \  let matches = regex.matches(in: file_name, options: [], range: NSRange(location:\
    \ 0, length: file_name.count))\n    return matches.count > 0 ? \"Yes\" : \"No\"",
  "    let file_name_arr = file_name.components(separatedBy: \".\")\n    let file_name_arr_count\
    \ = file_name_arr.count\n    let file_name_arr_first = file_name_arr[0]\n    let\
    \ file_name_arr_last = file_name_arr[file_name_arr_count - 1]\n    let file_name_arr_first_count\
    \ = file_name_arr_first.count\n    let file_name_arr_last_count = file_name_arr_last.count\n\
    \    let file_name_arr_first_first = file_name_arr_first[file_name_arr_first.startIndex]\n\
    \    let file_name_arr_first_first_char = String(file_name_arr_first_first)\n\
    \    let file_name_arr_first_first_char_int = Int(file_name_arr_first_first_char)\n\
    \    let file_name_arr_first_first_char_int_count = file_name_arr_first_first_char_int?.description.count\n\
    \    let file_name_arr_first_first_char_int_count_int = Int(file_name_arr_first_first_char_int_count!)\n\
    \    let file_name_arr_first_first_char_int_count_int_count = file_name_arr_first_first_char_int_count_int?.description.count\n\
    \    let file_name_arr_first_first_char_int_count_int_count_int = Int(file_name_arr_first_first_char_int_count_int_count!)\n\
    \    let file_name_arr_first_first_char_int_count_int_count_int_count = file_name_arr_first_first_char_int_count_int_count_int?.description.count\n\
    \    let file_name_arr_first_first_char_int_count_int_count_int_count_int = Int(file_name_arr_first_first_char_int_count_int_count_int_count!)\n\
    \    let file_name_arr_first_first_char_int", "    let file_name_arr = file_name.components(separatedBy:\
    \ \".\")\n    let file_name_arr_count = file_name_arr.count\n    let file_name_arr_first\
    \ = file_name_arr[0]\n    let file_name_arr_last = file_name_arr[file_name_arr_count\
    \ - 1]\n    let file_name_arr_first_count = file_name_arr_first.count\n    let\
    \ file_name_arr_last_count = file_name_arr_last.count\n    let file_name_arr_first_first\
    \ = file_name_arr_first[file_name_arr_first.startIndex]\n    let file_name_arr_last_first\
    \ = file_name_arr_last[file_name_arr_last.startIndex]\n    let file_name_arr_first_first_is_number\
    \ = file_name_arr_first_first >= \"0\" && file_name_arr_first_first <= \"9\"\n\
    \    let file_name_arr_last_first_is_number = file_name_arr_last_first >= \"0\"\
    \ && file_name_arr_last_first <= \"9\"\n    let file_name_arr_first_is_valid =\
    \ file_name_arr_first_first_is_number == false && file_name_arr_first_count >=\
    \ 1\n    let file_name_arr_last_is_valid = file_name_arr_last_first_is_number\
    \ == false && (file_name_arr_last == \"txt\" || file_name_arr_last == \"exe\"\
    \ || file_name_arr_last == \"dll\")\n    let file_name_arr_is_valid = file_name_arr_count\
    \ == 2 && file_name_arr_first_is_valid && file_name_arr_last_is_valid\n    let\
    \ file_name_is_valid = file_name_arr_is_valid\n    return file_name_is_valid ?\
    \ \"Yes\" : \"No\"", "    let file_name_arr = file_name.components(separatedBy:\
    \ \".\")\n    let file_name_arr_count = file_name_arr.count\n    let file_name_arr_first\
    \ = file_name_arr[0]\n    let file_name_arr_last = file_name_arr[file_name_arr_count\
    \ - 1]\n    let file_name_arr_first_count = file_name_arr_first.count\n    let\
    \ file_name_arr_last_count = file_name_arr_last.count\n    var file_name_arr_first_digit_count\
    \ = 0\n    var file_name_arr_first_letter_count = 0\n    var file_name_arr_last_letter_count\
    \ = 0\n    var file_name_arr_last_digit_count = 0\n    var file_name_arr_first_letter_flag\
    \ = false\n    var file_name_arr_last_letter_flag = false\n    for char in file_name_arr_first\
    \ {\n        if char >= \"0\" && char <= \"9\" {\n            file_name_arr_first_digit_count\
    \ += 1\n        }\n        if char >= \"a\" && char <= \"z\" || char >= \"A\"\
    \ && char <= \"Z\" {\n            file_name_arr_first_letter_count += 1\n    \
    \        file_name_arr_first_letter_flag = true\n        }\n    }\n    for char\
    \ in file_name_arr_last {\n        if char >= \"0\" && char <= \"9\" {\n     \
    \       file_name_arr_last_digit_count += 1\n        }\n        if char >= \"\
    a\" && char <= \"z\" || char >= \"A\" && char <= \"Z\" {\n            file_name_arr_last_letter_count\
    \ += 1\n            file_name_arr_last_letter_flag = true\n        }\n    }\n\
    \    if file_name_arr_count == 2 && file_name_arr_first_count > 0 && file_name_arr_last_count\
    \ > 0 && file_name_arr_first_digit_count <= 3 && file_name_arr_first_letter_flag\
    \ && file_name_arr", "    let file_name_arr = file_name.split(separator: \".\"\
    )\n    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n    let first_part\
    \ = file_name_arr[0]\n    let second_part = file_name_arr[1]\n    if !first_part.isEmpty\
    \ && first_part.rangeOfCharacter(from: CharacterSet.decimalDigits) == nil && first_part.rangeOfCharacter(from:\
    \ CharacterSet.letters) != nil && second_part == \"txt\" || second_part == \"\
    exe\" || second_part == \"dll\" {\n        return \"Yes\"\n    }\n    return \"\
    No\"", "    let file_name_arr = file_name.components(separatedBy: \".\")\n   \
    \ if file_name_arr.count != 2 {\n        return \"No\"\n    }\n    let file_name_arr_0\
    \ = file_name_arr[0]\n    let file_name_arr_1 = file_name_arr[1]\n    if file_name_arr_0.count\
    \ == 0 {\n        return \"No\"\n    }\n    let first_char = file_name_arr_0[file_name_arr_0.startIndex]\n\
    \    if !(first_char >= \"a\" && first_char <= \"z\" || first_char >= \"A\" &&\
    \ first_char <= \"Z\") {\n        return \"No\"\n    }\n    var count = 0\n  \
    \  for char in file_name_arr_0 {\n        if char >= \"0\" && char <= \"9\" {\n\
    \            count += 1\n        }\n    }\n    if count > 3 {\n        return\
    \ \"No\"\n    }\n    if file_name_arr_1 != \"txt\" && file_name_arr_1 != \"exe\"\
    \ && file_name_arr_1 != \"dll\" {\n        return \"No\"\n    }\n    return \"\
    Yes\"", "    let file_name_array = file_name.components(separatedBy: \".\")\n\
    \    let file_name_without_extension = file_name_array[0]\n    let file_name_extension\
    \ = file_name_array[1]\n    let file_name_without_extension_array = Array(file_name_without_extension)\n\
    \    let file_name_without_extension_array_count = file_name_without_extension_array.count\n\
    \    var file_name_without_extension_array_count_digits = 0\n    var file_name_without_extension_array_count_letters\
    \ = 0\n    for i in 0...file_name_without_extension_array_count - 1 {\n      \
    \  if file_name_without_extension_array[i] >= \"0\" && file_name_without_extension_array[i]\
    \ <= \"9\" {\n            file_name_without_extension_array_count_digits += 1\n\
    \        } else if file_name_without_extension_array[i] >= \"a\" && file_name_without_extension_array[i]\
    \ <= \"z\" || file_name_without_extension_array[i] >= \"A\" && file_name_without_extension_array[i]\
    \ <= \"Z\" {\n            file_name_without_extension_array_count_letters += 1\n\
    \        }\n    }\n    if file_name_without_extension_array_count_digits > 3 ||\
    \ file_name_without_extension_array_count_letters == 0 || file_name_extension\
    \ != \"txt\" && file_name_extension != \"exe\" && file_name_extension != \"dll\"\
    \ {\n        return \"No\"\n    } else {\n        return \"Yes\"\n    }", "  \
    \  let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n  \
    \  let file_name_test = NSPredicate(format:\"SELF MATCHES %@\", file_name_regex)\n\
    \    return file_name_test.evaluate(with: file_name) ? \"Yes\" : \"No\"", "  \
    \  let file_name_array = file_name.components(separatedBy: \".\")\n    let file_name_array_count\
    \ = file_name_array.count\n    let file_name_array_first = file_name_array[0]\n\
    \    let file_name_array_last = file_name_array[file_name_array_count - 1]\n \
    \   let file_name_array_first_count = file_name_array_first.count\n    let file_name_array_last_count\
    \ = file_name_array_last.count\n    let file_name_array_first_first = file_name_array_first[file_name_array_first.startIndex]\n\
    \    let file_name_array_last_first = file_name_array_last[file_name_array_last.startIndex]\n\
    \    let file_name_array_first_last = file_name_array_first[file_name_array_first.index(before:\
    \ file_name_array_first.endIndex)]\n    let file_name_array_last_last = file_name_array_last[file_name_array_last.index(before:\
    \ file_name_array_last.endIndex)]\n    if file_name_array_count != 2 {\n     \
    \   return \"No\"\n    }\n    if file_name_array_first_count == 0 {\n        return\
    \ \"No\"\n    }\n    if file_name_array_last_count != 3 {\n        return \"No\"\
    \n    }\n    if file_name_array_last != \"txt\" && file_name_array_last != \"\
    exe\" && file_name_array_last != \"dll\" {\n        return \"No\"\n    }\n   \
    \ if file_name_array_first_first < \"a\" || file_name_array_first_first > \"z\"\
    \ {\n        if file_name_array_first_first < \"A\" || file_name_array_first_first\
    \ > \"Z\" {\n            return \"No\"\n        }\n    }\n    if file_name_array_last_first\
    \ < \"a\" || file_name_array_last_first > \"z\" {\n        if file_name_", " \
    \   let file_name_arr = file_name.components(separatedBy: \".\")\n    if file_name_arr.count\
    \ != 2 {\n        return \"No\"\n    }\n    let file_name_arr_1 = file_name_arr[0]\n\
    \    let file_name_arr_2 = file_name_arr[1]\n    let file_name_arr_1_arr = file_name_arr_1.components(separatedBy:\
    \ CharacterSet.decimalDigits.inverted)\n    let file_name_arr_2_arr = file_name_arr_2.components(separatedBy:\
    \ CharacterSet.decimalDigits.inverted)\n    if file_name_arr_1_arr.count != 1\
    \ || file_name_arr_2_arr.count != 1 {\n        return \"No\"\n    }\n    if file_name_arr_1.count\
    \ == 0 || file_name_arr_1.count > 3 {\n        return \"No\"\n    }\n    if file_name_arr_2\
    \ != \"txt\" && file_name_arr_2 != \"exe\" && file_name_arr_2 != \"dll\" {\n \
    \       return \"No\"\n    }\n    if file_name_arr_1.first!.isLetter == false\
    \ {\n        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_arr\
    \ = file_name.split(separator: \".\")\n    if file_name_arr.count != 2 {\n   \
    \     return \"No\"\n    }\n    let first_part = file_name_arr[0]\n    let second_part\
    \ = file_name_arr[1]\n    if first_part.count == 0 || first_part.count > 8 {\n\
    \        return \"No\"\n    }\n    if second_part != \"txt\" && second_part !=\
    \ \"exe\" && second_part != \"dll\" {\n        return \"No\"\n    }\n    var digit_count\
    \ = 0\n    for c in first_part {\n        if c >= \"0\" && c <= \"9\" {\n    \
    \        digit_count += 1\n        }\n    }\n    if digit_count > 3 {\n      \
    \  return \"No\"\n    }\n    return \"Yes\"", "    let pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.(txt|exe|dll)$\"\n    let regex = try! NSRegularExpression(pattern: pattern,\
    \ options: [])\n    let matches = regex.matches(in: file_name, options: [], range:\
    \ NSRange(location: 0, length: file_name.count))\n    return matches.count > 0\
    \ ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.(txt|exe|dll)$\"\n    return file_name.range(of: file_name_regex, options:\
    \ .regularExpression) != nil ? \"Yes\" : \"No\"", "    var result = \"No\"\n \
    \   let file_name_array = file_name.split(separator: \".\")\n    if file_name_array.count\
    \ == 2 {\n        let first_part = file_name_array[0]\n        let second_part\
    \ = file_name_array[1]\n        if first_part.count > 0 {\n            let first_char\
    \ = first_part[first_part.startIndex]\n            if first_char >= \"a\" && first_char\
    \ <= \"z\" || first_char >= \"A\" && first_char <= \"Z\" {\n                var\
    \ digits_count = 0\n                for char in first_part {\n               \
    \     if char >= \"0\" && char <= \"9\" {\n                        digits_count\
    \ += 1\n                    }\n                }\n                if digits_count\
    \ <= 3 {\n                    if second_part == \"txt\" || second_part == \"exe\"\
    \ || second_part == \"dll\" {\n                        result = \"Yes\"\n    \
    \                }\n                }\n            }\n        }\n    }\n    return\
    \ result", "    let file_name_arr = file_name.split(separator: \".\")\n    if\
    \ file_name_arr.count != 2 {\n        return \"No\"\n    }\n    let first_part\
    \ = file_name_arr[0]\n    let second_part = file_name_arr[1]\n    if !first_part.isEmpty\
    \ && first_part.first!.isLetter {\n        let digits = first_part.filter { $0.isNumber\
    \ }\n        if digits.count <= 3 {\n            if second_part == \"txt\" ||\
    \ second_part == \"exe\" || second_part == \"dll\" {\n                return \"\
    Yes\"\n            }\n        }\n    }\n    return \"No\"", '    return ""', " \
    \   let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n \
    \   return file_name.matches(file_name_regex) ? \"Yes\" : \"No\"", '    return
    ""', "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    \n    return file_name.matches(file_name_regex) ? \"Yes\" : \"No\"", "    let\
    \ fileNameArr = file_name.split(separator: \".\")\n    let fileName = fileNameArr[0]\n\
    \    let fileExtension = fileNameArr[1]\n    var count = 0\n    for char in fileName\
    \ {\n        if char >= \"0\" && char <= \"9\" {\n            count += 1\n   \
    \     }\n    }\n    if count > 3 {\n        return \"No\"\n    }\n    if fileName.count\
    \ == 0 {\n        return \"No\"\n    }\n    if fileName[fileName.startIndex] <\
    \ \"a\" || fileName[fileName.startIndex] > \"z\" {\n        return \"No\"\n  \
    \  }\n    if fileExtension != \"txt\" && fileExtension != \"exe\" && fileExtension\
    \ != \"dll\" {\n        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_regex\
    \ = \"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.(txt|exe|dll)$\"\n    let file_name_test =\
    \ NSPredicate(format:\"SELF MATCHES %@\", file_name_regex)\n    return file_name_test.evaluate(with:\
    \ file_name) ? \"Yes\" : \"No\"", "    let file_name_arr = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n  \
    \  let file_name_arr_0 = file_name_arr[0]\n    let file_name_arr_1 = file_name_arr[1]\n\
    \    if file_name_arr_0.count == 0 {\n        return \"No\"\n    }\n    if !(file_name_arr_0.range(of:\
    \ \"[a-zA-Z]\", options: .regularExpression) != nil) {\n        return \"No\"\n\
    \    }\n    if file_name_arr_0.range(of: \"[0-9]\", options: .regularExpression)\
    \ != nil {\n        if file_name_arr_0.range(of: \"[0-9]{4}\", options: .regularExpression)\
    \ != nil {\n            return \"No\"\n        }\n    }\n    if file_name_arr_1\
    \ != \"txt\" && file_name_arr_1 != \"exe\" && file_name_arr_1 != \"dll\" {\n \
    \       return \"No\"\n    }\n    return \"Yes\"", "    let pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let regex = try! NSRegularExpression(pattern: pattern,\
    \ options: [])\n    let matches = regex.matches(in: file_name, options: [], range:\
    \ NSRange(location: 0, length: file_name.count))\n    return matches.count > 0\
    \ ? \"Yes\" : \"No\"", "    let file_name_components = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_components.count != 2 {\n        return \"No\"\n  \
    \  }\n    let file_name_components_before_dot = file_name_components[0]\n    let\
    \ file_name_components_after_dot = file_name_components[1]\n    if file_name_components_before_dot.count\
    \ == 0 {\n        return \"No\"\n    }\n    if !(file_name_components_before_dot.range(of:\
    \ \"[a-zA-Z]\", options: .regularExpression) != nil) {\n        return \"No\"\n\
    \    }\n    if file_name_components_before_dot.range(of: \"[0-9]\", options: .regularExpression)\
    \ != nil {\n        let number_of_digits = file_name_components_before_dot.count\
    \ - file_name_components_before_dot.replacingOccurrences(of: \"[0-9]\", with:\
    \ \"\").count\n        if number_of_digits > 3 {\n            return \"No\"\n\
    \        }\n    }\n    if !(file_name_components_after_dot == \"txt\" || file_name_components_after_dot\
    \ == \"exe\" || file_name_components_after_dot == \"dll\") {\n        return \"\
    No\"\n    }\n    return \"Yes\"", "    let file_name_array = file_name.components(separatedBy:\
    \ \".\")\n    let file_name_first = file_name_array[0]\n    let file_name_second\
    \ = file_name_array[1]\n    let file_name_second_array = Array(file_name_second)\n\
    \    let file_name_first_array = Array(file_name_first)\n    var count = 0\n \
    \   for i in file_name_first_array {\n        if i >= \"0\" && i <= \"9\" {\n\
    \            count += 1\n        }\n    }\n    if count > 3 {\n        return\
    \ \"No\"\n    }\n    if file_name_first_array[0] < \"A\" || file_name_first_array[0]\
    \ > \"z\" {\n        return \"No\"\n    }\n    if file_name_second_array[0] <\
    \ \"A\" || file_name_second_array[0] > \"z\" {\n        return \"No\"\n    }\n\
    \    if file_name_second != \"txt\" && file_name_second != \"exe\" && file_name_second\
    \ != \"dll\" {\n        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_arr\
    \ = file_name.components(separatedBy: \".\")\n    if file_name_arr.count != 2\
    \ {\n        return \"No\"\n    }\n    let first_part = file_name_arr[0]\n   \
    \ let second_part = file_name_arr[1]\n    if first_part.count == 0 || !first_part.contains(where:\
    \ { $0 >= \"a\" && $0 <= \"z\" || $0 >= \"A\" && $0 <= \"Z\" }) {\n        return\
    \ \"No\"\n    }\n    if second_part != \"txt\" && second_part != \"exe\" && second_part\
    \ != \"dll\" {\n        return \"No\"\n    }\n    if first_part.contains(where:\
    \ { $0 >= \"0\" && $0 <= \"9\" }) {\n        let digits_count = first_part.reduce(0)\
    \ { $0 + ($1 >= \"0\" && $1 <= \"9\" ? 1 : 0) }\n        if digits_count > 3 {\n\
    \            return \"No\"\n        }\n    }\n    return \"Yes\"", "    let file_name_arr\
    \ = file_name.components(separatedBy: \".\")\n    let file_name_arr_count = file_name_arr.count\n\
    \    let file_name_arr_first = file_name_arr[0]\n    let file_name_arr_last =\
    \ file_name_arr[file_name_arr_count - 1]\n    let file_name_arr_last_count = file_name_arr_last.count\n\
    \    let file_name_arr_first_count = file_name_arr_first.count\n    let file_name_arr_first_first\
    \ = file_name_arr_first[file_name_arr_first.startIndex]\n    let file_name_arr_first_first_unicode\
    \ = file_name_arr_first_first.unicodeScalars.first!.value\n    let file_name_arr_first_first_unicode_lower\
    \ = file_name_arr_first_first_unicode >= 97 && file_name_arr_first_first_unicode\
    \ <= 122\n    let file_name_arr_first_first_unicode_upper = file_name_arr_first_first_unicode\
    \ >= 65 && file_name_arr_first_first_unicode <= 90\n    let file_name_arr_first_first_unicode_valid\
    \ = file_name_arr_first_first_unicode_lower || file_name_arr_first_first_unicode_upper\n\
    \    let file_name_arr_last_valid = file_name_arr_last == \"txt\" || file_name_arr_last\
    \ == \"exe\" || file_name_arr_last == \"dll\"\n    let file_name_arr_first_valid\
    \ = file_name_arr_first_count > 0 && file_name_arr_first_first_unicode_valid\n\
    \    let file_name_arr_valid = file_name_arr_count == 2 && file_name_arr_last_count\
    \ == 3 && file_name_arr_first_valid && file_name_arr_last_valid\n    let file_name_arr_first_digit_count\
    \ = file_name_arr_first.filter { $0 >= \"0\" && $0 <=", "    let file_name_arr\
    \ = file_name.components(separatedBy: \".\")\n    if file_name_arr.count != 2\
    \ {\n        return \"No\"\n    }\n    let first_part = file_name_arr[0]\n   \
    \ let second_part = file_name_arr[1]\n    if first_part.count == 0 || !first_part.contains(where:\
    \ { $0 >= \"a\" && $0 <= \"z\" || $0 >= \"A\" && $0 <= \"Z\" }) {\n        return\
    \ \"No\"\n    }\n    if second_part != \"txt\" && second_part != \"exe\" && second_part\
    \ != \"dll\" {\n        return \"No\"\n    }\n    if first_part.contains(where:\
    \ { $0 >= \"0\" && $0 <= \"9\" }) {\n        var count = 0\n        for c in first_part\
    \ {\n            if c >= \"0\" && c <= \"9\" {\n                count += 1\n \
    \           }\n        }\n        if count > 3 {\n            return \"No\"\n\
    \        }\n    }\n    return \"Yes\"", "    let fileNameArr = file_name.split(separator:\
    \ \".\")\n    if fileNameArr.count != 2 {\n        return \"No\"\n    }\n    let\
    \ firstPart = fileNameArr[0]\n    let secondPart = fileNameArr[1]\n    if firstPart.count\
    \ == 0 || firstPart.first! < \"a\" || firstPart.first! > \"z\" {\n        return\
    \ \"No\"\n    }\n    if secondPart != \"txt\" && secondPart != \"exe\" && secondPart\
    \ != \"dll\" {\n        return \"No\"\n    }\n    var count = 0\n    for c in\
    \ firstPart {\n        if c >= \"0\" && c <= \"9\" {\n            count += 1\n\
    \        }\n    }\n    if count > 3 {\n        return \"No\"\n    }\n    return\
    \ \"Yes\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    \n    return file_name.range(of: file_name_regex, options: .regularExpression)\
    \ != nil ? \"Yes\" : \"No\"", "    let file_name_components = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_components.count != 2 {\n        return \"No\"\n  \
    \  }\n    let file_name_prefix = file_name_components[0]\n    let file_name_suffix\
    \ = file_name_components[1]\n    if file_name_prefix.count == 0 {\n        return\
    \ \"No\"\n    }\n    if file_name_suffix != \"txt\" && file_name_suffix != \"\
    exe\" && file_name_suffix != \"dll\" {\n        return \"No\"\n    }\n    var\
    \ digit_count = 0\n    for character in file_name_prefix {\n        if character\
    \ >= \"0\" && character <= \"9\" {\n            digit_count += 1\n        }\n\
    \    }\n    if digit_count > 3 {\n        return \"No\"\n    }\n    return \"\
    Yes\"", "    let fileNameArray = file_name.components(separatedBy: \".\")\n  \
    \  let fileName = fileNameArray[0]\n    let fileExtension = fileNameArray[1]\n\
    \    let fileNameArray2 = fileName.components(separatedBy: CharacterSet.decimalDigits.inverted)\n\
    \    let fileNameArray3 = fileName.components(separatedBy: CharacterSet.letters.inverted)\n\
    \    if fileNameArray.count != 2 {\n        return \"No\"\n    }\n    if fileNameArray2.count\
    \ > 3 {\n        return \"No\"\n    }\n    if fileNameArray3.count == 0 {\n  \
    \      return \"No\"\n    }\n    if fileExtension != \"txt\" && fileExtension\
    \ != \"exe\" && fileExtension != \"dll\" {\n        return \"No\"\n    }\n   \
    \ return \"Yes\"", "    let file_name_arr = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n  \
    \  let file_name_arr_0 = file_name_arr[0]\n    let file_name_arr_1 = file_name_arr[1]\n\
    \    if file_name_arr_0.count == 0 {\n        return \"No\"\n    }\n    if file_name_arr_0.count\
    \ > 3 {\n        return \"No\"\n    }\n    let file_name_arr_0_first_char = file_name_arr_0.first!\n\
    \    if !(file_name_arr_0_first_char >= \"a\" && file_name_arr_0_first_char <=\
    \ \"z\" || file_name_arr_0_first_char >= \"A\" && file_name_arr_0_first_char <=\
    \ \"Z\") {\n        return \"No\"\n    }\n    if file_name_arr_1 != \"txt\" &&\
    \ file_name_arr_1 != \"exe\" && file_name_arr_1 != \"dll\" {\n        return \"\
    No\"\n    }\n    return \"Yes\"", "    let file_name_arr = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n  \
    \  let file_name_arr_0 = file_name_arr[0]\n    let file_name_arr_1 = file_name_arr[1]\n\
    \    if file_name_arr_0.count == 0 {\n        return \"No\"\n    }\n    if file_name_arr_1.count\
    \ == 0 {\n        return \"No\"\n    }\n    if !(file_name_arr_1 == \"txt\" ||\
    \ file_name_arr_1 == \"exe\" || file_name_arr_1 == \"dll\") {\n        return\
    \ \"No\"\n    }\n    if file_name_arr_0.count > 3 {\n        return \"No\"\n \
    \   }\n    if !(file_name_arr_0.first! >= \"a\" && file_name_arr_0.first! <= \"\
    z\" || file_name_arr_0.first! >= \"A\" && file_name_arr_0.first! <= \"Z\") {\n\
    \        return \"No\"\n    }\n    return \"Yes\"", "    // Write your code here\n\
    \    return \"\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\\
    .(txt|exe|dll)$\"\n    if file_name.range(of: file_name_regex, options: .regularExpression)\
    \ != nil {\n        return \"Yes\"\n    }\n    return \"No\"", "    let file_name_arr\
    \ = file_name.split(separator: \".\")\n    let file_name_arr_count = file_name_arr.count\n\
    \    if file_name_arr_count != 2 {\n        return \"No\"\n    }\n    let file_name_arr_first\
    \ = file_name_arr[0]\n    let file_name_arr_second = file_name_arr[1]\n    let\
    \ file_name_arr_first_count = file_name_arr_first.count\n    let file_name_arr_second_count\
    \ = file_name_arr_second.count\n    if file_name_arr_first_count == 0 || file_name_arr_second_count\
    \ == 0 {\n        return \"No\"\n    }\n    let file_name_arr_first_first = file_name_arr_first[file_name_arr_first.startIndex]\n\
    \    let file_name_arr_second_first = file_name_arr_second[file_name_arr_second.startIndex]\n\
    \    if !file_name_arr_first_first.isLetter || !file_name_arr_second_first.isLetter\
    \ {\n        return \"No\"\n    }\n    let file_name_arr_first_digit_count = file_name_arr_first.filter\
    \ { $0.isNumber }.count\n    if file_name_arr_first_digit_count > 3 {\n      \
    \  return \"No\"\n    }\n    let file_name_arr_second_arr = [\"txt\", \"exe\"\
    , \"dll\"]\n    if !file_name_arr_second_arr.contains(file_name_arr_second) {\n\
    \        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_arr = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n  \
    \  let file_name_arr_1 = file_name_arr[0]\n    let file_name_arr_2 = file_name_arr[1]\n\
    \    if file_name_arr_1.count == 0 || file_name_arr_2.count == 0 {\n        return\
    \ \"No\"\n    }\n    if file_name_arr_1.count > 3 {\n        return \"No\"\n \
    \   }\n    if file_name_arr_1.rangeOfCharacter(from: CharacterSet.decimalDigits)\
    \ != nil {\n        return \"No\"\n    }\n    if file_name_arr_2 != \"txt\" &&\
    \ file_name_arr_2 != \"exe\" && file_name_arr_2 != \"dll\" {\n        return \"\
    No\"\n    }\n    return \"Yes\"", "    let digits = \"0123456789\"\n    let latin_alphapet\
    \ = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    let valid_extensions\
    \ = [\"txt\", \"exe\", \"dll\"]\n    var digits_count = 0\n    var dot_count =\
    \ 0\n    var extension_count = 0\n    var extension_start_index = 0\n    var extension_end_index\
    \ = 0\n    var extension = \"\"\n    var name = \"\"\n    for (index, char) in\
    \ file_name.enumerated() {\n        if digits.contains(char) {\n            digits_count\
    \ += 1\n        }\n        if char == \".\" {\n            dot_count += 1\n  \
    \          extension_start_index = index + 1\n        }\n        if index == file_name.count\
    \ - 1 {\n            extension_end_index = index + 1\n        }\n    }\n    extension\
    \ = String(file_name[file_name.index(file_name.startIndex, offsetBy: extension_start_index)..<file_name.index(file_name.startIndex,\
    \ offsetBy: extension_end_index)])\n    name = String(file_name[file_name.startIndex..<file_name.index(file_name.startIndex,\
    \ offsetBy: extension_start_index - 1)])\n    if digits_count > 3 {\n        return\
    \ \"No\"\n    }\n    if dot_count != 1 {\n        return \"No\"\n    }\n    if\
    \ !latin_alphapet.contains(name[name.startIndex]) {\n        return \"No\"\n \
    \   }\n    if !valid_extensions.contains(extension) {\n        return \"No\"\n\
    \    }\n    return \"Yes\"", "    let file_name_arr = file_name.split(separator:\
    \ \".\")\n    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n  \
    \  if file_name_arr[0].count == 0 {\n        return \"No\"\n    }\n    if file_name_arr[0].count\
    \ > 3 {\n        return \"No\"\n    }\n    if file_name_arr[0].rangeOfCharacter(from:\
    \ CharacterSet.decimalDigits) != nil {\n        return \"No\"\n    }\n    if file_name_arr[1]\
    \ != \"txt\" && file_name_arr[1] != \"exe\" && file_name_arr[1] != \"dll\" {\n\
    \        return \"No\"\n    }\n    return \"Yes\"", '    return ""', "    let\
    \ file_name_arr = file_name.components(separatedBy: \".\")\n    if file_name_arr.count\
    \ != 2 {\n        return \"No\"\n    }\n    let first_part = file_name_arr[0]\n\
    \    let second_part = file_name_arr[1]\n    if first_part.count == 0 || first_part.count\
    \ > 8 {\n        return \"No\"\n    }\n    if second_part.count == 0 || second_part.count\
    \ > 3 {\n        return \"No\"\n    }\n    if !(second_part == \"txt\" || second_part\
    \ == \"exe\" || second_part == \"dll\") {\n        return \"No\"\n    }\n    var\
    \ digits_count = 0\n    for i in first_part {\n        if i >= \"0\" && i <= \"\
    9\" {\n            digits_count += 1\n        }\n    }\n    if digits_count >\
    \ 3 {\n        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_arr\
    \ = file_name.components(separatedBy: \".\")\n    if file_name_arr.count != 2\
    \ {\n        return \"No\"\n    }\n    let file_name_arr_1 = file_name_arr[0]\n\
    \    let file_name_arr_2 = file_name_arr[1]\n    if file_name_arr_1.count == 0\
    \ || file_name_arr_2.count == 0 {\n        return \"No\"\n    }\n    if file_name_arr_1.rangeOfCharacter(from:\
    \ CharacterSet.decimalDigits) != nil {\n        return \"No\"\n    }\n    if file_name_arr_2\
    \ != \"txt\" && file_name_arr_2 != \"exe\" && file_name_arr_2 != \"dll\" {\n \
    \       return \"No\"\n    }\n    if file_name_arr_1.rangeOfCharacter(from: CharacterSet.decimalDigits)\
    \ != nil {\n        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_arr\
    \ = file_name.split(separator: \".\")\n    if file_name_arr.count != 2 {\n   \
    \     return \"No\"\n    }\n    if file_name_arr[0].count == 0 {\n        return\
    \ \"No\"\n    }\n    if file_name_arr[0].filter({$0 >= \"0\" && $0 <= \"9\"}).count\
    \ > 3 {\n        return \"No\"\n    }\n    if file_name_arr[0].filter({$0 >= \"\
    a\" && $0 <= \"z\"}).count == 0 && file_name_arr[0].filter({$0 >= \"A\" && $0\
    \ <= \"Z\"}).count == 0 {\n        return \"No\"\n    }\n    if file_name_arr[1]\
    \ != \"txt\" && file_name_arr[1] != \"exe\" && file_name_arr[1] != \"dll\" {\n\
    \        return \"No\"\n    }\n    return \"Yes\"", '    return ""', "    let\
    \ file_name_arr = file_name.components(separatedBy: \".\")\n    let file_name_arr_count\
    \ = file_name_arr.count\n    let file_name_arr_first = file_name_arr[0]\n    let\
    \ file_name_arr_last = file_name_arr[file_name_arr_count - 1]\n    let file_name_arr_first_count\
    \ = file_name_arr_first.count\n    let file_name_arr_last_count = file_name_arr_last.count\n\
    \    let file_name_arr_first_first = file_name_arr_first[file_name_arr_first.startIndex]\n\
    \    let file_name_arr_last_first = file_name_arr_last[file_name_arr_last.startIndex]\n\
    \    let file_name_arr_first_last = file_name_arr_first[file_name_arr_first.index(before:\
    \ file_name_arr_first.endIndex)]\n    let file_name_arr_last_last = file_name_arr_last[file_name_arr_last.index(before:\
    \ file_name_arr_last.endIndex)]\n    let file_name_arr_first_first_ascii = file_name_arr_first_first.asciiValue!\n\
    \    let file_name_arr_last_first_ascii = file_name_arr_last_first.asciiValue!\n\
    \    let file_name_arr_first_last_ascii = file_name_arr_first_last.asciiValue!\n\
    \    let file_name_arr_last_last_ascii = file_name_arr_last_last.asciiValue!\n\
    \    let file_name_arr_first_first_ascii_int = Int(file_name_arr_first_first_ascii)\n\
    \    let file_name_arr_last_first_ascii_int = Int(file_name_arr_last_first_ascii)\n\
    \    let file_name_arr_first_last_ascii_int = Int(file_name_arr_first_last_as",
  "    let file_name_arr = file_name.components(separatedBy: \".\")\n    if file_name_arr.count\
    \ != 2 {\n        return \"No\"\n    }\n    let first_part = file_name_arr[0]\n\
    \    let second_part = file_name_arr[1]\n    if first_part.count == 0 || !first_part.is_latin_alphapet()\
    \ {\n        return \"No\"\n    }\n    if first_part.count > 3 {\n        return\
    \ \"No\"\n    }\n    if second_part != \"txt\" && second_part != \"exe\" && second_part\
    \ != \"dll\" {\n        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_components\
    \ = file_name.components(separatedBy: \".\")\n    let file_name_without_extension\
    \ = file_name_components[0]\n    let file_name_extension = file_name_components[1]\n\
    \    let file_name_without_extension_components = file_name_without_extension.components(separatedBy:\
    \ CharacterSet.decimalDigits)\n    let file_name_without_extension_without_digits\
    \ = file_name_without_extension_components.joined(separator: \"\")\n    let file_name_without_extension_digits\
    \ = file_name_without_extension.components(separatedBy: CharacterSet.letters).joined(separator:\
    \ \"\")\n    let file_name_without_extension_letters = file_name_without_extension.components(separatedBy:\
    \ CharacterSet.decimalDigits).joined(separator: \"\")\n    if file_name_without_extension_digits.count\
    \ > 3 {\n        return \"No\"\n    }\n    if file_name_without_extension_letters.count\
    \ == 0 {\n        return \"No\"\n    }\n    if file_name_without_extension_without_digits.count\
    \ == 0 {\n        return \"No\"\n    }\n    if file_name_extension != \"txt\"\
    \ && file_name_extension != \"exe\" && file_name_extension != \"dll\" {\n    \
    \    return \"No\"\n    }\n    return \"Yes\"", "    let pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.(txt|exe|dll)$\"\n    let regex = try! NSRegularExpression(pattern: pattern,\
    \ options: [])\n    let matches = regex.matches(in: file_name, options: [], range:\
    \ NSRange(location: 0, length: file_name.count))\n    return matches.count > 0\
    \ ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    return file_name.matches(file_name_regex) ? \"Yes\" :\
    \ \"No\"", "    let file_name_array = file_name.components(separatedBy: \".\"\
    )\n    let file_name_array_count = file_name_array.count\n    if file_name_array_count\
    \ != 2 {\n        return \"No\"\n    }\n    let file_name_array_first = file_name_array[0]\n\
    \    let file_name_array_last = file_name_array[1]\n    let file_name_array_first_count\
    \ = file_name_array_first.count\n    let file_name_array_last_count = file_name_array_last.count\n\
    \    if file_name_array_first_count == 0 || file_name_array_last_count == 0 {\n\
    \        return \"No\"\n    }\n    let file_name_array_first_first_char = file_name_array_first[file_name_array_first.startIndex]\n\
    \    let file_name_array_last_first_char = file_name_array_last[file_name_array_last.startIndex]\n\
    \    if !file_name_array_first_first_char.isLetter {\n        return \"No\"\n\
    \    }\n    if !file_name_array_last_first_char.isLetter {\n        return \"\
    No\"\n    }\n    let file_name_array_first_digit_count = file_name_array_first.filter\
    \ { $0.isNumber }.count\n    if file_name_array_first_digit_count > 3 {\n    \
    \    return \"No\"\n    }\n    let file_name_array_last_digit_count = file_name_array_last.filter\
    \ { $0.isNumber }.count\n    if file_name_array_last_digit_count > 3 {\n     \
    \   return \"No\"\n    }\n    if file_name_array_last != \"txt\" && file_name_array_last\
    \ != \"exe\" && file_name_array_last != \"dll\" {\n        return \"No\"\n   \
    \ }\n    return \"Yes\"", "    let file_name_arr = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n  \
    \  let file_name_arr_0 = file_name_arr[0]\n    let file_name_arr_1 = file_name_arr[1]\n\
    \    if file_name_arr_0.count == 0 {\n        return \"No\"\n    }\n    if file_name_arr_1.count\
    \ == 0 {\n        return \"No\"\n    }\n    if file_name_arr_1 != \"txt\" && file_name_arr_1\
    \ != \"exe\" && file_name_arr_1 != \"dll\" {\n        return \"No\"\n    }\n \
    \   let file_name_arr_0_arr = Array(file_name_arr_0)\n    var count = 0\n    for\
    \ char in file_name_arr_0_arr {\n        if char >= \"0\" && char <= \"9\" {\n\
    \            count += 1\n        }\n    }\n    if count > 3 {\n        return\
    \ \"No\"\n    }\n    if file_name_arr_0_arr[0] < \"A\" || file_name_arr_0_arr[0]\
    \ > \"z\" {\n        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_arr\
    \ = file_name.components(separatedBy: \".\")\n    if file_name_arr.count != 2\
    \ {\n        return \"No\"\n    }\n    let first_part = file_name_arr[0]\n   \
    \ let second_part = file_name_arr[1]\n    if first_part.count == 0 || !first_part.contains(where:\
    \ { $0 >= \"a\" && $0 <= \"z\" || $0 >= \"A\" && $0 <= \"Z\" }) {\n        return\
    \ \"No\"\n    }\n    if second_part != \"txt\" && second_part != \"exe\" && second_part\
    \ != \"dll\" {\n        return \"No\"\n    }\n    if first_part.contains(where:\
    \ { $0 >= \"0\" && $0 <= \"9\" }) {\n        var count = 0\n        for c in first_part\
    \ {\n            if c >= \"0\" && c <= \"9\" {\n                count += 1\n \
    \           }\n        }\n        if count > 3 {\n            return \"No\"\n\
    \        }\n    }\n    return \"Yes\"", '    return ""', "    // Write your code\
    \ here\n    return \"\"", "    let file_name_components = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_components.count != 2 {\n        return \"No\"\n  \
    \  }\n    let file_name_components_count = file_name_components.count\n    let\
    \ file_name_components_first = file_name_components[0]\n    let file_name_components_last\
    \ = file_name_components[file_name_components_count - 1]\n    if file_name_components_first.count\
    \ == 0 || file_name_components_last.count == 0 {\n        return \"No\"\n    }\n\
    \    let file_name_components_first_first_char = file_name_components_first[file_name_components_first.startIndex]\n\
    \    if !(file_name_components_first_first_char >= \"a\" && file_name_components_first_first_char\
    \ <= \"z\" || file_name_components_first_first_char >= \"A\" && file_name_components_first_first_char\
    \ <= \"Z\") {\n        return \"No\"\n    }\n    let file_name_components_last_lowercased\
    \ = file_name_components_last.lowercased()\n    if file_name_components_last_lowercased\
    \ != \"txt\" && file_name_components_last_lowercased != \"exe\" && file_name_components_last_lowercased\
    \ != \"dll\" {\n        return \"No\"\n    }\n    let file_name_components_first_digits_count\
    \ = file_name_components_first.filter({ $0 >= \"0\" && $0 <= \"9\" }).count\n\
    \    if file_name_components_first_digits_count > 3 {\n        return \"No\"\n\
    \    }\n    return \"Yes\"", "    let file_name_array = file_name.components(separatedBy:\
    \ \".\")\n    let file_name_array_count = file_name_array.count\n    if file_name_array_count\
    \ != 2 {\n        return \"No\"\n    }\n    let file_name_array_first = file_name_array[0]\n\
    \    let file_name_array_last = file_name_array[1]\n    let file_name_array_first_count\
    \ = file_name_array_first.count\n    let file_name_array_last_count = file_name_array_last.count\n\
    \    if file_name_array_first_count == 0 || file_name_array_last_count == 0 {\n\
    \        return \"No\"\n    }\n    let file_name_array_first_first_char = file_name_array_first[file_name_array_first.startIndex]\n\
    \    if !file_name_array_first_first_char.isLetter {\n        return \"No\"\n\
    \    }\n    let file_name_array_last_array = [\"txt\", \"exe\", \"dll\"]\n   \
    \ if !file_name_array_last_array.contains(file_name_array_last) {\n        return\
    \ \"No\"\n    }\n    let file_name_array_first_number_count = file_name_array_first.filter({$0.isNumber}).count\n\
    \    if file_name_array_first_number_count > 3 {\n        return \"No\"\n    }\n\
    \    return \"Yes\"", "    let file_name_components = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_components.count != 2 {\n        return \"No\"\n  \
    \  }\n    let file_name_components_characters = file_name_components[0].characters\n\
    \    if file_name_components_characters.count == 0 {\n        return \"No\"\n\
    \    }\n    let first_character = file_name_components_characters.first!\n   \
    \ if !(first_character >= \"a\" && first_character <= \"z\" || first_character\
    \ >= \"A\" && first_character <= \"Z\") {\n        return \"No\"\n    }\n    let\
    \ file_name_components_characters_count = file_name_components_characters.count\n\
    \    for i in 1..<file_name_components_characters_count {\n        let character\
    \ = file_name_components_characters[file_name_components_characters_count - i]\n\
    \        if !(character >= \"0\" && character <= \"9\") {\n            return\
    \ \"No\"\n        }\n    }\n    if file_name_components_characters_count > 3 {\n\
    \        return \"No\"\n    }\n    let file_extension = file_name_components[1]\n\
    \    if file_extension != \"txt\" && file_extension != \"exe\" && file_extension\
    \ != \"dll\" {\n        return \"No\"\n    }\n    return \"Yes\"", "    let pattern\
    \ = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    let regex = try! NSRegularExpression(pattern:\
    \ pattern, options: [])\n    let matches = regex.matches(in: file_name, options:\
    \ [], range: NSRange(location: 0, length: file_name.count))\n    return matches.count\
    \ > 0 ? \"Yes\" : \"No\"", "    let file_name_arr = file_name.split(separator:\
    \ \".\")\n    let file_name_arr_count = file_name_arr.count\n    if file_name_arr_count\
    \ != 2 {\n        return \"No\"\n    }\n    let first_part = file_name_arr[0]\n\
    \    let second_part = file_name_arr[1]\n    let first_part_count = first_part.count\n\
    \    let second_part_count = second_part.count\n    if first_part_count == 0 ||\
    \ first_part_count > 10 {\n        return \"No\"\n    }\n    if second_part_count\
    \ == 0 || second_part_count > 3 {\n        return \"No\"\n    }\n    let first_part_first_char\
    \ = first_part[first_part.startIndex]\n    if !first_part_first_char.isLetter\
    \ {\n        return \"No\"\n    }\n    let second_part_lowercased = second_part.lowercased()\n\
    \    if second_part_lowercased != \"txt\" && second_part_lowercased != \"exe\"\
    \ && second_part_lowercased != \"dll\" {\n        return \"No\"\n    }\n    return\
    \ \"Yes\"", "    let file_name_arr = file_name.split(separator: \".\")\n    if\
    \ file_name_arr.count != 2 {\n        return \"No\"\n    }\n    let first_part\
    \ = file_name_arr[0]\n    let second_part = file_name_arr[1]\n    if first_part.count\
    \ == 0 || !first_part.first!.isLetter {\n        return \"No\"\n    }\n    if\
    \ second_part != \"txt\" && second_part != \"exe\" && second_part != \"dll\" {\n\
    \        return \"No\"\n    }\n    var count = 0\n    for c in first_part {\n\
    \        if c.isNumber {\n            count += 1\n        }\n    }\n    if count\
    \ > 3 {\n        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_components\
    \ = file_name.components(separatedBy: \".\")\n    if file_name_components.count\
    \ != 2 {\n        return \"No\"\n    }\n    let name = file_name_components[0]\n\
    \    let extension = file_name_components[1]\n    if !name.isEmpty && name.rangeOfCharacter(from:\
    \ CharacterSet.decimalDigits) == nil &&\n        name.rangeOfCharacter(from: CharacterSet.letters)\
    \ != nil &&\n        [\"txt\", \"exe\", \"dll\"].contains(extension) {\n     \
    \   return \"Yes\"\n    }\n    return \"No\"", "    let fileNameArr = file_name.split(separator:\
    \ \".\")\n    let fileName = fileNameArr[0]\n    let fileExtension = fileNameArr[1]\n\
    \    let fileNameArr2 = fileName.split(separator: \"0\")\n    let fileNameArr3\
    \ = fileName.split(separator: \"1\")\n    let fileNameArr4 = fileName.split(separator:\
    \ \"2\")\n    let fileNameArr5 = fileName.split(separator: \"3\")\n    let fileNameArr6\
    \ = fileName.split(separator: \"4\")\n    let fileNameArr7 = fileName.split(separator:\
    \ \"5\")\n    let fileNameArr8 = fileName.split(separator: \"6\")\n    let fileNameArr9\
    \ = fileName.split(separator: \"7\")\n    let fileNameArr10 = fileName.split(separator:\
    \ \"8\")\n    let fileNameArr11 = fileName.split(separator: \"9\")\n    let fileNameArr12\
    \ = fileName.split(separator: \"a\")\n    let fileNameArr13 = fileName.split(separator:\
    \ \"b\")\n    let fileNameArr14 = fileName.split(separator: \"c\")\n    let fileNameArr15\
    \ = fileName.split(separator: \"d\")\n    let fileNameArr16 = fileName.split(separator:\
    \ \"e\")\n    let fileNameArr17 = fileName.split(separator: \"f\")\n    let fileNameArr18\
    \ = fileName.split(separator: \"g\")\n    let fileNameArr19 = fileName.split(separator:\
    \ \"h\")\n    let fileNameArr20 = fileName.split(separator: \"i\")\n    let fileNameArr21\
    \ = fileName.split(separator: \"j\")\n    let fileNameArr22 = fileName.split(separator:\
    \ \"k\")\n    let fileNameArr23 = fileName.split(separator: \"l\")\n    let fileNameArr24\
    \ = fileName.split(separator: \"m\")\n    let fileNameAr", "    let file_name_arr\
    \ = file_name.components(separatedBy: \".\")\n    let file_name_arr_count = file_name_arr.count\n\
    \    let file_name_arr_first = file_name_arr[0]\n    let file_name_arr_last =\
    \ file_name_arr[file_name_arr_count - 1]\n    let file_name_arr_first_count =\
    \ file_name_arr_first.count\n    let file_name_arr_last_count = file_name_arr_last.count\n\
    \    var file_name_arr_first_digit_count = 0\n    var file_name_arr_first_letter_count\
    \ = 0\n    var file_name_arr_last_digit_count = 0\n    var file_name_arr_last_letter_count\
    \ = 0\n    var file_name_arr_first_digit_count_flag = false\n    var file_name_arr_first_letter_count_flag\
    \ = false\n    var file_name_arr_last_digit_count_flag = false\n    var file_name_arr_last_letter_count_flag\
    \ = false\n    var file_name_arr_last_flag = false\n    for i in 0..<file_name_arr_first_count\
    \ {\n        if file_name_arr_first[i] >= \"0\" && file_name_arr_first[i] <= \"\
    9\" {\n            file_name_arr_first_digit_count += 1\n        }\n        if\
    \ file_name_arr_first[i] >= \"a\" && file_name_arr_first[i] <= \"z\" || file_name_arr_first[i]\
    \ >= \"A\" && file_name_arr_first[i] <= \"Z\" {\n            file_name_arr_first_letter_count\
    \ += 1\n        }\n    }\n    for i in 0..<file_name_arr_last_count {\n      \
    \  if file_name_arr_last[i] >= \"0\" && file_name_arr_last[i] <= \"9\" {\n   \
    \         file_name_arr_last_digit_count += 1\n        }\n        if file_name_arr_last",
  "    let file_name_arr = file_name.components(separatedBy: \".\")\n    if file_name_arr.count\
    \ != 2 {\n        return \"No\"\n    }\n    let file_name_arr_first = file_name_arr[0]\n\
    \    let file_name_arr_second = file_name_arr[1]\n    if file_name_arr_first.count\
    \ == 0 {\n        return \"No\"\n    }\n    if file_name_arr_first.rangeOfCharacter(from:\
    \ CharacterSet.decimalDigits) != nil {\n        return \"No\"\n    }\n    if file_name_arr_first.count\
    \ > 3 {\n        return \"No\"\n    }\n    if file_name_arr_second != \"txt\"\
    \ && file_name_arr_second != \"exe\" && file_name_arr_second != \"dll\" {\n  \
    \      return \"No\"\n    }\n    return \"Yes\"", "    let file_name_regex = \"\
    ^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format:\"\
    SELF MATCHES %@\", file_name_regex)\n    return file_name_test.evaluate(with:\
    \ file_name) ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.(txt|exe|dll)$\"\n    return file_name.matches(file_name_regex) ? \"Yes\" :\
    \ \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    \n    return file_name.matches(file_name_regex) ? \"Yes\" : \"No\"", "    let\
    \ file_name_arr = file_name.components(separatedBy: \".\")\n    if file_name_arr.count\
    \ != 2 {\n        return \"No\"\n    }\n    let file_name_arr_0 = file_name_arr[0]\n\
    \    let file_name_arr_1 = file_name_arr[1]\n    if file_name_arr_0.count == 0\
    \ {\n        return \"No\"\n    }\n    if file_name_arr_1 != \"txt\" && file_name_arr_1\
    \ != \"exe\" && file_name_arr_1 != \"dll\" {\n        return \"No\"\n    }\n \
    \   var count = 0\n    for c in file_name_arr_0 {\n        if c >= \"0\" && c\
    \ <= \"9\" {\n            count += 1\n        }\n    }\n    if count > 3 {\n \
    \       return \"No\"\n    }\n    if file_name_arr_0[file_name_arr_0.startIndex]\
    \ >= \"0\" && file_name_arr_0[file_name_arr_0.startIndex] <= \"9\" {\n       \
    \ return \"No\"\n    }\n    return \"Yes\"", "    let fileNameArr = file_name.components(separatedBy:\
    \ \".\")\n    if fileNameArr.count != 2 {\n        return \"No\"\n    }\n    if\
    \ fileNameArr[0].count == 0 {\n        return \"No\"\n    }\n    let firstChar\
    \ = fileNameArr[0][fileNameArr[0].startIndex]\n    if !(firstChar >= \"a\" &&\
    \ firstChar <= \"z\" || firstChar >= \"A\" && firstChar <= \"Z\") {\n        return\
    \ \"No\"\n    }\n    if fileNameArr[1] != \"txt\" && fileNameArr[1] != \"exe\"\
    \ && fileNameArr[1] != \"dll\" {\n        return \"No\"\n    }\n    var count\
    \ = 0\n    for char in fileNameArr[0] {\n        if char >= \"0\" && char <= \"\
    9\" {\n            count += 1\n        }\n    }\n    if count > 3 {\n        return\
    \ \"No\"\n    }\n    return \"Yes\"", "    let file_name_components = file_name.components(separatedBy:\
    \ \".\")\n    let file_name_without_extension = file_name_components[0]\n    let\
    \ file_name_extension = file_name_components[1]\n    let file_name_without_extension_components\
    \ = file_name_without_extension.components(separatedBy: CharacterSet.decimalDigits)\n\
    \    let file_name_without_extension_without_digits = file_name_without_extension_components.joined(separator:\
    \ \"\")\n    let file_name_without_extension_digits = file_name_without_extension.components(separatedBy:\
    \ CharacterSet.letters).joined(separator: \"\")\n    let file_name_without_extension_letters\
    \ = file_name_without_extension.components(separatedBy: CharacterSet.decimalDigits).joined(separator:\
    \ \"\")\n    let file_name_without_extension_letters_first_letter = file_name_without_extension_letters.prefix(1)\n\
    \    let file_name_without_extension_letters_first_letter_is_latin_alphapet =\
    \ file_name_without_extension_letters_first_letter.rangeOfCharacter(from: CharacterSet.letters)\
    \ != nil\n    let file_name_without_extension_letters_first_letter_is_latin_alphapet_lowercase\
    \ = file_name_without_extension_letters_first_letter.rangeOfCharacter(from: CharacterSet.lowercaseLetters)\
    \ != nil\n    let file_name_without_extension_letters_first_letter_is_latin_alphapet_uppercase\
    \ = file_name_without_extension_letters_first_letter.rangeOfCharacter(from: CharacterSet.uppercaseLetters)\
    \ != nil\n    let file_name_without_extension_letters_first_letter_is_latin_alphapet_lowercase_or_uppercase\
    \ = file_name_without_extension_letters_first_letter_is_latin_alphapet_lowercase\
    \ || file_name_without_extension_letters_", "    let file_name_arr = file_name.components(separatedBy:\
    \ \".\")\n    let file_name_arr_count = file_name_arr.count\n    if file_name_arr_count\
    \ != 2 {\n        return \"No\"\n    }\n    let file_name_arr_first = file_name_arr[0]\n\
    \    let file_name_arr_last = file_name_arr[1]\n    let file_name_arr_first_count\
    \ = file_name_arr_first.count\n    let file_name_arr_last_count = file_name_arr_last.count\n\
    \    if file_name_arr_first_count == 0 || file_name_arr_last_count == 0 {\n  \
    \      return \"No\"\n    }\n    let file_name_arr_first_first = file_name_arr_first[file_name_arr_first.startIndex]\n\
    \    if !(file_name_arr_first_first >= \"a\" && file_name_arr_first_first <= \"\
    z\" || file_name_arr_first_first >= \"A\" && file_name_arr_first_first <= \"Z\"\
    ) {\n        return \"No\"\n    }\n    let file_name_arr_first_digits_count =\
    \ file_name_arr_first.filter { $0 >= \"0\" && $0 <= \"9\" }.count\n    if file_name_arr_first_digits_count\
    \ > 3 {\n        return \"No\"\n    }\n    if file_name_arr_last != \"txt\" &&\
    \ file_name_arr_last != \"exe\" && file_name_arr_last != \"dll\" {\n        return\
    \ \"No\"\n    }\n    return \"Yes\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format:\"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.(txt|exe|dll)$\"\n    return file_name.matches(file_name_regex) ? \"Yes\" :\
    \ \"No\"", "    let file_name_components = file_name.components(separatedBy: \"\
    .\")\n    let file_name_without_extension = file_name_components[0]\n    let file_name_extension\
    \ = file_name_components[1]\n    let file_name_without_extension_components =\
    \ file_name_without_extension.components(separatedBy: CharacterSet.decimalDigits)\n\
    \    let file_name_without_extension_without_digits = file_name_without_extension_components.joined(separator:\
    \ \"\")\n    let file_name_without_extension_digits = file_name_without_extension.components(separatedBy:\
    \ CharacterSet.letters).joined(separator: \"\")\n    let file_name_without_extension_letters\
    \ = file_name_without_extension.components(separatedBy: CharacterSet.decimalDigits).joined(separator:\
    \ \"\")\n    if file_name_without_extension_digits.count > 3 {\n        return\
    \ \"No\"\n    }\n    if file_name_without_extension_without_digits.count == 0\
    \ {\n        return \"No\"\n    }\n    if !file_name_without_extension_letters.hasPrefix(\"\
    a\") && !file_name_without_extension_letters.hasPrefix(\"b\") && !file_name_without_extension_letters.hasPrefix(\"\
    c\") && !file_name_without_extension_letters.hasPrefix(\"d\") && !file_name_without_extension_letters.hasPrefix(\"\
    e\") && !file_name_without_extension_letters.hasPrefix(\"f\") && !file_name_without_extension_letters.hasPrefix(\"\
    g\") && !file_name_without_extension_letters.hasPrefix(\"h\") && !file_name_without_extension_letters.hasPrefix(\"\
    i\") && !file_name_without_extension_letters.hasPrefix(\"j\") && !file_name_without_extension_letters.hasPrefix(\"\
    k\") && !file_name_without_extension_letters.hasPrefix(\"", "    let file_name_arr\
    \ = file_name.components(separatedBy: \".\")\n    if file_name_arr.count != 2\
    \ {\n        return \"No\"\n    }\n    let first_part = file_name_arr[0]\n   \
    \ let second_part = file_name_arr[1]\n    let first_part_arr = Array(first_part)\n\
    \    let second_part_arr = Array(second_part)\n    if first_part_arr.count ==\
    \ 0 || !(first_part_arr[0] >= \"a\" && first_part_arr[0] <= \"z\" || first_part_arr[0]\
    \ >= \"A\" && first_part_arr[0] <= \"Z\") {\n        return \"No\"\n    }\n  \
    \  if second_part_arr.count == 0 || !(second_part_arr[0] >= \"a\" && second_part_arr[0]\
    \ <= \"z\" || second_part_arr[0] >= \"A\" && second_part_arr[0] <= \"Z\") {\n\
    \        return \"No\"\n    }\n    if second_part_arr.count > 3 {\n        return\
    \ \"No\"\n    }\n    if second_part_arr.count == 3 && !(second_part_arr[0] ==\
    \ \"t\" && second_part_arr[1] == \"x\" && second_part_arr[2] == \"t\" || second_part_arr[0]\
    \ == \"e\" && second_part_arr[1] == \"x\" && second_part_arr[2] == \"e\" || second_part_arr[0]\
    \ == \"d\" && second_part_arr[1] == \"l\" && second_part_arr[2] == \"l\") {\n\
    \        return \"No\"\n    }\n    if second_part_arr.count == 2 && !(second_part_arr[0]\
    \ == \"t\" && second_part_arr[1] == \"x\" || second_part_arr[0] == \"e\" && second_part_arr[1]\
    \ == \"x\" || second_part_arr[0] == \"d\" && second_part_arr[1] == \"l\") {",
  "    let file_name_arr = file_name.components(separatedBy: \".\")\n    let file_name_arr_count\
    \ = file_name_arr.count\n    let file_name_arr_first = file_name_arr[0]\n    let\
    \ file_name_arr_last = file_name_arr[file_name_arr_count - 1]\n    let file_name_arr_first_count\
    \ = file_name_arr_first.count\n    let file_name_arr_last_count = file_name_arr_last.count\n\
    \    let file_name_arr_first_first = file_name_arr_first[file_name_arr_first.startIndex]\n\
    \    let file_name_arr_last_first = file_name_arr_last[file_name_arr_last.startIndex]\n\
    \    let file_name_arr_first_last = file_name_arr_first[file_name_arr_first.index(before:\
    \ file_name_arr_first.endIndex)]\n    let file_name_arr_last_last = file_name_arr_last[file_name_arr_last.index(before:\
    \ file_name_arr_last.endIndex)]\n    let file_name_arr_first_last_second = file_name_arr_first[file_name_arr_first.index(file_name_arr_first.startIndex,\
    \ offsetBy: 2)]\n    let file_name_arr_last_last_second = file_name_arr_last[file_name_arr_last.index(file_name_arr_last.startIndex,\
    \ offsetBy: 2)]\n    let file_name_arr_first_last_third = file_name_arr_first[file_name_arr_first.index(file_name_arr_first.startIndex,\
    \ offsetBy: 3)]\n    let file_name_arr_last_last_third = file_name_arr_last[file_name_arr_last.index(file_name_arr_last.startIndex,\
    \ offsetBy: 3)]\n    let file_name_arr_first_last_fourth = file_name_arr_first[file_name_arr_first.index(file",
  "    let fileName = file_name\n    let fileNameArray = fileName.components(separatedBy:\
    \ \".\")\n    let fileNameArrayCount = fileNameArray.count\n    let fileNameArrayFirst\
    \ = fileNameArray[0]\n    let fileNameArrayLast = fileNameArray[fileNameArrayCount\
    \ - 1]\n    let fileNameArrayFirstCount = fileNameArrayFirst.count\n    let fileNameArrayLastCount\
    \ = fileNameArrayLast.count\n    let fileNameArrayFirstChar = fileNameArrayFirst[fileNameArrayFirst.startIndex]\n\
    \    let fileNameArrayLastChar = fileNameArrayLast[fileNameArrayLast.startIndex]\n\
    \    let fileNameArrayFirstCharInt = fileNameArrayFirstChar.wholeNumberValue\n\
    \    let fileNameArrayLastCharInt = fileNameArrayLastChar.wholeNumberValue\n \
    \   let fileNameArrayFirstCharIntCount = fileNameArrayFirstCharInt?.count\n  \
    \  let fileNameArrayLastCharIntCount = fileNameArrayLastCharInt?.count\n    let\
    \ fileNameArrayFirstCharIntCountInt = Int(fileNameArrayFirstCharIntCount!)\n \
    \   let fileNameArrayLastCharIntCountInt = Int(fileNameArrayLastCharIntCount!)\n\
    \    let fileNameArrayFirstCharIntCountIntCount = fileNameArrayFirstCharIntCountInt!\n\
    \    let fileNameArrayLastCharIntCountIntCount = fileNameArrayLastCharIntCountInt!\n\
    \    let fileNameArrayFirstCharIntCountIntCountCount = fileNameArrayFirstCharIntCountIntCount\n\
    \    let fileNameArrayLastCharIntCountIntCountCount = fileNameArrayLastCharIntCountIntCount\n\
    \    let fileNameArrayFirstCharIntCountIntCountCountCount = fileNameArrayFirstCharIntCountIntCountCount\n\
    \    let fileNameArrayLastCharIntCountIntCountCountCount = fileNameArrayLastCharIntCountIntCountCount\n\
    \    let fileNameArrayFirstCharIntCountIntCountCountCountCount = fileNameArrayFirstCharIntCountIntCountCountCount\n\
    \    let fileNameArrayLastCharIntCountIntCountCountCountCount = fileNameArrayLastCharIntCountIntCountCountCount\n\
    \    let fileNameArrayFirstCharIntCountIntCountCountCountCountCount = fileNameArrayFirstCharIntCountIntCountCountCountCount\n\
    \    let fileNameArrayLastCharIntCountIntCountCountCountCountCount =", "    let\
    \ file_name_arr = file_name.components(separatedBy: \".\")\n    if file_name_arr.count\
    \ != 2 {\n        return \"No\"\n    }\n    let file_name_first = file_name_arr[0]\n\
    \    let file_name_second = file_name_arr[1]\n    if file_name_first.count ==\
    \ 0 || file_name_second.count == 0 {\n        return \"No\"\n    }\n    if file_name_first.count\
    \ > 3 {\n        return \"No\"\n    }\n    let file_name_first_arr = Array(file_name_first)\n\
    \    if file_name_first_arr[0] < \"a\" || file_name_first_arr[0] > \"z\" {\n \
    \       return \"No\"\n    }\n    if file_name_second != \"txt\" && file_name_second\
    \ != \"exe\" && file_name_second != \"dll\" {\n        return \"No\"\n    }\n\
    \    return \"Yes\"", "    let file_name_arr = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n  \
    \  let file_name_before_dot = file_name_arr[0]\n    let file_name_after_dot =\
    \ file_name_arr[1]\n    if file_name_before_dot.count == 0 {\n        return \"\
    No\"\n    }\n    if file_name_after_dot != \"txt\" && file_name_after_dot != \"\
    exe\" && file_name_after_dot != \"dll\" {\n        return \"No\"\n    }\n    var\
    \ count_of_digits = 0\n    for char in file_name_before_dot {\n        if char\
    \ >= \"0\" && char <= \"9\" {\n            count_of_digits += 1\n        }\n \
    \   }\n    if count_of_digits > 3 {\n        return \"No\"\n    }\n    if file_name_before_dot[file_name_before_dot.startIndex]\
    \ >= \"0\" && file_name_before_dot[file_name_before_dot.startIndex] <= \"9\" {\n\
    \        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_arr = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n  \
    \  let file_name_arr_1 = file_name_arr[0]\n    let file_name_arr_2 = file_name_arr[1]\n\
    \    if file_name_arr_1.count == 0 || !file_name_arr_1.contains(where: { $0 >=\
    \ \"a\" && $0 <= \"z\" || $0 >= \"A\" && $0 <= \"Z\" }) {\n        return \"No\"\
    \n    }\n    if file_name_arr_2 != \"txt\" && file_name_arr_2 != \"exe\" && file_name_arr_2\
    \ != \"dll\" {\n        return \"No\"\n    }\n    if file_name_arr_1.contains(where:\
    \ { $0 >= \"0\" && $0 <= \"9\" }) {\n        var count = 0\n        for c in file_name_arr_1\
    \ {\n            if c >= \"0\" && c <= \"9\" {\n                count += 1\n \
    \           }\n        }\n        if count > 3 {\n            return \"No\"\n\
    \        }\n    }\n    return \"Yes\"", "    let file_name_arr = file_name.components(separatedBy:\
    \ \".\")\n    let file_name_arr_count = file_name_arr.count\n    if file_name_arr_count\
    \ != 2 {\n        return \"No\"\n    }\n    let file_name_arr_first = file_name_arr[0]\n\
    \    let file_name_arr_last = file_name_arr[1]\n    let file_name_arr_first_count\
    \ = file_name_arr_first.count\n    let file_name_arr_last_count = file_name_arr_last.count\n\
    \    if file_name_arr_first_count == 0 || file_name_arr_last_count == 0 {\n  \
    \      return \"No\"\n    }\n    let file_name_arr_first_first = file_name_arr_first[file_name_arr_first.startIndex]\n\
    \    if !(file_name_arr_first_first >= \"a\" && file_name_arr_first_first <= \"\
    z\" || file_name_arr_first_first >= \"A\" && file_name_arr_first_first <= \"Z\"\
    ) {\n        return \"No\"\n    }\n    var file_name_arr_first_digit_count = 0\n\
    \    for char in file_name_arr_first {\n        if char >= \"0\" && char <= \"\
    9\" {\n            file_name_arr_first_digit_count += 1\n        }\n    }\n  \
    \  if file_name_arr_first_digit_count > 3 {\n        return \"No\"\n    }\n  \
    \  if file_name_arr_last != \"txt\" && file_name_arr_last != \"exe\" && file_name_arr_last\
    \ != \"dll\" {\n        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_arr\
    \ = file_name.components(separatedBy: \".\")\n    if file_name_arr.count != 2\
    \ {\n        return \"No\"\n    }\n    let first_part = file_name_arr[0]\n   \
    \ let second_part = file_name_arr[1]\n    if !first_part.is_valid_first_part()\
    \ || !second_part.is_valid_second_part() {\n        return \"No\"\n    }\n   \
    \ return \"Yes\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\\
    .(txt|exe|dll)$\"\n    return file_name.matches(file_name_regex) ? \"Yes\" : \"\
    No\"", "    let file_name_array = file_name.components(separatedBy: \".\")\n \
    \   if file_name_array.count != 2 {\n        return \"No\"\n    }\n    let file_name_before_dot\
    \ = file_name_array[0]\n    let file_name_after_dot = file_name_array[1]\n   \
    \ if file_name_before_dot.count == 0 {\n        return \"No\"\n    }\n    if file_name_after_dot\
    \ != \"txt\" && file_name_after_dot != \"exe\" && file_name_after_dot != \"dll\"\
    \ {\n        return \"No\"\n    }\n    let first_char = file_name_before_dot[file_name_before_dot.startIndex]\n\
    \    if !(first_char >= \"a\" && first_char <= \"z\" || first_char >= \"A\" &&\
    \ first_char <= \"Z\") {\n        return \"No\"\n    }\n    var digit_count =\
    \ 0\n    for char in file_name_before_dot {\n        if char >= \"0\" && char\
    \ <= \"9\" {\n            digit_count += 1\n        }\n    }\n    if digit_count\
    \ > 3 {\n        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_arr\
    \ = file_name.components(separatedBy: \".\")\n    if file_name_arr.count != 2\
    \ {\n        return \"No\"\n    }\n    let file_name_arr_1 = file_name_arr[0]\n\
    \    let file_name_arr_2 = file_name_arr[1]\n    if file_name_arr_1.count == 0\
    \ || file_name_arr_2.count == 0 {\n        return \"No\"\n    }\n    let file_name_arr_1_arr\
    \ = Array(file_name_arr_1)\n    let file_name_arr_2_arr = Array(file_name_arr_2)\n\
    \    var count = 0\n    for i in file_name_arr_1_arr {\n        if i >= \"0\"\
    \ && i <= \"9\" {\n            count += 1\n        }\n    }\n    if count > 3\
    \ {\n        return \"No\"\n    }\n    if file_name_arr_1_arr[0] < \"a\" || file_name_arr_1_arr[0]\
    \ > \"z\" {\n        if file_name_arr_1_arr[0] < \"A\" || file_name_arr_1_arr[0]\
    \ > \"Z\" {\n            return \"No\"\n        }\n    }\n    if file_name_arr_2_arr[0]\
    \ < \"a\" || file_name_arr_2_arr[0] > \"z\" {\n        if file_name_arr_2_arr[0]\
    \ < \"A\" || file_name_arr_2_arr[0] > \"Z\" {\n            return \"No\"\n   \
    \     }\n    }\n    if file_name_arr_2_arr[1] < \"a\" || file_name_arr_2_arr[1]\
    \ > \"z\" {\n        if file_name_arr_2_arr[1] < \"A\" || file_name_arr_2_arr[1]\
    \ > \"Z\" {\n            return \"No\"\n        }\n    }\n    if file_name_arr_2_arr[2]\
    \ < \"a\" || file_name_arr_2", "    // your code here\n    return \"\"", "   \
    \ // Write your code here\n    return \"\"", "    let file_name_components = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_components.count != 2 {\n        return \"No\"\n  \
    \  }\n    let file_name_components_0 = file_name_components[0]\n    let file_name_components_1\
    \ = file_name_components[1]\n    if file_name_components_0.count == 0 {\n    \
    \    return \"No\"\n    }\n    if file_name_components_0.rangeOfCharacter(from:\
    \ CharacterSet.decimalDigits) != nil {\n        return \"No\"\n    }\n    if file_name_components_0.rangeOfCharacter(from:\
    \ CharacterSet.letters) == nil {\n        return \"No\"\n    }\n    if file_name_components_1\
    \ != \"txt\" && file_name_components_1 != \"exe\" && file_name_components_1 !=\
    \ \"dll\" {\n        return \"No\"\n    }\n    return \"Yes\"", "    // Write\
    \ your code here\n    return \"\"", "    let file_name_components = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_components.count != 2 {\n        return \"No\"\n  \
    \  }\n    let file_name_prefix = file_name_components[0]\n    let file_name_suffix\
    \ = file_name_components[1]\n    if file_name_prefix.count == 0 {\n        return\
    \ \"No\"\n    }\n    if file_name_suffix != \"txt\" && file_name_suffix != \"\
    exe\" && file_name_suffix != \"dll\" {\n        return \"No\"\n    }\n    var\
    \ digit_count = 0\n    for c in file_name_prefix {\n        if c >= \"0\" && c\
    \ <= \"9\" {\n            digit_count += 1\n        }\n    }\n    if digit_count\
    \ > 3 {\n        return \"No\"\n    }\n    if file_name_prefix[file_name_prefix.startIndex]\
    \ >= \"0\" && file_name_prefix[file_name_prefix.startIndex] <= \"9\" {\n     \
    \   return \"No\"\n    }\n    return \"Yes\"", "    // Write your code here\n\
    \    return \"\"", "    let file_name_arr = file_name.components(separatedBy:\
    \ \".\")\n    let file_name_arr_count = file_name_arr.count\n    if file_name_arr_count\
    \ != 2 {\n        return \"No\"\n    }\n    let file_name_arr_0 = file_name_arr[0]\n\
    \    let file_name_arr_1 = file_name_arr[1]\n    if file_name_arr_0.count == 0\
    \ {\n        return \"No\"\n    }\n    if file_name_arr_1.count == 0 {\n     \
    \   return \"No\"\n    }\n    if file_name_arr_1 != \"txt\" && file_name_arr_1\
    \ != \"exe\" && file_name_arr_1 != \"dll\" {\n        return \"No\"\n    }\n \
    \   let file_name_arr_0_arr = Array(file_name_arr_0)\n    var digit_count = 0\n\
    \    for char in file_name_arr_0_arr {\n        if char >= \"0\" && char <= \"\
    9\" {\n            digit_count += 1\n        }\n    }\n    if digit_count > 3\
    \ {\n        return \"No\"\n    }\n    if file_name_arr_0_arr[0] < \"A\" || (file_name_arr_0_arr[0]\
    \ > \"Z\" && file_name_arr_0_arr[0] < \"a\") || file_name_arr_0_arr[0] > \"z\"\
    \ {\n        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_arr\
    \ = file_name.components(separatedBy: \".\")\n    let file_name_arr_count = file_name_arr.count\n\
    \    let file_name_arr_first = file_name_arr[0]\n    let file_name_arr_last =\
    \ file_name_arr[file_name_arr_count - 1]\n    let file_name_arr_first_count =\
    \ file_name_arr_first.count\n    let file_name_arr_last_count = file_name_arr_last.count\n\
    \    var file_name_arr_first_digit_count = 0\n    var file_name_arr_first_letter_count\
    \ = 0\n    var file_name_arr_last_letter_count = 0\n    var file_name_arr_last_digit_count\
    \ = 0\n    var file_name_arr_first_letter_check = false\n    var file_name_arr_last_letter_check\
    \ = false\n    var file_name_arr_last_check = false\n    var file_name_arr_first_digit_check\
    \ = false\n    var file_name_arr_last_digit_check = false\n    var file_name_arr_first_check\
    \ = false\n    var file_name_arr_last_check_arr = [\"txt\", \"exe\", \"dll\"]\n\
    \    var file_name_arr_last_check_arr_count = file_name_arr_last_check_arr.count\n\
    \    var file_name_arr_last_check_arr_check = false\n    var file_name_arr_last_check_arr_check_count\
    \ = 0\n    var file_name_arr_last_check_arr_check_count_check = false\n    var\
    \ file_name_arr_last_check_arr_check_count_check_count = 0\n    var file_name_arr_last_check_arr_check_count_check_count_check\
    \ = false\n    var file_name_arr_last_check_arr_check_count_check_count_check_count\
    \ = 0\n    var file_name_arr_last_check_arr_check_count_check_count_check_count_check\
    \ = false\n    var file", "    let file_name_components = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_components.count != 2 {\n        return \"No\"\n  \
    \  }\n    let file_name_prefix = file_name_components[0]\n    let file_name_suffix\
    \ = file_name_components[1]\n    if !file_name_prefix.isEmpty && file_name_prefix.rangeOfCharacter(from:\
    \ CharacterSet.decimalDigits) == nil && file_name_prefix.rangeOfCharacter(from:\
    \ CharacterSet.letters) != nil && file_name_suffix == \"txt\" || file_name_suffix\
    \ == \"exe\" || file_name_suffix == \"dll\" {\n        return \"Yes\"\n    }\n\
    \    return \"No\"", "    let file_name_arr = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n  \
    \  let file_name_arr_1 = file_name_arr[0]\n    let file_name_arr_2 = file_name_arr[1]\n\
    \    if file_name_arr_1.count == 0 || file_name_arr_2.count == 0 {\n        return\
    \ \"No\"\n    }\n    if file_name_arr_1.rangeOfCharacter(from: CharacterSet.decimalDigits)\
    \ != nil {\n        return \"No\"\n    }\n    if file_name_arr_2.count > 3 {\n\
    \        return \"No\"\n    }\n    if file_name_arr_2 != \"txt\" && file_name_arr_2\
    \ != \"exe\" && file_name_arr_2 != \"dll\" {\n        return \"No\"\n    }\n \
    \   return \"Yes\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\\
    .(txt|exe|dll)$\"\n    return file_name.matches(file_name_regex) ? \"Yes\" : \"\
    No\"", "    let file_name_arr = file_name.split(separator: \".\")\n    let file_name_arr_count\
    \ = file_name_arr.count\n    let file_name_arr_first = file_name_arr[0]\n    let\
    \ file_name_arr_last = file_name_arr[file_name_arr_count - 1]\n    let file_name_arr_first_count\
    \ = file_name_arr_first.count\n    let file_name_arr_last_count = file_name_arr_last.count\n\
    \    let file_name_arr_first_first = file_name_arr_first[file_name_arr_first.startIndex]\n\
    \    let file_name_arr_last_first = file_name_arr_last[file_name_arr_last.startIndex]\n\
    \    let file_name_arr_last_last = file_name_arr_last[file_name_arr_last.index(before:\
    \ file_name_arr_last.endIndex)]\n    let file_name_arr_last_last_last = file_name_arr_last[file_name_arr_last.index(file_name_arr_last.endIndex,\
    \ offsetBy: -2)]\n    let file_name_arr_last_last_last_last = file_name_arr_last[file_name_arr_last.index(file_name_arr_last.endIndex,\
    \ offsetBy: -3)]\n    let file_name_arr_last_last_last_last_last = file_name_arr_last[file_name_arr_last.index(file_name_arr_last.endIndex,\
    \ offsetBy: -4)]\n    let file_name_arr_last_last_last_last_last_last = file_name_arr_last[file_name_arr_last.index(file_name_arr_last.endIndex,\
    \ offsetBy: -5)]\n    let file_name_arr_last_last_last_last_last_last_last = file_name_arr_last[file_name_arr_last.index(file_name_arr_last.endIndex,\
    \ offsetBy: -6)]\n    let file_name", "    let file_name_arr = file_name.split(separator:\
    \ \".\")\n    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n  \
    \  let first_part = file_name_arr[0]\n    let second_part = file_name_arr[1]\n\
    \    if first_part.count == 0 || !first_part.first!.isLetter {\n        return\
    \ \"No\"\n    }\n    if second_part != \"txt\" && second_part != \"exe\" && second_part\
    \ != \"dll\" {\n        return \"No\"\n    }\n    if first_part.filter({$0.isNumber}).count\
    \ > 3 {\n        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_arr\
    \ = file_name.split(separator: \".\")\n    if file_name_arr.count != 2 {\n   \
    \     return \"No\"\n    }\n    let first_part = file_name_arr[0]\n    let second_part\
    \ = file_name_arr[1]\n    if !first_part.isEmpty && first_part.rangeOfCharacter(from:\
    \ CharacterSet.decimalDigits) == nil {\n        if second_part == \"txt\" || second_part\
    \ == \"exe\" || second_part == \"dll\" {\n            return \"Yes\"\n       \
    \ }\n    }\n    return \"No\"", "    let file_name_arr = file_name.split(separator:\
    \ \".\")\n    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n  \
    \  let first_part = file_name_arr[0]\n    let second_part = file_name_arr[1]\n\
    \    if !first_part.isEmpty && first_part.first!.isLetter && first_part.filter({\
    \ $0.isNumber }).count <= 3 && [\"txt\", \"exe\", \"dll\"].contains(second_part)\
    \ {\n        return \"Yes\"\n    }\n    return \"No\"", "    let file_name_components\
    \ = file_name.components(separatedBy: \".\")\n    if file_name_components.count\
    \ != 2 {\n        return \"No\"\n    }\n    let file_name_before_dot = file_name_components[0]\n\
    \    let file_name_after_dot = file_name_components[1]\n    if file_name_before_dot.count\
    \ == 0 {\n        return \"No\"\n    }\n    if file_name_before_dot.count > 3\
    \ {\n        return \"No\"\n    }\n    if file_name_before_dot.rangeOfCharacter(from:\
    \ CharacterSet.decimalDigits) != nil {\n        return \"No\"\n    }\n    if file_name_after_dot\
    \ != \"txt\" && file_name_after_dot != \"exe\" && file_name_after_dot != \"dll\"\
    \ {\n        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_arr\
    \ = file_name.components(separatedBy: \".\")\n    let file_name_arr_count = file_name_arr.count\n\
    \    if file_name_arr_count != 2 {\n        return \"No\"\n    }\n    let file_name_arr_first\
    \ = file_name_arr[0]\n    let file_name_arr_last = file_name_arr[1]\n    let file_name_arr_first_count\
    \ = file_name_arr_first.count\n    let file_name_arr_last_count = file_name_arr_last.count\n\
    \    if file_name_arr_first_count == 0 || file_name_arr_last_count == 0 {\n  \
    \      return \"No\"\n    }\n    let file_name_arr_first_first = file_name_arr_first[file_name_arr_first.startIndex]\n\
    \    let file_name_arr_last_first = file_name_arr_last[file_name_arr_last.startIndex]\n\
    \    if !file_name_arr_first_first.isLetter {\n        return \"No\"\n    }\n\
    \    if !file_name_arr_last_first.isLetter {\n        return \"No\"\n    }\n \
    \   let file_name_arr_first_digits = file_name_arr_first.filter { $0.isNumber\
    \ }\n    let file_name_arr_last_digits = file_name_arr_last.filter { $0.isNumber\
    \ }\n    let file_name_arr_first_digits_count = file_name_arr_first_digits.count\n\
    \    let file_name_arr_last_digits_count = file_name_arr_last_digits.count\n \
    \   if file_name_arr_first_digits_count > 3 || file_name_arr_last_digits_count\
    \ > 3 {\n        return \"No\"\n    }\n    let file_name_arr_last_lowercased =\
    \ file_name_arr_last.lowercased()\n    if file_name_arr_last_lowercased != \"\
    txt\" && file_name_arr_last_lowercased !=", "    let file_name_arr = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n  \
    \  let file_name_arr_0 = file_name_arr[0]\n    let file_name_arr_1 = file_name_arr[1]\n\
    \    let file_name_arr_0_arr = file_name_arr_0.components(separatedBy: CharacterSet.decimalDigits.inverted)\n\
    \    if file_name_arr_0_arr.count > 1 {\n        return \"No\"\n    }\n    let\
    \ file_name_arr_0_arr_0 = file_name_arr_0_arr[0]\n    if file_name_arr_0_arr_0.count\
    \ > 3 {\n        return \"No\"\n    }\n    let file_name_arr_0_arr_0_arr = file_name_arr_0_arr_0.components(separatedBy:\
    \ CharacterSet.letters.inverted)\n    if file_name_arr_0_arr_0_arr.count > 1 {\n\
    \        return \"No\"\n    }\n    if file_name_arr_1 != \"txt\" && file_name_arr_1\
    \ != \"exe\" && file_name_arr_1 != \"dll\" {\n        return \"No\"\n    }\n \
    \   return \"Yes\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\\
    .(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format:\"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let file_name_arr = file_name.components(separatedBy:\
    \ \".\")\n    let file_name_arr_count = file_name_arr.count\n    let file_name_arr_first\
    \ = file_name_arr[0]\n    let file_name_arr_last = file_name_arr[file_name_arr_count\
    \ - 1]\n    let file_name_arr_first_count = file_name_arr_first.count\n    let\
    \ file_name_arr_last_count = file_name_arr_last.count\n    let file_name_arr_first_arr\
    \ = Array(file_name_arr_first)\n    let file_name_arr_last_arr = Array(file_name_arr_last)\n\
    \    var file_name_arr_first_arr_count = 0\n    var file_name_arr_last_arr_count\
    \ = 0\n    for i in 0..<file_name_arr_first_count {\n        if file_name_arr_first_arr[i]\
    \ >= \"0\" && file_name_arr_first_arr[i] <= \"9\" {\n            file_name_arr_first_arr_count\
    \ += 1\n        }\n    }\n    for i in 0..<file_name_arr_last_count {\n      \
    \  if file_name_arr_last_arr[i] >= \"0\" && file_name_arr_last_arr[i] <= \"9\"\
    \ {\n            file_name_arr_last_arr_count += 1\n        }\n    }\n    if file_name_arr_count\
    \ != 2 || file_name_arr_first_arr_count > 3 || file_name_arr_first_arr[0] < \"\
    a\" || file_name_arr_first_arr[0] > \"z\" || file_name_arr_first_arr[0] < \"A\"\
    \ || file_name_arr_first_arr[0] > \"Z\" || (file_name_arr_last != \"txt\" && file_name_arr_last\
    \ != \"exe\" && file_name_arr_last != \"dll\") {\n        return \"No\"\n    }\n\
    \    return \"Yes\"", "    let file_name_arr = file_name.components(separatedBy:\
    \ \".\")\n    let file_name_arr_count = file_name_arr.count\n    let file_name_arr_first\
    \ = file_name_arr[0]\n    let file_name_arr_last = file_name_arr[file_name_arr_count\
    \ - 1]\n    let file_name_arr_first_count = file_name_arr_first.count\n    let\
    \ file_name_arr_last_count = file_name_arr_last.count\n    var file_name_arr_first_digit_count\
    \ = 0\n    var file_name_arr_first_letter_count = 0\n    var file_name_arr_last_digit_count\
    \ = 0\n    var file_name_arr_last_letter_count = 0\n    var file_name_arr_first_first_letter\
    \ = \"\"\n    var file_name_arr_last_first_letter = \"\"\n    var file_name_arr_last_second_letter\
    \ = \"\"\n    var file_name_arr_last_third_letter = \"\"\n    var file_name_arr_last_first_letter_ascii\
    \ = 0\n    var file_name_arr_last_second_letter_ascii = 0\n    var file_name_arr_last_third_letter_ascii\
    \ = 0\n    var file_name_arr_first_first_letter_ascii = 0\n    var file_name_arr_first_second_letter_ascii\
    \ = 0\n    var file_name_arr_first_third_letter_ascii = 0\n    var file_name_arr_first_first_letter_ascii_lower\
    \ = 0\n    var file_name_arr_first_second_letter_ascii_lower = 0\n    var file_name_arr_first_third_letter_ascii_lower\
    \ = 0\n    var file_name_arr_last_first_letter_ascii_lower = 0\n    var file_name_arr_last_second_letter_ascii_lower\
    \ = 0\n    var file_name_arr_last_third_letter_ascii_lower = 0\n   ", "    //\
    \ Write your code here\n    return \"\"", "    let file_name_characters = Array(file_name)\n\
    \    var number_of_digits = 0\n    var number_of_dots = 0\n    var number_of_letters\
    \ = 0\n    var number_of_other_characters = 0\n    var number_of_letters_before_dot\
    \ = 0\n    var number_of_letters_after_dot = 0\n    var number_of_letters_after_dot_txt\
    \ = 0\n    var number_of_letters_after_dot_exe = 0\n    var number_of_letters_after_dot_dll\
    \ = 0\n    for character in file_name_characters {\n        if character >= \"\
    0\" && character <= \"9\" {\n            number_of_digits += 1\n        } else\
    \ if character == \".\" {\n            number_of_dots += 1\n        } else if\
    \ character >= \"a\" && character <= \"z\" || character >= \"A\" && character\
    \ <= \"Z\" {\n            number_of_letters += 1\n            if number_of_dots\
    \ == 0 {\n                number_of_letters_before_dot += 1\n            } else\
    \ {\n                number_of_letters_after_dot += 1\n                if number_of_letters_after_dot\
    \ == 3 {\n                    if file_name_characters[file_name_characters.count\
    \ - 3] == \"t\" && file_name_characters[file_name_characters.count - 2] == \"\
    x\" && file_name_characters[file_name_characters.count - 1] == \"t\" {\n     \
    \                   number_of_letters_after_dot_txt += 1\n                   \
    \ } else if file_name_characters[file_name_characters.count - 3] == \"e\" && file_name_characters[file_name_characters.count\
    \ - 2] == \"x\" && file_name_characters[file_name_characters.count - 1] == \"\
    e\" {\n                        number_of_letters_after_dot_exe += 1\n        \
    \            } else if file_name_characters[file_name_characters.count - 3] ==\
    \ \"d\" && file_name_characters[file_name_characters.count - 2]", "    let file_name_arr\
    \ = file_name.components(separatedBy: \".\")\n    let file_name_arr_count = file_name_arr.count\n\
    \    let file_name_arr_first = file_name_arr[0]\n    let file_name_arr_last =\
    \ file_name_arr[file_name_arr_count - 1]\n    let file_name_arr_first_count =\
    \ file_name_arr_first.count\n    let file_name_arr_last_count = file_name_arr_last.count\n\
    \    let file_name_arr_first_first = file_name_arr_first[file_name_arr_first.startIndex]\n\
    \    let file_name_arr_last_first = file_name_arr_last[file_name_arr_last.startIndex]\n\
    \    let file_name_arr_last_last = file_name_arr_last[file_name_arr_last.index(before:\
    \ file_name_arr_last.endIndex)]\n    let file_name_arr_last_last_last = file_name_arr_last[file_name_arr_last.index(file_name_arr_last.endIndex,\
    \ offsetBy: -2)]\n    let file_name_arr_last_last_last_last = file_name_arr_last[file_name_arr_last.index(file_name_arr_last.endIndex,\
    \ offsetBy: -3)]\n    let file_name_arr_last_last_last_last_last = file_name_arr_last[file_name_arr_last.index(file_name_arr_last.endIndex,\
    \ offsetBy: -4)]\n    let file_name_arr_last_last_last_last_last_last = file_name_arr_last[file_name_arr_last.index(file_name_arr_last.endIndex,\
    \ offsetBy: -5)]\n    let file_name_arr_last_last_last_last_last_last_last = file_name_arr_last[file_name_arr_last.index(file_name_arr_last.endIndex,\
    \ offsetBy: -6)]\n    let file", "    let file_name_arr = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n  \
    \  let first_part = file_name_arr[0]\n    let second_part = file_name_arr[1]\n\
    \    if first_part.count == 0 || first_part.rangeOfCharacter(from: CharacterSet.decimalDigits)\
    \ != nil {\n        return \"No\"\n    }\n    if second_part != \"txt\" && second_part\
    \ != \"exe\" && second_part != \"dll\" {\n        return \"No\"\n    }\n    if\
    \ first_part.rangeOfCharacter(from: CharacterSet.decimalDigits) != nil {\n   \
    \     let digits = first_part.filter { $0 >= \"0\" && $0 <= \"9\" }\n        if\
    \ digits.count > 3 {\n            return \"No\"\n        }\n    }\n    return\
    \ \"Yes\"", "    let file_name_arr = file_name.split(separator: \".\")\n    let\
    \ file_name_arr_count = file_name_arr.count\n    let file_name_arr_first = file_name_arr[0]\n\
    \    let file_name_arr_last = file_name_arr[file_name_arr_count - 1]\n    let\
    \ file_name_arr_first_count = file_name_arr_first.count\n    let file_name_arr_last_count\
    \ = file_name_arr_last.count\n    var digits_count = 0\n    var is_valid = true\n\
    \    if file_name_arr_count != 2 {\n        is_valid = false\n    }\n    if file_name_arr_first_count\
    \ == 0 {\n        is_valid = false\n    }\n    if file_name_arr_last_count ==\
    \ 0 {\n        is_valid = false\n    }\n    if file_name_arr_last != \"txt\" &&\
    \ file_name_arr_last != \"exe\" && file_name_arr_last != \"dll\" {\n        is_valid\
    \ = false\n    }\n    for char in file_name_arr_first {\n        if char >= \"\
    0\" && char <= \"9\" {\n            digits_count += 1\n        }\n    }\n    if\
    \ digits_count > 3 {\n        is_valid = false\n    }\n    if file_name_arr_first[file_name_arr_first_count\
    \ - 1] >= \"0\" && file_name_arr_first[file_name_arr_first_count - 1] <= \"9\"\
    \ {\n        is_valid = false\n    }\n    if file_name_arr_first[0] >= \"0\" &&\
    \ file_name_arr_first[0] <= \"9\" {\n        is_valid = false\n    }\n    if file_name_arr_first[0]\
    \ < \"A\" || (file_name_arr_first[0] > \"Z\" && file_name_arr_first[0] < \"a\"\
    ) || file_name_arr_first[0] > \"z\" {\n        is_valid = false\n    }\n    if\
    \ is_valid", "    let file_name_arr = file_name.components(separatedBy: \".\"\
    )\n    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n    let file_name_arr_0\
    \ = file_name_arr[0]\n    let file_name_arr_1 = file_name_arr[1]\n    if file_name_arr_0.count\
    \ == 0 {\n        return \"No\"\n    }\n    if !file_name_arr_0.isAlphanumeric\
    \ {\n        return \"No\"\n    }\n    if file_name_arr_0.rangeOfCharacter(from:\
    \ CharacterSet.decimalDigits) != nil {\n        return \"No\"\n    }\n    if file_name_arr_1\
    \ != \"txt\" && file_name_arr_1 != \"exe\" && file_name_arr_1 != \"dll\" {\n \
    \       return \"No\"\n    }\n    return \"Yes\"", "    let file_name_arr = file_name.components(separatedBy:\
    \ \".\")\n    let file_name_arr_count = file_name_arr.count\n    let file_name_arr_first\
    \ = file_name_arr[0]\n    let file_name_arr_last = file_name_arr[file_name_arr_count\
    \ - 1]\n    let file_name_arr_first_count = file_name_arr_first.count\n    let\
    \ file_name_arr_last_count = file_name_arr_last.count\n    var file_name_arr_first_digit_count\
    \ = 0\n    var file_name_arr_first_letter_count = 0\n    var file_name_arr_last_letter_count\
    \ = 0\n    var file_name_arr_last_digit_count = 0\n    var file_name_arr_last_letter_count_arr\
    \ = [Int]()\n    var file_name_arr_last_digit_count_arr = [Int]()\n    var file_name_arr_last_letter_count_arr_count\
    \ = 0\n    var file_name_arr_last_digit_count_arr_count = 0\n    var file_name_arr_last_letter_count_arr_last\
    \ = 0\n    var file_name_arr_last_digit_count_arr_last = 0\n    var file_name_arr_last_letter_count_arr_last_count\
    \ = 0\n    var file_name_arr_last_digit_count_arr_last_count = 0\n    var file_name_arr_last_letter_count_arr_last_count_arr\
    \ = [Int]()\n    var file_name_arr_last_digit_count_arr_last_count_arr = [Int]()\n\
    \    var file_name_arr_last_letter_count_arr_last_count_arr_count = 0\n    var\
    \ file_name_arr_last_digit_count_arr_last_count_arr_count = 0\n    var file_name_arr_last_letter_count_arr_last_count_arr_last\
    \ = 0\n    var file_name_arr_last_digit_count_arr_last_count", "    let file_name_arr\
    \ = file_name.components(separatedBy: \".\")\n    if file_name_arr.count != 2\
    \ {\n        return \"No\"\n    }\n    let file_name_arr_1 = file_name_arr[0]\n\
    \    let file_name_arr_2 = file_name_arr[1]\n    if file_name_arr_1.count == 0\
    \ || file_name_arr_2.count == 0 {\n        return \"No\"\n    }\n    if file_name_arr_1.count\
    \ > 3 {\n        return \"No\"\n    }\n    if file_name_arr_1.rangeOfCharacter(from:\
    \ CharacterSet.decimalDigits) != nil {\n        return \"No\"\n    }\n    if file_name_arr_2\
    \ != \"txt\" && file_name_arr_2 != \"exe\" && file_name_arr_2 != \"dll\" {\n \
    \       return \"No\"\n    }\n    return \"Yes\"", '    return ""', "    let file_name_arr\
    \ = file_name.components(separatedBy: \".\")\n    if file_name_arr.count != 2\
    \ {\n        return \"No\"\n    }\n    let file_name_arr_first = file_name_arr[0]\n\
    \    let file_name_arr_last = file_name_arr[1]\n    if file_name_arr_first.count\
    \ == 0 {\n        return \"No\"\n    }\n    let file_name_arr_first_first = file_name_arr_first[file_name_arr_first.startIndex]\n\
    \    if !(file_name_arr_first_first >= \"a\" && file_name_arr_first_first <= \"\
    z\" || file_name_arr_first_first >= \"A\" && file_name_arr_first_first <= \"Z\"\
    ) {\n        return \"No\"\n    }\n    if file_name_arr_last != \"txt\" && file_name_arr_last\
    \ != \"exe\" && file_name_arr_last != \"dll\" {\n        return \"No\"\n    }\n\
    \    var count = 0\n    for c in file_name_arr_first {\n        if c >= \"0\"\
    \ && c <= \"9\" {\n            count += 1\n        }\n    }\n    if count > 3\
    \ {\n        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_arr\
    \ = file_name.split(separator: \".\")\n    let file_name_arr_count = file_name_arr.count\n\
    \    let file_name_arr_first = file_name_arr[0]\n    let file_name_arr_last =\
    \ file_name_arr[file_name_arr_count - 1]\n    let file_name_arr_first_count =\
    \ file_name_arr_first.count\n    let file_name_arr_last_count = file_name_arr_last.count\n\
    \    let file_name_arr_first_first = file_name_arr_first[file_name_arr_first.startIndex]\n\
    \    let file_name_arr_last_first = file_name_arr_last[file_name_arr_last.startIndex]\n\
    \    let file_name_arr_last_last = file_name_arr_last[file_name_arr_last.index(before:\
    \ file_name_arr_last.endIndex)]\n    let file_name_arr_last_last_last = file_name_arr_last[file_name_arr_last.index(file_name_arr_last.endIndex,\
    \ offsetBy: -2)]\n    let file_name_arr_last_last_last_last = file_name_arr_last[file_name_arr_last.index(file_name_arr_last.endIndex,\
    \ offsetBy: -3)]\n    let file_name_arr_last_last_last_last_last = file_name_arr_last[file_name_arr_last.index(file_name_arr_last.endIndex,\
    \ offsetBy: -4)]\n    if file_name_arr_count != 2 {\n        return \"No\"\n \
    \   }\n    if file_name_arr_first_count == 0 {\n        return \"No\"\n    }\n\
    \    if file_name_arr_last_count != 3 && file_name_arr_last_count != 4 {\n   \
    \     return \"No\"\n    }\n    if file_name_arr_last_count == 3 {\n        if\
    \ file_name_arr_last_first != \"t\" && file_name_arr_", "    let file_name_components\
    \ = file_name.components(separatedBy: \".\")\n    if file_name_components.count\
    \ != 2 {\n        return \"No\"\n    }\n    let file_name_first_part = file_name_components[0]\n\
    \    let file_name_second_part = file_name_components[1]\n    if file_name_first_part.count\
    \ == 0 {\n        return \"No\"\n    }\n    if !file_name_first_part.is_latin_alphapet()\
    \ {\n        return \"No\"\n    }\n    if file_name_first_part.count > 3 {\n \
    \       return \"No\"\n    }\n    if !file_name_second_part.is_valid_file_extension()\
    \ {\n        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_arr\
    \ = file_name.components(separatedBy: \".\")\n    let file_name_arr_count = file_name_arr.count\n\
    \    if file_name_arr_count != 2 {\n        return \"No\"\n    }\n    let file_name_arr_first\
    \ = file_name_arr[0]\n    let file_name_arr_last = file_name_arr[1]\n    let file_name_arr_first_count\
    \ = file_name_arr_first.count\n    let file_name_arr_last_count = file_name_arr_last.count\n\
    \    if file_name_arr_first_count == 0 || file_name_arr_last_count == 0 {\n  \
    \      return \"No\"\n    }\n    let file_name_arr_first_first = file_name_arr_first[file_name_arr_first.startIndex]\n\
    \    let file_name_arr_last_first = file_name_arr_last[file_name_arr_last.startIndex]\n\
    \    let file_name_arr_first_first_unicode = file_name_arr_first_first.unicodeScalars.first?.value\n\
    \    let file_name_arr_last_first_unicode = file_name_arr_last_first.unicodeScalars.first?.value\n\
    \    if file_name_arr_first_first_unicode! < 65 || file_name_arr_first_first_unicode!\
    \ > 122 || (file_name_arr_first_first_unicode! > 90 && file_name_arr_first_first_unicode!\
    \ < 97) {\n        return \"No\"\n    }\n    if file_name_arr_last_first_unicode!\
    \ < 65 || file_name_arr_last_first_unicode! > 122 || (file_name_arr_last_first_unicode!\
    \ > 90 && file_name_arr_last_first_unicode! < 97) {\n        return \"No\"\n \
    \   }\n    if file_name_arr_last != \"txt\" && file_name_arr_last != \"exe\" &&\
    \ file_name_arr_last != \"dll\" {\n", "    let file_name_arr = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n  \
    \  let file_name_arr_0 = file_name_arr[0]\n    let file_name_arr_1 = file_name_arr[1]\n\
    \    if file_name_arr_0.count == 0 {\n        return \"No\"\n    }\n    if file_name_arr_1.count\
    \ == 0 {\n        return \"No\"\n    }\n    if file_name_arr_1 != \"txt\" && file_name_arr_1\
    \ != \"exe\" && file_name_arr_1 != \"dll\" {\n        return \"No\"\n    }\n \
    \   let file_name_arr_0_arr = Array(file_name_arr_0)\n    var count = 0\n    for\
    \ i in file_name_arr_0_arr {\n        if i >= \"0\" && i <= \"9\" {\n        \
    \    count += 1\n        }\n    }\n    if count > 3 {\n        return \"No\"\n\
    \    }\n    if file_name_arr_0_arr[0] < \"a\" || file_name_arr_0_arr[0] > \"z\"\
    \ {\n        if file_name_arr_0_arr[0] < \"A\" || file_name_arr_0_arr[0] > \"\
    Z\" {\n            return \"No\"\n        }\n    }\n    return \"Yes\"", "   \
    \ let file_name_array = file_name.components(separatedBy: \".\")\n    if file_name_array.count\
    \ != 2 {\n        return \"No\"\n    }\n    let file_name_before_dot = file_name_array[0]\n\
    \    let file_name_after_dot = file_name_array[1]\n    if file_name_before_dot.count\
    \ == 0 {\n        return \"No\"\n    }\n    if file_name_before_dot.rangeOfCharacter(from:\
    \ CharacterSet.decimalDigits) != nil {\n        return \"No\"\n    }\n    if file_name_before_dot.count\
    \ > 3 {\n        return \"No\"\n    }\n    if file_name_after_dot != \"txt\" &&\
    \ file_name_after_dot != \"exe\" && file_name_after_dot != \"dll\" {\n       \
    \ return \"No\"\n    }\n    return \"Yes\"", "    let file_name_components = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_components.count != 2 {\n        return \"No\"\n  \
    \  }\n    let file_name_without_extension = file_name_components[0]\n    let file_extension\
    \ = file_name_components[1]\n    let file_name_without_extension_components =\
    \ file_name_without_extension.components(separatedBy: CharacterSet.decimalDigits)\n\
    \    if file_name_without_extension_components.count != 2 {\n        return \"\
    No\"\n    }\n    let file_name_without_extension_without_digits = file_name_without_extension_components[0]\n\
    \    if file_name_without_extension_without_digits.isEmpty {\n        return \"\
    No\"\n    }\n    let first_character = file_name_without_extension_without_digits[file_name_without_extension_without_digits.startIndex]\n\
    \    if !CharacterSet.letters.contains(first_character.unicodeScalars.first!)\
    \ {\n        return \"No\"\n    }\n    if ![\"txt\", \"exe\", \"dll\"].contains(file_extension)\
    \ {\n        return \"No\"\n    }\n    return \"Yes\"", "    // write your code\
    \ here\n    return \"\"", '    return ""', "    let file_name_arr = file_name.components(separatedBy:\
    \ \".\")\n    let file_name_arr_count = file_name_arr.count\n    let file_name_arr_first\
    \ = file_name_arr[0]\n    let file_name_arr_last = file_name_arr[file_name_arr_count\
    \ - 1]\n    let file_name_arr_first_count = file_name_arr_first.count\n    let\
    \ file_name_arr_last_count = file_name_arr_last.count\n    let file_name_arr_first_first\
    \ = file_name_arr_first[file_name_arr_first.startIndex]\n    let file_name_arr_last_first\
    \ = file_name_arr_last[file_name_arr_last.startIndex]\n    let file_name_arr_first_first_ascii\
    \ = file_name_arr_first_first.asciiValue\n    let file_name_arr_last_first_ascii\
    \ = file_name_arr_last_first.asciiValue\n    var file_name_arr_first_count_digit\
    \ = 0\n    var file_name_arr_last_count_digit = 0\n    var file_name_arr_first_count_letter\
    \ = 0\n    var file_name_arr_last_count_letter = 0\n    var file_name_arr_first_count_letter_upper\
    \ = 0\n    var file_name_arr_last_count_letter_upper = 0\n    var file_name_arr_first_count_letter_lower\
    \ = 0\n    var file_name_arr_last_count_letter_lower = 0\n    var file_name_arr_first_count_letter_other\
    \ = 0\n    var file_name_arr_last_count_letter_other = 0\n    var file_name_arr_first_count_letter_ascii\
    \ = 0\n    var file_name_arr_last_count_letter_ascii = 0\n    var file_name_arr_first_count_letter_ascii_upper\
    \ = 0\n    var file_name_arr_last_count_letter_ascii_upper = 0", "    let file_name_regex\
    \ = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\n    let file_name_test =\
    \ NSPredicate(format:\"SELF MATCHES %@\", file_name_regex)\n    return file_name_test.evaluate(with:\
    \ file_name) ? \"Yes\" : \"No\"", "    let file_name_components = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_components.count != 2 {\n        return \"No\"\n  \
    \  }\n    let file_name_prefix = file_name_components[0]\n    let file_name_suffix\
    \ = file_name_components[1]\n    let file_name_prefix_first_char = file_name_prefix.first\n\
    \    let file_name_prefix_first_char_is_digit = Int(String(file_name_prefix_first_char!))\
    \ != nil\n    if file_name_prefix_first_char_is_digit {\n        return \"No\"\
    \n    }\n    let file_name_prefix_contains_more_than_three_digits = file_name_prefix.filter({Int(String($0))\
    \ != nil}).count > 3\n    if file_name_prefix_contains_more_than_three_digits\
    \ {\n        return \"No\"\n    }\n    let file_name_suffix_is_valid = file_name_suffix\
    \ == \"txt\" || file_name_suffix == \"exe\" || file_name_suffix == \"dll\"\n \
    \   if !file_name_suffix_is_valid {\n        return \"No\"\n    }\n    return\
    \ \"Yes\"", "    let file_name_arr = file_name.split(separator: \".\")\n    let\
    \ file_name_arr_count = file_name_arr.count\n    let file_name_arr_first = file_name_arr[0]\n\
    \    let file_name_arr_last = file_name_arr[file_name_arr_count - 1]\n    let\
    \ file_name_arr_first_count = file_name_arr_first.count\n    let file_name_arr_last_count\
    \ = file_name_arr_last.count\n    var file_name_arr_first_count_digit = 0\n  \
    \  var file_name_arr_first_count_letter = 0\n    var file_name_arr_last_count_letter\
    \ = 0\n    var file_name_arr_last_count_digit = 0\n    var file_name_arr_first_count_letter_upper\
    \ = 0\n    var file_name_arr_first_count_letter_lower = 0\n    var file_name_arr_last_count_letter_upper\
    \ = 0\n    var file_name_arr_last_count_letter_lower = 0\n    var file_name_arr_last_count_letter_txt\
    \ = 0\n    var file_name_arr_last_count_letter_exe = 0\n    var file_name_arr_last_count_letter_dll\
    \ = 0\n    for i in 0..<file_name_arr_first_count {\n        if file_name_arr_first[i]\
    \ >= \"0\" && file_name_arr_first[i] <= \"9\" {\n            file_name_arr_first_count_digit\
    \ += 1\n        }\n        if file_name_arr_first[i] >= \"a\" && file_name_arr_first[i]\
    \ <= \"z\" {\n            file_name_arr_first_count_letter_lower += 1\n      \
    \  }\n        if file_name_arr_first[i] >= \"A\" && file_name_arr_first[i] <=\
    \ \"Z\" {\n            file_name_arr_first_count_letter_upper += 1\n        }\n\
    \    }\n    for i in 0..<file_name_arr_last_", "    let file_name_array = file_name.components(separatedBy:\
    \ \".\")\n    let file_name_array_count = file_name_array.count\n    let file_name_array_first\
    \ = file_name_array[0]\n    let file_name_array_last = file_name_array[file_name_array_count\
    \ - 1]\n    let file_name_array_first_count = file_name_array_first.count\n  \
    \  let file_name_array_last_count = file_name_array_last.count\n    let file_name_array_first_first\
    \ = file_name_array_first[file_name_array_first.startIndex]\n    let file_name_array_last_first\
    \ = file_name_array_last[file_name_array_last.startIndex]\n    let file_name_array_first_last\
    \ = file_name_array_first[file_name_array_first.index(before: file_name_array_first.endIndex)]\n\
    \    let file_name_array_last_last = file_name_array_last[file_name_array_last.index(before:\
    \ file_name_array_last.endIndex)]\n    let file_name_array_first_last_second =\
    \ file_name_array_first[file_name_array_first.index(file_name_array_first.startIndex,\
    \ offsetBy: 2)]\n    let file_name_array_last_last_second = file_name_array_last[file_name_array_last.index(file_name_array_last.startIndex,\
    \ offsetBy: 2)]\n    let file_name_array_first_last_third = file_name_array_first[file_name_array_first.index(file_name_array_first.startIndex,\
    \ offsetBy: 3)]\n    let file_name_array_last_last_third = file_name_array_last[file_name_array_last.index(file_name_array_last.startIndex,\
    \ offsetBy: 3)]\n    let file_name_array_first_last_fourth = file_name_array_first[file_name_array_first.index(file",
  "    let file_name_arr = file_name.split(separator: \".\")\n    if file_name_arr.count\
    \ != 2 {\n        return \"No\"\n    }\n    let first_part = file_name_arr[0]\n\
    \    let second_part = file_name_arr[1]\n    if first_part.count == 0 || first_part.count\
    \ > 8 {\n        return \"No\"\n    }\n    if !first_part.first!.isLetter {\n\
    \        return \"No\"\n    }\n    if second_part.count == 0 || second_part.count\
    \ > 3 {\n        return \"No\"\n    }\n    if !(second_part == \"txt\" || second_part\
    \ == \"exe\" || second_part == \"dll\") {\n        return \"No\"\n    }\n    let\
    \ digits = CharacterSet.decimalDigits\n    if first_part.filter({ digits.contains($0)\
    \ }).count > 3 {\n        return \"No\"\n    }\n    return \"Yes\"", '    return
    ""', "    let file_name_arr = file_name.components(separatedBy: \".\")\n    if\
    \ file_name_arr.count != 2 {\n        return \"No\"\n    }\n    if file_name_arr[0].count\
    \ == 0 {\n        return \"No\"\n    }\n    if file_name_arr[0].rangeOfCharacter(from:\
    \ CharacterSet.decimalDigits) != nil {\n        return \"No\"\n    }\n    if file_name_arr[1]\
    \ != \"txt\" && file_name_arr[1] != \"exe\" && file_name_arr[1] != \"dll\" {\n\
    \        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_components\
    \ = file_name.components(separatedBy: \".\")\n    if file_name_components.count\
    \ != 2 {\n        return \"No\"\n    }\n    if file_name_components[0].rangeOfCharacter(from:\
    \ CharacterSet.decimalDigits) != nil {\n        return \"No\"\n    }\n    if file_name_components[1]\
    \ != \"txt\" && file_name_components[1] != \"exe\" && file_name_components[1]\
    \ != \"dll\" {\n        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_arr\
    \ = file_name.split(separator: \".\")\n    if file_name_arr.count != 2 {\n   \
    \     return \"No\"\n    }\n    let first_part = file_name_arr[0]\n    let second_part\
    \ = file_name_arr[1]\n    if !first_part.isEmpty && first_part.rangeOfCharacter(from:\
    \ CharacterSet.decimalDigits) == nil {\n        if second_part == \"txt\" || second_part\
    \ == \"exe\" || second_part == \"dll\" {\n            return \"Yes\"\n       \
    \ }\n    }\n    return \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    return file_name.matches(file_name_regex) ? \"Yes\" :\
    \ \"No\"", "    let file_name_components = file_name.components(separatedBy: \"\
    .\")\n    let file_name_without_extension = file_name_components[0]\n    let file_name_extension\
    \ = file_name_components[1]\n    let file_name_without_extension_components =\
    \ file_name_without_extension.components(separatedBy: CharacterSet.decimalDigits)\n\
    \    let file_name_without_extension_without_numbers = file_name_without_extension_components.joined(separator:\
    \ \"\")\n    let file_name_without_extension_without_numbers_first_character =\
    \ file_name_without_extension_without_numbers.first\n    let file_name_without_extension_without_numbers_first_character_is_letter\
    \ = file_name_without_extension_without_numbers_first_character?.isLetter ?? false\n\
    \    let file_name_without_extension_without_numbers_is_empty = file_name_without_extension_without_numbers.isEmpty\n\
    \    let file_name_without_extension_has_more_than_three_numbers = file_name_without_extension_components.count\
    \ > 3\n    let file_name_has_more_than_one_dot = file_name.components(separatedBy:\
    \ \".\").count > 2\n    let file_name_extension_is_valid = file_name_extension\
    \ == \"txt\" || file_name_extension == \"exe\" || file_name_extension == \"dll\"\
    \n    if file_name_without_extension_has_more_than_three_numbers || file_name_has_more_than_one_dot\
    \ || file_name_without_extension_without_numbers_is_empty || !file_name_without_extension_without_numbers_first_character_is_letter\
    \ || !file_name_extension_is_valid {\n        return \"No\"\n    }\n    return\
    \ \"Yes\"", '    return ""', "    let file_name_components = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_components.count != 2 {\n        return \"No\"\n  \
    \  }\n    let file_name_prefix = file_name_components[0]\n    let file_name_suffix\
    \ = file_name_components[1]\n    if file_name_prefix.count == 0 || file_name_suffix.count\
    \ == 0 {\n        return \"No\"\n    }\n    if file_name_prefix.count > 3 {\n\
    \        return \"No\"\n    }\n    let file_name_prefix_first_char = file_name_prefix[file_name_prefix.startIndex]\n\
    \    if !(file_name_prefix_first_char >= \"a\" && file_name_prefix_first_char\
    \ <= \"z\") &&\n        !(file_name_prefix_first_char >= \"A\" && file_name_prefix_first_char\
    \ <= \"Z\") {\n        return \"No\"\n    }\n    if !(file_name_suffix == \"txt\"\
    \ || file_name_suffix == \"exe\" || file_name_suffix == \"dll\") {\n        return\
    \ \"No\"\n    }\n    return \"Yes\"", "    let file_name_arr = file_name.split(separator:\
    \ \".\")\n    let file_name_arr_count = file_name_arr.count\n    let file_name_arr_last\
    \ = file_name_arr[file_name_arr_count - 1]\n    let file_name_arr_first = file_name_arr[0]\n\
    \    let file_name_arr_first_count = file_name_arr_first.count\n    let file_name_arr_first_count_digit\
    \ = file_name_arr_first.filter { \"0123456789\".contains($0) }.count\n    let\
    \ file_name_arr_first_count_digit_bool = file_name_arr_first_count_digit > 3 ?\
    \ false : true\n    let file_name_arr_first_count_bool = file_name_arr_first_count\
    \ > 0 ? true : false\n    let file_name_arr_first_bool = file_name_arr_first_count_bool\
    \ && file_name_arr_first_count_digit_bool\n    let file_name_arr_last_bool = file_name_arr_last\
    \ == \"txt\" || file_name_arr_last == \"exe\" || file_name_arr_last == \"dll\"\
    \n    let file_name_arr_bool = file_name_arr_first_bool && file_name_arr_last_bool\
    \ && file_name_arr_count == 2\n    let file_name_bool = file_name_arr_bool ? \"\
    Yes\" : \"No\"\n    return file_name_bool", "    let file_name_arr = file_name.components(separatedBy:\
    \ \".\")\n    let file_name_arr_count = file_name_arr.count\n    let file_name_arr_first\
    \ = file_name_arr[0]\n    let file_name_arr_last = file_name_arr[file_name_arr_count\
    \ - 1]\n    let file_name_arr_first_count = file_name_arr_first.count\n    let\
    \ file_name_arr_last_count = file_name_arr_last.count\n    let file_name_arr_first_first\
    \ = file_name_arr_first[file_name_arr_first.startIndex]\n    let file_name_arr_last_first\
    \ = file_name_arr_last[file_name_arr_last.startIndex]\n    let file_name_arr_first_first_unicode\
    \ = file_name_arr_first_first.unicodeScalars.first!.value\n    let file_name_arr_last_first_unicode\
    \ = file_name_arr_last_first.unicodeScalars.first!.value\n    let file_name_arr_first_first_unicode_lower\
    \ = file_name_arr_first_first_unicode >= 97 && file_name_arr_first_first_unicode\
    \ <= 122\n    let file_name_arr_first_first_unicode_upper = file_name_arr_first_first_unicode\
    \ >= 65 && file_name_arr_first_first_unicode <= 90\n    let file_name_arr_last_first_unicode_lower\
    \ = file_name_arr_last_first_unicode >= 97 && file_name_arr_last_first_unicode\
    \ <= 122\n    let file_name_arr_last_first_unicode_upper = file_name_arr_last_first_unicode\
    \ >= 65 && file_name_arr_last_first_unicode <= 90\n    let file_name_arr_first_first_unicode_number\
    \ = file_name_arr_first_first_unicode >= 48 && file_name_arr_first_first_unicode\
    \ <= 57\n    let file_name_arr_last_first_", "    let file_name_arr = file_name.split(separator:\
    \ \".\")\n    let file_name_arr_count = file_name_arr.count\n    let file_name_arr_first\
    \ = file_name_arr[0]\n    let file_name_arr_last = file_name_arr[file_name_arr_count\
    \ - 1]\n    let file_name_arr_first_count = file_name_arr_first.count\n    let\
    \ file_name_arr_last_count = file_name_arr_last.count\n    let file_name_arr_first_first\
    \ = file_name_arr_first[file_name_arr_first.startIndex]\n    let file_name_arr_last_first\
    \ = file_name_arr_last[file_name_arr_last.startIndex]\n    let file_name_arr_first_first_ascii\
    \ = file_name_arr_first_first.asciiValue\n    let file_name_arr_last_first_ascii\
    \ = file_name_arr_last_first.asciiValue\n    var file_name_arr_first_digit_count\
    \ = 0\n    var file_name_arr_last_digit_count = 0\n    var file_name_arr_first_valid\
    \ = false\n    var file_name_arr_last_valid = false\n    var file_name_valid =\
    \ false\n    \n    if file_name_arr_count == 2 {\n        for i in 0..<file_name_arr_first_count\
    \ {\n            if file_name_arr_first[i].isNumber {\n                file_name_arr_first_digit_count\
    \ += 1\n            }\n        }\n        for i in 0..<file_name_arr_last_count\
    \ {\n            if file_name_arr_last[i].isNumber {\n                file_name_arr_last_digit_count\
    \ += 1\n            }\n        }\n        if file_name_arr_first_digit_count <=\
    \ 3 {\n            if file_name_arr_first_first_ascii >= 65 && file_name_arr_first_first_ascii\
    \ <= 90 || file_name_arr_first_first_as", "    let file_name_chars = Array(file_name)\n\
    \    var dot_count = 0\n    var digit_count = 0\n    var is_valid = true\n   \
    \ var is_first_char_letter = false\n    var is_last_char_letter = false\n    var\
    \ is_last_char_dot = false\n    var is_last_char_digit = false\n    var is_last_char_letter_or_digit\
    \ = false\n    var is_last_char_letter_or_digit_or_dot = false\n    var is_last_char_letter_or_digit_or_dot_or_underscore\
    \ = false\n    var is_last_char_letter_or_digit_or_dot_or_underscore_or_dash =\
    \ false\n    var is_last_char_letter_or_digit_or_dot_or_underscore_or_dash_or_space\
    \ = false\n    var is_last_char_letter_or_digit_or_dot_or_underscore_or_dash_or_space_or_slash\
    \ = false\n    var is_last_char_letter_or_digit_or_dot_or_underscore_or_dash_or_space_or_slash_or_backslash\
    \ = false\n    var is_last_char_letter_or_digit_or_dot_or_underscore_or_dash_or_space_or_slash_or_backslash_or_colon\
    \ = false\n    var is_last_char_letter_or_digit_or_dot_or_underscore_or_dash_or_space_or_slash_or_backslash_or_colon_or_question_mark\
    \ = false\n    var is_last_char_letter_or_digit_or_dot_or_underscore_or_dash_or_space_or_slash_or_backslash_or_colon_or_question_mark_or_asterisk\
    \ = false\n    var is_last_char_letter_or_digit_or_dot_or_underscore_or_dash_or_space_or_slash_or_backslash_or_colon_or_question_mark_or",
  "    let file_name_arr = file_name.components(separatedBy: \".\")\n    let file_name_arr_count\
    \ = file_name_arr.count\n    let file_name_arr_first = file_name_arr[0]\n    let\
    \ file_name_arr_last = file_name_arr[file_name_arr_count - 1]\n    let file_name_arr_first_count\
    \ = file_name_arr_first.count\n    let file_name_arr_last_count = file_name_arr_last.count\n\
    \    let file_name_arr_first_first = file_name_arr_first[file_name_arr_first.startIndex]\n\
    \    let file_name_arr_last_first = file_name_arr_last[file_name_arr_last.startIndex]\n\
    \    let file_name_arr_first_last = file_name_arr_first[file_name_arr_first.index(before:\
    \ file_name_arr_first.endIndex)]\n    let file_name_arr_last_last = file_name_arr_last[file_name_arr_last.index(before:\
    \ file_name_arr_last.endIndex)]\n    let file_name_arr_first_first_is_letter =\
    \ file_name_arr_first_first >= \"a\" && file_name_arr_first_first <= \"z\" ||\
    \ file_name_arr_first_first >= \"A\" && file_name_arr_first_first <= \"Z\"\n \
    \   let file_name_arr_last_first_is_letter = file_name_arr_last_first >= \"a\"\
    \ && file_name_arr_last_first <= \"z\" || file_name_arr_last_first >= \"A\" &&\
    \ file_name_arr_last_first <= \"Z\"\n    let file_name_arr_first_last_is_digit\
    \ = file_name_arr_first_last >= \"0\" && file_name_arr_first_last <= \"9\"\n \
    \   let file_name_arr_last_last_is_digit = file_name_arr_last_last >= \"0\" &&\
    \ file_name_arr_last_last <= \"", "    let pattern = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    return file_name.range(of: pattern, options: .regularExpression)\
    \ != nil ? \"Yes\" : \"No\"", "    // Write your code here\n    return \"\"",
  "    let file_name_arr = file_name.components(separatedBy: \".\")\n    let file_name_arr_count\
    \ = file_name_arr.count\n    if file_name_arr_count != 2 {\n        return \"\
    No\"\n    }\n    let file_name_arr_first = file_name_arr[0]\n    let file_name_arr_second\
    \ = file_name_arr[1]\n    if file_name_arr_first.count == 0 {\n        return\
    \ \"No\"\n    }\n    let file_name_arr_first_first_char = file_name_arr_first[file_name_arr_first.startIndex]\n\
    \    if !(file_name_arr_first_first_char >= \"a\" && file_name_arr_first_first_char\
    \ <= \"z\" || file_name_arr_first_first_char >= \"A\" && file_name_arr_first_first_char\
    \ <= \"Z\") {\n        return \"No\"\n    }\n    if file_name_arr_second != \"\
    txt\" && file_name_arr_second != \"exe\" && file_name_arr_second != \"dll\" {\n\
    \        return \"No\"\n    }\n    let file_name_arr_first_digit_count = file_name_arr_first.filter\
    \ { $0 >= \"0\" && $0 <= \"9\" }.count\n    if file_name_arr_first_digit_count\
    \ > 3 {\n        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_arr\
    \ = file_name.components(separatedBy: \".\")\n    let file_name_arr_count = file_name_arr.count\n\
    \    let file_name_arr_first = file_name_arr[0]\n    let file_name_arr_last =\
    \ file_name_arr[file_name_arr_count - 1]\n    let file_name_arr_last_count = file_name_arr_last.count\n\
    \    let file_name_arr_first_count = file_name_arr_first.count\n    let file_name_arr_first_first\
    \ = file_name_arr_first[file_name_arr_first.startIndex]\n    let file_name_arr_first_first_str\
    \ = String(file_name_arr_first_first)\n    let file_name_arr_first_first_str_count\
    \ = file_name_arr_first_first_str.count\n    let file_name_arr_first_first_str_first\
    \ = file_name_arr_first_first_str[file_name_arr_first_first_str.startIndex]\n\
    \    let file_name_arr_first_first_str_first_str = String(file_name_arr_first_first_str_first)\n\
    \    let file_name_arr_first_first_str_first_str_count = file_name_arr_first_first_str_first_str.count\n\
    \    let file_name_arr_first_first_str_first_str_first = file_name_arr_first_first_str_first_str[file_name_arr_first_first_str_first_str.startIndex]\n\
    \    let file_name_arr_first_first_str_first_str_first_str = String(file_name_arr_first_first_str_first_str_first)\n\
    \    let file_name_arr_first_first_str_first_str_first_str_count = file_name_arr_first_first_str_first_str_first_str.count\n\
    \    let file_name_arr_first_first_str_first_str_first_str_first = file_name_arr_",
  "    let file_name_regex = #\"^[a-zA-Z]([a-zA-Z]|[0-9]){0,2}\\.(txt|exe|dll)$\"\
    #\n    return file_name.matches(file_name_regex) ? \"Yes\" : \"No\"", "    let\
    \ file_name_arr = file_name.components(separatedBy: \".\")\n    let file_name_arr_count\
    \ = file_name_arr.count\n    let file_name_arr_first = file_name_arr[0]\n    let\
    \ file_name_arr_last = file_name_arr[file_name_arr_count - 1]\n    let file_name_arr_first_count\
    \ = file_name_arr_first.count\n    let file_name_arr_last_count = file_name_arr_last.count\n\
    \    let file_name_arr_first_first = file_name_arr_first[file_name_arr_first.startIndex]\n\
    \    let file_name_arr_last_first = file_name_arr_last[file_name_arr_last.startIndex]\n\
    \    let file_name_arr_first_last = file_name_arr_first[file_name_arr_first.index(before:\
    \ file_name_arr_first.endIndex)]\n    let file_name_arr_last_last = file_name_arr_last[file_name_arr_last.index(before:\
    \ file_name_arr_last.endIndex)]\n    let file_name_arr_first_first_char = String(file_name_arr_first_first)\n\
    \    let file_name_arr_last_first_char = String(file_name_arr_last_first)\n  \
    \  let file_name_arr_first_last_char = String(file_name_arr_first_last)\n    let\
    \ file_name_arr_last_last_char = String(file_name_arr_last_last)\n    let file_name_arr_first_first_char_int\
    \ = Int(file_name_arr_first_first_char)\n    let file_name_arr_last_first_char_int\
    \ = Int(file_name_arr_last_first_char)\n    let file_name_arr_first_last_char_int\
    \ = Int(file_name_arr_first_last_char)\n    let file_name_arr_last_last_char_int\
    \ = Int(file_name_arr_last_last_", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    if file_name.range(of: file_name_regex, options: .regularExpression)\
    \ != nil {\n        return \"Yes\"\n    }\n    return \"No\"", "    let file_name_arr\
    \ = file_name.components(separatedBy: \".\")\n    if file_name_arr.count != 2\
    \ {\n        return \"No\"\n    }\n    let file_name_arr_0 = file_name_arr[0]\n\
    \    let file_name_arr_1 = file_name_arr[1]\n    if file_name_arr_0.count == 0\
    \ {\n        return \"No\"\n    }\n    if !(file_name_arr_0.range(of: \"[a-zA-Z]\"\
    , options: .regularExpression) != nil) {\n        return \"No\"\n    }\n    if\
    \ file_name_arr_0.range(of: \"[0-9]\", options: .regularExpression) != nil {\n\
    \        if file_name_arr_0.range(of: \"[0-9]{4}\", options: .regularExpression)\
    \ != nil {\n            return \"No\"\n        }\n    }\n    if file_name_arr_1\
    \ != \"txt\" && file_name_arr_1 != \"exe\" && file_name_arr_1 != \"dll\" {\n \
    \       return \"No\"\n    }\n    return \"Yes\"", "    let file_name_components\
    \ = file_name.components(separatedBy: \".\")\n    if file_name_components.count\
    \ != 2 {\n        return \"No\"\n    }\n    let file_name_components_count = file_name_components.count\n\
    \    let file_name_components_0 = file_name_components[0]\n    let file_name_components_1\
    \ = file_name_components[1]\n    let file_name_components_0_count = file_name_components_0.count\n\
    \    let file_name_components_1_count = file_name_components_1.count\n    if file_name_components_0_count\
    \ == 0 {\n        return \"No\"\n    }\n    if file_name_components_1_count ==\
    \ 0 {\n        return \"No\"\n    }\n    if file_name_components_1 != \"txt\"\
    \ && file_name_components_1 != \"exe\" && file_name_components_1 != \"dll\" {\n\
    \        return \"No\"\n    }\n    let file_name_components_0_first_char = file_name_components_0[file_name_components_0.startIndex]\n\
    \    if file_name_components_0_first_char < \"a\" || file_name_components_0_first_char\
    \ > \"z\" {\n        if file_name_components_0_first_char < \"A\" || file_name_components_0_first_char\
    \ > \"Z\" {\n            return \"No\"\n        }\n    }\n    var digits_count\
    \ = 0\n    for char in file_name_components_0 {\n        if char >= \"0\" && char\
    \ <= \"9\" {\n            digits_count += 1\n        }\n    }\n    if digits_count\
    \ > 3 {\n        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_arr\
    \ = file_name.components(separatedBy: \".\")\n    if file_name_arr.count != 2\
    \ {\n        return \"No\"\n    }\n    let first_part = file_name_arr[0]\n   \
    \ let second_part = file_name_arr[1]\n    if first_part.count == 0 || first_part.rangeOfCharacter(from:\
    \ CharacterSet.decimalDigits) != nil {\n        return \"No\"\n    }\n    if second_part\
    \ != \"txt\" && second_part != \"exe\" && second_part != \"dll\" {\n        return\
    \ \"No\"\n    }\n    if first_part.rangeOfCharacter(from: CharacterSet.decimalDigits)\
    \ != nil {\n        let digits = first_part.components(separatedBy: CharacterSet.decimalDigits)\n\
    \        if digits.count > 3 {\n            return \"No\"\n        }\n    }\n\
    \    return \"Yes\"", "    let file_name_arr = file_name.components(separatedBy:\
    \ \".\")\n    let file_name_arr_count = file_name_arr.count\n    if file_name_arr_count\
    \ != 2 {\n        return \"No\"\n    }\n    let file_name_arr_first = file_name_arr[0]\n\
    \    let file_name_arr_last = file_name_arr[1]\n    let file_name_arr_first_count\
    \ = file_name_arr_first.count\n    let file_name_arr_last_count = file_name_arr_last.count\n\
    \    if file_name_arr_first_count == 0 || file_name_arr_last_count == 0 {\n  \
    \      return \"No\"\n    }\n    let file_name_arr_first_first = file_name_arr_first[0]\n\
    \    let file_name_arr_last_first = file_name_arr_last[0]\n    if file_name_arr_first_first\
    \ < \"a\" || file_name_arr_first_first > \"z\" {\n        if file_name_arr_first_first\
    \ < \"A\" || file_name_arr_first_first > \"Z\" {\n            return \"No\"\n\
    \        }\n    }\n    if file_name_arr_last_first < \"a\" || file_name_arr_last_first\
    \ > \"z\" {\n        if file_name_arr_last_first < \"A\" || file_name_arr_last_first\
    \ > \"Z\" {\n            return \"No\"\n        }\n    }\n    if file_name_arr_last\
    \ != \"txt\" && file_name_arr_last != \"exe\" && file_name_arr_last != \"dll\"\
    \ {\n        return \"No\"\n    }\n    var file_name_arr_first_digit_count = 0\n\
    \    for i in 0..<file_name_arr_first_count {\n        let file_name_arr_first_i\
    \ = file_name_arr_first[i]\n        if file_name_arr_first_i < \"0\" || file_name_arr_first_i\
    \ > \"9\" {\n           ", "    let file_name_arr = file_name.split(separator:\
    \ \".\")\n    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n  \
    \  let first_part = file_name_arr[0]\n    let second_part = file_name_arr[1]\n\
    \    if !(first_part.first! >= \"a\" && first_part.first! <= \"z\" || first_part.first!\
    \ >= \"A\" && first_part.first! <= \"Z\") {\n        return \"No\"\n    }\n  \
    \  if first_part.filter({$0 >= \"0\" && $0 <= \"9\"}).count > 3 {\n        return\
    \ \"No\"\n    }\n    if !(second_part == \"txt\" || second_part == \"exe\" ||\
    \ second_part == \"dll\") {\n        return \"No\"\n    }\n    return \"Yes\"",
  '    return ""', "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\\.(txt|exe|dll)$\"\
    \n    return file_name.matches(file_name_regex) ? \"Yes\" : \"No\"", "    let\
    \ file_name_components = file_name.components(separatedBy: \".\")\n    let file_name_without_extension\
    \ = file_name_components[0]\n    let file_name_extension = file_name_components[1]\n\
    \    let file_name_without_extension_components = file_name_without_extension.components(separatedBy:\
    \ CharacterSet.decimalDigits)\n    let file_name_without_extension_without_digits\
    \ = file_name_without_extension_components.joined(separator: \"\")\n    let file_name_without_extension_digits\
    \ = file_name_without_extension.replacingOccurrences(of: file_name_without_extension_without_digits,\
    \ with: \"\")\n    if file_name_without_extension_digits.count > 3 {\n       \
    \ return \"No\"\n    }\n    if file_name_without_extension.count == 0 {\n    \
    \    return \"No\"\n    }\n    if !file_name_without_extension.first!.isLetter\
    \ {\n        return \"No\"\n    }\n    if file_name_extension != \"txt\" && file_name_extension\
    \ != \"exe\" && file_name_extension != \"dll\" {\n        return \"No\"\n    }\n\
    \    return \"Yes\"", "    let file_name_arr = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n  \
    \  let file_name_arr_1 = file_name_arr[0]\n    let file_name_arr_2 = file_name_arr[1]\n\
    \    if file_name_arr_1.count == 0 || file_name_arr_2.count == 0 {\n        return\
    \ \"No\"\n    }\n    if file_name_arr_1.rangeOfCharacter(from: CharacterSet.decimalDigits)\
    \ != nil {\n        return \"No\"\n    }\n    if file_name_arr_2 != \"txt\" &&\
    \ file_name_arr_2 != \"exe\" && file_name_arr_2 != \"dll\" {\n        return \"\
    No\"\n    }\n    return \"Yes\"", '    return ""', "    let file_name_characters\
    \ = Array(file_name)\n    var dot_index = -1\n    var digit_count = 0\n    for\
    \ (index, character) in file_name_characters.enumerated() {\n        if character\
    \ == \".\" {\n            dot_index = index\n        }\n        if character >=\
    \ \"0\" && character <= \"9\" {\n            digit_count += 1\n        }\n   \
    \ }\n    if digit_count > 3 {\n        return \"No\"\n    }\n    if dot_index\
    \ == -1 {\n        return \"No\"\n    }\n    if dot_index == 0 {\n        return\
    \ \"No\"\n    }\n    let prefix = String(file_name_characters[0..<dot_index])\n\
    \    let suffix = String(file_name_characters[dot_index+1..<file_name_characters.count])\n\
    \    if prefix.count == 0 {\n        return \"No\"\n    }\n    if !(prefix[prefix.startIndex]\
    \ >= \"a\" && prefix[prefix.startIndex] <= \"z\") &&\n        !(prefix[prefix.startIndex]\
    \ >= \"A\" && prefix[prefix.startIndex] <= \"Z\") {\n        return \"No\"\n \
    \   }\n    if !(suffix == \"txt\" || suffix == \"exe\" || suffix == \"dll\") {\n\
    \        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_arr = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n  \
    \  if file_name_arr[0].count == 0 {\n        return \"No\"\n    }\n    if file_name_arr[0].rangeOfCharacter(from:\
    \ CharacterSet.decimalDigits) != nil {\n        return \"No\"\n    }\n    if file_name_arr[1]\
    \ != \"txt\" && file_name_arr[1] != \"exe\" && file_name_arr[1] != \"dll\" {\n\
    \        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_arr = file_name.components(separatedBy:\
    \ \".\")\n    let file_name_arr_count = file_name_arr.count\n    let file_name_arr_first\
    \ = file_name_arr[0]\n    let file_name_arr_last = file_name_arr[file_name_arr_count\
    \ - 1]\n    let file_name_arr_first_count = file_name_arr_first.count\n    let\
    \ file_name_arr_last_count = file_name_arr_last.count\n    let file_name_arr_first_first\
    \ = file_name_arr_first[file_name_arr_first.startIndex]\n    let file_name_arr_last_first\
    \ = file_name_arr_last[file_name_arr_last.startIndex]\n    let file_name_arr_last_second\
    \ = file_name_arr_last[file_name_arr_last.index(after: file_name_arr_last.startIndex)]\n\
    \    let file_name_arr_last_third = file_name_arr_last[file_name_arr_last.index(file_name_arr_last.startIndex,\
    \ offsetBy: 2)]\n    let file_name_arr_last_fourth = file_name_arr_last[file_name_arr_last.index(file_name_arr_last.startIndex,\
    \ offsetBy: 3)]\n    let file_name_arr_first_first_is_letter = file_name_arr_first_first.isLetter\n\
    \    let file_name_arr_last_first_is_letter = file_name_arr_last_first.isLetter\n\
    \    let file_name_arr_last_second_is_letter = file_name_arr_last_second.isLetter\n\
    \    let file_name_arr_last_third_is_letter = file_name_arr_last_third.isLetter\n\
    \    let file_name_arr_last_fourth_is_letter = file_name_arr_last_fourth.isLetter\n\
    \    let file_name_arr_first_first_is_number = file_name_arr_first_first.isNumber\n\
    \    let file_name", "    let file_name_regex = Regex(\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.(txt|exe|dll)$\")\n    if file_name_regex.test(file_name) {\n        return\
    \ \"Yes\"\n    }\n    return \"No\"", "    let file_name_chars = Array(file_name)\n\
    \    var digits_count = 0\n    var dot_count = 0\n    var dot_index = 0\n    var\
    \ extension_index = 0\n    var extension_length = 0\n    var extension_is_valid\
    \ = false\n    var extension_is_empty = true\n    var name_is_valid = false\n\
    \    var name_is_empty = true\n    var name_is_valid_char = false\n    var name_is_valid_length\
    \ = false\n    var name_is_valid_length_count = 0\n    var name_is_valid_length_count_max\
    \ = 0\n    var name_is_valid_length_count_min = 0\n    var name_is_valid_length_count_max_valid\
    \ = false\n    var name_is_valid_length_count_min_valid = false\n    var name_is_valid_length_count_valid\
    \ = false\n    var name_is_valid_length_valid = false\n    var name_is_valid_valid\
    \ = false\n    var name_is_valid_valid_valid = false\n    var name_is_valid_valid_valid_valid\
    \ = false\n    var name_is_valid_valid_valid_valid_valid = false\n    var name_is_valid_valid_valid_valid_valid_valid\
    \ = false\n    var name_is_valid_valid_valid_valid_valid_valid_valid = false\n\
    \    var name_is_valid_valid_valid_valid_valid_valid_valid_valid = false\n   \
    \ var name_is_valid_valid_valid_valid_valid_valid_valid_valid_valid = false\n\
    \    var name_is_valid_valid_valid_valid_valid_valid_valid_valid_valid_valid =\
    \ false\n    var name_is_valid_valid_valid_valid_valid_valid_valid_valid_valid_valid_valid\
    \ = false\n    var name_is_valid_valid_valid_valid_valid_valid_valid_valid_valid_valid_valid_valid\
    \ = false\n    var name_is_valid_valid_valid_valid_valid_valid_valid_valid_valid_valid_valid_valid_valid\
    \ = false\n    var name", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    let file_name_test = NSPredicate(format:\"SELF MATCHES\
    \ %@\", file_name_regex)\n    return file_name_test.evaluate(with: file_name)\
    \ ? \"Yes\" : \"No\"", "    let regex = try! NSRegularExpression(pattern: \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\", options: [])\n    let matches = regex.matches(in: file_name,\
    \ options: [], range: NSRange(location: 0, length: file_name.count))\n    return\
    \ matches.count > 0 ? \"Yes\" : \"No\"", '    return ""', "    let fileNameArray\
    \ = file_name.components(separatedBy: \".\")\n    let fileName = fileNameArray[0]\n\
    \    let fileExtension = fileNameArray[1]\n    let fileNameArray2 = fileName.components(separatedBy:\
    \ \"0\")\n    let fileNameArray3 = fileName.components(separatedBy: \"1\")\n \
    \   let fileNameArray4 = fileName.components(separatedBy: \"2\")\n    let fileNameArray5\
    \ = fileName.components(separatedBy: \"3\")\n    let fileNameArray6 = fileName.components(separatedBy:\
    \ \"4\")\n    let fileNameArray7 = fileName.components(separatedBy: \"5\")\n \
    \   let fileNameArray8 = fileName.components(separatedBy: \"6\")\n    let fileNameArray9\
    \ = fileName.components(separatedBy: \"7\")\n    let fileNameArray10 = fileName.components(separatedBy:\
    \ \"8\")\n    let fileNameArray11 = fileName.components(separatedBy: \"9\")\n\
    \    if fileName.isEmpty || fileNameArray.count != 2 || fileNameArray2.count >\
    \ 4 || fileNameArray3.count > 4 || fileNameArray4.count > 4 || fileNameArray5.count\
    \ > 4 || fileNameArray6.count > 4 || fileNameArray7.count > 4 || fileNameArray8.count\
    \ > 4 || fileNameArray9.count > 4 || fileNameArray10.count > 4 || fileNameArray11.count\
    \ > 4 || !fileName.lowercased().hasPrefix(\"a\") && !fileName.lowercased().hasPrefix(\"\
    b\") && !fileName.lowercased().hasPrefix(\"c\") && !fileName.lowercased().hasPrefix(\"\
    d\") && !fileName.lowercased().hasPrefix(\"e\") && !fileName.lowercased().hasPrefix(\"\
    f\") && !fileName.lowercased().hasPrefix(\"g\") && !fileName.lowercased().hasPrefix(\"\
    h\") && !fileName.lowercased().hasPrefix(\"i\") && !fileName.lowercased().hasPrefix(\"\
    j\") &&", "    let file_name_arr = file_name.components(separatedBy: \".\")\n\
    \    if file_name_arr.count != 2 {\n        return \"No\"\n    }\n    let file_name_arr_0\
    \ = file_name_arr[0]\n    let file_name_arr_1 = file_name_arr[1]\n    if file_name_arr_0.count\
    \ == 0 {\n        return \"No\"\n    }\n    if file_name_arr_1.count == 0 {\n\
    \        return \"No\"\n    }\n    if !(file_name_arr_1 == \"txt\" || file_name_arr_1\
    \ == \"exe\" || file_name_arr_1 == \"dll\") {\n        return \"No\"\n    }\n\
    \    let file_name_arr_0_arr = Array(file_name_arr_0)\n    var count = 0\n   \
    \ for char in file_name_arr_0_arr {\n        if char >= \"0\" && char <= \"9\"\
    \ {\n            count += 1\n        }\n    }\n    if count > 3 {\n        return\
    \ \"No\"\n    }\n    if file_name_arr_0_arr[0] >= \"0\" && file_name_arr_0_arr[0]\
    \ <= \"9\" {\n        return \"No\"\n    }\n    return \"Yes\"", "    let file_name_arr\
    \ = file_name.components(separatedBy: \".\")\n    if file_name_arr.count != 2\
    \ {\n        return \"No\"\n    }\n    let first_part = file_name_arr[0]\n   \
    \ let second_part = file_name_arr[1]\n    if first_part.count == 0 || first_part.rangeOfCharacter(from:\
    \ CharacterSet.decimalDigits) != nil {\n        return \"No\"\n    }\n    if second_part.count\
    \ == 0 || second_part.rangeOfCharacter(from: CharacterSet.decimalDigits) != nil\
    \ {\n        return \"No\"\n    }\n    if second_part != \"txt\" && second_part\
    \ != \"exe\" && second_part != \"dll\" {\n        return \"No\"\n    }\n    return\
    \ \"Yes\"", '    return ""', "    let file_name_arr = file_name.components(separatedBy:\
    \ \".\")\n    let file_name_arr_count = file_name_arr.count\n    let file_name_arr_first\
    \ = file_name_arr[0]\n    let file_name_arr_last = file_name_arr[file_name_arr_count\
    \ - 1]\n    let file_name_arr_first_count = file_name_arr_first.count\n    let\
    \ file_name_arr_last_count = file_name_arr_last.count\n    let file_name_arr_first_first\
    \ = file_name_arr_first[file_name_arr_first.startIndex]\n    let file_name_arr_last_first\
    \ = file_name_arr_last[file_name_arr_last.startIndex]\n    let file_name_arr_last_last\
    \ = file_name_arr_last[file_name_arr_last.index(before: file_name_arr_last.endIndex)]\n\
    \    let file_name_arr_last_last_last = file_name_arr_last[file_name_arr_last.index(file_name_arr_last.endIndex,\
    \ offsetBy: -2)]\n    let file_name_arr_last_last_last_last = file_name_arr_last[file_name_arr_last.index(file_name_arr_last.endIndex,\
    \ offsetBy: -3)]\n    let file_name_arr_first_first_int = Int(String(file_name_arr_first_first))\n\
    \    let file_name_arr_last_first_int = Int(String(file_name_arr_last_first))\n\
    \    let file_name_arr_last_last_int = Int(String(file_name_arr_last_last))\n\
    \    let file_name_arr_last_last_last_int = Int(String(file_name_arr_last_last_last))\n\
    \    let file_name_arr_last_last_last_last_int = Int(String(file_name_arr_last_last_last_last))\n\
    \    let file_name_arr_first_first_int_", "    // Write your code here\n    return\
    \ \"\"", "    let file_name_arr = file_name.split(separator: \".\")\n    if file_name_arr.count\
    \ != 2 {\n        return \"No\"\n    }\n    if !file_name_arr[0].isEmpty && file_name_arr[0].first!.isLetter\
    \ {\n        let digits = file_name_arr[0].filter { $0.isNumber }\n        if\
    \ digits.count <= 3 {\n            if file_name_arr[1] == \"txt\" || file_name_arr[1]\
    \ == \"exe\" || file_name_arr[1] == \"dll\" {\n                return \"Yes\"\n\
    \            }\n        }\n    }\n    return \"No\"", "    let file_name_regex\
    \ = \"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.(txt|exe|dll)$\"\n    return file_name.matches(file_name_regex)\
    \ ? \"Yes\" : \"No\"", "    let file_name_regex = \"^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    \\.(txt|exe|dll)$\"\n    return file_name.matches(file_name_regex) ? \"Yes\" :\
    \ \"No\"", "    var result = \"No\"\n    let fileNameArr = file_name.components(separatedBy:\
    \ \".\")\n    if fileNameArr.count == 2 {\n        let firstPart = fileNameArr[0]\n\
    \        let secondPart = fileNameArr[1]\n        if firstPart.count > 0 && secondPart.count\
    \ > 0 {\n            let firstPartArr = Array(firstPart)\n            let secondPartArr\
    \ = Array(secondPart)\n            var firstPartDigitCount = 0\n            var\
    \ secondPartDigitCount = 0\n            for char in firstPartArr {\n         \
    \       if char >= \"0\" && char <= \"9\" {\n                    firstPartDigitCount\
    \ += 1\n                }\n            }\n            for char in secondPartArr\
    \ {\n                if char >= \"0\" && char <= \"9\" {\n                   \
    \ secondPartDigitCount += 1\n                }\n            }\n            if\
    \ firstPartDigitCount <= 3 && secondPartDigitCount == 0 {\n                if\
    \ firstPartArr[0] >= \"a\" && firstPartArr[0] <= \"z\" || firstPartArr[0] >= \"\
    A\" && firstPartArr[0] <= \"Z\" {\n                    if secondPart == \"txt\"\
    \ || secondPart == \"exe\" || secondPart == \"dll\" {\n                      \
    \  result = \"Yes\"\n                    }\n                }\n            }\n\
    \        }\n    }\n    return result", "    let file_name_components = file_name.components(separatedBy:\
    \ \".\")\n    if file_name_components.count != 2 {\n        return \"No\"\n  \
    \  }\n    let file_name_components_count = file_name_components.count\n    if\
    \ file_name_components_count != 2 {\n        return \"No\"\n    }\n    let file_name_components_first\
    \ = file_name_components[0]\n    let file_name_components_last = file_name_components[1]\n\
    \    if file_name_components_first.count == 0 {\n        return \"No\"\n    }\n\
    \    let file_name_components_first_first_character = file_name_components_first[file_name_components_first.startIndex]\n\
    \    if !(file_name_components_first_first_character >= \"a\" && file_name_components_first_first_character\
    \ <= \"z\") && !(file_name_components_first_first_character >= \"A\" && file_name_components_first_first_character\
    \ <= \"Z\") {\n        return \"No\"\n    }\n    if file_name_components_last\
    \ != \"txt\" && file_name_components_last != \"exe\" && file_name_components_last\
    \ != \"dll\" {\n        return \"No\"\n    }\n    let file_name_components_first_digits_count\
    \ = file_name_components_first.filter { $0 >= \"0\" && $0 <= \"9\" }.count\n \
    \   if file_name_components_first_digits_count > 3 {\n        return \"No\"\n\
    \    }\n    return \"Yes\""]
stop_tokens:
- "\n}"
