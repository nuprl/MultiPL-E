language: swift
name: HumanEval_79_decimal_to_binary
results:
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var number = decimal\n    while\
    \ number > 0 {\n        binary = String(number % 2) + binary\n        number /=\
    \ 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmppmi4lqb_/tmppmi4lqb_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba98d4fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba98d1f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba98d1f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba98d1f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppmi4lqb_                        0x0000563d9b7b0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ba98d6ea460 __libc_start_main +
    245

    6    tmppmi4lqb_                        0x0000563d9b7b00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var num = decimal\n    while\
    \ num > 0 {\n        result = String(num % 2) + result\n        num /= 2\n   \
    \ }\n    return result + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(decimal_to_binary(decimal:\
    \ 0) == \"db0db\")\nassert(decimal_to_binary(decimal: 32) == \"db100000db\")\n\
    assert(decimal_to_binary(decimal: 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal:\
    \ 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpwsfrzcp4/tmpwsfrzcp4.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad20826dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad207f64b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad207f64988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad207f637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwsfrzcp4                        0x000055d8abfee492 <unavailable> + 5266

    5    libc.so.6                          0x00002ad208459460 __libc_start_main +
    245

    6    tmpwsfrzcp4                        0x000055d8abfee0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = \"\\(decimal % 2)\" + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjuojo69d/tmpjuojo69d.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6cb9c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6cb6b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6cb6b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6cb6b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjuojo69d                        0x0000562bdfae4622 <unavailable> + 5666

    5    libc.so.6                          0x00002ba6cbbac460 __libc_start_main +
    245

    6    tmpjuojo69d                        0x0000562bdfae4289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = \"\\(decimal % 2)\" + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjuojo69d/tmpjuojo69d.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6cb9c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6cb6b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6cb6b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6cb6b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjuojo69d                        0x0000562bdfae4622 <unavailable> + 5666

    5    libc.so.6                          0x00002ba6cbbac460 __libc_start_main +
    245

    6    tmpjuojo69d                        0x0000562bdfae4289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = \"\\(decimal % 2)\" + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjuojo69d/tmpjuojo69d.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6cb9c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6cb6b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6cb6b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6cb6b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjuojo69d                        0x0000562bdfae4622 <unavailable> + 5666

    5    libc.so.6                          0x00002ba6cbbac460 __libc_start_main +
    245

    6    tmpjuojo69d                        0x0000562bdfae4289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var number = decimal\n    while\
    \ number > 0 {\n        binary = String(number % 2) + binary\n        number /=\
    \ 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmppmi4lqb_/tmppmi4lqb_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba98d4fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba98d1f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba98d1f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba98d1f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppmi4lqb_                        0x0000563d9b7b0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ba98d6ea460 __libc_start_main +
    245

    6    tmppmi4lqb_                        0x0000563d9b7b00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"db\" + String(decimal, radix: 2) + \"db\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"db\" + String(decimal, radix: 2) + \"db\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var number = decimal\n    while\
    \ number > 0 {\n        binary = String(number % 2) + binary\n        number /=\
    \ 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmppmi4lqb_/tmppmi4lqb_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba98d4fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba98d1f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba98d1f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba98d1f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppmi4lqb_                        0x0000563d9b7b0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ba98d6ea460 __libc_start_main +
    245

    6    tmppmi4lqb_                        0x0000563d9b7b00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"db\" + String(decimal, radix: 2) + \"db\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = \"\\(decimal % 2)\" + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjuojo69d/tmpjuojo69d.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6cb9c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6cb6b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6cb6b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6cb6b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjuojo69d                        0x0000562bdfae4622 <unavailable> + 5666

    5    libc.so.6                          0x00002ba6cbbac460 __libc_start_main +
    245

    6    tmpjuojo69d                        0x0000562bdfae4289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        result.append(decimal % 2 == 0 ? \"0\" : \"1\")\n   \
    \     decimal /= 2\n    }\n    result.append(\"db\")\n    return String(result.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmp2vlomu_m/tmp2vlomu_m.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a6b51ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a6b215b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a6b215988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a6b2147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2vlomu_m                        0x0000564962d515b2 <unavailable> + 5554

    5    libc.so.6                          0x00002b5a6b70a460 __libc_start_main +
    245

    6    tmp2vlomu_m                        0x0000564962d51219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var num = decimal\n    while num\
    \ > 0 {\n        binary = String(num % 2) + binary\n        num /= 2\n    }\n\
    \    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpr3rz9_30/tmpr3rz9_30.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab597806c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5974fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5974fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5974fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr3rz9_30                        0x000055ba90ff2492 <unavailable> + 5266

    5    libc.so.6                          0x00002ab5979f2460 __libc_start_main +
    245

    6    tmpr3rz9_30                        0x000055ba90ff20f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var dec = decimal\n    while dec\
    \ > 0 {\n        binary = String(dec % 2) + binary\n        dec /= 2\n    }\n\
    \    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpr2r5fnvu/tmpr2r5fnvu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab769f02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab769bf9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab769bf9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab769bf87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr2r5fnvu                        0x000056039162a492 <unavailable> + 5266

    5    libc.so.6                          0x00002ab76a0ee460 __libc_start_main +
    245

    6    tmpr2r5fnvu                        0x000056039162a0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = \"\\(decimal % 2)\" + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjuojo69d/tmpjuojo69d.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6cb9c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6cb6b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6cb6b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6cb6b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjuojo69d                        0x0000562bdfae4622 <unavailable> + 5666

    5    libc.so.6                          0x00002ba6cbbac460 __libc_start_main +
    245

    6    tmpjuojo69d                        0x0000562bdfae4289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        result.append(String(decimal % 2))\n        decimal /=\
    \ 2\n    }\n    result.append(\"db\")\n    return String(result.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpspwtp4ee/tmpspwtp4ee.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1900ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae18fde2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae18fde2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae18fde17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpspwtp4ee                        0x0000561202f94672 <unavailable> + 5746

    5    libc.so.6                          0x00002ae1902d7460 __libc_start_main +
    245

    6    tmpspwtp4ee                        0x0000561202f942d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var dec = decimal\n    while dec\
    \ > 0 {\n        binary = String(dec % 2) + binary\n        dec /= 2\n    }\n\
    \    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpr2r5fnvu/tmpr2r5fnvu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab769f02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab769bf9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab769bf9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab769bf87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr2r5fnvu                        0x000056039162a492 <unavailable> + 5266

    5    libc.so.6                          0x00002ab76a0ee460 __libc_start_main +
    245

    6    tmpr2r5fnvu                        0x000056039162a0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = \"\\(decimal % 2)\" + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjuojo69d/tmpjuojo69d.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6cb9c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6cb6b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6cb6b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6cb6b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjuojo69d                        0x0000562bdfae4622 <unavailable> + 5666

    5    libc.so.6                          0x00002ba6cbbac460 __libc_start_main +
    245

    6    tmpjuojo69d                        0x0000562bdfae4289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"db\" + String(decimal, radix: 2) + \"db\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"db\"\n    var num = decimal\n    while\
    \ num > 0 {\n        binary.append(num % 2 == 0 ? \"0\" : \"1\")\n        num\
    \ /= 2\n    }\n    return binary.reversed() + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmp5wb97_vl/tmp5wb97_vl.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3eac151c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3eabe48b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3eabe48988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3eabe477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5wb97_vl                        0x000055d0703495f2 <unavailable> + 5618

    5    libc.so.6                          0x00002b3eac33d460 __libc_start_main +
    245

    6    tmp5wb97_vl                        0x000055d070349259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = \"\\(decimal % 2)\" + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjuojo69d/tmpjuojo69d.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6cb9c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6cb6b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6cb6b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6cb6b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjuojo69d                        0x0000562bdfae4622 <unavailable> + 5666

    5    libc.so.6                          0x00002ba6cbbac460 __libc_start_main +
    245

    6    tmpjuojo69d                        0x0000562bdfae4289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = \"\\(decimal % 2)\" + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjuojo69d/tmpjuojo69d.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6cb9c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6cb6b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6cb6b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6cb6b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjuojo69d                        0x0000562bdfae4622 <unavailable> + 5666

    5    libc.so.6                          0x00002ba6cbbac460 __libc_start_main +
    245

    6    tmpjuojo69d                        0x0000562bdfae4289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var number = decimal\n    while\
    \ number > 0 {\n        binary = String(number % 2) + binary\n        number /=\
    \ 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmppmi4lqb_/tmppmi4lqb_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba98d4fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba98d1f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba98d1f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba98d1f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppmi4lqb_                        0x0000563d9b7b0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ba98d6ea460 __libc_start_main +
    245

    6    tmppmi4lqb_                        0x0000563d9b7b00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        result += String(decimal % 2)\n        decimal /= 2\n\
    \    }\n    return result.reversed() + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpc45sgr_l/tmpc45sgr_l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c5014cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c4fe43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c4fe43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c4fe427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc45sgr_l                        0x00005648628ac6b2 <unavailable> + 5810

    5    libc.so.6                          0x00002b0c50338460 __libc_start_main +
    245

    6    tmpc45sgr_l                        0x00005648628ac319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"db\" + String(decimal, radix: 2) + \"db\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var num = decimal\n    while num\
    \ > 0 {\n        binary = String(num % 2) + binary\n        num /= 2\n    }\n\
    \    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpr3rz9_30/tmpr3rz9_30.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab597806c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5974fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5974fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5974fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr3rz9_30                        0x000055ba90ff2492 <unavailable> + 5266

    5    libc.so.6                          0x00002ab5979f2460 __libc_start_main +
    245

    6    tmpr3rz9_30                        0x000055ba90ff20f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        result = \"\\(decimal % 2)\" + result\n        decimal\
    \ /= 2\n    }\n    return \"db\" + result + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpzhjvobog/tmpzhjvobog.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b1647ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b16175b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b16175988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b161747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhjvobog                        0x0000562cf970d622 <unavailable> + 5666

    5    libc.so.6                          0x00002b4b1666a460 __libc_start_main +
    245

    6    tmpzhjvobog                        0x0000562cf970d289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"db\" + String(decimal, radix: 2) + \"db\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"db\" + String(decimal, radix: 2) + \"db\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        result.append(decimal % 2 == 0 ? \"0\" : \"1\")\n   \
    \     decimal /= 2\n    }\n    result.append(\"db\")\n    return String(result.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmp2vlomu_m/tmp2vlomu_m.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a6b51ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a6b215b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a6b215988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a6b2147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2vlomu_m                        0x0000564962d515b2 <unavailable> + 5554

    5    libc.so.6                          0x00002b5a6b70a460 __libc_start_main +
    245

    6    tmp2vlomu_m                        0x0000564962d51219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"db\" + String(decimal, radix: 2) + \"db\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        result = String(number % 2) + result\n        number /=\
    \ 2\n    }\n    return result + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpv4mfqmrk/tmpv4mfqmrk.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3e9768c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3e945fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3e945f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3e945e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4mfqmrk                        0x0000557a973a5492 <unavailable> + 5266

    5    libc.so.6                          0x00002ab3e9954460 __libc_start_main +
    245

    6    tmpv4mfqmrk                        0x0000557a973a50f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"db\" + String(decimal, radix: 2) + \"db\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var dec = decimal\n    while dec\
    \ > 0 {\n        binary = String(dec % 2) + binary\n        dec /= 2\n    }\n\
    \    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpr2r5fnvu/tmpr2r5fnvu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab769f02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab769bf9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab769bf9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab769bf87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr2r5fnvu                        0x000056039162a492 <unavailable> + 5266

    5    libc.so.6                          0x00002ab76a0ee460 __libc_start_main +
    245

    6    tmpr2r5fnvu                        0x000056039162a0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        result += String(decimal % 2)\n        decimal /= 2\n\
    \    }\n    return result + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpa38wyozu/tmpa38wyozu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5b58bb0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5b588a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5b588a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5b588a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa38wyozu                        0x0000561350afc4e2 <unavailable> + 5346

    5    libc.so.6                          0x00002b5b58d9c460 __libc_start_main +
    245

    6    tmpa38wyozu                        0x0000561350afc149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        result.append(number % 2 == 0 ? \"0\" : \"1\")\n     \
    \   number /= 2\n    }\n    result.append(\"db\")\n    return String(result.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmphr3bqw2w/tmphr3bqw2w.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11a7b7dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11a7874b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11a7874988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11a78737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphr3bqw2w                        0x00005647f9ae75b2 <unavailable> + 5554

    5    libc.so.6                          0x00002b11a7d69460 __libc_start_main +
    245

    6    tmphr3bqw2w                        0x00005647f9ae7219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        result = String(number % 2) + result\n        number /=\
    \ 2\n    }\n    return result + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpv4mfqmrk/tmpv4mfqmrk.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab3e9768c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab3e945fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab3e945f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab3e945e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4mfqmrk                        0x0000557a973a5492 <unavailable> + 5266

    5    libc.so.6                          0x00002ab3e9954460 __libc_start_main +
    245

    6    tmpv4mfqmrk                        0x0000557a973a50f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        result.append(String(decimal & 1))\n        decimal >>=\
    \ 1\n    }\n    result.append(\"db\")\n    return String(result.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpu0b3db0q/tmpu0b3db0q.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a3ad86c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a3aa7db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a3aa7d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a3aa7c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu0b3db0q                        0x00005599c37085d2 <unavailable> + 5586

    5    libc.so.6                          0x00002b6a3af72460 __libc_start_main +
    245

    6    tmpu0b3db0q                        0x00005599c3708239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660013686
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var num = decimal\n    while num\
    \ > 0 {\n        binary = String(num % 2) + binary\n        num /= 2\n    }\n\
    \    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpr3rz9_30/tmpr3rz9_30.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab597806c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5974fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5974fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5974fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr3rz9_30                        0x000055ba90ff2492 <unavailable> + 5266

    5    libc.so.6                          0x00002ab5979f2460 __libc_start_main +
    245

    6    tmpr3rz9_30                        0x000055ba90ff20f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var temp = decimal\n    while temp\
    \ > 0 {\n        binary = String(temp % 2) + binary\n        temp /= 2\n    }\n\
    \    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpyaqveuwz/tmpyaqveuwz.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93e1a4ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93e1745b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93e1745988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93e17447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyaqveuwz                        0x0000559323823492 <unavailable> + 5266

    5    libc.so.6                          0x00002b93e1c3a460 __libc_start_main +
    245

    6    tmpyaqveuwz                        0x00005593238230f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary += String(decimal % 2)\n        decimal /= 2\n\
    \    }\n    return String(binary.characters.reverse()) + \"db\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: SyntaxError
  stderr: "/tmp/tmps4iwkg7k.swift:17:37: error: value of type 'String' has no member\
    \ 'reverse'\n    return String(binary.characters.reverse()) + \"db\"\n       \
    \           ~~~~~~~~~~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var dec = decimal\n    while dec\
    \ > 0 {\n        binary = String(dec % 2) + binary\n        dec /= 2\n    }\n\
    \    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpr2r5fnvu/tmpr2r5fnvu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab769f02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab769bf9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab769bf9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab769bf87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr2r5fnvu                        0x000056039162a492 <unavailable> + 5266

    5    libc.so.6                          0x00002ab76a0ee460 __libc_start_main +
    245

    6    tmpr2r5fnvu                        0x000056039162a0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = \"\\(decimal % 2)\" + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjuojo69d/tmpjuojo69d.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6cb9c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6cb6b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6cb6b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6cb6b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjuojo69d                        0x0000562bdfae4622 <unavailable> + 5666

    5    libc.so.6                          0x00002ba6cbbac460 __libc_start_main +
    245

    6    tmpjuojo69d                        0x0000562bdfae4289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        binary += String(number % 2)\n        number /= 2\n  \
    \  }\n    return String(binary.characters.reverse()) + \"db\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: SyntaxError
  stderr: "/tmp/tmpx5ie0h2t.swift:17:37: error: value of type 'String' has no member\
    \ 'reverse'\n    return String(binary.characters.reverse()) + \"db\"\n       \
    \           ~~~~~~~~~~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"\"\n    var number = decimal\n    while\
    \ number > 0 {\n        result = String(number % 2) + result\n        number /=\
    \ 2\n    }\n    return \"db\" + result + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpl8npb_gt/tmpl8npb_gt.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2582130c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2581e27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2581e27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2581e267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl8npb_gt                        0x000055b3c5d23492 <unavailable> + 5266

    5    libc.so.6                          0x00002b258231c460 __libc_start_main +
    245

    6    tmpl8npb_gt                        0x000055b3c5d230f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        result += String(decimal % 2)\n        decimal /= 2\n\
    \    }\n    return result + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpa38wyozu/tmpa38wyozu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5b58bb0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5b588a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5b588a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5b588a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa38wyozu                        0x0000561350afc4e2 <unavailable> + 5346

    5    libc.so.6                          0x00002b5b58d9c460 __libc_start_main +
    245

    6    tmpa38wyozu                        0x0000561350afc149 <unavailable> + 4425

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        result.append(decimal % 2 == 0 ? \"0\" : \"1\")\n   \
    \     decimal /= 2\n    }\n    result.append(\"db\")\n    return String(result.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmp2vlomu_m/tmp2vlomu_m.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a6b51ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a6b215b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a6b215988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a6b2147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2vlomu_m                        0x0000564962d515b2 <unavailable> + 5554

    5    libc.so.6                          0x00002b5a6b70a460 __libc_start_main +
    245

    6    tmp2vlomu_m                        0x0000564962d51219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        result.append(String(decimal % 2))\n        decimal /=\
    \ 2\n    }\n    result.append(\"db\")\n    return String(result.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpspwtp4ee/tmpspwtp4ee.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1900ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae18fde2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae18fde2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae18fde17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpspwtp4ee                        0x0000561202f94672 <unavailable> + 5746

    5    libc.so.6                          0x00002ae1902d7460 __libc_start_main +
    245

    6    tmpspwtp4ee                        0x0000561202f942d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var number = decimal\n    while\
    \ number > 0 {\n        binary = String(number % 2) + binary\n        number /=\
    \ 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmppmi4lqb_/tmppmi4lqb_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba98d4fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba98d1f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba98d1f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba98d1f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppmi4lqb_                        0x0000563d9b7b0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ba98d6ea460 __libc_start_main +
    245

    6    tmppmi4lqb_                        0x0000563d9b7b00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        result.append(decimal % 2 == 0 ? \"0\" : \"1\")\n   \
    \     decimal /= 2\n    }\n    result.append(\"db\")\n    return String(result.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmp2vlomu_m/tmp2vlomu_m.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a6b51ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a6b215b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a6b215988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a6b2147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2vlomu_m                        0x0000564962d515b2 <unavailable> + 5554

    5    libc.so.6                          0x00002b5a6b70a460 __libc_start_main +
    245

    6    tmp2vlomu_m                        0x0000564962d51219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var number = decimal\n    while\
    \ number > 0 {\n        binary = String(number % 2) + binary\n        number /=\
    \ 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmppmi4lqb_/tmppmi4lqb_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba98d4fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba98d1f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba98d1f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba98d1f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppmi4lqb_                        0x0000563d9b7b0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ba98d6ea460 __libc_start_main +
    245

    6    tmppmi4lqb_                        0x0000563d9b7b00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var number = decimal\n    while\
    \ number > 0 {\n        binary = String(number % 2) + binary\n        number /=\
    \ 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmppmi4lqb_/tmppmi4lqb_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba98d4fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba98d1f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba98d1f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba98d1f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppmi4lqb_                        0x0000563d9b7b0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ba98d6ea460 __libc_start_main +
    245

    6    tmppmi4lqb_                        0x0000563d9b7b00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        result.append(decimal % 2 == 0 ? \"0\" : \"1\")\n   \
    \     decimal /= 2\n    }\n    result.append(\"db\")\n    return String(result.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmp2vlomu_m/tmp2vlomu_m.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a6b51ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a6b215b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a6b215988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a6b2147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2vlomu_m                        0x0000564962d515b2 <unavailable> + 5554

    5    libc.so.6                          0x00002b5a6b70a460 __libc_start_main +
    245

    6    tmp2vlomu_m                        0x0000564962d51219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        result.append(decimal % 2 == 0 ? \"0\" : \"1\")\n   \
    \     decimal /= 2\n    }\n    result.append(\"db\")\n    return String(result.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmp2vlomu_m/tmp2vlomu_m.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a6b51ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a6b215b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a6b215988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a6b2147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2vlomu_m                        0x0000564962d515b2 <unavailable> + 5554

    5    libc.so.6                          0x00002b5a6b70a460 __libc_start_main +
    245

    6    tmp2vlomu_m                        0x0000564962d51219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary.append(String(decimal % 2))\n        decimal /=\
    \ 2\n    }\n    return binary.reversed() + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpqj8wny97/tmpqj8wny97.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aabfac72c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aabfa969b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aabfa969988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aabfa9687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqj8wny97                        0x000055629215a6b2 <unavailable> + 5810

    5    libc.so.6                          0x00002aabfae5e460 __libc_start_main +
    245

    6    tmpqj8wny97                        0x000055629215a319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        result.append(String(decimal % 2))\n        decimal /=\
    \ 2\n    }\n    result.append(\"db\")\n    return String(result.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpspwtp4ee/tmpspwtp4ee.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1900ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae18fde2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae18fde2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae18fde17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpspwtp4ee                        0x0000561202f94672 <unavailable> + 5746

    5    libc.so.6                          0x00002ae1902d7460 __libc_start_main +
    245

    6    tmpspwtp4ee                        0x0000561202f942d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = \"\\(decimal % 2)\" + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjuojo69d/tmpjuojo69d.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6cb9c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6cb6b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6cb6b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6cb6b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjuojo69d                        0x0000562bdfae4622 <unavailable> + 5666

    5    libc.so.6                          0x00002ba6cbbac460 __libc_start_main +
    245

    6    tmpjuojo69d                        0x0000562bdfae4289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var num = decimal\n    while num\
    \ > 0 {\n        binary = String(num % 2) + binary\n        num /= 2\n    }\n\
    \    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpr3rz9_30/tmpr3rz9_30.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab597806c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5974fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5974fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5974fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr3rz9_30                        0x000055ba90ff2492 <unavailable> + 5266

    5    libc.so.6                          0x00002ab5979f2460 __libc_start_main +
    245

    6    tmpr3rz9_30                        0x000055ba90ff20f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        result.append(number % 2 == 0 ? \"0\" : \"1\")\n     \
    \   number /= 2\n    }\n    result.append(\"db\")\n    return String(result.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmphr3bqw2w/tmphr3bqw2w.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11a7b7dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11a7874b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11a7874988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11a78737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphr3bqw2w                        0x00005647f9ae75b2 <unavailable> + 5554

    5    libc.so.6                          0x00002b11a7d69460 __libc_start_main +
    245

    6    tmphr3bqw2w                        0x00005647f9ae7219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: 1
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary += String(decimal % 2)\n        decimal /= 2\n\
    \    }\n    return String(binary.characters.reverse()) + \"db\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: SyntaxError
  stderr: "/tmp/tmps4iwkg7k.swift:17:37: error: value of type 'String' has no member\
    \ 'reverse'\n    return String(binary.characters.reverse()) + \"db\"\n       \
    \           ~~~~~~~~~~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var number = decimal\n    while\
    \ number > 0 {\n        binary = String(number % 2) + binary\n        number /=\
    \ 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmppmi4lqb_/tmppmi4lqb_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba98d4fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba98d1f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba98d1f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba98d1f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppmi4lqb_                        0x0000563d9b7b0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ba98d6ea460 __libc_start_main +
    245

    6    tmppmi4lqb_                        0x0000563d9b7b00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        result.append(String(decimal % 2))\n        decimal /=\
    \ 2\n    }\n    result.append(\"db\")\n    return String(result.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpspwtp4ee/tmpspwtp4ee.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1900ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae18fde2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae18fde2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae18fde17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpspwtp4ee                        0x0000561202f94672 <unavailable> + 5746

    5    libc.so.6                          0x00002ae1902d7460 __libc_start_main +
    245

    6    tmpspwtp4ee                        0x0000561202f942d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"db\" + String(decimal, radix: 2) + \"db\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013685
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"db\" + String(decimal, radix: 2) + \"db\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        result.append(decimal % 2 == 0 ? \"0\" : \"1\")\n   \
    \     decimal /= 2\n    }\n    result.append(\"db\")\n    return String(result.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmp2vlomu_m/tmp2vlomu_m.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a6b51ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a6b215b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a6b215988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a6b2147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2vlomu_m                        0x0000564962d515b2 <unavailable> + 5554

    5    libc.so.6                          0x00002b5a6b70a460 __libc_start_main +
    245

    6    tmp2vlomu_m                        0x0000564962d51219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var number = decimal\n    while\
    \ number > 0 {\n        binary = \"\\(number % 2)\" + binary\n        number /=\
    \ 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmprzlj5qwf/tmprzlj5qwf.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b32c34c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b3292bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b3292b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b3292a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprzlj5qwf                        0x000055577eee2622 <unavailable> + 5666

    5    libc.so.6                          0x00002b9b32e20460 __libc_start_main +
    245

    6    tmprzlj5qwf                        0x000055577eee2289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"db\" + String(decimal, radix: 2) + \"db\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var number = decimal\n    while\
    \ number > 0 {\n        binary = String(number % 2) + binary\n        number /=\
    \ 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmppmi4lqb_/tmppmi4lqb_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba98d4fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba98d1f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba98d1f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba98d1f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppmi4lqb_                        0x0000563d9b7b0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ba98d6ea460 __libc_start_main +
    245

    6    tmppmi4lqb_                        0x0000563d9b7b00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var dec = decimal\n    while dec\
    \ > 0 {\n        binary = String(dec % 2) + binary\n        dec /= 2\n    }\n\
    \    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpr2r5fnvu/tmpr2r5fnvu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab769f02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab769bf9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab769bf9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab769bf87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr2r5fnvu                        0x000056039162a492 <unavailable> + 5266

    5    libc.so.6                          0x00002ab76a0ee460 __libc_start_main +
    245

    6    tmpr2r5fnvu                        0x000056039162a0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var number = decimal\n    while\
    \ number > 0 {\n        binary = String(number % 2) + binary\n        number /=\
    \ 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmppmi4lqb_/tmppmi4lqb_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba98d4fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba98d1f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba98d1f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba98d1f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppmi4lqb_                        0x0000563d9b7b0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ba98d6ea460 __libc_start_main +
    245

    6    tmppmi4lqb_                        0x0000563d9b7b00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"db\" + String(decimal, radix: 2) + \"db\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var num = decimal\n    while num\
    \ > 0 {\n        binary = \"\\(num % 2)\" + binary\n        num /= 2\n    }\n\
    \    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpon9hxmzd/tmpon9hxmzd.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec8ea5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec8e754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec8e754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec8e7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpon9hxmzd                        0x0000555d56cdb622 <unavailable> + 5666

    5    libc.so.6                          0x00002aec8ec49460 __libc_start_main +
    245

    6    tmpon9hxmzd                        0x0000555d56cdb289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var number = decimal\n    while\
    \ number > 0 {\n        result.append(number % 2 == 0 ? \"0\" : \"1\")\n     \
    \   number /= 2\n    }\n    result.append(\"db\")\n    return String(result.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmphr3bqw2w/tmphr3bqw2w.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11a7b7dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11a7874b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11a7874988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11a78737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphr3bqw2w                        0x00005647f9ae75b2 <unavailable> + 5554

    5    libc.so.6                          0x00002b11a7d69460 __libc_start_main +
    245

    6    tmphr3bqw2w                        0x00005647f9ae7219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = \"\\(decimal % 2)\" + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjuojo69d/tmpjuojo69d.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6cb9c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6cb6b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6cb6b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6cb6b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjuojo69d                        0x0000562bdfae4622 <unavailable> + 5666

    5    libc.so.6                          0x00002ba6cbbac460 __libc_start_main +
    245

    6    tmpjuojo69d                        0x0000562bdfae4289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var number = decimal\n    while\
    \ number > 0 {\n        binary = String(number % 2) + binary\n        number /=\
    \ 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmppmi4lqb_/tmppmi4lqb_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba98d4fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba98d1f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba98d1f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba98d1f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppmi4lqb_                        0x0000563d9b7b0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ba98d6ea460 __libc_start_main +
    245

    6    tmppmi4lqb_                        0x0000563d9b7b00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var num = decimal\n    while num\
    \ > 0 {\n        binary = String(num % 2) + binary\n        num /= 2\n    }\n\
    \    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpr3rz9_30/tmpr3rz9_30.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab597806c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5974fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5974fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5974fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr3rz9_30                        0x000055ba90ff2492 <unavailable> + 5266

    5    libc.so.6                          0x00002ab5979f2460 __libc_start_main +
    245

    6    tmpr3rz9_30                        0x000055ba90ff20f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var number = decimal\n    while\
    \ number > 0 {\n        binary = String(number % 2) + binary\n        number /=\
    \ 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmppmi4lqb_/tmppmi4lqb_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba98d4fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba98d1f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba98d1f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba98d1f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppmi4lqb_                        0x0000563d9b7b0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ba98d6ea460 __libc_start_main +
    245

    6    tmppmi4lqb_                        0x0000563d9b7b00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"db\" + String(decimal, radix: 2) + \"db\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var num = decimal\n    while num\
    \ > 0 {\n        binary = String(num % 2) + binary\n        num /= 2\n    }\n\
    \    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpr3rz9_30/tmpr3rz9_30.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab597806c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5974fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5974fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5974fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr3rz9_30                        0x000055ba90ff2492 <unavailable> + 5266

    5    libc.so.6                          0x00002ab5979f2460 __libc_start_main +
    245

    6    tmpr3rz9_30                        0x000055ba90ff20f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var number = decimal\n    while\
    \ number > 0 {\n        binary = String(number % 2) + binary\n        number /=\
    \ 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmppmi4lqb_/tmppmi4lqb_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba98d4fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba98d1f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba98d1f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba98d1f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppmi4lqb_                        0x0000563d9b7b0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ba98d6ea460 __libc_start_main +
    245

    6    tmppmi4lqb_                        0x0000563d9b7b00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"db\" + String(decimal, radix: 2) + \"db\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        result.append(String(decimal % 2))\n        decimal /=\
    \ 2\n    }\n    result.append(\"db\")\n    return String(result.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpspwtp4ee/tmpspwtp4ee.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1900ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae18fde2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae18fde2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae18fde17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpspwtp4ee                        0x0000561202f94672 <unavailable> + 5746

    5    libc.so.6                          0x00002ae1902d7460 __libc_start_main +
    245

    6    tmpspwtp4ee                        0x0000561202f942d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        result.append(decimal % 2 == 0 ? \"0\" : \"1\")\n   \
    \     decimal /= 2\n    }\n    result.append(\"db\")\n    return String(result.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmp2vlomu_m/tmp2vlomu_m.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a6b51ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a6b215b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a6b215988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a6b2147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2vlomu_m                        0x0000564962d515b2 <unavailable> + 5554

    5    libc.so.6                          0x00002b5a6b70a460 __libc_start_main +
    245

    6    tmp2vlomu_m                        0x0000564962d51219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        result.append(String(decimal % 2))\n        decimal /=\
    \ 2\n    }\n    result.append(\"db\")\n    return String(result.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpspwtp4ee/tmpspwtp4ee.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1900ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae18fde2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae18fde2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae18fde17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpspwtp4ee                        0x0000561202f94672 <unavailable> + 5746

    5    libc.so.6                          0x00002ae1902d7460 __libc_start_main +
    245

    6    tmpspwtp4ee                        0x0000561202f942d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = \"\\(decimal % 2)\" + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjuojo69d/tmpjuojo69d.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6cb9c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6cb6b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6cb6b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6cb6b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjuojo69d                        0x0000562bdfae4622 <unavailable> + 5666

    5    libc.so.6                          0x00002ba6cbbac460 __libc_start_main +
    245

    6    tmpjuojo69d                        0x0000562bdfae4289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = \"\\(decimal % 2)\" + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjuojo69d/tmpjuojo69d.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6cb9c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6cb6b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6cb6b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6cb6b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjuojo69d                        0x0000562bdfae4622 <unavailable> + 5666

    5    libc.so.6                          0x00002ba6cbbac460 __libc_start_main +
    245

    6    tmpjuojo69d                        0x0000562bdfae4289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var num = decimal\n    while num\
    \ > 0 {\n        binary = String(num % 2) + binary\n        num /= 2\n    }\n\
    \    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpr3rz9_30/tmpr3rz9_30.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab597806c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5974fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5974fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5974fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr3rz9_30                        0x000055ba90ff2492 <unavailable> + 5266

    5    libc.so.6                          0x00002ab5979f2460 __libc_start_main +
    245

    6    tmpr3rz9_30                        0x000055ba90ff20f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = \"\\(decimal % 2)\" + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpjuojo69d/tmpjuojo69d.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6cb9c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6cb6b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6cb6b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6cb6b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjuojo69d                        0x0000562bdfae4622 <unavailable> + 5666

    5    libc.so.6                          0x00002ba6cbbac460 __libc_start_main +
    245

    6    tmpjuojo69d                        0x0000562bdfae4289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        result = String(decimal % 2) + result\n        decimal\
    \ /= 2\n    }\n    return result + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpcpuptqld/tmpcpuptqld.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6bc6872c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6bc6569b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6bc6569988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6bc65687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcpuptqld                        0x000055b860739492 <unavailable> + 5266

    5    libc.so.6                          0x00002b6bc6a5e460 __libc_start_main +
    245

    6    tmpcpuptqld                        0x000055b8607390f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013686
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        result.append(String(decimal % 2))\n        decimal /=\
    \ 2\n    }\n    result.append(\"db\")\n    return String(result.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmpspwtp4ee/tmpspwtp4ee.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1900ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae18fde2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae18fde2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae18fde17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpspwtp4ee                        0x0000561202f94672 <unavailable> + 5746

    5    libc.so.6                          0x00002ae1902d7460 __libc_start_main +
    245

    6    tmpspwtp4ee                        0x0000561202f942d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: 0
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    return \"db\" + String(decimal, radix: 2) + \"db\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var number = decimal\n    while\
    \ number > 0 {\n        binary = String(number % 2) + binary\n        number /=\
    \ 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmppmi4lqb_/tmppmi4lqb_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba98d4fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba98d1f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba98d1f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba98d1f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppmi4lqb_                        0x0000563d9b7b0492 <unavailable> + 5266

    5    libc.so.6                          0x00002ba98d6ea460 __libc_start_main +
    245

    6    tmppmi4lqb_                        0x0000563d9b7b00f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        binary = String(decimal % 2) + binary\n        decimal\
    \ /= 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpozb9da5l/tmpozb9da5l.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b023bafdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b023b7f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b023b7f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b023b7f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpozb9da5l                        0x000055d83e636492 <unavailable> + 5266

    5    libc.so.6                          0x00002b023bce9460 __libc_start_main +
    245

    6    tmpozb9da5l                        0x000055d83e6360f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var dec = decimal\n    while dec\
    \ > 0 {\n        binary = String(dec % 2) + binary\n        dec /= 2\n    }\n\
    \    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmpr2r5fnvu/tmpr2r5fnvu.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab769f02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab769bf9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab769bf9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab769bf87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr2r5fnvu                        0x000056039162a492 <unavailable> + 5266

    5    libc.so.6                          0x00002ab76a0ee460 __libc_start_main +
    245

    6    tmpr2r5fnvu                        0x000056039162a0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var result = \"db\"\n    var decimal = decimal\n    while\
    \ decimal > 0 {\n        result.append(decimal % 2 == 0 ? \"0\" : \"1\")\n   \
    \     decimal /= 2\n    }\n    result.append(\"db\")\n    return String(result.reversed())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\n\
    assert(decimal_to_binary(decimal: 32) == \"db100000db\")\nassert(decimal_to_binary(decimal:\
    \ 103) == \"db1100111db\")\nassert(decimal_to_binary(decimal: 15) == \"db1111db\"\
    )"
  status: Exception
  stderr: 'tmp2vlomu_m/tmp2vlomu_m.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a6b51ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a6b215b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a6b215988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a6b2147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2vlomu_m                        0x0000564962d515b2 <unavailable> + 5554

    5    libc.so.6                          0x00002b5a6b70a460 __libc_start_main +
    245

    6    tmp2vlomu_m                        0x0000564962d51219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013685
- exit_code: -4
  program: "\n/// You will be given a number in decimal form and your task is to convert\
    \ it to\n/// binary format. The function should return a string, with each character\
    \ representing a binary\n/// number. Each character in the string will be '0'\
    \ or '1'.\n/// There will be an extra couple of characters 'db' at the beginning\
    \ and at the end of the string.\n/// The extra characters are there to help with\
    \ the format.\n/// Examples:\n/// decimal_to_binary(15)   # returns \"db1111db\"\
    \n/// decimal_to_binary(32)   # returns \"db100000db\"\nfunc decimal_to_binary(decimal:\
    \ Int) -> String {\n    var binary = \"\"\n    var number = decimal\n    while\
    \ number > 0 {\n        binary = \"\\(number % 2)\" + binary\n        number /=\
    \ 2\n    }\n    return \"db\" + binary + \"db\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(decimal_to_binary(decimal: 0) == \"db0db\")\nassert(decimal_to_binary(decimal:\
    \ 32) == \"db100000db\")\nassert(decimal_to_binary(decimal: 103) == \"db1100111db\"\
    )\nassert(decimal_to_binary(decimal: 15) == \"db1111db\")"
  status: Exception
  stderr: 'tmprzlj5qwf/tmprzlj5qwf.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b32c34c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b3292bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b3292b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b3292a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprzlj5qwf                        0x000055577eee2622 <unavailable> + 5666

    5    libc.so.6                          0x00002b9b32e20460 __libc_start_main +
    245

    6    tmprzlj5qwf                        0x000055577eee2289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660013685
