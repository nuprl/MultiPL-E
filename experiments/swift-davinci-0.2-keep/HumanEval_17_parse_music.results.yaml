language: swift
name: HumanEval_17_parse_music
results:
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let music_string_array = music_string.components(separatedBy:\
    \ \" \")\n    for music_string in music_string_array {\n        switch music_string\
    \ {\n        case \"o\":\n            result.append(4)\n        case \"o|\":\n\
    \            result.append(2)\n        case \".|\":\n            result.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp_n5gculw.swift:13:43: error: value of type 'String' has no member\
    \ 'components'\n    let music_string_array = music_string.components(separatedBy:\
    \ \" \")\n                             ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let music_string_array = music_string.components(separatedBy:\
    \ \" \")\n    for music_string in music_string_array {\n        if music_string\
    \ == \"o\" {\n            result.append(4)\n        } else if music_string ==\
    \ \"o|\" {\n            result.append(2)\n        } else if music_string == \"\
    .|\" {\n            result.append(1)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpb818oj1d.swift:13:43: error: value of type 'String' has no member\
    \ 'components'\n    let music_string_array = music_string.components(separatedBy:\
    \ \" \")\n                             ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var music = music_string.components(separatedBy:\
    \ \" \")\n    for note in music {\n        if note == \"o\" {\n            result.append(4)\n\
    \        } else if note == \"o|\" {\n            result.append(2)\n        } else\
    \ if note == \".|\" {\n            result.append(1)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp4lkyn4do.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    var music = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var result = [Int]()\n    for note in notes {\n        switch note\
    \ {\n        case \"o\":\n            result.append(4)\n        case \"o|\":\n\
    \            result.append(2)\n        case \".|\":\n            result.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpma5m8dql.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        switch note {\n\
    \        case \"o\":\n            beats.append(4)\n        case \"o|\":\n    \
    \        beats.append(2)\n        case \".|\":\n            beats.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return beats\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpp01oipe4.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        switch note {\n\
    \        case \"o\":\n            beats.append(4)\n        case \"o|\":\n    \
    \        beats.append(2)\n        case \".|\":\n            beats.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return beats\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpp01oipe4.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    for character in music_string\
    \ {\n        switch character {\n        case \"o\":\n            beats.append(4)\n\
    \        case \"o|\":\n            beats.append(2)\n        case \".|\":\n   \
    \         beats.append(1)\n        default:\n            break\n        }\n  \
    \  }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp1xdppaq4.swift:17:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \"o|\":\n            \
    \ ^~~~\n/tmp/tmp1xdppaq4.swift:19:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \".|\":\n            \
    \ ^~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpdbi5rmw9.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var result = [Int]()\n    for note in notes {\n        switch note\
    \ {\n        case \"o\":\n            result.append(4)\n        case \"o|\":\n\
    \            result.append(2)\n        case \".|\":\n            result.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpma5m8dql.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    for char in music_string\
    \ {\n        switch char {\n        case \"o\":\n            result.append(4)\n\
    \        case \"o|\":\n            result.append(2)\n        case \".|\":\n  \
    \          result.append(1)\n        default:\n            break\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpajorqtqd.swift:17:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \"o|\":\n            \
    \ ^~~~\n/tmp/tmpajorqtqd.swift:19:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \".|\":\n            \
    \ ^~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var result = [Int]()\n    for note in notes {\n        switch note\
    \ {\n        case \"o\":\n            result.append(4)\n        case \"o|\":\n\
    \            result.append(2)\n        case \".|\":\n            result.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpma5m8dql.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpbp6szpn2.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        switch note {\n\
    \        case \"o\":\n            beats.append(4)\n        case \"o|\":\n    \
    \        beats.append(2)\n        case \".|\":\n            beats.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return beats\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpp01oipe4.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var music_string = music_string\n\
    \    while music_string.characters.count > 0 {\n        if music_string.hasPrefix(\"\
    o\") {\n            result.append(4)\n            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(1))\n\
    \        } else if music_string.hasPrefix(\"o|\") {\n            result.append(2)\n\
    \            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \        } else if music_string.hasPrefix(\".|\") {\n            result.append(1)\n\
    \            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \        } else {\n            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(1))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpmcc3v__i.swift:14:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    while music_string.characters.count > 0 {\n       \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpmcc3v__i.swift:17:41: error: value of type 'String' has no member\
    \ 'substringFromIndex'\n            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(1))\n\
    \                           ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpmcc3v__i.swift:17:84:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n           \
    \ music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(1))\n\
    \                                                           ~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~\n/tmp/tmpmcc3v__i.swift:20:41: error: value of type 'String' has\
    \ no member 'substringFromIndex'\n            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \                           ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpmcc3v__i.swift:20:84:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n           \
    \ music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \                                                           ~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~\n/tmp/tmpmcc3v__i.swift:23:41: error: value of type 'String' has\
    \ no member 'substringFromIndex'\n            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \                           ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpmcc3v__i.swift:23:84:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n           \
    \ music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \                                                           ~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~\n/tmp/tmpmcc3v__i.swift:25:41: error: value of type 'String' has\
    \ no member 'substringFromIndex'\n            music_string = music_string.s"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        switch note {\n\
    \        case \"o\":\n            beats.append(4)\n        case \"o|\":\n    \
    \        beats.append(2)\n        case \".|\":\n            beats.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return beats\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpp01oipe4.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmplk5srds8/tmplk5srds8.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad04f554c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad04f24bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad04f24b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad04f24a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplk5srds8                        0x00005626deffd51f <unavailable> + 5407

    5    libc.so.6                          0x00002ad04f740460 __libc_start_main +
    245

    6    tmplk5srds8                        0x00005626deffd059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            beats.append(4)\n        case \"o|\":\n            beats.append(2)\n\
    \        case \".|\":\n            beats.append(1)\n        default:\n       \
    \     break\n        }\n    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp2f533zt1.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        switch note {\n\
    \        case \"o\":\n            beats.append(4)\n        case \"o|\":\n    \
    \        beats.append(2)\n        case \".|\":\n            beats.append(1)\n\
    \        default:\n            beats.append(0)\n        }\n    }\n    return beats\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp60eene8t.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let music_string = music_string.replacingOccurrences(of:\
    \ \" \", with: \"\")\n    let notes = music_string.components(separatedBy: \"\
    |\")\n    var result = [Int]()\n    for note in notes {\n        if note == \"\
    o\" {\n            result.append(4)\n        } else if note == \"o\" {\n     \
    \       result.append(2)\n        } else if note == \".|\" {\n            result.append(1)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpixtfez9n.swift:12:37: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    let music_string = music_string.replacingOccurrences(of:\
    \ \" \", with: \"\")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let music_string = music_string.replacingOccurrences(of:\
    \ \" \", with: \"\")\n    var result = [Int]()\n    var index = 0\n    while index\
    \ < music_string.count {\n        let char = music_string[music_string.index(music_string.startIndex,\
    \ offsetBy: index)]\n        if char == \"o\" {\n            result.append(4)\n\
    \            index += 1\n        } else if char == \".\" {\n            result.append(1)\n\
    \            index += 2\n        } else {\n            result.append(2)\n    \
    \        index += 2\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp04k11fzx.swift:12:37: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    let music_string = music_string.replacingOccurrences(of:\
    \ \" \", with: \"\")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var music = music_string.components(separatedBy:\
    \ \" \")\n    for note in music {\n        switch note {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpv5fk8j1k.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    var music = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let music_string_array = music_string.components(separatedBy:\
    \ \" \")\n    for item in music_string_array {\n        if item == \"o\" {\n \
    \           result.append(4)\n        } else if item == \"o|\" {\n           \
    \ result.append(2)\n        } else if item == \".|\" {\n            result.append(1)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpizoahhuc.swift:13:43: error: value of type 'String' has no member\
    \ 'components'\n    let music_string_array = music_string.components(separatedBy:\
    \ \" \")\n                             ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: -1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    var music_string = music_string\n\
    \    while music_string.count > 0 {\n        if music_string.hasPrefix(\"o\")\
    \ {\n            result.append(4)\n            music_string.removeFirst()\n  \
    \      } else if music_string.hasPrefix(\"o|\") {\n            result.append(2)\n\
    \            music_string.removeFirst(2)\n        } else if music_string.hasPrefix(\"\
    .|\") {\n            result.append(1)\n            music_string.removeFirst(2)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660013615
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    for char in music_string {\n\
    \        if char == \"o\" {\n            result.append(4)\n        } else if char\
    \ == \"|\" {\n            result[result.count - 1] = result[result.count - 1]\
    \ / 2\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b801b570c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b801b267561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b801b267286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b801b26713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b801b266bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b801b066e83 <unavailable> + 188035

    6    tmphaw3g4dk                        0x000055e53a8c1f8b <unavailable> + 8075

    7    tmphaw3g4dk                        0x000055e53a8c193b <unavailable> + 6459

    8    libc.so.6                          0x00002b801b75c460 __libc_start_main +
    245

    9    tmphaw3g4dk                        0x000055e53a8c1449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let beats = music_string.components(separatedBy: \"\
    \ \")\n    var result = [Int]()\n    for beat in beats {\n        if beat == \"\
    o\" {\n            result.append(4)\n        } else if beat == \"o|\" {\n    \
    \        result.append(2)\n        } else if beat == \".|\" {\n            result.append(1)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpyxe9ofug.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let beats = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let music_string = music_string.replacingOccurrences(of:\
    \ \" \", with: \"\")\n    var result = [Int]()\n    for char in music_string {\n\
    \        if char == \"o\" {\n            result.append(4)\n        } else if char\
    \ == \"|\" {\n            result[result.count - 1] /= 2\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpcqtq0v0i.swift:12:37: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    let music_string = music_string.replacingOccurrences(of:\
    \ \" \", with: \"\")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: -1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var music_string = music_string\n\
    \    while music_string.count > 0 {\n        if music_string.hasPrefix(\"o\")\
    \ {\n            beats.append(4)\n            music_string.removeFirst()\n   \
    \     } else if music_string.hasPrefix(\"o|\") {\n            beats.append(2)\n\
    \            music_string.removeFirst(2)\n        } else if music_string.hasPrefix(\"\
    .|\") {\n            beats.append(1)\n            music_string.removeFirst(2)\n\
    \        }\n    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660013615
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let beats = [\n        \"o\": 4,\n        \"o|\": 2,\n\
    \        \".|\": 1\n    ]\n    return music_string.components(separatedBy: \"\
    \ \").map { beats[$0]! }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmppf9yg0jd.swift:17:25: error: value of type 'String' has no member\
    \ 'components'\n    return music_string.components(separatedBy: \" \").map { beats[$0]!\
    \ }\n           ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    let music = music_string.components(separatedBy:\
    \ \" \")\n    for note in music {\n        switch note {\n        case \"o\":\n\
    \            beats.append(4)\n        case \"o|\":\n            beats.append(2)\n\
    \        case \".|\":\n            beats.append(1)\n        default:\n       \
    \     print(\"Invalid note\")\n        }\n    }\n    return beats\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp_jblc0gd.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    let music = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var music = music_string.components(separatedBy:\
    \ \" \")\n    for note in music {\n        if note == \"o\" {\n            result.append(4)\n\
    \        } else if note == \"o|\" {\n            result.append(2)\n        } else\
    \ if note == \".|\" {\n            result.append(1)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp4lkyn4do.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    var music = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpbp6szpn2.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        switch note {\n\
    \        case \"o\":\n            beats.append(4)\n        case \"o|\":\n    \
    \        beats.append(2)\n        case \".|\":\n            beats.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return beats\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpp01oipe4.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var music_string = music_string\n\
    \    while music_string.characters.count > 0 {\n        if music_string.hasPrefix(\"\
    o\") {\n            result.append(4)\n            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(1))\n\
    \        } else if music_string.hasPrefix(\"o|\") {\n            result.append(2)\n\
    \            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \        } else if music_string.hasPrefix(\".|\") {\n            result.append(1)\n\
    \            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \        } else {\n            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(1))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpmcc3v__i.swift:14:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    while music_string.characters.count > 0 {\n       \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpmcc3v__i.swift:17:41: error: value of type 'String' has no member\
    \ 'substringFromIndex'\n            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(1))\n\
    \                           ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpmcc3v__i.swift:17:84:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n           \
    \ music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(1))\n\
    \                                                           ~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~\n/tmp/tmpmcc3v__i.swift:20:41: error: value of type 'String' has\
    \ no member 'substringFromIndex'\n            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \                           ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpmcc3v__i.swift:20:84:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n           \
    \ music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \                                                           ~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~\n/tmp/tmpmcc3v__i.swift:23:41: error: value of type 'String' has\
    \ no member 'substringFromIndex'\n            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \                           ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpmcc3v__i.swift:23:84:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n           \
    \ music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \                                                           ~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~\n/tmp/tmpmcc3v__i.swift:25:41: error: value of type 'String' has\
    \ no member 'substringFromIndex'\n            music_string = music_string.s"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpdbi5rmw9.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    for char in music_string {\n\
    \        switch char {\n        case \"o\":\n            result.append(4)\n  \
    \      case \"|\":\n            result.append(2)\n        case \".\":\n      \
    \      result.append(1)\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmph726erp7/tmph726erp7.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba86a4b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba86a1aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba86a1ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba86a1ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph726erp7                        0x00005583c3276892 <unavailable> + 6290

    5    libc.so.6                          0x00002ba86a6a3460 __libc_start_main +
    245

    6    tmph726erp7                        0x00005583c32762a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013610
- exit_code: 0
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.split(separator: \" \")\n \
    \   var beats = [Int]()\n    for note in notes {\n        switch note {\n    \
    \    case \"o\":\n            beats.append(4)\n        case \"o|\":\n        \
    \    beats.append(2)\n        case \".|\":\n            beats.append(1)\n    \
    \    default:\n            break\n        }\n    }\n    return beats\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpdbi5rmw9.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpdbi5rmw9.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        switch note {\n\
    \        case \"o\":\n            beats.append(4)\n        case \"o|\":\n    \
    \        beats.append(2)\n        case \".|\":\n            beats.append(1)\n\
    \        default:\n            print(\"Invalid note\")\n        }\n    }\n   \
    \ return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpuqch9spa.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: -1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var music_string = music_string\n\
    \    while music_string.count > 0 {\n        if music_string.hasPrefix(\"o\")\
    \ {\n            result.append(4)\n            music_string.removeFirst()\n  \
    \      } else if music_string.hasPrefix(\"o|\") {\n            result.append(2)\n\
    \            music_string.removeFirst(2)\n        } else if music_string.hasPrefix(\"\
    .|\") {\n            result.append(1)\n            music_string.removeFirst(2)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660013615
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        if note == \"\
    o\" {\n            beats.append(4)\n        } else if note == \"o|\" {\n     \
    \       beats.append(2)\n        } else if note == \".|\" {\n            beats.append(1)\n\
    \        }\n    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp8zbe25a4.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpdbi5rmw9.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let music_string = music_string.replacingOccurrences(of:\
    \ \" \", with: \"\")\n    var result = [Int]()\n    var i = 0\n    while i < music_string.count\
    \ {\n        let index = music_string.index(music_string.startIndex, offsetBy:\
    \ i)\n        let char = music_string[index]\n        if char == \"o\" {\n   \
    \         result.append(4)\n            i += 1\n        } else if char == \".\"\
    \ {\n            result.append(1)\n            i += 2\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp3hyrz_w9.swift:12:37: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    let music_string = music_string.replacingOccurrences(of:\
    \ \" \", with: \"\")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        switch note {\n\
    \        case \"o\":\n            beats.append(4)\n        case \"o|\":\n    \
    \        beats.append(2)\n        case \".|\":\n            beats.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return beats\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpp01oipe4.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        switch note {\n\
    \        case \"o\":\n            beats.append(4)\n        case \"o|\":\n    \
    \        beats.append(2)\n        case \".|\":\n            beats.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return beats\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpp01oipe4.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var result: [Int] = []\n    for note in notes {\n        if note ==\
    \ \"o\" {\n            result.append(4)\n        } else if note == \"o|\" {\n\
    \            result.append(2)\n        } else if note == \".|\" {\n          \
    \  result.append(1)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpya2a7e7y.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        if note == \"\
    o\" {\n            beats.append(4)\n        } else if note == \"o|\" {\n     \
    \       beats.append(2)\n        } else if note == \".|\" {\n            beats.append(1)\n\
    \        }\n    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp8zbe25a4.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let music_string = music_string.replacingOccurrences(of:\
    \ \" \", with: \"\")\n    let music_array = music_string.components(separatedBy:\
    \ \"|\")\n    var result = [Int]()\n    for i in music_array {\n        if i ==\
    \ \"o\" {\n            result.append(4)\n        } else if i == \"o\" {\n    \
    \        result.append(2)\n        } else if i == \".|\" {\n            result.append(1)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpfm3ahecf.swift:12:37: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    let music_string = music_string.replacingOccurrences(of:\
    \ \" \", with: \"\")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        if note == \"\
    o\" {\n            beats.append(4)\n        } else if note == \"o|\" {\n     \
    \       beats.append(2)\n        } else if note == \".|\" {\n            beats.append(1)\n\
    \        }\n    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp8zbe25a4.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var music_string = music_string\n\
    \    while music_string.characters.count > 0 {\n        if music_string.hasPrefix(\"\
    o\") {\n            result.append(4)\n            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(1))\n\
    \        } else if music_string.hasPrefix(\"o|\") {\n            result.append(2)\n\
    \            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \        } else if music_string.hasPrefix(\".|\") {\n            result.append(1)\n\
    \            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \        } else {\n            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(1))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpmcc3v__i.swift:14:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    while music_string.characters.count > 0 {\n       \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpmcc3v__i.swift:17:41: error: value of type 'String' has no member\
    \ 'substringFromIndex'\n            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(1))\n\
    \                           ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpmcc3v__i.swift:17:84:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n           \
    \ music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(1))\n\
    \                                                           ~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~\n/tmp/tmpmcc3v__i.swift:20:41: error: value of type 'String' has\
    \ no member 'substringFromIndex'\n            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \                           ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpmcc3v__i.swift:20:84:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n           \
    \ music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \                                                           ~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~\n/tmp/tmpmcc3v__i.swift:23:41: error: value of type 'String' has\
    \ no member 'substringFromIndex'\n            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \                           ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpmcc3v__i.swift:23:84:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n           \
    \ music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \                                                           ~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~\n/tmp/tmpmcc3v__i.swift:25:41: error: value of type 'String' has\
    \ no member 'substringFromIndex'\n            music_string = music_string.s"
  stdout: ''
  timestamp: 1660013610
- exit_code: 0
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.split(separator: \" \")\n \
    \   var beats = [Int]()\n    for note in notes {\n        switch note {\n    \
    \    case \"o\":\n            beats.append(4)\n        case \"o|\":\n        \
    \    beats.append(2)\n        case \".|\":\n            beats.append(1)\n    \
    \    default:\n            print(\"Invalid note\")\n        }\n    }\n    return\
    \ beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013610
- exit_code: 0
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.split(separator: \" \")\n \
    \   var beats = [Int]()\n    for note in notes {\n        switch note {\n    \
    \    case \"o\":\n            beats.append(4)\n        case \"o|\":\n        \
    \    beats.append(2)\n        case \".|\":\n            beats.append(1)\n    \
    \    default:\n            break\n        }\n    }\n    return beats\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        switch note {\n\
    \        case \"o\":\n            beats.append(4)\n        case \"o|\":\n    \
    \        beats.append(2)\n        case \".|\":\n            beats.append(1)\n\
    \        default:\n            beats.append(0)\n        }\n    }\n    return beats\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp60eene8t.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpbp6szpn2.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: -1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var music_string = music_string\n\
    \    while !music_string.isEmpty {\n        if music_string.hasPrefix(\"o\") {\n\
    \            result.append(4)\n            music_string.removeFirst()\n      \
    \  } else if music_string.hasPrefix(\"o|\") {\n            result.append(2)\n\
    \            music_string.removeFirst(2)\n        } else if music_string.hasPrefix(\"\
    .|\") {\n            result.append(1)\n            music_string.removeFirst(2)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660013615
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let beats = [\n        \"o\": 4,\n        \"o|\": 2,\n\
    \        \".|\": 1\n    ]\n    var result = [Int]()\n    for note in music_string.components(separatedBy:\
    \ \" \") {\n        result.append(beats[note]!)\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp4nb3mkdz.swift:18:30: error: value of type 'String' has no member\
    \ 'components'\n    for note in music_string.components(separatedBy: \" \") {\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let music_string = music_string.replacingOccurrences(of:\
    \ \" \", with: \"\")\n    let music_array = music_string.components(separatedBy:\
    \ \"|\")\n    var result = [Int]()\n    for note in music_array {\n        switch\
    \ note {\n        case \"o\":\n            result.append(4)\n        case \"o\"\
    :\n            result.append(2)\n        case \".\":\n            result.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpdvu4aby5.swift:12:37: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    let music_string = music_string.replacingOccurrences(of:\
    \ \" \", with: \"\")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    var music_string = music_string\n\
    \    while music_string.characters.count > 0 {\n        let first_char = music_string.characters.first!\n\
    \        switch first_char {\n        case \"o\":\n            result.append(4)\n\
    \            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(1))\n\
    \        case \".\":\n            result.append(1)\n            music_string =\
    \ music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n   \
    \     default:\n            result.append(2)\n            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(3))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpj0uy35m6.swift:14:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    while music_string.characters.count > 0 {\n       \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpj0uy35m6.swift:15:39: error: 'characters' is unavailable: Please\
    \ use String directly\n        let first_char = music_string.characters.first!\n\
    \                                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpj0uy35m6.swift:19:41: error: value of type 'String'\
    \ has no member 'substringFromIndex'\n            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(1))\n\
    \                           ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpj0uy35m6.swift:19:84:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n           \
    \ music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(1))\n\
    \                                                           ~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~\n/tmp/tmpj0uy35m6.swift:22:41: error: value of type 'String' has\
    \ no member 'substringFromIndex'\n            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \                           ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpj0uy35m6.swift:22:84:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n           \
    \ music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \                                                           ~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~\n/tmp/tmpj0uy35m6.swift:25:41: error: value of type 'String' has\
    \ no member 'substringFromIndex'\n            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(3))\n\
    \                           ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpj0uy35m6.swift:25:84:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n  "
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    var music_array = music_string.components(separatedBy:\
    \ \" \")\n    for i in 0..<music_array.count {\n        if music_array[i] == \"\
    o\" {\n            result.append(4)\n        } else if music_array[i] == \"o|\"\
    \ {\n            result.append(2)\n        } else if music_array[i] == \".|\"\
    \ {\n            result.append(1)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp141kn6aw.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    var music_array = music_string.components(separatedBy: \"\
    \ \")\n                      ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let music_string_array =\
    \ music_string.components(separatedBy: \" \")\n    for note in music_string_array\
    \ {\n        switch note {\n        case \"o\":\n            result.append(4)\n\
    \        case \"o|\":\n            result.append(2)\n        case \".|\":\n  \
    \          result.append(1)\n        default:\n            print(\"Error: unknown\
    \ note\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpi5qthcpc.swift:13:43: error: value of type 'String' has no member\
    \ 'components'\n    let music_string_array = music_string.components(separatedBy:\
    \ \" \")\n                             ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let music = music_string.components(separatedBy: \"\
    \ \")\n    var result = [Int]()\n    for note in music {\n        switch note\
    \ {\n        case \"o\":\n            result.append(4)\n        case \"o|\":\n\
    \            result.append(2)\n        case \".|\":\n            result.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp46zdrf_e.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let music = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var result = [Int]()\n    for note in notes {\n        switch note\
    \ {\n        case \"o\":\n            result.append(4)\n        case \"o|\":\n\
    \            result.append(2)\n        case \".|\":\n            result.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpma5m8dql.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpdbi5rmw9.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpbp6szpn2.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            beats.append(4)\n        case \"o|\":\n            beats.append(2)\n\
    \        case \".|\":\n            beats.append(1)\n        default:\n       \
    \     break\n        }\n    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp2f533zt1.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    return notes.map {\n        switch $0 {\n        case \"o\":\n    \
    \        return 4\n        case \"o|\":\n            return 2\n        case \"\
    .|\":\n            return 1\n        default:\n            return 0\n        }\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp6dnzz9r4.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        switch note {\n\
    \        case \"o\":\n            beats.append(4)\n        case \"o|\":\n    \
    \        beats.append(2)\n        case \".|\":\n            beats.append(1)\n\
    \        default:\n            print(\"Invalid note\")\n        }\n    }\n   \
    \ return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpuqch9spa.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: -1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    var music_string = music_string\n\
    \    while music_string.count > 0 {\n        if music_string.hasPrefix(\"o\")\
    \ {\n            result.append(4)\n            music_string.removeFirst()\n  \
    \      } else if music_string.hasPrefix(\"o|\") {\n            result.append(2)\n\
    \            music_string.removeFirst(2)\n        } else if music_string.hasPrefix(\"\
    .|\") {\n            result.append(1)\n            music_string.removeFirst(2)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660013615
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        if note == \"\
    o\" {\n            beats.append(4)\n        } else if note == \"o|\" {\n     \
    \       beats.append(2)\n        } else if note == \".|\" {\n            beats.append(1)\n\
    \        }\n    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp8zbe25a4.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        if note == \"o\" {\n            result.append(4)\n\
    \        } else if note == \"o|\" {\n            result.append(2)\n        } else\
    \ if note == \".|\" {\n            result.append(1)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpl48lo9l6.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      result.append(0)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpy254krtq.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            beats.append(4)\n        case \"o|\":\n            beats.append(2)\n\
    \        case \".|\":\n            beats.append(1)\n        default:\n       \
    \     break\n        }\n    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp2f533zt1.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let music_string = music_string.replacingOccurrences(of:\
    \ \" \", with: \"\")\n    var result: [Int] = []\n    var i = 0\n    while i <\
    \ music_string.count {\n        let char = music_string[i]\n        if char ==\
    \ \"o\" {\n            result.append(4)\n            i += 1\n        } else if\
    \ char == \".\" {\n            result.append(1)\n            i += 2\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpvh8z3o8_.swift:12:37: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    let music_string = music_string.replacingOccurrences(of:\
    \ \" \", with: \"\")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: -1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    var music_string = music_string\n\
    \    while !music_string.isEmpty {\n        if music_string.hasPrefix(\"o\") {\n\
    \            result.append(4)\n            music_string.removeFirst()\n      \
    \  } else if music_string.hasPrefix(\"o|\") {\n            result.append(2)\n\
    \            music_string.removeFirst(2)\n        } else if music_string.hasPrefix(\"\
    .|\") {\n            result.append(1)\n            music_string.removeFirst(2)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660013616
- exit_code: -1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var music_string = music_string\n\
    \    while music_string.count > 0 {\n        if music_string.hasPrefix(\"o\")\
    \ {\n            result.append(4)\n            music_string.removeFirst()\n  \
    \      } else if music_string.hasPrefix(\"o|\") {\n            result.append(2)\n\
    \            music_string.removeFirst(2)\n        } else if music_string.hasPrefix(\"\
    .|\") {\n            result.append(1)\n            music_string.removeFirst(2)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660013615
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpdbi5rmw9.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpdbi5rmw9.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        switch note {\n\
    \        case \"o\":\n            beats.append(4)\n        case \"o|\":\n    \
    \        beats.append(2)\n        case \".|\":\n            beats.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return beats\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpp01oipe4.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats: [Int] = []\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            beats.append(4)\n        case \"o|\":\n            beats.append(2)\n\
    \        case \".|\":\n            beats.append(1)\n        default:\n       \
    \     break\n        }\n    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpdlwrp_3v.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpbp6szpn2.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpdbi5rmw9.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        switch note {\n\
    \        case \"o\":\n            beats.append(4)\n        case \"o|\":\n    \
    \        beats.append(2)\n        case \".|\":\n            beats.append(1)\n\
    \        default:\n            beats.append(0)\n        }\n    }\n    return beats\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp60eene8t.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpbp6szpn2.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpbp6szpn2.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let music_array = music_string.components(separatedBy:\
    \ \" \")\n    for music in music_array {\n        if music == \"o\" {\n      \
    \      result.append(4)\n        } else if music == \"o|\" {\n            result.append(2)\n\
    \        } else if music == \".|\" {\n            result.append(1)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmplftrgfug.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let music_array = music_string.components(separatedBy: \"\
    \ \")\n                      ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    var music_array = music_string.components(separatedBy:\
    \ \" \")\n    for note in music_array {\n        if note == \"o\" {\n        \
    \    result.append(4)\n        } else if note == \"o|\" {\n            result.append(2)\n\
    \        } else if note == \".|\" {\n            result.append(1)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmplbp7y9sg.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    var music_array = music_string.components(separatedBy: \"\
    \ \")\n                      ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let music_string = music_string.replacingOccurrences(of:\
    \ \" \", with: \"\")\n    var beats = [Int]()\n    var beat = 0\n    for char\
    \ in music_string {\n        if char == \"o\" {\n            beat = 4\n      \
    \  } else if char == \"|\" {\n            beat -= 1\n        }\n        beats.append(beat)\n\
    \    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmprfj84ppo.swift:12:37: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    let music_string = music_string.replacingOccurrences(of:\
    \ \" \", with: \"\")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmplk5srds8/tmplk5srds8.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad04f554c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad04f24bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad04f24b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad04f24a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplk5srds8                        0x00005626deffd51f <unavailable> + 5407

    5    libc.so.6                          0x00002ad04f740460 __libc_start_main +
    245

    6    tmplk5srds8                        0x00005626deffd059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var music_array = music_string.components(separatedBy:\
    \ \" \")\n    for note in music_array {\n        switch note {\n        case \"\
    o\":\n            beats.append(4)\n        case \"o|\":\n            beats.append(2)\n\
    \        case \".|\":\n            beats.append(1)\n        default:\n       \
    \     print(\"Invalid note\")\n        }\n    }\n    return beats\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpdyudnjev.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    var music_array = music_string.components(separatedBy: \"\
    \ \")\n                      ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpbp6szpn2.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let music_string = music_string.replacingOccurrences(of:\
    \ \" \", with: \"\")\n    var result: [Int] = []\n    var index = 0\n    while\
    \ index < music_string.count {\n        let char = music_string[index]\n     \
    \   if char == \"o\" {\n            if index + 1 < music_string.count && music_string[index\
    \ + 1] == \"|\" {\n                result.append(2)\n                index +=\
    \ 2\n            } else {\n                result.append(4)\n                index\
    \ += 1\n            }\n        } else if char == \".\" {\n            result.append(1)\n\
    \            index += 2\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpcfzn7ee9.swift:12:37: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    let music_string = music_string.replacingOccurrences(of:\
    \ \" \", with: \"\")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    for char in music_string {\n\
    \        switch char {\n        case \"o\":\n            result.append(4)\n  \
    \      case \"o|\":\n            result.append(2)\n        case \".|\":\n    \
    \        result.append(1)\n        default:\n            break\n        }\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmph9p46zqr.swift:17:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \"o|\":\n            \
    \ ^~~~\n/tmp/tmph9p46zqr.swift:19:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \".|\":\n            \
    \ ^~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        switch note {\n\
    \        case \"o\":\n            beats.append(4)\n        case \"o|\":\n    \
    \        beats.append(2)\n        case \".|\":\n            beats.append(1)\n\
    \        default:\n            beats.append(0)\n        }\n    }\n    return beats\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp60eene8t.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    for char in music_string\
    \ {\n        switch char {\n        case \"o\":\n            result.append(4)\n\
    \        case \"o|\":\n            result.append(2)\n        case \".|\":\n  \
    \          result.append(1)\n        default:\n            break\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpajorqtqd.swift:17:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \"o|\":\n            \
    \ ^~~~\n/tmp/tmpajorqtqd.swift:19:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \".|\":\n            \
    \ ^~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: -1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var music_string = music_string\n\
    \    while music_string.count > 0 {\n        if music_string.hasPrefix(\"o\")\
    \ {\n            result.append(4)\n            music_string.removeFirst()\n  \
    \      } else if music_string.hasPrefix(\"o|\") {\n            result.append(2)\n\
    \            music_string.removeFirst(2)\n        } else if music_string.hasPrefix(\"\
    .|\") {\n            result.append(1)\n            music_string.removeFirst(2)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660013615
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var result = [Int]()\n    for note in notes {\n        switch note\
    \ {\n        case \"o\":\n            result.append(4)\n        case \"o|\":\n\
    \            result.append(2)\n        case \".|\":\n            result.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpma5m8dql.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        switch note {\n\
    \        case \"o\":\n            beats.append(4)\n        case \"o|\":\n    \
    \        beats.append(2)\n        case \".|\":\n            beats.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return beats\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpp01oipe4.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let music_string_array = music_string.components(separatedBy:\
    \ \" \")\n    var result_array = [Int]()\n    for item in music_string_array {\n\
    \        if item == \"o\" {\n            result_array.append(4)\n        } else\
    \ if item == \"o|\" {\n            result_array.append(2)\n        } else if item\
    \ == \".|\" {\n            result_array.append(1)\n        }\n    }\n    return\
    \ result_array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpn38uas_s.swift:12:43: error: value of type 'String' has no member\
    \ 'components'\n    let music_string_array = music_string.components(separatedBy:\
    \ \" \")\n                             ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        switch note {\n\
    \        case \"o\":\n            beats.append(4)\n        case \"o|\":\n    \
    \        beats.append(2)\n        case \".|\":\n            beats.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return beats\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpp01oipe4.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var result = [Int]()\n    for note in notes {\n        switch note\
    \ {\n        case \"o\":\n            result.append(4)\n        case \"o|\":\n\
    \            result.append(2)\n        case \".|\":\n            result.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpma5m8dql.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpbp6szpn2.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var result = [Int]()\n    for note in notes {\n        switch note\
    \ {\n        case \"o\":\n            result.append(4)\n        case \"o|\":\n\
    \            result.append(2)\n        case \".|\":\n            result.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpma5m8dql.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var result = [Int]()\n    for note in notes {\n        switch note\
    \ {\n        case \"o\":\n            result.append(4)\n        case \"o|\":\n\
    \            result.append(2)\n        case \".|\":\n            result.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpma5m8dql.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        switch note {\n\
    \        case \"o\":\n            beats.append(4)\n        case \"o|\":\n    \
    \        beats.append(2)\n        case \".|\":\n            beats.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return beats\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpp01oipe4.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpdbi5rmw9.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    var music_array = music_string.components(separatedBy:\
    \ \" \")\n    for note in music_array {\n        switch note {\n        case \"\
    o\":\n            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      print(\"Invalid note\")\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp7gmsd9rd.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    var music_array = music_string.components(separatedBy: \"\
    \ \")\n                      ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpdbi5rmw9.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 0
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    return music_string.split(separator: \" \").map {\n\
    \        switch $0 {\n        case \"o\":\n            return 4\n        case\
    \ \"o|\":\n            return 2\n        case \".|\":\n            return 1\n\
    \        default:\n            return 0\n        }\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013611
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var music = music_string.components(separatedBy:\
    \ \" \")\n    for note in music {\n        switch note {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpv5fk8j1k.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    var music = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        switch note {\n\
    \        case \"o\":\n            beats.append(4)\n        case \"o|\":\n    \
    \        beats.append(2)\n        case \".|\":\n            beats.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return beats\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpp01oipe4.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let music_string_array = music_string.components(separatedBy:\
    \ \" \")\n    var result = [Int]()\n    for note in music_string_array {\n   \
    \     switch note {\n        case \"o\":\n            result.append(4)\n     \
    \   case \"o|\":\n            result.append(2)\n        case \".|\":\n       \
    \     result.append(1)\n        default:\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp2xs8c4p8.swift:12:43: error: value of type 'String' has no member\
    \ 'components'\n    let music_string_array = music_string.components(separatedBy:\
    \ \" \")\n                             ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let music_string = music_string.replacingOccurrences(of:\
    \ \" \", with: \"\")\n    var result: [Int] = []\n    var i = 0\n    while i <\
    \ music_string.count {\n        let index = music_string.index(music_string.startIndex,\
    \ offsetBy: i)\n        switch music_string[index] {\n        case \"o\":\n  \
    \          result.append(4)\n            i += 1\n        case \"o|\":\n      \
    \      result.append(2)\n            i += 2\n        case \".|\":\n          \
    \  result.append(1)\n            i += 2\n        default:\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpipp1yitb.swift:12:37: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    let music_string = music_string.replacingOccurrences(of:\
    \ \" \", with: \"\")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpdbi5rmw9.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: -1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var music_string = music_string\n\
    \    while music_string.count > 0 {\n        if music_string.hasPrefix(\"o\")\
    \ {\n            result.append(4)\n            music_string.removeFirst()\n  \
    \      } else if music_string.hasPrefix(\"o|\") {\n            result.append(2)\n\
    \            music_string.removeFirst(2)\n        } else if music_string.hasPrefix(\"\
    .|\") {\n            result.append(1)\n            music_string.removeFirst(2)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660013615
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpbp6szpn2.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        switch note {\n\
    \        case \"o\":\n            beats.append(4)\n        case \"o|\":\n    \
    \        beats.append(2)\n        case \".|\":\n            beats.append(1)\n\
    \        default:\n            print(\"Invalid note\")\n        }\n    }\n   \
    \ return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpuqch9spa.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    for char in music_string {\n\
    \        switch char {\n        case \"o\":\n            result.append(4)\n  \
    \      case \"|\":\n            result.append(1)\n        default:\n         \
    \   break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpuhtreq0u/tmpuhtreq0u.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba11446c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba1113db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba1113d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba1113c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuhtreq0u                        0x000055dee62769f1 <unavailable> + 6641

    5    libc.so.6                          0x00002aba11632460 __libc_start_main +
    245

    6    tmpuhtreq0u                        0x000055dee62762a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013611
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        if note == \"\
    o\" {\n            beats.append(4)\n        } else if note == \"o|\" {\n     \
    \       beats.append(2)\n        } else if note == \".|\" {\n            beats.append(1)\n\
    \        }\n    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp8zbe25a4.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        switch note {\n\
    \        case \"o\":\n            beats.append(4)\n        case \"o|\":\n    \
    \        beats.append(2)\n        case \".|\":\n            beats.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return beats\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpp01oipe4.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        switch note {\n\
    \        case \"o\":\n            beats.append(4)\n        case \"o|\":\n    \
    \        beats.append(2)\n        case \".|\":\n            beats.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return beats\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpp01oipe4.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        switch note {\n\
    \        case \"o\":\n            beats.append(4)\n        case \"o|\":\n    \
    \        beats.append(2)\n        case \".|\":\n            beats.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return beats\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpp01oipe4.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let notes = music_string.characters.split(separator:\
    \ \" \").map(String.init)\n    for note in notes {\n        if note == \"o\" {\n\
    \            result.append(4)\n        } else if note == \"o|\" {\n          \
    \  result.append(2)\n        } else if note == \".|\" {\n            result.append(1)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp14devpku.swift:13:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    let notes = music_string.characters.split(separator:\
    \ \" \").map(String.init)\n                             ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013611
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        switch note {\n\
    \        case \"o\":\n            beats.append(4)\n        case \"o|\":\n    \
    \        beats.append(2)\n        case \".|\":\n            beats.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return beats\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpp01oipe4.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpdbi5rmw9.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        switch note {\n\
    \        case \"o\":\n            beats.append(4)\n        case \"o|\":\n    \
    \        beats.append(2)\n        case \".|\":\n            beats.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return beats\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpp01oipe4.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 0
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    for note in music_string.split(separator:\
    \ \" \") {\n        switch note {\n        case \"o\":\n            result.append(4)\n\
    \        case \"o|\":\n            result.append(2)\n        case \".|\":\n  \
    \          result.append(1)\n        default:\n            break\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013611
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var result = [Int]()\n    for note in notes {\n        if note == \"\
    o\" {\n            result.append(4)\n        } else if note == \"o|\" {\n    \
    \        result.append(2)\n        } else if note == \".|\" {\n            result.append(1)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpa6ikdg1g.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013611
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmplk5srds8/tmplk5srds8.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad04f554c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad04f24bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad04f24b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad04f24a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplk5srds8                        0x00005626deffd51f <unavailable> + 5407

    5    libc.so.6                          0x00002ad04f740460 __libc_start_main +
    245

    6    tmplk5srds8                        0x00005626deffd059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let music_string = music_string.replacingOccurrences(of:\
    \ \" \", with: \"\")\n    let music_array = music_string.components(separatedBy:\
    \ \"|\")\n    var result = [Int]()\n    for note in music_array {\n        switch\
    \ note {\n        case \"o\":\n            result.append(4)\n        case \"o\"\
    :\n            result.append(2)\n        case \".\":\n            result.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpdvu4aby5.swift:12:37: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    let music_string = music_string.replacingOccurrences(of:\
    \ \" \", with: \"\")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        if note == \"o\" {\n            result.append(4)\n\
    \        } else if note == \"o|\" {\n            result.append(2)\n        } else\
    \ if note == \".|\" {\n            result.append(1)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpug508_0_.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    var notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013611
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let music_string_array = music_string.components(separatedBy:\
    \ \" \")\n    for music_string in music_string_array {\n        switch music_string\
    \ {\n        case \"o\":\n            result.append(4)\n        case \"o|\":\n\
    \            result.append(2)\n        case \".|\":\n            result.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp_n5gculw.swift:13:43: error: value of type 'String' has no member\
    \ 'components'\n    let music_string_array = music_string.components(separatedBy:\
    \ \" \")\n                             ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpdbi5rmw9.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            beats.append(4)\n        case \"o|\":\n            beats.append(2)\n\
    \        case \".|\":\n            beats.append(1)\n        default:\n       \
    \     break\n        }\n    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp2f533zt1.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpdbi5rmw9.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        switch note {\n\
    \        case \"o\":\n            beats.append(4)\n        case \"o|\":\n    \
    \        beats.append(2)\n        case \".|\":\n            beats.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return beats\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpp01oipe4.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 0
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.split(separator: \" \")\n \
    \   var beats = [Int]()\n    for note in notes {\n        switch note {\n    \
    \    case \"o\":\n            beats.append(4)\n        case \"o|\":\n        \
    \    beats.append(2)\n        case \".|\":\n            beats.append(1)\n    \
    \    default:\n            break\n        }\n    }\n    return beats\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let note_to_beat = [\n        \"o\": 4,\n        \"\
    o|\": 2,\n        \".|\": 1\n    ]\n    var result = [Int]()\n    var notes =\
    \ music_string.components(separatedBy: \" \")\n    for note in notes {\n     \
    \   if let beat = note_to_beat[note] {\n            result.append(beat)\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpcah2nfbf.swift:18:30: error: value of type 'String' has no member\
    \ 'components'\n    var notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013611
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpbp6szpn2.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpdbi5rmw9.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        switch note {\n\
    \        case \"o\":\n            beats.append(4)\n        case \"o|\":\n    \
    \        beats.append(2)\n        case \".|\":\n            beats.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return beats\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpp01oipe4.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpdbi5rmw9.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    // TODO: Implement this function\n    return []\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpbrd0gnjt/tmpbrd0gnjt.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f8f275c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f8ef6cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f8ef6c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f8ef6b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrd0gnjt                        0x000055bfc8ea751f <unavailable> + 5407

    5    libc.so.6                          0x00002b7f8f461460 __libc_start_main +
    245

    6    tmpbrd0gnjt                        0x000055bfc8ea7059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660013611
- exit_code: -1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var music_string = music_string\n\
    \    while music_string.count > 0 {\n        if music_string.hasPrefix(\"o\")\
    \ {\n            result.append(4)\n            music_string.removeFirst()\n  \
    \      } else if music_string.hasPrefix(\"o|\") {\n            result.append(2)\n\
    \            music_string.removeFirst(2)\n        } else if music_string.hasPrefix(\"\
    .|\") {\n            result.append(1)\n            music_string.removeFirst(2)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660013615
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpdbi5rmw9.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        switch note {\n\
    \        case \"o\":\n            beats.append(4)\n        case \"o|\":\n    \
    \        beats.append(2)\n        case \".|\":\n            beats.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return beats\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpp01oipe4.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let music_array = music_string.components(separatedBy:\
    \ \" \")\n    for note in music_array {\n        switch note {\n        case \"\
    o\":\n            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp54zzgr9r.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let music_array = music_string.components(separatedBy: \"\
    \ \")\n                      ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013611
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let music_string = music_string.replacingOccurrences(of:\
    \ \" \", with: \"\")\n    var result: [Int] = []\n    var index = 0\n    while\
    \ index < music_string.count {\n        let char = music_string[music_string.index(music_string.startIndex,\
    \ offsetBy: index)]\n        switch char {\n        case \"o\":\n            if\
    \ index + 1 < music_string.count && music_string[music_string.index(music_string.startIndex,\
    \ offsetBy: index + 1)] == \"|\" {\n                result.append(2)\n       \
    \         index += 1\n            } else {\n                result.append(4)\n\
    \            }\n        case \".\":\n            result.append(1)\n        default:\n\
    \            break\n        }\n        index += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp9v0vkkxv.swift:12:37: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    let music_string = music_string.replacingOccurrences(of:\
    \ \" \", with: \"\")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013611
- exit_code: -1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var music_string = music_string\n\
    \    while music_string.count > 0 {\n        if music_string.hasPrefix(\"o\")\
    \ {\n            result.append(4)\n            music_string.removeFirst()\n  \
    \      } else if music_string.hasPrefix(\"o|\") {\n            result.append(2)\n\
    \            music_string.removeFirst(2)\n        } else if music_string.hasPrefix(\"\
    .|\") {\n            result.append(1)\n            music_string.removeFirst(2)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660013615
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let beats = [4, 2, 1]\n    var result = [Int]()\n  \
    \  var i = 0\n    while i < music_string.count {\n        let char = music_string[i]\n\
    \        if char == \"o\" {\n            result.append(beats[0])\n           \
    \ i += 1\n        } else if char == \".\" {\n            result.append(beats[2])\n\
    \            i += 3\n        } else {\n            result.append(beats[1])\n \
    \           i += 2\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp_u4s8qh3.swift:16:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        let char\
    \ = music_string[i]\n                   ^~~~~~~~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660013611
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats: [Int] = []\n    var music = music_string.components(separatedBy:\
    \ \" \")\n    for note in music {\n        if note == \"o\" {\n            beats.append(4)\n\
    \        } else if note == \"o|\" {\n            beats.append(2)\n        } else\
    \ if note == \".|\" {\n            beats.append(1)\n        }\n    }\n    return\
    \ beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpd079koi2.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    var music = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013611
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        switch note {\n\
    \        case \"o\":\n            beats.append(4)\n        case \"o|\":\n    \
    \        beats.append(2)\n        case \".|\":\n            beats.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return beats\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpp01oipe4.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpdbi5rmw9.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let beats = music_string.components(separatedBy: \"\
    \ \")\n    var result = [Int]()\n    for beat in beats {\n        if beat == \"\
    o\" {\n            result.append(4)\n        } else if beat == \"o|\" {\n    \
    \        result.append(2)\n        } else if beat == \".|\" {\n            result.append(1)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpyxe9ofug.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let beats = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        switch note {\n\
    \        case \"o\":\n            beats.append(4)\n        case \"o|\":\n    \
    \        beats.append(2)\n        case \".|\":\n            beats.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return beats\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpp01oipe4.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    for char in music_string {\n\
    \        switch char {\n        case \"o\":\n            result.append(4)\n  \
    \      case \"o|\":\n            result.append(2)\n        case \".|\":\n    \
    \        result.append(1)\n        default:\n            break\n        }\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmph9p46zqr.swift:17:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \"o|\":\n            \
    \ ^~~~\n/tmp/tmph9p46zqr.swift:19:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \".|\":\n            \
    \ ^~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    return []\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmplk5srds8/tmplk5srds8.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad04f554c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad04f24bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad04f24b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad04f24a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplk5srds8                        0x00005626deffd51f <unavailable> + 5407

    5    libc.so.6                          0x00002ad04f740460 __libc_start_main +
    245

    6    tmplk5srds8                        0x00005626deffd059 <unavailable> + 4185

    '
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        switch note {\n\
    \        case \"o\":\n            beats.append(4)\n        case \"o|\":\n    \
    \        beats.append(2)\n        case \".|\":\n            beats.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return beats\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpp01oipe4.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: -1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var music_string = music_string\n\
    \    while music_string.count > 0 {\n        if music_string.hasPrefix(\"o\")\
    \ {\n            result.append(4)\n            music_string.removeFirst()\n  \
    \      } else if music_string.hasPrefix(\"o|\") {\n            result.append(2)\n\
    \            music_string.removeFirst(2)\n        } else if music_string.hasPrefix(\"\
    .|\") {\n            result.append(1)\n            music_string.removeFirst(2)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660013615
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        switch note {\n\
    \        case \"o\":\n            beats.append(4)\n        case \"o|\":\n    \
    \        beats.append(2)\n        case \".|\":\n            beats.append(1)\n\
    \        default:\n            print(\"Unknown note: \\(note)\")\n        }\n\
    \    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpfh3bcs38.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013611
- exit_code: 0
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.split(separator: \" \")\n \
    \   var result = [Int]()\n    for note in notes {\n        switch note {\n   \
    \     case \"o\":\n            result.append(4)\n        case \"o|\":\n      \
    \      result.append(2)\n        case \".|\":\n            result.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013611
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      print(\"Invalid note\")\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp49a0b72b.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013611
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let music_string = music_string.replacingOccurrences(of:\
    \ \" \", with: \"\")\n    var result = [Int]()\n    var i = 0\n    while i < music_string.count\
    \ {\n        let index = music_string.index(music_string.startIndex, offsetBy:\
    \ i)\n        let char = music_string[index]\n        if char == \"o\" {\n   \
    \         result.append(4)\n            i += 1\n        } else if char == \".\"\
    \ {\n            result.append(1)\n            i += 2\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp3hyrz_w9.swift:12:37: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    let music_string = music_string.replacingOccurrences(of:\
    \ \" \", with: \"\")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: -1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var music_string = music_string\n\
    \    while music_string.count > 0 {\n        if music_string.hasPrefix(\"o\")\
    \ {\n            result.append(4)\n            music_string.removeFirst()\n  \
    \      } else if music_string.hasPrefix(\"o|\") {\n            result.append(2)\n\
    \            music_string.removeFirst(2)\n        } else if music_string.hasPrefix(\"\
    .|\") {\n            result.append(1)\n            music_string.removeFirst(2)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660013615
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        switch note {\n\
    \        case \"o\":\n            beats.append(4)\n        case \"o|\":\n    \
    \        beats.append(2)\n        case \".|\":\n            beats.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return beats\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpp01oipe4.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let music_string_array =\
    \ music_string.components(separatedBy: \" \")\n    for music_string in music_string_array\
    \ {\n        if music_string == \"o\" {\n            result.append(4)\n      \
    \  } else if music_string == \"o|\" {\n            result.append(2)\n        }\
    \ else if music_string == \".|\" {\n            result.append(1)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpkaywtg_i.swift:13:43: error: value of type 'String' has no member\
    \ 'components'\n    let music_string_array = music_string.components(separatedBy:\
    \ \" \")\n                             ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013611
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        if note == \"\
    o\" {\n            beats.append(4)\n        } else if note == \"o|\" {\n     \
    \       beats.append(2)\n        } else if note == \".|\" {\n            beats.append(1)\n\
    \        }\n    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp8zbe25a4.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let music_string = music_string.replacingOccurrences(of:\
    \ \" \", with: \"\")\n    var result: [Int] = []\n    var i = 0\n    while i <\
    \ music_string.count {\n        let char = music_string[i]\n        if char ==\
    \ \"o\" {\n            if i + 1 < music_string.count && music_string[i + 1] ==\
    \ \"|\" {\n                result.append(2)\n                i += 2\n        \
    \    } else {\n                result.append(4)\n                i += 1\n    \
    \        }\n        } else if char == \".\" {\n            result.append(1)\n\
    \            i += 2\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpir3cazfw.swift:12:37: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    let music_string = music_string.replacingOccurrences(of:\
    \ \" \", with: \"\")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013611
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpdbi5rmw9.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var result = [Int]()\n    for note in notes {\n        switch note\
    \ {\n        case \"o\":\n            result.append(4)\n        case \"o|\":\n\
    \            result.append(2)\n        case \".|\":\n            result.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpma5m8dql.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let music = music_string.components(separatedBy:\
    \ \" \")\n    for note in music {\n        switch note {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      print(\"Unknown note\")\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp_h65lti7.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    let music = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013611
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpdbi5rmw9.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        if note == \"o\" {\n            beats.append(4)\n\
    \        } else if note == \"o|\" {\n            beats.append(2)\n        } else\
    \ if note == \".|\" {\n            beats.append(1)\n        }\n    }\n    return\
    \ beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp9g4x_3fi.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013611
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    var music_string = music_string\n\
    \    while music_string.characters.count > 0 {\n        if music_string.hasPrefix(\"\
    o\") {\n            result.append(4)\n            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(1))\n\
    \        } else if music_string.hasPrefix(\"o|\") {\n            result.append(2)\n\
    \            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \        } else if music_string.hasPrefix(\".|\") {\n            result.append(1)\n\
    \            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \        } else {\n            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(1))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpib30rat6.swift:14:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    while music_string.characters.count > 0 {\n       \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpib30rat6.swift:17:41: error: value of type 'String' has no member\
    \ 'substringFromIndex'\n            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(1))\n\
    \                           ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpib30rat6.swift:17:84:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n           \
    \ music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(1))\n\
    \                                                           ~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~\n/tmp/tmpib30rat6.swift:20:41: error: value of type 'String' has\
    \ no member 'substringFromIndex'\n            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \                           ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpib30rat6.swift:20:84:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n           \
    \ music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \                                                           ~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~\n/tmp/tmpib30rat6.swift:23:41: error: value of type 'String' has\
    \ no member 'substringFromIndex'\n            music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \                           ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpib30rat6.swift:23:84:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n           \
    \ music_string = music_string.substringFromIndex(music_string.startIndex.advancedBy(2))\n\
    \                                                           ~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~\n/tmp/tmpib30rat6.swift:25:41: error: value of type 'String' has\
    \ no member 'substringFromIndex'\n            music_string = music_string.s"
  stdout: ''
  timestamp: 1660013611
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let music_string = music_string.replacingOccurrences(of:\
    \ \" \", with: \"\")\n    var beats = [Int]()\n    var beat = 0\n    for char\
    \ in music_string {\n        switch char {\n        case \"o\":\n            beat\
    \ = 4\n        case \"|\":\n            beats.append(beat)\n            beat =\
    \ 0\n        case \".\":\n            beat = 1\n        default:\n           \
    \ break\n        }\n    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpl527qomh.swift:12:37: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    let music_string = music_string.replacingOccurrences(of:\
    \ \" \", with: \"\")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013611
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var result = [Int]()\n    for note in notes {\n        switch note\
    \ {\n        case \"o\":\n            result.append(4)\n        case \"o|\":\n\
    \            result.append(2)\n        case \".|\":\n            result.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpma5m8dql.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var current_note = \"\"\n\
    \    for char in music_string {\n        if char == \" \" {\n            if current_note\
    \ == \"o\" {\n                result.append(4)\n            } else if current_note\
    \ == \"o|\" {\n                result.append(2)\n            } else if current_note\
    \ == \".|\" {\n                result.append(1)\n            }\n            current_note\
    \ = \"\"\n        } else {\n            current_note += String(char)\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmp0elnnuk9/tmp0elnnuk9.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba22201ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba221d15b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba221d15988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba221d147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0elnnuk9                        0x000055ce8e4a286f <unavailable> + 6255

    5    libc.so.6                          0x00002ba22220a460 __libc_start_main +
    245

    6    tmp0elnnuk9                        0x000055ce8e4a23a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660013611
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    return [Int]()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmpv4uyl5k5/tmpv4uyl5k5.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b63018b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b63015abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b63015ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b63015aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4uyl5k5                        0x000055959adac56f <unavailable> + 5487

    5    libc.so.6                          0x00002b6301aa0460 __libc_start_main +
    245

    6    tmpv4uyl5k5                        0x000055959adac0a9 <unavailable> + 4265

    '
  stdout: ''
  timestamp: 1660013611
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let music_array = music_string.components(separatedBy:\
    \ \" \")\n    for note in music_array {\n        if note == \"o\" {\n        \
    \    result.append(4)\n        } else if note == \"o|\" {\n            result.append(2)\n\
    \        } else if note == \".|\" {\n            result.append(1)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpoxe5roak.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let music_array = music_string.components(separatedBy: \"\
    \ \")\n                      ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013611
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    for char in music_string\
    \ {\n        switch char {\n        case \"o\":\n            result.append(4)\n\
    \        case \"o|\":\n            result.append(2)\n        case \".|\":\n  \
    \          result.append(1)\n        default:\n            break\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpajorqtqd.swift:17:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \"o|\":\n            \
    \ ^~~~\n/tmp/tmpajorqtqd.swift:19:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \".|\":\n            \
    \ ^~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let music_string = music_string.replacingOccurrences(of:\
    \ \" \", with: \"\")\n    var result: [Int] = []\n    var i = 0\n    while i <\
    \ music_string.count {\n        let char = music_string[i]\n        if char ==\
    \ \"o\" {\n            if i + 1 < music_string.count && music_string[i + 1] ==\
    \ \"|\" {\n                result.append(2)\n                i += 2\n        \
    \    } else {\n                result.append(4)\n                i += 1\n    \
    \        }\n        } else if char == \".\" {\n            result.append(1)\n\
    \            i += 2\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpir3cazfw.swift:12:37: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    let music_string = music_string.replacingOccurrences(of:\
    \ \" \", with: \"\")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013611
- exit_code: 0
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    var music_array = music_string.split(separator:\
    \ \" \")\n    for i in 0..<music_array.count {\n        switch music_array[i]\
    \ {\n        case \"o\":\n            result.append(4)\n        case \"o|\":\n\
    \            result.append(2)\n        case \".|\":\n            result.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013611
- exit_code: -1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var music_string = music_string\n\
    \    while music_string.count > 0 {\n        if music_string.hasPrefix(\"o\")\
    \ {\n            result.append(4)\n            music_string.removeFirst()\n  \
    \      } else if music_string.hasPrefix(\"o|\") {\n            result.append(2)\n\
    \            music_string.removeFirst(2)\n        } else if music_string.hasPrefix(\"\
    .|\") {\n            result.append(1)\n            music_string.removeFirst(2)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660013615
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result: [Int] = []\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpbp6szpn2.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpdbi5rmw9.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        switch note {\n\
    \        case \"o\":\n            beats.append(4)\n        case \"o|\":\n    \
    \        beats.append(2)\n        case \".|\":\n            beats.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return beats\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpp01oipe4.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var result = [Int]()\n    for note in notes {\n        switch note\
    \ {\n        case \"o\":\n            result.append(4)\n        case \"o|\":\n\
    \            result.append(2)\n        case \".|\":\n            result.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpma5m8dql.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpdbi5rmw9.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.characters.split(separator:\
    \ \" \").map(String.init)\n    var beats = [Int]()\n    for note in notes {\n\
    \        switch note {\n        case \"o\":\n            beats.append(4)\n   \
    \     case \"o|\":\n            beats.append(2)\n        case \".|\":\n      \
    \      beats.append(1)\n        default:\n            break\n        }\n    }\n\
    \    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp7luljuk4.swift:12:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    let notes = music_string.characters.split(separator:\
    \ \" \").map(String.init)\n                             ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013611
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let music_string = music_string.replacingOccurrences(of:\
    \ \" \", with: \"\")\n    let music_string = music_string.replacingOccurrences(of:\
    \ \"o|\", with: \"1\")\n    let music_string = music_string.replacingOccurrences(of:\
    \ \".|\", with: \"0\")\n    let music_string = music_string.replacingOccurrences(of:\
    \ \"o\", with: \"4\")\n    var result = [Int]()\n    for char in music_string\
    \ {\n        result.append(Int(String(char))!)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpxxzvizd1.swift:12:37: error: value of type 'String' has no member\
    \ 'replacingOccurrences'\n    let music_string = music_string.replacingOccurrences(of:\
    \ \" \", with: \"\")\n                       ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013611
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var music = music_string.components(separatedBy:\
    \ \" \")\n    for note in music {\n        switch note {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpv5fk8j1k.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    var music = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        switch note {\n\
    \        case \"o\":\n            beats.append(4)\n        case \"o|\":\n    \
    \        beats.append(2)\n        case \".|\":\n            beats.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return beats\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpp01oipe4.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: -1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var music_string = music_string\n\
    \    while music_string.count > 0 {\n        if music_string.hasPrefix(\"o\")\
    \ {\n            beats.append(4)\n            music_string.removeFirst()\n   \
    \     } else if music_string.hasPrefix(\"o|\") {\n            beats.append(2)\n\
    \            music_string.removeFirst(2)\n        } else if music_string.hasPrefix(\"\
    .|\") {\n            beats.append(1)\n            music_string.removeFirst(2)\n\
    \        }\n    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660013615
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        switch note {\n\
    \        case \"o\":\n            beats.append(4)\n        case \"o|\":\n    \
    \        beats.append(2)\n        case \".|\":\n            beats.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return beats\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpp01oipe4.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var music_string = music_string\n\
    \    while music_string.count > 0 {\n        let first_char = music_string.removeFirst()\n\
    \        if first_char == \"o\" {\n            if music_string.removeFirst() ==\
    \ \"|\" {\n                result.append(2)\n            } else {\n          \
    \      result.append(4)\n            }\n        } else {\n            result.append(1)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'Swift/RangeReplaceableCollection.swift:623: Fatal error: Can''t remove
    first element from an empty collection

    Current stack trace:

    0    libswiftCore.so                    0x00002b2279174c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2278e6b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2278e6b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2278e6b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2278e6abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b2278e5aff0 RangeReplaceableCollection.removeFirst()
    + 272

    6    tmp5iv6x0do                        0x000055875295cd7f <unavailable> + 7551

    7    tmp5iv6x0do                        0x000055875295c6f7 <unavailable> + 5879

    8    libc.so.6                          0x00002b2279360460 __libc_start_main +
    245

    9    tmp5iv6x0do                        0x000055875295c319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660013611
- exit_code: -1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var music_string = music_string\n\
    \    while music_string.count > 0 {\n        if music_string.hasPrefix(\"o\")\
    \ {\n            result.append(4)\n            music_string.removeFirst()\n  \
    \      } else if music_string.hasPrefix(\"o|\") {\n            result.append(2)\n\
    \            music_string.removeFirst(2)\n        } else if music_string.hasPrefix(\"\
    .|\") {\n            result.append(1)\n            music_string.removeFirst(2)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660013615
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    let notes = music_string.components(separatedBy: \"\
    \ \")\n    var beats = [Int]()\n    for note in notes {\n        switch note {\n\
    \        case \"o\":\n            beats.append(4)\n        case \"o|\":\n    \
    \        beats.append(2)\n        case \".|\":\n            beats.append(1)\n\
    \        default:\n            break\n        }\n    }\n    return beats\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpp01oipe4.swift:12:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let notes = music_string.components(separatedBy:\
    \ \" \")\n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpdbi5rmw9.swift:13:30: error: value of type 'String' has no member\
    \ 'components'\n    let notes = music_string.components(separatedBy: \" \")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013610
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let music_array = music_string.components(separatedBy:\
    \ \" \")\n    for note in music_array {\n        switch note {\n        case \"\
    o\":\n            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp7e93n_kq.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    let music_array = music_string.components(separatedBy: \"\
    \ \")\n                      ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013611
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    var music_array = music_string.components(separatedBy:\
    \ \" \")\n    for i in 0..<music_array.count {\n        switch music_array[i]\
    \ {\n        case \"o\":\n            result.append(4)\n        case \"o|\":\n\
    \            result.append(2)\n        case \".|\":\n            result.append(1)\n\
    \        default:\n            print(\"Error\")\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpk1eggfl3.swift:13:36: error: value of type 'String' has no member\
    \ 'components'\n    var music_array = music_string.components(separatedBy: \"\
    \ \")\n                      ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013611
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var result = [Int]()\n    let music_string_array = music_string.components(separatedBy:\
    \ \" \")\n    for i in music_string_array {\n        switch i {\n        case\
    \ \"o\":\n            result.append(4)\n        case \"o|\":\n            result.append(2)\n\
    \        case \".|\":\n            result.append(1)\n        default:\n      \
    \      print(\"Error\")\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp0t9hg98h.swift:13:43: error: value of type 'String' has no member\
    \ 'components'\n    let music_string_array = music_string.components(separatedBy:\
    \ \" \")\n                             ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013611
