name: HumanEval_59_largest_prime_factor
language: swift
prompt: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
  /// 2\nfunc largest_prime_factor(n: Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
  \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
  \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
completions: ["    var largest_prime_factor = 1\n    var i = 2\n    while i * i <=\
    \ n {\n        if n % i == 0 {\n            largest_prime_factor = i\n       \
    \     n /= i\n        } else {\n            i += 1\n        }\n    }\n    if n\
    \ > 1 {\n        largest_prime_factor = n\n    }\n    return largest_prime_factor",
  "    var n = n\n    var i = 2\n    while i * i <= n {\n        if n % i == 0 {\n\
    \            n /= i\n        } else {\n            i += 1\n        }\n    }\n\
    \    return n", "    var n = n\n    var factor = 2\n    while n > 1 {\n      \
    \  if n % factor == 0 {\n            n /= factor\n        } else {\n         \
    \   factor += 1\n        }\n    }\n    return factor", "    var n = n\n    var\
    \ i = 2\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i\n\
    \        } else {\n            i += 1\n        }\n    }\n    return n", "    var\
    \ n = n\n    var i = 2\n    while i * i <= n {\n        if n % i == 0 {\n    \
    \        n /= i\n        } else {\n            i += 1\n        }\n    }\n    return\
    \ n", "    var n = n\n    var i = 2\n    while i * i <= n {\n        if n % i\
    \ == 0 {\n            n /= i\n        } else {\n            i += 1\n        }\n\
    \    }\n    return n", "    var n = n\n    var i = 2\n    while i * i <= n {\n\
    \        if n % i == 0 {\n            n /= i\n        } else {\n            i\
    \ += 1\n        }\n    }\n    return n", "    var i = 2\n    var n = n\n    while\
    \ i * i <= n {\n        if n % i == 0 {\n            n /= i\n        } else {\n\
    \            i += 1\n        }\n    }\n    return n", "    var n = n\n    var\
    \ i = 2\n    while i * i <= n {\n        if n % i == 0 {\n            n /= i\n\
    \        } else {\n            i += 1\n        }\n    }\n    return n", "    var\
    \ n = n\n    var factor = 2\n    while n > 1 {\n        if n % factor == 0 {\n\
    \            n /= factor\n        } else {\n            factor += 1\n        }\n\
    \    }\n    return factor", "    var n = n\n    var i = 2\n    while i * i <=\
    \ n {\n        if n % i == 0 {\n            n /= i\n        } else {\n       \
    \     i += 1\n        }\n    }\n    return n", "    var n = n\n    var i = 2\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            n /= i\n       \
    \ } else {\n            i += 1\n        }\n    }\n    return n", "    var n =\
    \ n\n    var factor = 2\n    while n > 1 {\n        if n % factor == 0 {\n   \
    \         n /= factor\n        } else {\n            factor += 1\n        }\n\
    \    }\n    return factor", "    var n = n\n    var i = 2\n    while i * i <=\
    \ n {\n        if n % i == 0 {\n            n /= i\n        } else {\n       \
    \     i += 1\n        }\n    }\n    return n", "    var n = n\n    var factor\
    \ = 2\n    while n > 1 {\n        if n % factor == 0 {\n            n /= factor\n\
    \        } else {\n            factor += 1\n        }\n    }\n    return factor",
  "    var n = n\n    var i = 2\n    while i * i <= n {\n        if n % i == 0 {\n\
    \            n /= i\n        } else {\n            i += 1\n        }\n    }\n\
    \    return n", "    var n = n\n    var i = 2\n    while i * i <= n {\n      \
    \  if n % i == 0 {\n            n /= i\n        } else {\n            i += 1\n\
    \        }\n    }\n    return n", "    var n = n\n    var i = 2\n    while i *\
    \ i <= n {\n        if n % i == 0 {\n            n /= i\n        } else {\n  \
    \          i += 1\n        }\n    }\n    return n", "    var n = n\n    var factor\
    \ = 2\n    while n > 1 {\n        if n % factor == 0 {\n            n /= factor\n\
    \        } else {\n            factor += 1\n        }\n    }\n    return factor",
  "    var n = n\n    var factor = 2\n    while n > 1 {\n        if n % factor ==\
    \ 0 {\n            n /= factor\n        } else {\n            factor += 1\n  \
    \      }\n    }\n    return factor"]
stop_tokens:
- "\n}"
