language: swift
name: HumanEval_102_choose_num
results:
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if x % 2 ==\
    \ 0 {\n        return x\n    }\n    return choose_num(x + 1, y: y)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpmaztn7ft.swift:15:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ <= y {\n        return x + 1\n    } else {\n        return -1\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpf2shi2r8/tmpf2shi2r8.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48935d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48932ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48932ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48932cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf2shi2r8                        0x00005653c0a3224d <unavailable> + 4685

    5    libc.so.6                          0x00002b48937c3460 __libc_start_main +
    245

    6    tmpf2shi2r8                        0x00005653c0a31ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpvous_ab7/tmpvous_ab7.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2234e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2231d7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2231d7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2231d67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvous_ab7                        0x00005650240a61bd <unavailable> + 4541

    5    libc.so.6                          0x00002ac2236cc460 __libc_start_main +
    245

    6    tmpvous_ab7                        0x00005650240a5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if x % 2 ==\
    \ 0 {\n        return x\n    }\n    return choose_num(x + 1, y: y)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpmaztn7ft.swift:15:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ == y {\n        return -1\n    } else {\n        return choose_num(x + 1, y:\
    \ y)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpv8a7y_5g.swift:14:26: error: missing argument label 'x:' in call\n\
    \        return choose_num(x + 1, y: y)\n                         ^\n        \
    \                  x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if y % 2\
    \ == 0 {\n        return y\n    } else {\n        return -1\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpkc707157/tmpkc707157.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e95846c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e9553db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e9553d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e9553c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkc707157                        0x000056537152b24d <unavailable> + 4685

    5    libc.so.6                          0x00002b7e95a32460 __libc_start_main +
    245

    6    tmpkc707157                        0x000056537152aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ <= y {\n        return x + 1\n    } else {\n        return -1\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpf2shi2r8/tmpf2shi2r8.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48935d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48932ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48932ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48932cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf2shi2r8                        0x00005653c0a3224d <unavailable> + 4685

    5    libc.so.6                          0x00002b48937c3460 __libc_start_main +
    245

    6    tmpf2shi2r8                        0x00005653c0a31ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if x % 2 ==\
    \ 0 {\n        return x\n    }\n    return choose_num(x + 1, y: y)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpmaztn7ft.swift:15:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var maxEven = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            maxEven = i\n        }\n    }\n    return maxEven\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ff0629c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ff0320561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9ff0320286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9ff032013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9ff031fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp66i_8w7l                        0x0000562fb575c7f0 <unavailable> + 6128

    6    tmp66i_8w7l                        0x0000562fb575c350 <unavailable> + 4944

    7    libc.so.6                          0x00002b9ff0815460 __libc_start_main +
    245

    8    tmp66i_8w7l                        0x0000562fb575bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ == y {\n        return -1\n    } else {\n        return choose_num(x + 1, y:\
    \ y)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpv8a7y_5g.swift:14:26: error: missing argument label 'x:' in call\n\
    \        return choose_num(x + 1, y: y)\n                         ^\n        \
    \                  x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ == y {\n        return -1\n    } else {\n        return choose_num(x + 1, y:\
    \ y)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpv8a7y_5g.swift:14:26: error: missing argument label 'x:' in call\n\
    \        return choose_num(x + 1, y: y)\n                         ^\n        \
    \                  x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if x % 2 ==\
    \ 0 {\n        return x\n    }\n    return choose_num(x + 1, y: y)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpmaztn7ft.swift:15:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ == y {\n        return -1\n    } else {\n        return choose_num(x + 1, y:\
    \ y)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpv8a7y_5g.swift:14:26: error: missing argument label 'x:' in call\n\
    \        return choose_num(x + 1, y: y)\n                         ^\n        \
    \                  x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if x % 2 ==\
    \ 0 {\n        return x\n    }\n    return choose_num(x + 1, y: y)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpmaztn7ft.swift:15:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ == y {\n        return -1\n    } else {\n        return choose_num(x + 1, y:\
    \ y)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpv8a7y_5g.swift:14:26: error: missing argument label 'x:' in call\n\
    \        return choose_num(x + 1, y: y)\n                         ^\n        \
    \                  x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if y % 2\
    \ == 0 {\n        return y\n    } else {\n        return -1\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpkc707157/tmpkc707157.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e95846c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e9553db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e9553d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e9553c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkc707157                        0x000056537152b24d <unavailable> + 4685

    5    libc.so.6                          0x00002b7e95a32460 __libc_start_main +
    245

    6    tmpkc707157                        0x000056537152aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ <= y {\n        return x + 1\n    } else {\n        return -1\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpf2shi2r8/tmpf2shi2r8.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48935d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48932ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48932ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48932cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf2shi2r8                        0x00005653c0a3224d <unavailable> + 4685

    5    libc.so.6                          0x00002b48937c3460 __libc_start_main +
    245

    6    tmpf2shi2r8                        0x00005653c0a31ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if x % 2 ==\
    \ 0 {\n        return x\n    }\n    return choose_num(x + 1, y: y)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpmaztn7ft.swift:15:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ == y {\n        return -1\n    } else {\n        return choose_num(x + 1, y:\
    \ y)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpv8a7y_5g.swift:14:26: error: missing argument label 'x:' in call\n\
    \        return choose_num(x + 1, y: y)\n                         ^\n        \
    \                  x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpvous_ab7/tmpvous_ab7.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2234e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2231d7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2231d7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2231d67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvous_ab7                        0x00005650240a61bd <unavailable> + 4541

    5    libc.so.6                          0x00002ac2236cc460 __libc_start_main +
    245

    6    tmpvous_ab7                        0x00005650240a5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ == y {\n        return -1\n    } else {\n        return choose_num(x + 1, y:\
    \ y)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpv8a7y_5g.swift:14:26: error: missing argument label 'x:' in call\n\
    \        return choose_num(x + 1, y: y)\n                         ^\n        \
    \                  x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ <= y {\n        return x + 1\n    } else {\n        return -1\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpf2shi2r8/tmpf2shi2r8.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48935d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48932ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48932ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48932cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf2shi2r8                        0x00005653c0a3224d <unavailable> + 4685

    5    libc.so.6                          0x00002b48937c3460 __libc_start_main +
    245

    6    tmpf2shi2r8                        0x00005653c0a31ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if x % 2 ==\
    \ 0 {\n        return x\n    }\n    return choose_num(x + 1, y: y)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpmaztn7ft.swift:15:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ == y {\n        return -1\n    } else {\n        return choose_num(x + 1, y:\
    \ y)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpv8a7y_5g.swift:14:26: error: missing argument label 'x:' in call\n\
    \        return choose_num(x + 1, y: y)\n                         ^\n        \
    \                  x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if x % 2 ==\
    \ 0 {\n        return x\n    }\n    if x + 1 == y {\n        return -1\n    }\n\
    \    return choose_num(x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: SyntaxError
  stderr: "/tmp/tmptx_8nmr2.swift:18:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ == y {\n        return -1\n    } else {\n        return choose_num(x + 1, y:\
    \ y)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpv8a7y_5g.swift:14:26: error: missing argument label 'x:' in call\n\
    \        return choose_num(x + 1, y: y)\n                         ^\n        \
    \                  x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ == y {\n        return -1\n    } else {\n        return choose_num(x + 1, y:\
    \ y)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpv8a7y_5g.swift:14:26: error: missing argument label 'x:' in call\n\
    \        return choose_num(x + 1, y: y)\n                         ^\n        \
    \                  x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ == y {\n        return -1\n    } else {\n        return choose_num(x + 1, y:\
    \ y)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpv8a7y_5g.swift:14:26: error: missing argument label 'x:' in call\n\
    \        return choose_num(x + 1, y: y)\n                         ^\n        \
    \                  x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if x % 2 ==\
    \ 0 {\n        return x\n    }\n    return choose_num(x + 1, y: y)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpmaztn7ft.swift:15:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if x % 2 ==\
    \ 0 {\n        return x\n    }\n    return choose_num(x + 1, y: y)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpmaztn7ft.swift:15:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ <= y {\n        return x + 1\n    } else {\n        return -1\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpf2shi2r8/tmpf2shi2r8.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48935d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48932ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48932ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48932cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf2shi2r8                        0x00005653c0a3224d <unavailable> + 4685

    5    libc.so.6                          0x00002b48937c3460 __libc_start_main +
    245

    6    tmpf2shi2r8                        0x00005653c0a31ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if x % 2 ==\
    \ 0 {\n        return x\n    }\n    return choose_num(x + 1, y: y)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpmaztn7ft.swift:15:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ <= y {\n        return x + 1\n    } else {\n        return -1\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpf2shi2r8/tmpf2shi2r8.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48935d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48932ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48932ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48932cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf2shi2r8                        0x00005653c0a3224d <unavailable> + 4685

    5    libc.so.6                          0x00002b48937c3460 __libc_start_main +
    245

    6    tmpf2shi2r8                        0x00005653c0a31ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if x % 2 ==\
    \ 0 {\n        return x\n    }\n    return choose_num(x + 1, y: y)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpmaztn7ft.swift:15:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var max = -1\n    for i in x...y {\n        if i % 2 ==\
    \ 0 {\n            max = i\n        }\n    }\n    return max\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b7de8778c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7de846f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7de846f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7de846f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7de846ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpu3eooj_q                        0x0000564d8215f7f0 <unavailable> + 6128

    6    tmpu3eooj_q                        0x0000564d8215f350 <unavailable> + 4944

    7    libc.so.6                          0x00002b7de8964460 __libc_start_main +
    245

    8    tmpu3eooj_q                        0x0000564d8215efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if x % 2 ==\
    \ 0 {\n        return x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmphakdtokb/tmphakdtokb.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af3c4e07c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3c4afeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af3c4afe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3c4afd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphakdtokb                        0x0000557a32b7c24d <unavailable> + 4685

    5    libc.so.6                          0x00002af3c4ff3460 __libc_start_main +
    245

    6    tmphakdtokb                        0x0000557a32b7bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if x % 2 ==\
    \ 0 {\n        return x\n    }\n    return choose_num(x + 1, y: y)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpmaztn7ft.swift:15:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    // TODO: Write some code to solve this coding challenge\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpc6ptki_b/tmpc6ptki_b.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0043b42c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0043839b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0043839988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00438387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc6ptki_b                        0x000055f9b74ea1bd <unavailable> + 4541

    5    libc.so.6                          0x00002b0043d2e460 __libc_start_main +
    245

    6    tmpc6ptki_b                        0x000055f9b74e9e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if x % 2 ==\
    \ 0 {\n        return x\n    }\n    return choose_num(x + 1, y: y)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpmaztn7ft.swift:15:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ <= y {\n        return x + 1\n    } else {\n        return -1\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpf2shi2r8/tmpf2shi2r8.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48935d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48932ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48932ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48932cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf2shi2r8                        0x00005653c0a3224d <unavailable> + 4685

    5    libc.so.6                          0x00002b48937c3460 __libc_start_main +
    245

    6    tmpf2shi2r8                        0x00005653c0a31ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ == y {\n        return -1\n    } else {\n        return choose_num(x + 1, y:\
    \ y)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpv8a7y_5g.swift:14:26: error: missing argument label 'x:' in call\n\
    \        return choose_num(x + 1, y: y)\n                         ^\n        \
    \                  x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if x % 2 ==\
    \ 0 {\n        return x\n    }\n    return choose_num(x + 1, y: y)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpmaztn7ft.swift:15:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ <= y {\n        return x + 1\n    } else {\n        return -1\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpf2shi2r8/tmpf2shi2r8.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48935d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48932ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48932ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48932cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf2shi2r8                        0x00005653c0a3224d <unavailable> + 4685

    5    libc.so.6                          0x00002b48937c3460 __libc_start_main +
    245

    6    tmpf2shi2r8                        0x00005653c0a31ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ <= y {\n        return x + 1\n    } else {\n        return -1\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpf2shi2r8/tmpf2shi2r8.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48935d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48932ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48932ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48932cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf2shi2r8                        0x00005653c0a3224d <unavailable> + 4685

    5    libc.so.6                          0x00002b48937c3460 __libc_start_main +
    245

    6    tmpf2shi2r8                        0x00005653c0a31ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if x % 2 ==\
    \ 0 {\n        return x\n    }\n    return choose_num(x + 1, y: y)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpmaztn7ft.swift:15:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if x % 2 ==\
    \ 0 {\n        return x\n    }\n    return choose_num(x + 1, y: y)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpmaztn7ft.swift:15:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ == y {\n        return -1\n    } else {\n        return choose_num(x + 1, y:\
    \ y)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpv8a7y_5g.swift:14:26: error: missing argument label 'x:' in call\n\
    \        return choose_num(x + 1, y: y)\n                         ^\n        \
    \                  x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if y % 2\
    \ == 0 {\n        return y\n    } else {\n        return -1\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpkc707157/tmpkc707157.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e95846c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e9553db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e9553d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e9553c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkc707157                        0x000056537152b24d <unavailable> + 4685

    5    libc.so.6                          0x00002b7e95a32460 __libc_start_main +
    245

    6    tmpkc707157                        0x000056537152aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if y % 2\
    \ == 0 {\n        return y\n    } else {\n        return -1\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpkc707157/tmpkc707157.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e95846c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e9553db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e9553d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e9553c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkc707157                        0x000056537152b24d <unavailable> + 4685

    5    libc.so.6                          0x00002b7e95a32460 __libc_start_main +
    245

    6    tmpkc707157                        0x000056537152aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ == y {\n        return -1\n    } else {\n        return choose_num(x + 1, y:\
    \ y)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpv8a7y_5g.swift:14:26: error: missing argument label 'x:' in call\n\
    \        return choose_num(x + 1, y: y)\n                         ^\n        \
    \                  x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ == y {\n        return -1\n    } else {\n        return choose_num(x + 1, y:\
    \ y)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpv8a7y_5g.swift:14:26: error: missing argument label 'x:' in call\n\
    \        return choose_num(x + 1, y: y)\n                         ^\n        \
    \                  x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var num = -1\n    if x % 2 == 0 {\n        num = x\n \
    \   } else {\n        num = x + 1\n    }\n    while num <= y {\n        if num\
    \ % 2 == 0 {\n            return num\n        }\n        num += 1\n    }\n   \
    \ return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpdvme_t11/tmpdvme_t11.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6dac241c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6dabf38b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6dabf38988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6dabf377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdvme_t11                        0x0000560fcba9024d <unavailable> + 4685

    5    libc.so.6                          0x00002b6dac42d460 __libc_start_main +
    245

    6    tmpdvme_t11                        0x0000560fcba8fef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if x % 2 ==\
    \ 0 {\n        return x\n    }\n    return choose_num(x + 1, y: y)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpmaztn7ft.swift:15:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ == y {\n        return -1\n    } else {\n        return choose_num(x + 1, y:\
    \ y)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpv8a7y_5g.swift:14:26: error: missing argument label 'x:' in call\n\
    \        return choose_num(x + 1, y: y)\n                         ^\n        \
    \                  x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if x % 2 ==\
    \ 0 {\n        return x\n    }\n    return choose_num(x + 1, y: y)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpmaztn7ft.swift:15:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if x % 2 ==\
    \ 0 {\n        return x\n    }\n    return choose_num(x + 1, y: y)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpmaztn7ft.swift:15:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ <= y {\n        return x + 1\n    } else {\n        return -1\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpf2shi2r8/tmpf2shi2r8.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48935d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48932ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48932ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48932cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf2shi2r8                        0x00005653c0a3224d <unavailable> + 4685

    5    libc.so.6                          0x00002b48937c3460 __libc_start_main +
    245

    6    tmpf2shi2r8                        0x00005653c0a31ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ == y {\n        return -1\n    } else {\n        return choose_num(x + 1, y:\
    \ y)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpv8a7y_5g.swift:14:26: error: missing argument label 'x:' in call\n\
    \        return choose_num(x + 1, y: y)\n                         ^\n        \
    \                  x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if x % 2 ==\
    \ 0 {\n        return x\n    }\n    return choose_num(x + 1, y: y)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpmaztn7ft.swift:15:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if y % 2\
    \ == 0 {\n        return y\n    } else {\n        return -1\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpkc707157/tmpkc707157.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e95846c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e9553db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e9553d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e9553c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkc707157                        0x000056537152b24d <unavailable> + 4685

    5    libc.so.6                          0x00002b7e95a32460 __libc_start_main +
    245

    6    tmpkc707157                        0x000056537152aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ <= y {\n        return x + 1\n    } else {\n        return -1\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpf2shi2r8/tmpf2shi2r8.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48935d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48932ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48932ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48932cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf2shi2r8                        0x00005653c0a3224d <unavailable> + 4685

    5    libc.so.6                          0x00002b48937c3460 __libc_start_main +
    245

    6    tmpf2shi2r8                        0x00005653c0a31ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ == y {\n        return -1\n    } else {\n        return choose_num(x + 1, y:\
    \ y)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpv8a7y_5g.swift:14:26: error: missing argument label 'x:' in call\n\
    \        return choose_num(x + 1, y: y)\n                         ^\n        \
    \                  x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ == y {\n        return -1\n    } else {\n        return choose_num(x + 1, y:\
    \ y)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpv8a7y_5g.swift:14:26: error: missing argument label 'x:' in call\n\
    \        return choose_num(x + 1, y: y)\n                         ^\n        \
    \                  x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if x % 2 ==\
    \ 0 {\n        return x\n    }\n    return choose_num(x+1, y: y)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpg_l81tog.swift:15:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x+1, y: y)\n                     ^\n                  \
    \    x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ <= y {\n        return x + 1\n    } else {\n        return -1\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpf2shi2r8/tmpf2shi2r8.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48935d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48932ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48932ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48932cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf2shi2r8                        0x00005653c0a3224d <unavailable> + 4685

    5    libc.so.6                          0x00002b48937c3460 __libc_start_main +
    245

    6    tmpf2shi2r8                        0x00005653c0a31ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ == y {\n        return -1\n    } else {\n        return choose_num(x + 1, y:\
    \ y)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpv8a7y_5g.swift:14:26: error: missing argument label 'x:' in call\n\
    \        return choose_num(x + 1, y: y)\n                         ^\n        \
    \                  x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: 0
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    var i = y\n\
    \    while i >= x {\n        if i % 2 == 0 {\n            return i\n        }\n\
    \        i -= 1\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824470
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ == y {\n        return -1\n    } else {\n        return choose_num(x + 1, y:\
    \ y)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpv8a7y_5g.swift:14:26: error: missing argument label 'x:' in call\n\
    \        return choose_num(x + 1, y: y)\n                         ^\n        \
    \                  x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ == y {\n        return -1\n    } else {\n        return choose_num(x + 1, y:\
    \ y)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpv8a7y_5g.swift:14:26: error: missing argument label 'x:' in call\n\
    \        return choose_num(x + 1, y: y)\n                         ^\n        \
    \                  x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    if x % 2 == 0 {\n        result =\
    \ x\n    } else {\n        result = x + 1\n    }\n    if result > y {\n      \
    \  result = -1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmpt4q9dqc0/tmpt4q9dqc0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab403ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab400f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab400f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab400f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt4q9dqc0                        0x000055611899d24d <unavailable> + 4685

    5    libc.so.6                          0x00002aab405eb460 __libc_start_main +
    245

    6    tmpt4q9dqc0                        0x000055611899cef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if x % 2 ==\
    \ 0 {\n        return x\n    }\n    return choose_num(x + 1, y: y)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpmaztn7ft.swift:15:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if x % 2 ==\
    \ 0 {\n        return x\n    }\n    return choose_num(x + 1, y: y)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpmaztn7ft.swift:15:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var maxEven = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            maxEven = i\n        }\n    }\n    return maxEven\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ff0629c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ff0320561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9ff0320286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9ff032013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9ff031fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp66i_8w7l                        0x0000562fb575c7f0 <unavailable> + 6128

    6    tmp66i_8w7l                        0x0000562fb575c350 <unavailable> + 4944

    7    libc.so.6                          0x00002b9ff0815460 __libc_start_main +
    245

    8    tmp66i_8w7l                        0x0000562fb575bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if y % 2\
    \ == 0 {\n        return y\n    } else {\n        return -1\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpkc707157/tmpkc707157.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e95846c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e9553db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e9553d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e9553c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkc707157                        0x000056537152b24d <unavailable> + 4685

    5    libc.so.6                          0x00002b7e95a32460 __libc_start_main +
    245

    6    tmpkc707157                        0x000056537152aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if x % 2 ==\
    \ 0 {\n        return x\n    }\n    return choose_num(x + 1, y: y)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpmaztn7ft.swift:15:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if y % 2\
    \ == 0 {\n        return y\n    } else {\n        return -1\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpkc707157/tmpkc707157.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e95846c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e9553db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e9553d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e9553c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkc707157                        0x000056537152b24d <unavailable> + 4685

    5    libc.so.6                          0x00002b7e95a32460 __libc_start_main +
    245

    6    tmpkc707157                        0x000056537152aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if y % 2\
    \ == 0 {\n        return y\n    } else {\n        return -1\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpkc707157/tmpkc707157.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e95846c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e9553db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e9553d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e9553c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkc707157                        0x000056537152b24d <unavailable> + 4685

    5    libc.so.6                          0x00002b7e95a32460 __libc_start_main +
    245

    6    tmpkc707157                        0x000056537152aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if y % 2\
    \ == 0 {\n        return y\n    } else {\n        return -1\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpkc707157/tmpkc707157.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e95846c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e9553db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e9553d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e9553c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkc707157                        0x000056537152b24d <unavailable> + 4685

    5    libc.so.6                          0x00002b7e95a32460 __libc_start_main +
    245

    6    tmpkc707157                        0x000056537152aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ == y {\n        return -1\n    } else {\n        return choose_num(x + 1, y:\
    \ y)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpv8a7y_5g.swift:14:26: error: missing argument label 'x:' in call\n\
    \        return choose_num(x + 1, y: y)\n                         ^\n        \
    \                  x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: 0
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    var result =\
    \ y\n    while result >= x {\n        if result % 2 == 0 {\n            return\
    \ result\n        }\n        result -= 1\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824470
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if x % 2 ==\
    \ 0 {\n        return x\n    }\n    return choose_num(x + 1, y: y)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpmaztn7ft.swift:15:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if x % 2 ==\
    \ 0 {\n        return x\n    }\n    return choose_num(x + 1, y: y)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpmaztn7ft.swift:15:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if x % 2 ==\
    \ 0 {\n        return x\n    }\n    return choose_num(x + 1, y: y)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpmaztn7ft.swift:15:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    if x % 2 == 0 {\n        result =\
    \ x\n    } else {\n        result = x + 1\n    }\n    if result > y {\n      \
    \  result = -1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmpt4q9dqc0/tmpt4q9dqc0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab403ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab400f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab400f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab400f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt4q9dqc0                        0x000055611899d24d <unavailable> + 4685

    5    libc.so.6                          0x00002aab405eb460 __libc_start_main +
    245

    6    tmpt4q9dqc0                        0x000055611899cef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ <= y {\n        return x + 1\n    } else {\n        return -1\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpf2shi2r8/tmpf2shi2r8.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48935d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48932ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48932ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48932cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf2shi2r8                        0x00005653c0a3224d <unavailable> + 4685

    5    libc.so.6                          0x00002b48937c3460 __libc_start_main +
    245

    6    tmpf2shi2r8                        0x00005653c0a31ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    if x % 2 == 0 {\n        result =\
    \ x\n    } else {\n        result = x + 1\n    }\n    if result > y {\n      \
    \  result = -1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmpt4q9dqc0/tmpt4q9dqc0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab403ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab400f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab400f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab400f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt4q9dqc0                        0x000055611899d24d <unavailable> + 4685

    5    libc.so.6                          0x00002aab405eb460 __libc_start_main +
    245

    6    tmpt4q9dqc0                        0x000055611899cef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ == y {\n        return -1\n    } else {\n        return choose_num(x + 1, y:\
    \ y)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpv8a7y_5g.swift:14:26: error: missing argument label 'x:' in call\n\
    \        return choose_num(x + 1, y: y)\n                         ^\n        \
    \                  x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ <= y {\n        return x + 1\n    } else {\n        return -1\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpf2shi2r8/tmpf2shi2r8.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48935d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48932ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48932ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48932cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf2shi2r8                        0x00005653c0a3224d <unavailable> + 4685

    5    libc.so.6                          0x00002b48937c3460 __libc_start_main +
    245

    6    tmpf2shi2r8                        0x00005653c0a31ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if y % 2\
    \ == 0 {\n        return y\n    } else {\n        return -1\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpkc707157/tmpkc707157.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e95846c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e9553db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e9553d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e9553c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkc707157                        0x000056537152b24d <unavailable> + 4685

    5    libc.so.6                          0x00002b7e95a32460 __libc_start_main +
    245

    6    tmpkc707157                        0x000056537152aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if x % 2 ==\
    \ 0 {\n        return x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmphakdtokb/tmphakdtokb.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af3c4e07c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3c4afeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af3c4afe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3c4afd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphakdtokb                        0x0000557a32b7c24d <unavailable> + 4685

    5    libc.so.6                          0x00002af3c4ff3460 __libc_start_main +
    245

    6    tmphakdtokb                        0x0000557a32b7bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ <= y {\n        return x + 1\n    } else {\n        return -1\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpf2shi2r8/tmpf2shi2r8.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48935d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48932ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48932ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48932cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf2shi2r8                        0x00005653c0a3224d <unavailable> + 4685

    5    libc.so.6                          0x00002b48937c3460 __libc_start_main +
    245

    6    tmpf2shi2r8                        0x00005653c0a31ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ == y {\n        return -1\n    } else {\n        return choose_num(x + 1, y:\
    \ y)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpv8a7y_5g.swift:14:26: error: missing argument label 'x:' in call\n\
    \        return choose_num(x + 1, y: y)\n                         ^\n        \
    \                  x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var maxEven = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            maxEven = i\n        }\n    }\n    return maxEven\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ff0629c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ff0320561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9ff0320286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9ff032013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9ff031fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp66i_8w7l                        0x0000562fb575c7f0 <unavailable> + 6128

    6    tmp66i_8w7l                        0x0000562fb575c350 <unavailable> + 4944

    7    libc.so.6                          0x00002b9ff0815460 __libc_start_main +
    245

    8    tmp66i_8w7l                        0x0000562fb575bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if x % 2 ==\
    \ 0 {\n        return x\n    }\n    return choose_num(x + 1, y: y)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpmaztn7ft.swift:15:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if x % 2 ==\
    \ 0 {\n        return x\n    }\n    return choose_num(x + 1, y: y)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpmaztn7ft.swift:15:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ == y {\n        return -1\n    } else {\n        return choose_num(x + 1, y:\
    \ y)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpv8a7y_5g.swift:14:26: error: missing argument label 'x:' in call\n\
    \        return choose_num(x + 1, y: y)\n                         ^\n        \
    \                  x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ == y {\n        return -1\n    } else {\n        return choose_num(x + 1, y:\
    \ y)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpv8a7y_5g.swift:14:26: error: missing argument label 'x:' in call\n\
    \        return choose_num(x + 1, y: y)\n                         ^\n        \
    \                  x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ == y {\n        return -1\n    } else {\n        return choose_num(x + 1, y:\
    \ y)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpv8a7y_5g.swift:14:26: error: missing argument label 'x:' in call\n\
    \        return choose_num(x + 1, y: y)\n                         ^\n        \
    \                  x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if x % 2 ==\
    \ 0 {\n        return x\n    }\n    if x + 1 == y {\n        return -1\n    }\n\
    \    return choose_num(x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: SyntaxError
  stderr: "/tmp/tmptx_8nmr2.swift:18:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if x % 2 ==\
    \ 0 {\n        return x\n    }\n    return choose_num(x + 1, y: y)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpmaztn7ft.swift:15:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if x % 2 ==\
    \ 0 {\n        return x\n    }\n    return choose_num(x + 1, y: y)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpmaztn7ft.swift:15:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        return -1\n    } else if x % 2 ==\
    \ 0 {\n        return x\n    } else {\n        return x + 1\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp82x5qskc/tmp82x5qskc.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb44519c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb44210b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb44210988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb4420f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp82x5qskc                        0x000055d40cb1a24d <unavailable> + 4685

    5    libc.so.6                          0x00002afb44705460 __libc_start_main +
    245

    6    tmp82x5qskc                        0x000055d40cb19ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if x % 2 ==\
    \ 0 {\n        return x\n    }\n    if x + 1 == y {\n        return -1\n    }\n\
    \    return choose_num(x + 1, y: y)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: SyntaxError
  stderr: "/tmp/tmptx_8nmr2.swift:18:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    if x % 2 == 0 {\n        result =\
    \ x\n    } else {\n        result = x + 1\n    }\n    if result > y {\n      \
    \  result = -1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmpt4q9dqc0/tmpt4q9dqc0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab403ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab400f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab400f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab400f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt4q9dqc0                        0x000055611899d24d <unavailable> + 4685

    5    libc.so.6                          0x00002aab405eb460 __libc_start_main +
    245

    6    tmpt4q9dqc0                        0x000055611899cef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if y % 2\
    \ == 0 {\n        return y\n    } else {\n        return -1\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpkc707157/tmpkc707157.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e95846c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e9553db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e9553d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e9553c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkc707157                        0x000056537152b24d <unavailable> + 4685

    5    libc.so.6                          0x00002b7e95a32460 __libc_start_main +
    245

    6    tmpkc707157                        0x000056537152aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ == y {\n        return -1\n    } else {\n        return choose_num(x + 1, y:\
    \ y)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpv8a7y_5g.swift:14:26: error: missing argument label 'x:' in call\n\
    \        return choose_num(x + 1, y: y)\n                         ^\n        \
    \                  x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if x % 2 ==\
    \ 0 {\n        return x\n    }\n    return choose_num(x + 1, y: y)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpmaztn7ft.swift:15:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ == y {\n        return -1\n    } else {\n        return choose_num(x + 1, y:\
    \ y)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpv8a7y_5g.swift:14:26: error: missing argument label 'x:' in call\n\
    \        return choose_num(x + 1, y: y)\n                         ^\n        \
    \                  x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if x % 2 ==\
    \ 0 {\n        return x\n    }\n    return choose_num(x + 1, y: y)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpmaztn7ft.swift:15:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if y % 2\
    \ == 0 {\n        return y\n    } else {\n        return -1\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpkc707157/tmpkc707157.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e95846c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e9553db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e9553d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e9553c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkc707157                        0x000056537152b24d <unavailable> + 4685

    5    libc.so.6                          0x00002b7e95a32460 __libc_start_main +
    245

    6    tmpkc707157                        0x000056537152aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if x % 2 ==\
    \ 0 {\n        return x\n    }\n    return choose_num(x + 1, y: y)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpmaztn7ft.swift:15:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if x % 2 ==\
    \ 0 {\n        return x\n    }\n    return choose_num(x + 1, y: y)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpmaztn7ft.swift:15:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ == y {\n        return -1\n    } else {\n        return choose_num(x: x + 1,\
    \ y: y)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp_qowd008/tmp_qowd008.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab7d7533c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab7d722ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab7d722a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7d72297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_qowd008                        0x0000561a4a6ca24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab7d771f460 __libc_start_main +
    245

    6    tmp_qowd008                        0x0000561a4a6c9ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if y % 2\
    \ == 0 {\n        return y\n    } else {\n        return -1\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpkc707157/tmpkc707157.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e95846c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e9553db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e9553d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e9553c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkc707157                        0x000056537152b24d <unavailable> + 4685

    5    libc.so.6                          0x00002b7e95a32460 __libc_start_main +
    245

    6    tmpkc707157                        0x000056537152aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ == y {\n        return -1\n    } else {\n        return choose_num(x + 1, y:\
    \ y)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpv8a7y_5g.swift:14:26: error: missing argument label 'x:' in call\n\
    \        return choose_num(x + 1, y: y)\n                         ^\n        \
    \                  x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ <= y {\n        return x + 1\n    } else {\n        return -1\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpf2shi2r8/tmpf2shi2r8.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48935d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48932ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48932ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48932cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf2shi2r8                        0x00005653c0a3224d <unavailable> + 4685

    5    libc.so.6                          0x00002b48937c3460 __libc_start_main +
    245

    6    tmpf2shi2r8                        0x00005653c0a31ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if x % 2 ==\
    \ 0 {\n        return x\n    }\n    return choose_num(x + 1, y: y)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpmaztn7ft.swift:15:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ == y {\n        return -1\n    } else {\n        return choose_num(x + 1, y:\
    \ y)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpv8a7y_5g.swift:14:26: error: missing argument label 'x:' in call\n\
    \        return choose_num(x + 1, y: y)\n                         ^\n        \
    \                  x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if x % 2 ==\
    \ 0 {\n        return x\n    }\n    return choose_num(x + 1, y: y)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpmaztn7ft.swift:15:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ <= y {\n        return x + 1\n    } else {\n        return -1\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpf2shi2r8/tmpf2shi2r8.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48935d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48932ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48932ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48932cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf2shi2r8                        0x00005653c0a3224d <unavailable> + 4685

    5    libc.so.6                          0x00002b48937c3460 __libc_start_main +
    245

    6    tmpf2shi2r8                        0x00005653c0a31ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpvous_ab7/tmpvous_ab7.swift:25: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2234e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2231d7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2231d7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2231d67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvous_ab7                        0x00005650240a61bd <unavailable> + 4541

    5    libc.so.6                          0x00002ac2236cc460 __libc_start_main +
    245

    6    tmpvous_ab7                        0x00005650240a5e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if x % 2 ==\
    \ 0 {\n        return x\n    }\n    return choose_num(x + 1, y: y)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpmaztn7ft.swift:15:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ == y {\n        return -1\n    } else {\n        return choose_num(x + 1, y:\
    \ y)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpv8a7y_5g.swift:14:26: error: missing argument label 'x:' in call\n\
    \        return choose_num(x + 1, y: y)\n                         ^\n        \
    \                  x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if y % 2\
    \ == 0 {\n        return y\n    } else {\n        return -1\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpkc707157/tmpkc707157.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e95846c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e9553db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e9553d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e9553c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkc707157                        0x000056537152b24d <unavailable> + 4685

    5    libc.so.6                          0x00002b7e95a32460 __libc_start_main +
    245

    6    tmpkc707157                        0x000056537152aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var maxEven = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            maxEven = i\n        }\n    }\n    return maxEven\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ff0629c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ff0320561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9ff0320286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9ff032013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9ff031fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp66i_8w7l                        0x0000562fb575c7f0 <unavailable> + 6128

    6    tmp66i_8w7l                        0x0000562fb575c350 <unavailable> + 4944

    7    libc.so.6                          0x00002b9ff0815460 __libc_start_main +
    245

    8    tmp66i_8w7l                        0x0000562fb575bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ == y {\n        return -1\n    } else {\n        return choose_num(x + 1, y:\
    \ y)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpv8a7y_5g.swift:14:26: error: missing argument label 'x:' in call\n\
    \        return choose_num(x + 1, y: y)\n                         ^\n        \
    \                  x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ <= y {\n        return x + 1\n    } else {\n        return -1\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpf2shi2r8/tmpf2shi2r8.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48935d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48932ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48932ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48932cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf2shi2r8                        0x00005653c0a3224d <unavailable> + 4685

    5    libc.so.6                          0x00002b48937c3460 __libc_start_main +
    245

    6    tmpf2shi2r8                        0x00005653c0a31ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ == y {\n        return -1\n    } else {\n        return choose_num(x + 1, y:\
    \ y)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpv8a7y_5g.swift:14:26: error: missing argument label 'x:' in call\n\
    \        return choose_num(x + 1, y: y)\n                         ^\n        \
    \                  x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ <= y {\n        return x + 1\n    } else {\n        return -1\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpf2shi2r8/tmpf2shi2r8.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48935d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48932ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48932ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48932cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf2shi2r8                        0x00005653c0a3224d <unavailable> + 4685

    5    libc.so.6                          0x00002b48937c3460 __libc_start_main +
    245

    6    tmpf2shi2r8                        0x00005653c0a31ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if x % 2 ==\
    \ 0 {\n        return x\n    }\n    return choose_num(x + 1, y: y)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpmaztn7ft.swift:15:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if x % 2 ==\
    \ 0 {\n        return x\n    }\n    return choose_num(x + 1, y: y)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpmaztn7ft.swift:15:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ == y {\n        return -1\n    } else {\n        return choose_num(x + 1, y:\
    \ y)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpv8a7y_5g.swift:14:26: error: missing argument label 'x:' in call\n\
    \        return choose_num(x + 1, y: y)\n                         ^\n        \
    \                  x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    for i in x...y {\n        if i %\
    \ 2 == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ab812cd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8129cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab8129cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab8129cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab8129cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpm7wzdot_                        0x00005613a4a637f0 <unavailable> + 6128

    6    tmpm7wzdot_                        0x00005613a4a63350 <unavailable> + 4944

    7    libc.so.6                          0x00002ab812ec1460 __libc_start_main +
    245

    8    tmpm7wzdot_                        0x00005613a4a62fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if x % 2 ==\
    \ 0 {\n        return x\n    }\n    return choose_num(x + 1, y: y)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpmaztn7ft.swift:15:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ <= y {\n        return x + 1\n    } else {\n        return -1\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpf2shi2r8/tmpf2shi2r8.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48935d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48932ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48932ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48932cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf2shi2r8                        0x00005653c0a3224d <unavailable> + 4685

    5    libc.so.6                          0x00002b48937c3460 __libc_start_main +
    245

    6    tmpf2shi2r8                        0x00005653c0a31ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824470
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ == y {\n        return -1\n    } else {\n        return choose_num(x + 1, y:\
    \ y)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpv8a7y_5g.swift:14:26: error: missing argument label 'x:' in call\n\
    \        return choose_num(x + 1, y: y)\n                         ^\n        \
    \                  x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x > y {\n        return -1\n    }\n    if x % 2 ==\
    \ 0 {\n        return x\n    }\n    return choose_num(x + 1, y: y)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpmaztn7ft.swift:15:22: error: missing argument label 'x:' in call\n\
    \    return choose_num(x + 1, y: y)\n                     ^\n                \
    \      x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    if x % 2 == 0 {\n        return x\n    } else if x + 1\
    \ == y {\n        return -1\n    } else {\n        return choose_num(x + 1, y:\
    \ y)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpv8a7y_5g.swift:14:26: error: missing argument label 'x:' in call\n\
    \        return choose_num(x + 1, y: y)\n                         ^\n        \
    \                  x: \n"
  stdout: ''
  timestamp: 1659824469
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// choose_num(12, 15) = 14\n/// choose_num(13, 12) = -1\nfunc choose_num(x: Int,\
    \ y: Int) -> Int {\n    var result = -1\n    if x % 2 == 0 {\n        result =\
    \ x\n    } else {\n        result = x + 1\n    }\n    if result > y {\n      \
    \  result = -1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmpt4q9dqc0/tmpt4q9dqc0.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab403ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab400f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab400f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab400f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt4q9dqc0                        0x000055611899d24d <unavailable> + 4685

    5    libc.so.6                          0x00002aab405eb460 __libc_start_main +
    245

    6    tmpt4q9dqc0                        0x000055611899cef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659824470
