language: swift
name: HumanEval_95_check_dict_case
results:
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var upper = true\n    var lower = true\n \
    \   for key in dict.keys {\n        if key.uppercased() != key {\n           \
    \ upper = false\n        }\n        if key.lowercased() != key {\n           \
    \ lower = false\n        }\n    }\n    return upper || lower\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp4f66tebp/tmp4f66tebp.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae2acd0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae2a9c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae2a9c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae2a9c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4f66tebp                        0x000055cd76a40bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002aae2aebc460 __libc_start_main +
    245

    6    tmp4f66tebp                        0x000055cd76a403b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var isUpper = false\n    var isLower = false\n\
    \    for (key, _) in dict {\n        if key.uppercased() == key {\n          \
    \  isUpper = true\n        } else if key.lowercased() == key {\n            isLower\
    \ = true\n        } else {\n            return false\n        }\n    }\n    return\
    \ isUpper || isLower\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpvf17vtha/tmpvf17vtha.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7179d29c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7179a20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7179a20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7179a1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvf17vtha                        0x000055d61c832975 <unavailable> + 6517

    5    libc.so.6                          0x00002b7179f15460 __libc_start_main +
    245

    6    tmpvf17vtha                        0x000055d61c832359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var is_upper = false\n    var is_lower = false\n\
    \    for (key, _) in dict {\n        if key.uppercased() == key {\n          \
    \  is_upper = true\n        }\n        if key.lowercased() == key {\n        \
    \    is_lower = true\n        }\n    }\n    return is_upper && is_lower\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpgn55u2gb/tmpgn55u2gb.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9df3edcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9df3bd3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9df3bd3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9df3bd27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgn55u2gb                        0x000055e3475457a3 <unavailable> + 6051

    5    libc.so.6                          0x00002b9df40c8460 __libc_start_main +
    245

    6    tmpgn55u2gb                        0x000055e347545359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lower = true\n    var upper = true\n \
    \   for (key, _) in dict {\n        if key.lowercased() != key {\n           \
    \ lower = false\n        }\n        if key.uppercased() != key {\n           \
    \ upper = false\n        }\n    }\n    return lower || upper\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpocg_p6am/tmpocg_p6am.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60db3e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60db0deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60db0de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60db0dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpocg_p6am                        0x000055a9ef083b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b60db5d3460 __libc_start_main +
    245

    6    tmpocg_p6am                        0x000055a9ef083359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for key in dict.keys {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpaaqweq9j/tmpaaqweq9j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafb13fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafb10f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafb10f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafb10f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaaqweq9j                        0x0000558d60262bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002aafb15e7460 __libc_start_main +
    245

    6    tmpaaqweq9j                        0x0000558d602623b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for (key, _) in dict {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpciop7nxl/tmpciop7nxl.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a7f2bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a7efb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a7efb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a7efb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpciop7nxl                        0x000055d4727b2b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b4a7f4ab460 __libc_start_main +
    245

    6    tmpciop7nxl                        0x000055d4727b2359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for key in dict.keys {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpaaqweq9j/tmpaaqweq9j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafb13fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafb10f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafb10f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafb10f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaaqweq9j                        0x0000558d60262bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002aafb15e7460 __libc_start_main +
    245

    6    tmpaaqweq9j                        0x0000558d602623b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lower = true\n    var upper = true\n \
    \   for (key, _) in dict {\n        if key.lowercased() != key {\n           \
    \ lower = false\n        }\n        if key.uppercased() != key {\n           \
    \ upper = false\n        }\n    }\n    return lower || upper\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpocg_p6am/tmpocg_p6am.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60db3e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60db0deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60db0de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60db0dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpocg_p6am                        0x000055a9ef083b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b60db5d3460 __libc_start_main +
    245

    6    tmpocg_p6am                        0x000055a9ef083359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for (key, _) in dict {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpciop7nxl/tmpciop7nxl.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a7f2bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a7efb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a7efb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a7efb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpciop7nxl                        0x000055d4727b2b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b4a7f4ab460 __libc_start_main +
    245

    6    tmpciop7nxl                        0x000055d4727b2359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for key in dict.keys {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpaaqweq9j/tmpaaqweq9j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafb13fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafb10f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafb10f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafb10f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaaqweq9j                        0x0000558d60262bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002aafb15e7460 __libc_start_main +
    245

    6    tmpaaqweq9j                        0x0000558d602623b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for key in dict.keys {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpaaqweq9j/tmpaaqweq9j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafb13fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafb10f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafb10f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafb10f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaaqweq9j                        0x0000558d60262bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002aafb15e7460 __libc_start_main +
    245

    6    tmpaaqweq9j                        0x0000558d602623b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for (key, _) in dict {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpciop7nxl/tmpciop7nxl.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a7f2bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a7efb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a7efb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a7efb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpciop7nxl                        0x000055d4727b2b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b4a7f4ab460 __libc_start_main +
    245

    6    tmpciop7nxl                        0x000055d4727b2359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var isLower = false\n    var isUpper = false\n\
    \    for key in dict.keys {\n        if key.lowercased() == key {\n          \
    \  isLower = true\n        } else if key.uppercased() == key {\n            isUpper\
    \ = true\n        } else {\n            return false\n        }\n    }\n    return\
    \ isLower || isUpper\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmprdnymlka/tmprdnymlka.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb37e37c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb37b2eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb37b2e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb37b2d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprdnymlka                        0x000055a59d0929d5 <unavailable> + 6613

    5    libc.so.6                          0x00002acb38023460 __libc_start_main +
    245

    6    tmprdnymlka                        0x000055a59d0923b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lower = true\n    var upper = true\n \
    \   for (key, _) in dict {\n        if key.lowercased() != key {\n           \
    \ lower = false\n        }\n        if key.uppercased() != key {\n           \
    \ upper = false\n        }\n    }\n    return lower || upper\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpocg_p6am/tmpocg_p6am.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60db3e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60db0deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60db0de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60db0dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpocg_p6am                        0x000055a9ef083b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b60db5d3460 __libc_start_main +
    245

    6    tmpocg_p6am                        0x000055a9ef083359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lower = true\n    var upper = true\n \
    \   for (key, _) in dict {\n        if key.lowercased() != key {\n           \
    \ lower = false\n        }\n        if key.uppercased() != key {\n           \
    \ upper = false\n        }\n    }\n    return lower || upper\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpocg_p6am/tmpocg_p6am.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60db3e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60db0deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60db0de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60db0dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpocg_p6am                        0x000055a9ef083b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b60db5d3460 __libc_start_main +
    245

    6    tmpocg_p6am                        0x000055a9ef083359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for (key, _) in dict {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpciop7nxl/tmpciop7nxl.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a7f2bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a7efb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a7efb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a7efb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpciop7nxl                        0x000055d4727b2b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b4a7f4ab460 __libc_start_main +
    245

    6    tmpciop7nxl                        0x000055d4727b2359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lower = true\n    var upper = true\n \
    \   for (key, _) in dict {\n        if key.lowercased() != key {\n           \
    \ lower = false\n        }\n        if key.uppercased() != key {\n           \
    \ upper = false\n        }\n    }\n    return lower || upper\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpocg_p6am/tmpocg_p6am.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60db3e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60db0deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60db0de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60db0dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpocg_p6am                        0x000055a9ef083b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b60db5d3460 __libc_start_main +
    245

    6    tmpocg_p6am                        0x000055a9ef083359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var upper = true\n    var lower = true\n \
    \   for (key, _) in dict {\n        if key.lowercased() != key {\n           \
    \ lower = false\n        }\n        if key.uppercased() != key {\n           \
    \ upper = false\n        }\n    }\n    return upper || lower\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp8d4p34ys/tmp8d4p34ys.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1225cbec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b12259b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b12259b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b12259b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8d4p34ys                        0x00005633ea59bb70 <unavailable> + 7024

    5    libc.so.6                          0x00002b1225eaa460 __libc_start_main +
    245

    6    tmp8d4p34ys                        0x00005633ea59b359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var isLower = false\n    var isUpper = false\n\
    \    for key in dict.keys {\n        if key.lowercased() == key {\n          \
    \  isLower = true\n        } else if key.uppercased() == key {\n            isUpper\
    \ = true\n        } else {\n            return false\n        }\n    }\n    return\
    \ isLower || isUpper\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmprdnymlka/tmprdnymlka.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb37e37c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb37b2eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb37b2e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb37b2d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprdnymlka                        0x000055a59d0929d5 <unavailable> + 6613

    5    libc.so.6                          0x00002acb38023460 __libc_start_main +
    245

    6    tmprdnymlka                        0x000055a59d0923b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var isUpperCase = false\n    var isLowerCase\
    \ = false\n    for (key, _) in dict {\n        if key.uppercased() == key {\n\
    \            isUpperCase = true\n        } else if key.lowercased() == key {\n\
    \            isLowerCase = true\n        } else {\n            return false\n\
    \        }\n    }\n    return isUpperCase || isLowerCase\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpg6km27cl/tmpg6km27cl.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b24d29d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24d26c9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b24d26c9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b24d26c87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg6km27cl                        0x000055d371c19975 <unavailable> + 6517

    5    libc.so.6                          0x00002b24d2bbe460 __libc_start_main +
    245

    6    tmpg6km27cl                        0x000055d371c19359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var isUpper = false\n    var isLower = false\n\
    \    for key in dict.keys {\n        if key.uppercased() == key {\n          \
    \  isUpper = true\n        } else if key.lowercased() == key {\n            isLower\
    \ = true\n        } else {\n            return false\n        }\n    }\n    return\
    \ isUpper || isLower\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp5uy0liwd/tmp5uy0liwd.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48d0a82c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48d0779b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48d0779988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48d07787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5uy0liwd                        0x00005644ef7a99d5 <unavailable> + 6613

    5    libc.so.6                          0x00002b48d0c6e460 __libc_start_main +
    245

    6    tmp5uy0liwd                        0x00005644ef7a93b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for key in dict.keys {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpaaqweq9j/tmpaaqweq9j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafb13fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafb10f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafb10f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafb10f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaaqweq9j                        0x0000558d60262bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002aafb15e7460 __libc_start_main +
    245

    6    tmpaaqweq9j                        0x0000558d602623b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for key in dict.keys {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpaaqweq9j/tmpaaqweq9j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafb13fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafb10f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafb10f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafb10f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaaqweq9j                        0x0000558d60262bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002aafb15e7460 __libc_start_main +
    245

    6    tmpaaqweq9j                        0x0000558d602623b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var is_lower = false\n    var is_upper = false\n\
    \    for (key, _) in dict {\n        if key.lowercased() == key {\n          \
    \  is_lower = true\n        }\n        if key.uppercased() == key {\n        \
    \    is_upper = true\n        }\n    }\n    return is_lower || is_upper\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp37tlif1_/tmp37tlif1_.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1709e02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1709af9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1709af9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1709af87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp37tlif1_                        0x000055e505748975 <unavailable> + 6517

    5    libc.so.6                          0x00002b1709fee460 __libc_start_main +
    245

    6    tmp37tlif1_                        0x000055e505748359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lower = true\n    var upper = true\n \
    \   for (key, _) in dict {\n        if key.lowercased() != key {\n           \
    \ lower = false\n        }\n        if key.uppercased() != key {\n           \
    \ upper = false\n        }\n    }\n    return lower || upper\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpocg_p6am/tmpocg_p6am.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60db3e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60db0deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60db0de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60db0dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpocg_p6am                        0x000055a9ef083b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b60db5d3460 __libc_start_main +
    245

    6    tmpocg_p6am                        0x000055a9ef083359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var is_lower = false\n    var is_upper = false\n\
    \    for (key, _) in dict {\n        if key.lowercased() == key {\n          \
    \  is_lower = true\n        }\n        if key.uppercased() == key {\n        \
    \    is_upper = true\n        }\n    }\n    return is_lower || is_upper\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp37tlif1_/tmp37tlif1_.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1709e02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1709af9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1709af9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1709af87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp37tlif1_                        0x000055e505748975 <unavailable> + 6517

    5    libc.so.6                          0x00002b1709fee460 __libc_start_main +
    245

    6    tmp37tlif1_                        0x000055e505748359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for (key, _) in dict {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpciop7nxl/tmpciop7nxl.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a7f2bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a7efb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a7efb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a7efb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpciop7nxl                        0x000055d4727b2b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b4a7f4ab460 __libc_start_main +
    245

    6    tmpciop7nxl                        0x000055d4727b2359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for (key, _) in dict {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpciop7nxl/tmpciop7nxl.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a7f2bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a7efb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a7efb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a7efb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpciop7nxl                        0x000055d4727b2b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b4a7f4ab460 __libc_start_main +
    245

    6    tmpciop7nxl                        0x000055d4727b2359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict.isEmpty {\n        return false\n\
    \    }\n    var isLower = false\n    var isUpper = false\n    for (key, _) in\
    \ dict {\n        if key.lowercased() == key {\n            isLower = true\n \
    \       }\n        if key.uppercased() == key {\n            isUpper = true\n\
    \        }\n    }\n    return isLower || isUpper\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpud1_b0qm/tmpud1_b0qm.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3b6675fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3b66456b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3b66456988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3b664557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpud1_b0qm                        0x0000563c55b7a9c5 <unavailable> + 6597

    5    libc.so.6                          0x00002b3b6694b460 __libc_start_main +
    245

    6    tmpud1_b0qm                        0x0000563c55b7a3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for key in dict.keys {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpaaqweq9j/tmpaaqweq9j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafb13fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafb10f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafb10f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafb10f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaaqweq9j                        0x0000558d60262bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002aafb15e7460 __libc_start_main +
    245

    6    tmpaaqweq9j                        0x0000558d602623b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lower = true\n    var upper = true\n \
    \   for (key, _) in dict {\n        if key.lowercased() != key {\n           \
    \ lower = false\n        }\n        if key.uppercased() != key {\n           \
    \ upper = false\n        }\n    }\n    return lower || upper\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpocg_p6am/tmpocg_p6am.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60db3e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60db0deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60db0de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60db0dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpocg_p6am                        0x000055a9ef083b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b60db5d3460 __libc_start_main +
    245

    6    tmpocg_p6am                        0x000055a9ef083359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lower = true\n    var upper = true\n \
    \   for key in dict.keys {\n        if key.lowercased() != key {\n           \
    \ lower = false\n        }\n        if key.uppercased() != key {\n           \
    \ upper = false\n        }\n    }\n    return lower || upper\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmprnu9lpug/tmprnu9lpug.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae863bebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8638e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8638e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8638e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprnu9lpug                        0x000055b67baa6bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002ae863dd7460 __libc_start_main +
    245

    6    tmprnu9lpug                        0x000055b67baa63b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lower = true\n    var upper = true\n \
    \   for (key, _) in dict {\n        if key.lowercased() != key {\n           \
    \ lower = false\n        }\n        if key.uppercased() != key {\n           \
    \ upper = false\n        }\n    }\n    return lower || upper\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpocg_p6am/tmpocg_p6am.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60db3e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60db0deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60db0de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60db0dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpocg_p6am                        0x000055a9ef083b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b60db5d3460 __libc_start_main +
    245

    6    tmpocg_p6am                        0x000055a9ef083359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for (key, _) in dict {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpciop7nxl/tmpciop7nxl.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a7f2bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a7efb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a7efb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a7efb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpciop7nxl                        0x000055d4727b2b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b4a7f4ab460 __libc_start_main +
    245

    6    tmpciop7nxl                        0x000055d4727b2359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lower = true\n    var upper = true\n \
    \   for (key, _) in dict {\n        if key.lowercased() != key {\n           \
    \ lower = false\n        }\n        if key.uppercased() != key {\n           \
    \ upper = false\n        }\n    }\n    return lower || upper\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpocg_p6am/tmpocg_p6am.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60db3e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60db0deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60db0de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60db0dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpocg_p6am                        0x000055a9ef083b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b60db5d3460 __libc_start_main +
    245

    6    tmpocg_p6am                        0x000055a9ef083359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp7emlqx73/tmp7emlqx73.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b734b070c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b734ad67b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b734ad67988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b734ad667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7emlqx73                        0x0000564231ac5523 <unavailable> + 5411

    5    libc.so.6                          0x00002b734b25c460 __libc_start_main +
    245

    6    tmp7emlqx73                        0x0000564231ac50d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var allLower = true\n    var allUpper = true\n\
    \    for (key, _) in dict {\n        allLower = allLower && key.lowercased() ==\
    \ key\n        allUpper = allUpper && key.uppercased() == key\n    }\n    return\
    \ allLower || allUpper\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpuzafd8__/tmpuzafd8__.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4fb46fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4fb43f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4fb43f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4fb43f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuzafd8__                        0x0000559a19c93b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b4fb48e7460 __libc_start_main +
    245

    6    tmpuzafd8__                        0x0000559a19c93359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict.count == 0 {\n        return false\n\
    \    }\n    var isUpper = false\n    var isLower = false\n    for (key, _) in\
    \ dict {\n        if key.uppercased() == key {\n            isUpper = true\n \
    \       }\n        if key.lowercased() == key {\n            isLower = true\n\
    \        }\n    }\n    return isUpper || isLower\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp1brf0hbu/tmp1brf0hbu.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43d338fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43d3086b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43d3086988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43d30857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1brf0hbu                        0x00005634dcbf09c5 <unavailable> + 6597

    5    libc.so.6                          0x00002b43d357b460 __libc_start_main +
    245

    6    tmp1brf0hbu                        0x00005634dcbf03a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for (key, _) in dict {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpciop7nxl/tmpciop7nxl.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a7f2bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a7efb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a7efb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a7efb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpciop7nxl                        0x000055d4727b2b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b4a7f4ab460 __libc_start_main +
    245

    6    tmpciop7nxl                        0x000055d4727b2359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for key in dict.keys {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpaaqweq9j/tmpaaqweq9j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafb13fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafb10f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafb10f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafb10f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaaqweq9j                        0x0000558d60262bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002aafb15e7460 __libc_start_main +
    245

    6    tmpaaqweq9j                        0x0000558d602623b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lower = true\n    var upper = true\n \
    \   for (key, _) in dict {\n        if key.lowercased() != key {\n           \
    \ lower = false\n        }\n        if key.uppercased() != key {\n           \
    \ upper = false\n        }\n    }\n    return lower || upper\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpocg_p6am/tmpocg_p6am.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60db3e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60db0deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60db0de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60db0dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpocg_p6am                        0x000055a9ef083b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b60db5d3460 __libc_start_main +
    245

    6    tmpocg_p6am                        0x000055a9ef083359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for (key, _) in dict {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpciop7nxl/tmpciop7nxl.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a7f2bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a7efb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a7efb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a7efb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpciop7nxl                        0x000055d4727b2b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b4a7f4ab460 __libc_start_main +
    245

    6    tmpciop7nxl                        0x000055d4727b2359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for (key, _) in dict {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpciop7nxl/tmpciop7nxl.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a7f2bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a7efb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a7efb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a7efb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpciop7nxl                        0x000055d4727b2b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b4a7f4ab460 __libc_start_main +
    245

    6    tmpciop7nxl                        0x000055d4727b2359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict.count == 0 {\n        return false\n\
    \    }\n    var lowerCase = true\n    var upperCase = true\n    for key in dict.keys\
    \ {\n        if key.lowercased() != key {\n            lowerCase = false\n   \
    \     }\n        if key.uppercased() != key {\n            upperCase = false\n\
    \        }\n    }\n    return lowerCase || upperCase\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpab5y9ocr/tmpab5y9ocr.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8296107c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8295dfeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8295dfe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8295dfd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpab5y9ocr                        0x0000564ae6098c10 <unavailable> + 7184

    5    libc.so.6                          0x00002b82962f3460 __libc_start_main +
    245

    6    tmpab5y9ocr                        0x0000564ae60983f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for (key, _) in dict {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpciop7nxl/tmpciop7nxl.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a7f2bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a7efb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a7efb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a7efb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpciop7nxl                        0x000055d4727b2b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b4a7f4ab460 __libc_start_main +
    245

    6    tmpciop7nxl                        0x000055d4727b2359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var upperCase = true\n    var lowerCase =\
    \ true\n    for key in dict.keys {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return upperCase || lowerCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp4n7_if7o/tmp4n7_if7o.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97a1a3bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b97a1732b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b97a1732988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b97a17317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4n7_if7o                        0x0000563333d99bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b97a1c27460 __libc_start_main +
    245

    6    tmp4n7_if7o                        0x0000563333d993b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict.count == 0 {\n        return false\n\
    \    }\n    var lowerCase = true\n    var upperCase = true\n    for (key, _) in\
    \ dict {\n        if key.lowercased() != key {\n            lowerCase = false\n\
    \        }\n        if key.uppercased() != key {\n            upperCase = false\n\
    \        }\n    }\n    return lowerCase || upperCase\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpr5zaclt2/tmpr5zaclt2.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8bb4f7dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8bb4c74b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8bb4c74988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8bb4c737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr5zaclt2                        0x000056057e136bc0 <unavailable> + 7104

    5    libc.so.6                          0x00002b8bb5169460 __libc_start_main +
    245

    6    tmpr5zaclt2                        0x000056057e1363a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for key in dict.keys {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpaaqweq9j/tmpaaqweq9j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafb13fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafb10f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafb10f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafb10f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaaqweq9j                        0x0000558d60262bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002aafb15e7460 __libc_start_main +
    245

    6    tmpaaqweq9j                        0x0000558d602623b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for (key, _) in dict {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpciop7nxl/tmpciop7nxl.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a7f2bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a7efb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a7efb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a7efb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpciop7nxl                        0x000055d4727b2b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b4a7f4ab460 __libc_start_main +
    245

    6    tmpciop7nxl                        0x000055d4727b2359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lower = true\n    var upper = true\n \
    \   for (key, _) in dict {\n        if key.lowercased() != key {\n           \
    \ lower = false\n        }\n        if key.uppercased() != key {\n           \
    \ upper = false\n        }\n    }\n    return lower || upper\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpocg_p6am/tmpocg_p6am.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60db3e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60db0deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60db0de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60db0dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpocg_p6am                        0x000055a9ef083b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b60db5d3460 __libc_start_main +
    245

    6    tmpocg_p6am                        0x000055a9ef083359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for (key, _) in dict {\n        lowerCase = lowerCase && key.lowercased()\
    \ == key\n        upperCase = upperCase && key.uppercased() == key\n    }\n  \
    \  return lowerCase || upperCase\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpyp3bk5qu/tmpyp3bk5qu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f15315c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f1500cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f1500c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f1500b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyp3bk5qu                        0x0000555885804b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b7f15501460 __libc_start_main +
    245

    6    tmpyp3bk5qu                        0x0000555885804359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for (key, _) in dict {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpciop7nxl/tmpciop7nxl.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a7f2bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a7efb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a7efb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a7efb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpciop7nxl                        0x000055d4727b2b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b4a7f4ab460 __libc_start_main +
    245

    6    tmpciop7nxl                        0x000055d4727b2359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for (key, _) in dict {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpciop7nxl/tmpciop7nxl.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a7f2bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a7efb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a7efb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a7efb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpciop7nxl                        0x000055d4727b2b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b4a7f4ab460 __libc_start_main +
    245

    6    tmpciop7nxl                        0x000055d4727b2359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lower = true\n    var upper = true\n \
    \   for (key, _) in dict {\n        if key.lowercased() != key {\n           \
    \ lower = false\n        }\n        if key.uppercased() != key {\n           \
    \ upper = false\n        }\n    }\n    return lower || upper\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpocg_p6am/tmpocg_p6am.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60db3e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60db0deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60db0de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60db0dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpocg_p6am                        0x000055a9ef083b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b60db5d3460 __libc_start_main +
    245

    6    tmpocg_p6am                        0x000055a9ef083359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for (key, _) in dict {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpciop7nxl/tmpciop7nxl.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a7f2bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a7efb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a7efb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a7efb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpciop7nxl                        0x000055d4727b2b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b4a7f4ab460 __libc_start_main +
    245

    6    tmpciop7nxl                        0x000055d4727b2359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict.count == 0 {\n        return false\n\
    \    }\n    var isUpper = false\n    var isLower = false\n    for (key, _) in\
    \ dict {\n        if key.uppercased() == key {\n            isUpper = true\n \
    \       }\n        if key.lowercased() == key {\n            isLower = true\n\
    \        }\n    }\n    return isUpper && isLower ? false : true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmprvkmowmb/tmprvkmowmb.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b404be63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b404bb5ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b404bb5a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b404bb597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprvkmowmb                        0x0000563eb0f36dc4 <unavailable> + 7620

    5    libc.so.6                          0x00002b404c04f460 __libc_start_main +
    245

    6    tmprvkmowmb                        0x0000563eb0f363a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict.count == 0 {\n        return false\n\
    \    }\n    var upper = true\n    var lower = true\n    for (key, _) in dict {\n\
    \        if key.uppercased() != key {\n            upper = false\n        }\n\
    \        if key.lowercased() != key {\n            lower = false\n        }\n\
    \    }\n    return upper || lower\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp9h1b9268/tmp9h1b9268.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b8422ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b83f21b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b83f21988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b83f207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9h1b9268                        0x000055bb6ca0ebc0 <unavailable> + 7104

    5    libc.so.6                          0x00002b7b84416460 __libc_start_main +
    245

    6    tmp9h1b9268                        0x000055bb6ca0e3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for (key, _) in dict {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpciop7nxl/tmpciop7nxl.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a7f2bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a7efb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a7efb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a7efb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpciop7nxl                        0x000055d4727b2b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b4a7f4ab460 __libc_start_main +
    245

    6    tmpciop7nxl                        0x000055d4727b2359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp7emlqx73/tmp7emlqx73.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b734b070c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b734ad67b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b734ad67988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b734ad667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7emlqx73                        0x0000564231ac5523 <unavailable> + 5411

    5    libc.so.6                          0x00002b734b25c460 __libc_start_main +
    245

    6    tmp7emlqx73                        0x0000564231ac50d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for (key, _) in dict {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpciop7nxl/tmpciop7nxl.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a7f2bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a7efb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a7efb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a7efb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpciop7nxl                        0x000055d4727b2b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b4a7f4ab460 __libc_start_main +
    245

    6    tmpciop7nxl                        0x000055d4727b2359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for (key, _) in dict {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpciop7nxl/tmpciop7nxl.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a7f2bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a7efb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a7efb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a7efb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpciop7nxl                        0x000055d4727b2b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b4a7f4ab460 __libc_start_main +
    245

    6    tmpciop7nxl                        0x000055d4727b2359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for (key, _) in dict {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpciop7nxl/tmpciop7nxl.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a7f2bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a7efb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a7efb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a7efb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpciop7nxl                        0x000055d4727b2b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b4a7f4ab460 __libc_start_main +
    245

    6    tmpciop7nxl                        0x000055d4727b2359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lower = true\n    var upper = true\n \
    \   for (key, _) in dict {\n        if key.lowercased() != key {\n           \
    \ lower = false\n        }\n        if key.uppercased() != key {\n           \
    \ upper = false\n        }\n    }\n    return lower || upper\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpocg_p6am/tmpocg_p6am.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60db3e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60db0deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60db0de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60db0dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpocg_p6am                        0x000055a9ef083b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b60db5d3460 __libc_start_main +
    245

    6    tmpocg_p6am                        0x000055a9ef083359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for (key, _) in dict {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpciop7nxl/tmpciop7nxl.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a7f2bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a7efb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a7efb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a7efb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpciop7nxl                        0x000055d4727b2b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b4a7f4ab460 __libc_start_main +
    245

    6    tmpciop7nxl                        0x000055d4727b2359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lower = true\n    var upper = true\n \
    \   for key in dict.keys {\n        if key.lowercased() != key {\n           \
    \ lower = false\n        }\n        if key.uppercased() != key {\n           \
    \ upper = false\n        }\n    }\n    return lower || upper\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmprnu9lpug/tmprnu9lpug.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae863bebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8638e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8638e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8638e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprnu9lpug                        0x000055b67baa6bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002ae863dd7460 __libc_start_main +
    245

    6    tmprnu9lpug                        0x000055b67baa63b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for (key, _) in dict {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpciop7nxl/tmpciop7nxl.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a7f2bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a7efb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a7efb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a7efb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpciop7nxl                        0x000055d4727b2b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b4a7f4ab460 __libc_start_main +
    245

    6    tmpciop7nxl                        0x000055d4727b2359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for (key, _) in dict {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpciop7nxl/tmpciop7nxl.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a7f2bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a7efb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a7efb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a7efb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpciop7nxl                        0x000055d4727b2b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b4a7f4ab460 __libc_start_main +
    245

    6    tmpciop7nxl                        0x000055d4727b2359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for key in dict.keys {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpaaqweq9j/tmpaaqweq9j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafb13fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafb10f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafb10f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafb10f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaaqweq9j                        0x0000558d60262bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002aafb15e7460 __libc_start_main +
    245

    6    tmpaaqweq9j                        0x0000558d602623b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var isLower = false\n    var isUpper = false\n\
    \    for (key, _) in dict {\n        if key.lowercased() == key {\n          \
    \  isLower = true\n        } else if key.uppercased() == key {\n            isUpper\
    \ = true\n        } else {\n            return false\n        }\n    }\n    return\
    \ isLower || isUpper\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmptn0s2wfi/tmptn0s2wfi.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b724200cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7241d03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7241d03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7241d027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptn0s2wfi                        0x000055e13fb1b975 <unavailable> + 6517

    5    libc.so.6                          0x00002b72421f8460 __libc_start_main +
    245

    6    tmptn0s2wfi                        0x000055e13fb1b359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for (key, _) in dict {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpciop7nxl/tmpciop7nxl.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a7f2bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a7efb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a7efb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a7efb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpciop7nxl                        0x000055d4727b2b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b4a7f4ab460 __libc_start_main +
    245

    6    tmpciop7nxl                        0x000055d4727b2359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for key in dict.keys {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpaaqweq9j/tmpaaqweq9j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafb13fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafb10f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafb10f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafb10f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaaqweq9j                        0x0000558d60262bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002aafb15e7460 __libc_start_main +
    245

    6    tmpaaqweq9j                        0x0000558d602623b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for (key, _) in dict {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpciop7nxl/tmpciop7nxl.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a7f2bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a7efb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a7efb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a7efb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpciop7nxl                        0x000055d4727b2b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b4a7f4ab460 __libc_start_main +
    245

    6    tmpciop7nxl                        0x000055d4727b2359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var upper = true\n    var lower = true\n \
    \   for (key, _) in dict {\n        if key.uppercased() != key {\n           \
    \ upper = false\n        }\n        if key.lowercased() != key {\n           \
    \ lower = false\n        }\n    }\n    return upper || lower\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpialrduas/tmpialrduas.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4820e15c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4820b0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4820b0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4820b0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpialrduas                        0x000056339e91db70 <unavailable> + 7024

    5    libc.so.6                          0x00002b4821001460 __libc_start_main +
    245

    6    tmpialrduas                        0x000056339e91d359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lower = true\n    var upper = true\n \
    \   for key in dict.keys {\n        if key.lowercased() != key {\n           \
    \ lower = false\n        }\n        if key.uppercased() != key {\n           \
    \ upper = false\n        }\n    }\n    return lower || upper\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmprnu9lpug/tmprnu9lpug.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae863bebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8638e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8638e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8638e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprnu9lpug                        0x000055b67baa6bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002ae863dd7460 __libc_start_main +
    245

    6    tmprnu9lpug                        0x000055b67baa63b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for (key, _) in dict {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpciop7nxl/tmpciop7nxl.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a7f2bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a7efb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a7efb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a7efb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpciop7nxl                        0x000055d4727b2b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b4a7f4ab460 __libc_start_main +
    245

    6    tmpciop7nxl                        0x000055d4727b2359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp7emlqx73/tmp7emlqx73.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b734b070c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b734ad67b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b734ad67988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b734ad667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7emlqx73                        0x0000564231ac5523 <unavailable> + 5411

    5    libc.so.6                          0x00002b734b25c460 __libc_start_main +
    245

    6    tmp7emlqx73                        0x0000564231ac50d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict.isEmpty {\n        return false\n\
    \    }\n    var allUpper = true\n    var allLower = true\n    for (key, _) in\
    \ dict {\n        if key.lowercased() != key {\n            allLower = false\n\
    \        }\n        if key.uppercased() != key {\n            allUpper = false\n\
    \        }\n    }\n    return allUpper || allLower\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpxa_lwv61/tmpxa_lwv61.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0a017ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab09fe75b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab09fe75988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab09fe747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxa_lwv61                        0x0000564351462bc0 <unavailable> + 7104

    5    libc.so.6                          0x00002ab0a036a460 __libc_start_main +
    245

    6    tmpxa_lwv61                        0x00005643514623a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var upperCount = 0\n    var lowerCount = 0\n\
    \    for key in dict.keys {\n        if key.uppercased() == key {\n          \
    \  upperCount += 1\n        } else if key.lowercased() == key {\n            lowerCount\
    \ += 1\n        }\n    }\n    return upperCount == dict.count || lowerCount ==\
    \ dict.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpa08wqhal/tmpa08wqhal.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b2977ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b29475b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b29475988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b294747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa08wqhal                        0x00005563b050b22d <unavailable> + 8749

    5    libc.so.6                          0x00002b6b2996a460 __libc_start_main +
    245

    6    tmpa08wqhal                        0x00005563b050a3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lower = true\n    var upper = true\n \
    \   for (key, _) in dict {\n        if key != key.lowercased() {\n           \
    \ lower = false\n        }\n        if key != key.uppercased() {\n           \
    \ upper = false\n        }\n    }\n    return lower || upper\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpon6ua9c6/tmpon6ua9c6.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56c00f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56bfdecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56bfdec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56bfdeb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpon6ua9c6                        0x000056375588bb70 <unavailable> + 7024

    5    libc.so.6                          0x00002b56c02e1460 __libc_start_main +
    245

    6    tmpon6ua9c6                        0x000056375588b359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for key in dict.keys {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpaaqweq9j/tmpaaqweq9j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafb13fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafb10f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafb10f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafb10f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaaqweq9j                        0x0000558d60262bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002aafb15e7460 __libc_start_main +
    245

    6    tmpaaqweq9j                        0x0000558d602623b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var isLower = false\n    var isUpper = false\n\
    \    for key in dict.keys {\n        if key.uppercased() == key {\n          \
    \  isUpper = true\n        } else if key.lowercased() == key {\n            isLower\
    \ = true\n        } else {\n            return false\n        }\n    }\n    return\
    \ isLower || isUpper\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpx_98uteg/tmpx_98uteg.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca691e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca68ed9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca68ed9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca68ed87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx_98uteg                        0x000055eab7ace9d5 <unavailable> + 6613

    5    libc.so.6                          0x00002aca693ce460 __libc_start_main +
    245

    6    tmpx_98uteg                        0x000055eab7ace3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict.isEmpty {\n        return false\n\
    \    }\n    var lowerCase = true\n    var upperCase = true\n    for key in dict.keys\
    \ {\n        if key.lowercased() != key {\n            lowerCase = false\n   \
    \     }\n        if key.uppercased() != key {\n            upperCase = false\n\
    \        }\n    }\n    return lowerCase || upperCase\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpy5kuvwbd/tmpy5kuvwbd.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d2939cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d29093b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d29093988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d290927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5kuvwbd                        0x000056248d2ebc20 <unavailable> + 7200

    5    libc.so.6                          0x00002b4d29588460 __libc_start_main +
    245

    6    tmpy5kuvwbd                        0x000056248d2eb409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for key in dict.keys {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpaaqweq9j/tmpaaqweq9j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafb13fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafb10f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafb10f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafb10f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaaqweq9j                        0x0000558d60262bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002aafb15e7460 __libc_start_main +
    245

    6    tmpaaqweq9j                        0x0000558d602623b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lower = true\n    var upper = true\n \
    \   for (key, _) in dict {\n        if key.lowercased() != key {\n           \
    \ lower = false\n        }\n        if key.uppercased() != key {\n           \
    \ upper = false\n        }\n    }\n    return lower || upper\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpocg_p6am/tmpocg_p6am.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60db3e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60db0deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60db0de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60db0dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpocg_p6am                        0x000055a9ef083b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b60db5d3460 __libc_start_main +
    245

    6    tmpocg_p6am                        0x000055a9ef083359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var isUpper = false\n    var isLower = false\n\
    \    for (key, _) in dict {\n        if key.uppercased() == key {\n          \
    \  isUpper = true\n        } else if key.lowercased() == key {\n            isLower\
    \ = true\n        } else {\n            return false\n        }\n    }\n    return\
    \ isUpper || isLower\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpvf17vtha/tmpvf17vtha.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7179d29c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7179a20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7179a20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7179a1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvf17vtha                        0x000055d61c832975 <unavailable> + 6517

    5    libc.so.6                          0x00002b7179f15460 __libc_start_main +
    245

    6    tmpvf17vtha                        0x000055d61c832359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict.isEmpty {\n        return false\n\
    \    }\n    var lower = true\n    var upper = true\n    for (key, _) in dict {\n\
    \        if key.lowercased() != key {\n            lower = false\n        }\n\
    \        if key.uppercased() != key {\n            upper = false\n        }\n\
    \    }\n    return lower || upper\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpxswg9ve8/tmpxswg9ve8.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad823a37c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad82372eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad82372e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad82372d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxswg9ve8                        0x0000561179e76bc0 <unavailable> + 7104

    5    libc.so.6                          0x00002ad823c23460 __libc_start_main +
    245

    6    tmpxswg9ve8                        0x0000561179e763a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict.count == 0 {\n        return false\n\
    \    }\n    var lower = true\n    var upper = true\n    for (key, _) in dict {\n\
    \        if key.lowercased() != key {\n            lower = false\n        }\n\
    \        if key.uppercased() != key {\n            upper = false\n        }\n\
    \    }\n    return lower || upper\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpzhli1vmh/tmpzhli1vmh.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae20a29bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae209f92b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae209f92988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae209f917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhli1vmh                        0x000056294c2a0bc0 <unavailable> + 7104

    5    libc.so.6                          0x00002ae20a487460 __libc_start_main +
    245

    6    tmpzhli1vmh                        0x000056294c2a03a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for (key, _) in dict {\n        if key.uppercased() != key {\n   \
    \         upperCase = false\n        }\n        if key.lowercased() != key {\n\
    \            lowerCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpr7whawiq/tmpr7whawiq.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab559b2cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab559823b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab559823988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5598227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr7whawiq                        0x0000559d709b2b70 <unavailable> + 7024

    5    libc.so.6                          0x00002ab559d18460 __libc_start_main +
    245

    6    tmpr7whawiq                        0x0000559d709b2359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lower = true\n    var upper = true\n \
    \   for (key, _) in dict {\n        if key.lowercased() != key {\n           \
    \ lower = false\n        }\n        if key.uppercased() != key {\n           \
    \ upper = false\n        }\n    }\n    return lower || upper\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpocg_p6am/tmpocg_p6am.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60db3e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60db0deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60db0de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60db0dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpocg_p6am                        0x000055a9ef083b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b60db5d3460 __libc_start_main +
    245

    6    tmpocg_p6am                        0x000055a9ef083359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var allLower = true\n    var allUpper = true\n\
    \    for (key, _) in dict {\n        if key.lowercased() != key {\n          \
    \  allLower = false\n        }\n        if key.uppercased() != key {\n       \
    \     allUpper = false\n        }\n    }\n    return allLower || allUpper\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpy8uv_h_4/tmpy8uv_h_4.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab7919cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab7916c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab7916c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7916c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy8uv_h_4                        0x000055bb04affb70 <unavailable> + 7024

    5    libc.so.6                          0x00002ab791bba460 __libc_start_main +
    245

    6    tmpy8uv_h_4                        0x000055bb04aff359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var upperCase = true\n    var lowerCase =\
    \ true\n    for (key, _) in dict {\n        if key.uppercased() != key {\n   \
    \         upperCase = false\n        }\n        if key.lowercased() != key {\n\
    \            lowerCase = false\n        }\n    }\n    return upperCase || lowerCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmplqxymzcz/tmplqxymzcz.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba970d15c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba970a0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba970a0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba970a0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplqxymzcz                        0x000055d44464eb70 <unavailable> + 7024

    5    libc.so.6                          0x00002ba970f01460 __libc_start_main +
    245

    6    tmplqxymzcz                        0x000055d44464e359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var isUpper = false\n    var isLower = false\n\
    \    for (key, _) in dict {\n        if key.uppercased() == key {\n          \
    \  isUpper = true\n        } else if key.lowercased() == key {\n            isLower\
    \ = true\n        } else {\n            return false\n        }\n    }\n    return\
    \ isUpper || isLower\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpvf17vtha/tmpvf17vtha.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7179d29c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7179a20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7179a20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7179a1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvf17vtha                        0x000055d61c832975 <unavailable> + 6517

    5    libc.so.6                          0x00002b7179f15460 __libc_start_main +
    245

    6    tmpvf17vtha                        0x000055d61c832359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lower = true\n    var upper = true\n \
    \   for (key, _) in dict {\n        if key.lowercased() != key {\n           \
    \ lower = false\n        }\n        if key.uppercased() != key {\n           \
    \ upper = false\n        }\n    }\n    return lower || upper\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpocg_p6am/tmpocg_p6am.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60db3e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60db0deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60db0de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60db0dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpocg_p6am                        0x000055a9ef083b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b60db5d3460 __libc_start_main +
    245

    6    tmpocg_p6am                        0x000055a9ef083359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for key in dict.keys {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpaaqweq9j/tmpaaqweq9j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafb13fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafb10f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafb10f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafb10f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaaqweq9j                        0x0000558d60262bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002aafb15e7460 __libc_start_main +
    245

    6    tmpaaqweq9j                        0x0000558d602623b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var isUpper = false\n    var isLower = false\n\
    \    for (key, _) in dict {\n        if key.lowercased() == key {\n          \
    \  isLower = true\n        } else if key.uppercased() == key {\n            isUpper\
    \ = true\n        } else {\n            return false\n        }\n    }\n    return\
    \ isUpper || isLower\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpmcsozqxm/tmpmcsozqxm.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6ba17edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6ba14e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6ba14e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6ba14e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmcsozqxm                        0x000055a3bea7c975 <unavailable> + 6517

    5    libc.so.6                          0x00002b6ba19d9460 __libc_start_main +
    245

    6    tmpmcsozqxm                        0x000055a3bea7c359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for (key, _) in dict {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpciop7nxl/tmpciop7nxl.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a7f2bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a7efb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a7efb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a7efb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpciop7nxl                        0x000055d4727b2b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b4a7f4ab460 __libc_start_main +
    245

    6    tmpciop7nxl                        0x000055d4727b2359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for key in dict.keys {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpaaqweq9j/tmpaaqweq9j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafb13fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafb10f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafb10f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafb10f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaaqweq9j                        0x0000558d60262bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002aafb15e7460 __libc_start_main +
    245

    6    tmpaaqweq9j                        0x0000558d602623b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lower = true\n    var upper = true\n \
    \   for key in dict.keys {\n        if key.lowercased() != key {\n           \
    \ lower = false\n        }\n        if key.uppercased() != key {\n           \
    \ upper = false\n        }\n    }\n    return lower || upper\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmprnu9lpug/tmprnu9lpug.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae863bebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8638e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8638e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8638e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprnu9lpug                        0x000055b67baa6bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002ae863dd7460 __libc_start_main +
    245

    6    tmprnu9lpug                        0x000055b67baa63b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict.count == 0 {\n        return false\n\
    \    }\n    var isUpper = false\n    var isLower = false\n    for (key, _) in\
    \ dict {\n        if key.uppercased() == key {\n            isUpper = true\n \
    \       }\n        if key.lowercased() == key {\n            isLower = true\n\
    \        }\n    }\n    return isUpper && isLower\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpkojkqrxd/tmpkojkqrxd.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2f04c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2f01beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2f01be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2f01bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkojkqrxd                        0x00005654d7bbf7f3 <unavailable> + 6131

    5    libc.so.6                          0x00002ac2f06b3460 __libc_start_main +
    245

    6    tmpkojkqrxd                        0x00005654d7bbf3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lower = true\n    var upper = true\n \
    \   for key in dict.keys {\n        if key.lowercased() != key {\n           \
    \ lower = false\n        }\n        if key.uppercased() != key {\n           \
    \ upper = false\n        }\n    }\n    return lower || upper\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmprnu9lpug/tmprnu9lpug.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae863bebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8638e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8638e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8638e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprnu9lpug                        0x000055b67baa6bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002ae863dd7460 __libc_start_main +
    245

    6    tmprnu9lpug                        0x000055b67baa63b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict.isEmpty {\n        return false\n\
    \    }\n    let keys = Array(dict.keys)\n    let firstKey = keys[0]\n    let firstKeyUpper\
    \ = firstKey.uppercased()\n    let firstKeyLower = firstKey.lowercased()\n   \
    \ if firstKey == firstKeyUpper {\n        for key in keys {\n            if key\
    \ != key.uppercased() {\n                return false\n            }\n       \
    \ }\n    } else if firstKey == firstKeyLower {\n        for key in keys {\n  \
    \          if key != key.lowercased() {\n                return false\n      \
    \      }\n        }\n    } else {\n        return false\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpzo3rm5l1/tmpzo3rm5l1.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7186390c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7186087b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7186087988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71860867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzo3rm5l1                        0x000055dccff25d50 <unavailable> + 7504

    5    libc.so.6                          0x00002b718657c460 __libc_start_main +
    245

    6    tmpzo3rm5l1                        0x000055dccff25539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lower = true\n    var upper = true\n \
    \   for (key, _) in dict {\n        if key.lowercased() != key {\n           \
    \ lower = false\n        }\n        if key.uppercased() != key {\n           \
    \ upper = false\n        }\n    }\n    return lower || upper\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpocg_p6am/tmpocg_p6am.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60db3e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60db0deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60db0de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60db0dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpocg_p6am                        0x000055a9ef083b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b60db5d3460 __libc_start_main +
    245

    6    tmpocg_p6am                        0x000055a9ef083359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var isUpper = false\n    var isLower = false\n\
    \    for (key, _) in dict {\n        if key.uppercased() == key {\n          \
    \  isUpper = true\n        } else if key.lowercased() == key {\n            isLower\
    \ = true\n        } else {\n            return false\n        }\n    }\n    return\
    \ isUpper || isLower\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpvf17vtha/tmpvf17vtha.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7179d29c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7179a20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7179a20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7179a1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvf17vtha                        0x000055d61c832975 <unavailable> + 6517

    5    libc.so.6                          0x00002b7179f15460 __libc_start_main +
    245

    6    tmpvf17vtha                        0x000055d61c832359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var upper = true\n    var lower = true\n \
    \   if dict.count == 0 {\n        return false\n    }\n    for (key, _) in dict\
    \ {\n        if key.uppercased() != key {\n            upper = false\n       \
    \ }\n        if key.lowercased() != key {\n            lower = false\n       \
    \ }\n    }\n    return upper || lower\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\"\
    \ : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpkt9gxltx/tmpkt9gxltx.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05cb2d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05cafc8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05cafc8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05cafc77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkt9gxltx                        0x0000560e9c4f9bc0 <unavailable> + 7104

    5    libc.so.6                          0x00002b05cb4bd460 __libc_start_main +
    245

    6    tmpkt9gxltx                        0x0000560e9c4f93a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var allUpper = true\n    var allLower = true\n\
    \    for (key, _) in dict {\n        if key.uppercased() != key {\n          \
    \  allUpper = false\n        }\n        if key.lowercased() != key {\n       \
    \     allLower = false\n        }\n    }\n    return allUpper || allLower\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpw2urxd1n/tmpw2urxd1n.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab86b7fdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab86b4f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab86b4f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab86b4f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2urxd1n                        0x00005636502d3b70 <unavailable> + 7024

    5    libc.so.6                          0x00002ab86b9e9460 __libc_start_main +
    245

    6    tmpw2urxd1n                        0x00005636502d3359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lower = true\n    var upper = true\n \
    \   for key in dict.keys {\n        if key.lowercased() != key {\n           \
    \ lower = false\n        }\n        if key.uppercased() != key {\n           \
    \ upper = false\n        }\n    }\n    return lower || upper\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmprnu9lpug/tmprnu9lpug.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae863bebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8638e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8638e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8638e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprnu9lpug                        0x000055b67baa6bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002ae863dd7460 __libc_start_main +
    245

    6    tmprnu9lpug                        0x000055b67baa63b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var upper = true\n    var lower = true\n \
    \   for key in dict.keys {\n        if key.uppercased() != key {\n           \
    \ upper = false\n        }\n        if key.lowercased() != key {\n           \
    \ lower = false\n        }\n    }\n    return upper || lower\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp4f66tebp/tmp4f66tebp.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae2acd0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae2a9c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae2a9c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae2a9c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4f66tebp                        0x000055cd76a40bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002aae2aebc460 __libc_start_main +
    245

    6    tmp4f66tebp                        0x000055cd76a403b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict.count == 0 {\n        return false\n\
    \    }\n    var lower = true\n    var upper = true\n    for (key, _) in dict {\n\
    \        if key.lowercased() != key {\n            lower = false\n        }\n\
    \        if key.uppercased() != key {\n            upper = false\n        }\n\
    \    }\n    return lower || upper\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpzhli1vmh/tmpzhli1vmh.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae20a29bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae209f92b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae209f92988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae209f917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhli1vmh                        0x000056294c2a0bc0 <unavailable> + 7104

    5    libc.so.6                          0x00002ae20a487460 __libc_start_main +
    245

    6    tmpzhli1vmh                        0x000056294c2a03a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var upper = true\n    var lower = true\n \
    \   for key in dict.keys {\n        if key.uppercased() != key {\n           \
    \ upper = false\n        }\n        if key.lowercased() != key {\n           \
    \ lower = false\n        }\n    }\n    return upper || lower\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp4f66tebp/tmp4f66tebp.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae2acd0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae2a9c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae2a9c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae2a9c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4f66tebp                        0x000055cd76a40bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002aae2aebc460 __libc_start_main +
    245

    6    tmp4f66tebp                        0x000055cd76a403b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict.count == 0 {\n        return false\n\
    \    }\n    var upperCase = true\n    var lowerCase = true\n    for (key, _) in\
    \ dict {\n        if key.uppercased() != key {\n            upperCase = false\n\
    \        }\n        if key.lowercased() != key {\n            lowerCase = false\n\
    \        }\n    }\n    return upperCase || lowerCase\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpf5qzdq4i/tmpf5qzdq4i.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9043277c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9042f6eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9042f6e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9042f6d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf5qzdq4i                        0x00005645b6ee3bc0 <unavailable> + 7104

    5    libc.so.6                          0x00002b9043463460 __libc_start_main +
    245

    6    tmpf5qzdq4i                        0x00005645b6ee33a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lower = true\n    var upper = true\n \
    \   for (key, _) in dict {\n        if key.lowercased() != key {\n           \
    \ lower = false\n        }\n        if key.uppercased() != key {\n           \
    \ upper = false\n        }\n    }\n    return lower || upper\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpocg_p6am/tmpocg_p6am.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60db3e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60db0deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60db0de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60db0dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpocg_p6am                        0x000055a9ef083b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b60db5d3460 __libc_start_main +
    245

    6    tmpocg_p6am                        0x000055a9ef083359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for key in dict.keys {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpaaqweq9j/tmpaaqweq9j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafb13fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafb10f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafb10f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafb10f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaaqweq9j                        0x0000558d60262bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002aafb15e7460 __libc_start_main +
    245

    6    tmpaaqweq9j                        0x0000558d602623b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict.isEmpty {\n        return false\n\
    \    }\n    var isUpper = false\n    var isLower = false\n    for key in dict.keys\
    \ {\n        if key.uppercased() == key {\n            isUpper = true\n      \
    \  }\n        if key.lowercased() == key {\n            isLower = true\n     \
    \   }\n    }\n    return isUpper && isLower\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"\
    ]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\"\
    , \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpgxgvewua/tmpgxgvewua.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4998c5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4998952b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4998952988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49989517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxgvewua                        0x000055c31980d853 <unavailable> + 6227

    5    libc.so.6                          0x00002b4998e47460 __libc_start_main +
    245

    6    tmpgxgvewua                        0x000055c31980d409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for (key, _) in dict {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpciop7nxl/tmpciop7nxl.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a7f2bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a7efb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a7efb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a7efb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpciop7nxl                        0x000055d4727b2b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b4a7f4ab460 __libc_start_main +
    245

    6    tmpciop7nxl                        0x000055d4727b2359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for (key, _) in dict {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpciop7nxl/tmpciop7nxl.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a7f2bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a7efb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a7efb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a7efb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpciop7nxl                        0x000055d4727b2b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b4a7f4ab460 __libc_start_main +
    245

    6    tmpciop7nxl                        0x000055d4727b2359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lower = true\n    var upper = true\n \
    \   for (key, _) in dict {\n        if key.lowercased() != key {\n           \
    \ lower = false\n        }\n        if key.uppercased() != key {\n           \
    \ upper = false\n        }\n    }\n    return lower || upper\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpocg_p6am/tmpocg_p6am.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60db3e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60db0deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60db0de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60db0dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpocg_p6am                        0x000055a9ef083b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b60db5d3460 __libc_start_main +
    245

    6    tmpocg_p6am                        0x000055a9ef083359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lower = true\n    var upper = true\n \
    \   for (key, _) in dict {\n        lower = lower && key.lowercased() == key\n\
    \        upper = upper && key.uppercased() == key\n    }\n    return lower ||\
    \ upper\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpxqjnhp2u/tmpxqjnhp2u.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a1573fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a15436b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a15436988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a154357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxqjnhp2u                        0x0000562d527edb70 <unavailable> + 7024

    5    libc.so.6                          0x00002b7a1592b460 __libc_start_main +
    245

    6    tmpxqjnhp2u                        0x0000562d527ed359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var allUpper = true\n    var allLower = true\n\
    \    for key in dict.keys {\n        if key.lowercased() != key {\n          \
    \  allLower = false\n        }\n        if key.uppercased() != key {\n       \
    \     allUpper = false\n        }\n    }\n    return allUpper || allLower\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpppcdg4xi/tmpppcdg4xi.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af55bb6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af55b861b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af55b861988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af55b8607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpppcdg4xi                        0x000055894a752bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002af55bd56460 __libc_start_main +
    245

    6    tmpppcdg4xi                        0x000055894a7523b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lower = true\n    var upper = true\n \
    \   for (key, _) in dict {\n        if key.lowercased() != key {\n           \
    \ lower = false\n        }\n        if key.uppercased() != key {\n           \
    \ upper = false\n        }\n    }\n    return lower || upper\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpocg_p6am/tmpocg_p6am.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60db3e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60db0deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60db0de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60db0dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpocg_p6am                        0x000055a9ef083b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b60db5d3460 __libc_start_main +
    245

    6    tmpocg_p6am                        0x000055a9ef083359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict.count == 0 {\n        return false\n\
    \    }\n    var allLower = true\n    var allUpper = true\n    for (key, _) in\
    \ dict {\n        if key.lowercased() != key {\n            allLower = false\n\
    \        }\n        if key.uppercased() != key {\n            allUpper = false\n\
    \        }\n    }\n    return allLower || allUpper\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmptky44hzr/tmptky44hzr.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5312830c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5312527b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5312527988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53125267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptky44hzr                        0x00005593bcb60bc0 <unavailable> + 7104

    5    libc.so.6                          0x00002b5312a1c460 __libc_start_main +
    245

    6    tmptky44hzr                        0x00005593bcb603a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for key in dict.keys {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpaaqweq9j/tmpaaqweq9j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafb13fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafb10f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafb10f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafb10f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaaqweq9j                        0x0000558d60262bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002aafb15e7460 __libc_start_main +
    245

    6    tmpaaqweq9j                        0x0000558d602623b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var isUpper = false\n    var isLower = false\n\
    \    for (key, _) in dict {\n        if key.uppercased() == key {\n          \
    \  isUpper = true\n        } else if key.lowercased() == key {\n            isLower\
    \ = true\n        } else {\n            return false\n        }\n    }\n    return\
    \ isUpper && isLower\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp38jtad_q/tmp38jtad_q.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3bfb29cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3bfaf93b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3bfaf93988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3bfaf927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp38jtad_q                        0x000056179a82a7a3 <unavailable> + 6051

    5    libc.so.6                          0x00002b3bfb488460 __libc_start_main +
    245

    6    tmp38jtad_q                        0x000056179a82a359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var isUpper = false\n    var isLower = false\n\
    \    for (key, _) in dict {\n        if key.uppercased() == key {\n          \
    \  isUpper = true\n        } else if key.lowercased() == key {\n            isLower\
    \ = true\n        } else {\n            return false\n        }\n    }\n    return\
    \ isUpper && isLower\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp38jtad_q/tmp38jtad_q.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3bfb29cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3bfaf93b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3bfaf93988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3bfaf927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp38jtad_q                        0x000056179a82a7a3 <unavailable> + 6051

    5    libc.so.6                          0x00002b3bfb488460 __libc_start_main +
    245

    6    tmp38jtad_q                        0x000056179a82a359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict.count == 0 {\n        return false\n\
    \    }\n    var isUpper = false\n    var isLower = false\n    for (key, _) in\
    \ dict {\n        if key.uppercased() == key {\n            isUpper = true\n \
    \       }\n        if key.lowercased() == key {\n            isLower = true\n\
    \        }\n    }\n    return isUpper && isLower\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpkojkqrxd/tmpkojkqrxd.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2f04c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2f01beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2f01be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2f01bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkojkqrxd                        0x00005654d7bbf7f3 <unavailable> + 6131

    5    libc.so.6                          0x00002ac2f06b3460 __libc_start_main +
    245

    6    tmpkojkqrxd                        0x00005654d7bbf3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for key in dict.keys {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpaaqweq9j/tmpaaqweq9j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafb13fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafb10f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafb10f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafb10f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaaqweq9j                        0x0000558d60262bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002aafb15e7460 __libc_start_main +
    245

    6    tmpaaqweq9j                        0x0000558d602623b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for (key, _) in dict {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpciop7nxl/tmpciop7nxl.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a7f2bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a7efb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a7efb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a7efb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpciop7nxl                        0x000055d4727b2b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b4a7f4ab460 __libc_start_main +
    245

    6    tmpciop7nxl                        0x000055d4727b2359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var isUpper = false\n    var isLower = false\n\
    \    for (key, _) in dict {\n        if key.uppercased() == key {\n          \
    \  isUpper = true\n        } else if key.lowercased() == key {\n            isLower\
    \ = true\n        } else {\n            return false\n        }\n    }\n    return\
    \ isUpper || isLower\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpvf17vtha/tmpvf17vtha.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7179d29c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7179a20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7179a20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7179a1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvf17vtha                        0x000055d61c832975 <unavailable> + 6517

    5    libc.so.6                          0x00002b7179f15460 __libc_start_main +
    245

    6    tmpvf17vtha                        0x000055d61c832359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for key in dict.keys {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpaaqweq9j/tmpaaqweq9j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafb13fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafb10f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafb10f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafb10f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaaqweq9j                        0x0000558d60262bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002aafb15e7460 __libc_start_main +
    245

    6    tmpaaqweq9j                        0x0000558d602623b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: 0
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict.count == 0 {\n        return false\n\
    \    }\n    var isUpper = false\n    var isLower = false\n    for (key, _) in\
    \ dict {\n        if key.uppercased() == key {\n            isUpper = true\n \
    \       }\n        if key.lowercased() == key {\n            isLower = true\n\
    \        }\n    }\n    return isUpper != isLower\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var isLower = false\n    var isUpper = false\n\
    \    for (key, _) in dict {\n        if key.lowercased() == key {\n          \
    \  isLower = true\n        } else if key.uppercased() == key {\n            isUpper\
    \ = true\n        } else {\n            return false\n        }\n    }\n    return\
    \ isLower || isUpper\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmptn0s2wfi/tmptn0s2wfi.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b724200cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7241d03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7241d03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7241d027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptn0s2wfi                        0x000055e13fb1b975 <unavailable> + 6517

    5    libc.so.6                          0x00002b72421f8460 __libc_start_main +
    245

    6    tmptn0s2wfi                        0x000055e13fb1b359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for (key, _) in dict {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpciop7nxl/tmpciop7nxl.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a7f2bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a7efb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a7efb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a7efb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpciop7nxl                        0x000055d4727b2b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b4a7f4ab460 __libc_start_main +
    245

    6    tmpciop7nxl                        0x000055d4727b2359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for key in dict.keys {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpaaqweq9j/tmpaaqweq9j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafb13fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafb10f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafb10f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafb10f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaaqweq9j                        0x0000558d60262bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002aafb15e7460 __libc_start_main +
    245

    6    tmpaaqweq9j                        0x0000558d602623b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var isUpper = false\n    var isLower = false\n\
    \    for key in dict.keys {\n        if key.isUpper {\n            isUpper = true\n\
    \        } else if key.isLower {\n            isLower = true\n        } else {\n\
    \            return false\n        }\n    }\n    return isUpper && isLower\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpw63v4evg.swift:15:16: error: value of type 'String' has no member\
    \ 'isUpper'\n        if key.isUpper {\n           ~~~ ^~~~~~~\n/tmp/tmpw63v4evg.swift:17:23:\
    \ error: value of type 'String' has no member 'isLower'\n        } else if key.isLower\
    \ {\n                  ~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var isUpper = false\n    var isLower = false\n\
    \    for (key, _) in dict {\n        if key.uppercased() == key {\n          \
    \  isUpper = true\n        } else if key.lowercased() == key {\n            isLower\
    \ = true\n        } else {\n            return false\n        }\n    }\n    return\
    \ isUpper && isLower\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp38jtad_q/tmp38jtad_q.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3bfb29cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3bfaf93b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3bfaf93988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3bfaf927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp38jtad_q                        0x000056179a82a7a3 <unavailable> + 6051

    5    libc.so.6                          0x00002b3bfb488460 __libc_start_main +
    245

    6    tmp38jtad_q                        0x000056179a82a359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict.count == 0 {\n        return false\n\
    \    }\n    var lowerCase = true\n    var upperCase = true\n    for (key, _) in\
    \ dict {\n        if key.lowercased() != key {\n            lowerCase = false\n\
    \        }\n        if key.uppercased() != key {\n            upperCase = false\n\
    \        }\n    }\n    return lowerCase || upperCase\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpr5zaclt2/tmpr5zaclt2.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8bb4f7dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8bb4c74b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8bb4c74988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8bb4c737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr5zaclt2                        0x000056057e136bc0 <unavailable> + 7104

    5    libc.so.6                          0x00002b8bb5169460 __libc_start_main +
    245

    6    tmpr5zaclt2                        0x000056057e1363a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lower = true\n    var upper = true\n \
    \   for (key, _) in dict {\n        if key.lowercased() != key {\n           \
    \ lower = false\n        }\n        if key.uppercased() != key {\n           \
    \ upper = false\n        }\n    }\n    return lower || upper\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpocg_p6am/tmpocg_p6am.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60db3e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60db0deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60db0de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60db0dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpocg_p6am                        0x000055a9ef083b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b60db5d3460 __libc_start_main +
    245

    6    tmpocg_p6am                        0x000055a9ef083359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var is_lower = false\n    var is_upper = false\n\
    \    for (key, _) in dict {\n        if key.lowercased() == key {\n          \
    \  is_lower = true\n        }\n        if key.uppercased() == key {\n        \
    \    is_upper = true\n        }\n    }\n    return is_lower || is_upper\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp37tlif1_/tmp37tlif1_.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1709e02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1709af9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1709af9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1709af87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp37tlif1_                        0x000055e505748975 <unavailable> + 6517

    5    libc.so.6                          0x00002b1709fee460 __libc_start_main +
    245

    6    tmp37tlif1_                        0x000055e505748359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict.count == 0 {\n        return false\n\
    \    }\n    var lowerCase = true\n    var upperCase = true\n    for (key, _) in\
    \ dict {\n        if key.lowercased() != key {\n            lowerCase = false\n\
    \        }\n        if key.uppercased() != key {\n            upperCase = false\n\
    \        }\n    }\n    return lowerCase || upperCase\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpr5zaclt2/tmpr5zaclt2.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8bb4f7dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8bb4c74b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8bb4c74988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8bb4c737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr5zaclt2                        0x000056057e136bc0 <unavailable> + 7104

    5    libc.so.6                          0x00002b8bb5169460 __libc_start_main +
    245

    6    tmpr5zaclt2                        0x000056057e1363a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lower = true\n    var upper = true\n \
    \   for (key, _) in dict {\n        if key.lowercased() != key {\n           \
    \ lower = false\n        }\n        if key.uppercased() != key {\n           \
    \ upper = false\n        }\n    }\n    return lower || upper\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpocg_p6am/tmpocg_p6am.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60db3e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60db0deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60db0de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60db0dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpocg_p6am                        0x000055a9ef083b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b60db5d3460 __libc_start_main +
    245

    6    tmpocg_p6am                        0x000055a9ef083359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowercase = true\n    var uppercase =\
    \ true\n    for (key, _) in dict {\n        if key.lowercased() != key {\n   \
    \         lowercase = false\n        }\n        if key.uppercased() != key {\n\
    \            uppercase = false\n        }\n    }\n    return lowercase || uppercase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpxu9y1p1h/tmpxu9y1p1h.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002accf2232c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002accf1f29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002accf1f29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002accf1f287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxu9y1p1h                        0x0000557c67199b70 <unavailable> + 7024

    5    libc.so.6                          0x00002accf241e460 __libc_start_main +
    245

    6    tmpxu9y1p1h                        0x0000557c67199359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823180
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lower = true\n    var upper = true\n \
    \   for (key, _) in dict {\n        if key.lowercased() != key {\n           \
    \ lower = false\n        }\n        if key.uppercased() != key {\n           \
    \ upper = false\n        }\n    }\n    return lower || upper\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpocg_p6am/tmpocg_p6am.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60db3e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60db0deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60db0de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60db0dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpocg_p6am                        0x000055a9ef083b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b60db5d3460 __libc_start_main +
    245

    6    tmpocg_p6am                        0x000055a9ef083359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var isUpper = false\n    var isLower = false\n\
    \    for (key, _) in dict {\n        if key.uppercased() == key {\n          \
    \  isUpper = true\n        } else if key.lowercased() == key {\n            isLower\
    \ = true\n        } else {\n            return false\n        }\n    }\n    return\
    \ isUpper || isLower\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpvf17vtha/tmpvf17vtha.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7179d29c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7179a20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7179a20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7179a1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvf17vtha                        0x000055d61c832975 <unavailable> + 6517

    5    libc.so.6                          0x00002b7179f15460 __libc_start_main +
    245

    6    tmpvf17vtha                        0x000055d61c832359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var is_lower = false\n    var is_upper = false\n\
    \    for (key, _) in dict {\n        if key.lowercased() == key {\n          \
    \  is_lower = true\n        }\n        if key.uppercased() == key {\n        \
    \    is_upper = true\n        }\n    }\n    return is_lower || is_upper\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp37tlif1_/tmp37tlif1_.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1709e02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1709af9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1709af9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1709af87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp37tlif1_                        0x000055e505748975 <unavailable> + 6517

    5    libc.so.6                          0x00002b1709fee460 __libc_start_main +
    245

    6    tmp37tlif1_                        0x000055e505748359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for key in dict.keys {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpaaqweq9j/tmpaaqweq9j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafb13fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafb10f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafb10f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafb10f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaaqweq9j                        0x0000558d60262bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002aafb15e7460 __libc_start_main +
    245

    6    tmpaaqweq9j                        0x0000558d602623b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lower = true\n    var upper = true\n \
    \   for (key, _) in dict {\n        if key.lowercased() != key {\n           \
    \ lower = false\n        }\n        if key.uppercased() != key {\n           \
    \ upper = false\n        }\n    }\n    return lower || upper\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpocg_p6am/tmpocg_p6am.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60db3e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60db0deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60db0de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60db0dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpocg_p6am                        0x000055a9ef083b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b60db5d3460 __libc_start_main +
    245

    6    tmpocg_p6am                        0x000055a9ef083359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var isLower = false\n    var isUpper = false\n\
    \    for key in dict.keys {\n        if key.lowercased() == key {\n          \
    \  isLower = true\n        } else if key.uppercased() == key {\n            isUpper\
    \ = true\n        } else {\n            return false\n        }\n    }\n    return\
    \ isLower || isUpper\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmprdnymlka/tmprdnymlka.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb37e37c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb37b2eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb37b2e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb37b2d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprdnymlka                        0x000055a59d0929d5 <unavailable> + 6613

    5    libc.so.6                          0x00002acb38023460 __libc_start_main +
    245

    6    tmprdnymlka                        0x000055a59d0923b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lower = true\n    var upper = true\n \
    \   for (key, _) in dict {\n        lower = lower && key.lowercased() == key\n\
    \        upper = upper && key.uppercased() == key\n    }\n    return lower ||\
    \ upper\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpxqjnhp2u/tmpxqjnhp2u.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a1573fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a15436b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a15436988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a154357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxqjnhp2u                        0x0000562d527edb70 <unavailable> + 7024

    5    libc.so.6                          0x00002b7a1592b460 __libc_start_main +
    245

    6    tmpxqjnhp2u                        0x0000562d527ed359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for key in dict.keys {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpaaqweq9j/tmpaaqweq9j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafb13fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafb10f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafb10f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafb10f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaaqweq9j                        0x0000558d60262bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002aafb15e7460 __libc_start_main +
    245

    6    tmpaaqweq9j                        0x0000558d602623b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lower = true\n    var upper = true\n \
    \   for key in dict.keys {\n        if key.lowercased() != key {\n           \
    \ lower = false\n        }\n        if key.uppercased() != key {\n           \
    \ upper = false\n        }\n    }\n    return lower || upper\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmprnu9lpug/tmprnu9lpug.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae863bebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8638e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8638e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8638e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprnu9lpug                        0x000055b67baa6bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002ae863dd7460 __libc_start_main +
    245

    6    tmprnu9lpug                        0x000055b67baa63b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for (key, _) in dict {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpciop7nxl/tmpciop7nxl.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a7f2bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a7efb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a7efb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a7efb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpciop7nxl                        0x000055d4727b2b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b4a7f4ab460 __libc_start_main +
    245

    6    tmpciop7nxl                        0x000055d4727b2359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict.count == 0 {\n        return false\n\
    \    }\n    var lowerCase = true\n    var upperCase = true\n    for (key, _) in\
    \ dict {\n        if key.lowercased() != key {\n            lowerCase = false\n\
    \        }\n        if key.uppercased() != key {\n            upperCase = false\n\
    \        }\n    }\n    return lowerCase || upperCase\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpr5zaclt2/tmpr5zaclt2.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8bb4f7dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8bb4c74b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8bb4c74988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8bb4c737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr5zaclt2                        0x000056057e136bc0 <unavailable> + 7104

    5    libc.so.6                          0x00002b8bb5169460 __libc_start_main +
    245

    6    tmpr5zaclt2                        0x000056057e1363a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for key in dict.keys {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpaaqweq9j/tmpaaqweq9j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafb13fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafb10f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafb10f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafb10f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaaqweq9j                        0x0000558d60262bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002aafb15e7460 __libc_start_main +
    245

    6    tmpaaqweq9j                        0x0000558d602623b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var result = true\n    var upper = true\n\
    \    var lower = true\n    for (key, _) in dict {\n        if key.uppercased()\
    \ != key {\n            upper = false\n        }\n        if key.lowercased()\
    \ != key {\n            lower = false\n        }\n    }\n    if upper || lower\
    \ {\n        result = true\n    } else {\n        result = false\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpzjfs6xr3/tmpzjfs6xr3.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea9dad7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea9d7ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea9d7ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea9d7cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzjfs6xr3                        0x000055f7dfd4cb70 <unavailable> + 7024

    5    libc.so.6                          0x00002aea9dcc3460 __libc_start_main +
    245

    6    tmpzjfs6xr3                        0x000055f7dfd4c359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823180
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowercase = true\n    var uppercase =\
    \ true\n    for (key, _) in dict {\n        if key.lowercased() != key {\n   \
    \         lowercase = false\n        }\n        if key.uppercased() != key {\n\
    \            uppercase = false\n        }\n    }\n    return lowercase || uppercase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpxu9y1p1h/tmpxu9y1p1h.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002accf2232c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002accf1f29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002accf1f29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002accf1f287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxu9y1p1h                        0x0000557c67199b70 <unavailable> + 7024

    5    libc.so.6                          0x00002accf241e460 __libc_start_main +
    245

    6    tmpxu9y1p1h                        0x0000557c67199359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823180
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lower = true\n    var upper = true\n \
    \   for key in dict.keys {\n        if key.lowercased() != key {\n           \
    \ lower = false\n        }\n        if key.uppercased() != key {\n           \
    \ upper = false\n        }\n    }\n    return lower || upper\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmprnu9lpug/tmprnu9lpug.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae863bebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8638e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8638e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8638e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprnu9lpug                        0x000055b67baa6bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002ae863dd7460 __libc_start_main +
    245

    6    tmprnu9lpug                        0x000055b67baa63b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var isUpper = false\n    var isLower = false\n\
    \    for key in dict.keys {\n        if key.uppercased() == key {\n          \
    \  isUpper = true\n        } else if key.lowercased() == key {\n            isLower\
    \ = true\n        } else {\n            return false\n        }\n    }\n    return\
    \ isUpper || isLower\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp5uy0liwd/tmp5uy0liwd.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48d0a82c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48d0779b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48d0779988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48d07787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5uy0liwd                        0x00005644ef7a99d5 <unavailable> + 6613

    5    libc.so.6                          0x00002b48d0c6e460 __libc_start_main +
    245

    6    tmp5uy0liwd                        0x00005644ef7a93b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var isUpper = false\n    var isLower = false\n\
    \    for (key, _) in dict {\n        if key.isUpper {\n            isUpper = true\n\
    \        } else if key.isLower {\n            isLower = true\n        }\n    }\n\
    \    return isUpper && isLower ? false : true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"\
    ]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\"\
    , \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpk4lwpe3v.swift:15:16: error: value of type 'String' has no member\
    \ 'isUpper'\n        if key.isUpper {\n           ~~~ ^~~~~~~\n/tmp/tmpk4lwpe3v.swift:17:23:\
    \ error: value of type 'String' has no member 'isLower'\n        } else if key.isLower\
    \ {\n                  ~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lower = true\n    var upper = true\n \
    \   for (key, _) in dict {\n        if key.lowercased() != key {\n           \
    \ lower = false\n        }\n        if key.uppercased() != key {\n           \
    \ upper = false\n        }\n    }\n    return lower || upper\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpocg_p6am/tmpocg_p6am.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60db3e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60db0deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60db0de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60db0dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpocg_p6am                        0x000055a9ef083b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b60db5d3460 __libc_start_main +
    245

    6    tmpocg_p6am                        0x000055a9ef083359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var isUpper = false\n    var isLower = false\n\
    \    for (key, _) in dict {\n        if key.uppercased() == key {\n          \
    \  isUpper = true\n        } else if key.lowercased() == key {\n            isLower\
    \ = true\n        } else {\n            return false\n        }\n    }\n    return\
    \ isUpper || isLower\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpvf17vtha/tmpvf17vtha.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7179d29c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7179a20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7179a20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7179a1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvf17vtha                        0x000055d61c832975 <unavailable> + 6517

    5    libc.so.6                          0x00002b7179f15460 __libc_start_main +
    245

    6    tmpvf17vtha                        0x000055d61c832359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict.isEmpty {\n        return false\n\
    \    }\n    var allUpper = true\n    var allLower = true\n    for (key, _) in\
    \ dict {\n        allUpper = allUpper && key.uppercased() == key\n        allLower\
    \ = allLower && key.lowercased() == key\n    }\n    return allUpper || allLower\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpvhixbnoc/tmpvhixbnoc.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4fa833bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4fa8032b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4fa8032988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4fa80317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvhixbnoc                        0x000055a6bcee5bc0 <unavailable> + 7104

    5    libc.so.6                          0x00002b4fa8527460 __libc_start_main +
    245

    6    tmpvhixbnoc                        0x000055a6bcee53a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659823180
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for (key, _) in dict {\n        if key != key.lowercased() {\n   \
    \         lowerCase = false\n        }\n        if key != key.uppercased() {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpbrpau44x/tmpbrpau44x.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae3a9324c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae3a901bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae3a901b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae3a901a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbrpau44x                        0x0000557438493b70 <unavailable> + 7024

    5    libc.so.6                          0x00002ae3a9510460 __libc_start_main +
    245

    6    tmpbrpau44x                        0x0000557438493359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823180
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict.isEmpty {\n        return false\n\
    \    }\n    var isUpper = false\n    var isLower = false\n    for (key, _) in\
    \ dict {\n        if key.lowercased() == key {\n            isLower = true\n \
    \       } else if key.uppercased() == key {\n            isUpper = true\n    \
    \    } else {\n            return false\n        }\n    }\n    return isUpper\
    \ || isLower\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpg6hcdimt/tmpg6hcdimt.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49c5599c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49c5290b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49c5290988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49c528f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg6hcdimt                        0x000055c3c7c259c5 <unavailable> + 6597

    5    libc.so.6                          0x00002b49c5785460 __libc_start_main +
    245

    6    tmpg6hcdimt                        0x000055c3c7c253a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659823180
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for (key, _) in dict {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpciop7nxl/tmpciop7nxl.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a7f2bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a7efb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a7efb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a7efb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpciop7nxl                        0x000055d4727b2b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b4a7f4ab460 __libc_start_main +
    245

    6    tmpciop7nxl                        0x000055d4727b2359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lower = true\n    var upper = true\n \
    \   for key in dict.keys {\n        if key.lowercased() != key {\n           \
    \ lower = false\n        }\n        if key.uppercased() != key {\n           \
    \ upper = false\n        }\n    }\n    return lower || upper\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmprnu9lpug/tmprnu9lpug.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae863bebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8638e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8638e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8638e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprnu9lpug                        0x000055b67baa6bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002ae863dd7460 __libc_start_main +
    245

    6    tmprnu9lpug                        0x000055b67baa63b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var upperCase = true\n    var lowerCase =\
    \ true\n    for key in dict.keys {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return upperCase || lowerCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp4n7_if7o/tmp4n7_if7o.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97a1a3bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b97a1732b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b97a1732988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b97a17317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4n7_if7o                        0x0000563333d99bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b97a1c27460 __libc_start_main +
    245

    6    tmp4n7_if7o                        0x0000563333d993b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for (key, _) in dict {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpciop7nxl/tmpciop7nxl.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a7f2bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a7efb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a7efb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a7efb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpciop7nxl                        0x000055d4727b2b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b4a7f4ab460 __libc_start_main +
    245

    6    tmpciop7nxl                        0x000055d4727b2359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var upper = true\n    var lower = true\n \
    \   for (key, _) in dict {\n        if key.lowercased() != key {\n           \
    \ lower = false\n        }\n        if key.uppercased() != key {\n           \
    \ upper = false\n        }\n    }\n    return upper || lower\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp8d4p34ys/tmp8d4p34ys.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1225cbec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b12259b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b12259b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b12259b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8d4p34ys                        0x00005633ea59bb70 <unavailable> + 7024

    5    libc.so.6                          0x00002b1225eaa460 __libc_start_main +
    245

    6    tmp8d4p34ys                        0x00005633ea59b359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: 1
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for (key, _) in dict {\n        if key.isUppercase {\n           \
    \ lowerCase = false\n        } else {\n            upperCase = false\n       \
    \ }\n    }\n    return lowerCase || upperCase\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"\
    ]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\"\
    , \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: SyntaxError
  stderr: "/tmp/tmprggj655j.swift:15:16: error: value of type 'String' has no member\
    \ 'isUppercase'\n        if key.isUppercase {\n           ~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var upper = true\n    var lower = true\n \
    \   for (key, _) in dict {\n        if key.uppercased() != key {\n           \
    \ upper = false\n        }\n        if key.lowercased() != key {\n           \
    \ lower = false\n        }\n    }\n    return upper || lower\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpialrduas/tmpialrduas.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4820e15c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4820b0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4820b0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4820b0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpialrduas                        0x000056339e91db70 <unavailable> + 7024

    5    libc.so.6                          0x00002b4821001460 __libc_start_main +
    245

    6    tmpialrduas                        0x000056339e91d359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var is_lower = false\n    var is_upper = false\n\
    \    for (key, _) in dict {\n        if key.lowercased() == key {\n          \
    \  is_lower = true\n        }\n        if key.uppercased() == key {\n        \
    \    is_upper = true\n        }\n    }\n    return is_lower || is_upper\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp37tlif1_/tmp37tlif1_.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1709e02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1709af9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1709af9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1709af87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp37tlif1_                        0x000055e505748975 <unavailable> + 6517

    5    libc.so.6                          0x00002b1709fee460 __libc_start_main +
    245

    6    tmp37tlif1_                        0x000055e505748359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp7emlqx73/tmp7emlqx73.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b734b070c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b734ad67b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b734ad67988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b734ad667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7emlqx73                        0x0000564231ac5523 <unavailable> + 5411

    5    libc.so.6                          0x00002b734b25c460 __libc_start_main +
    245

    6    tmp7emlqx73                        0x0000564231ac50d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lower = true\n    var upper = true\n \
    \   for (key, _) in dict {\n        if key.lowercased() != key {\n           \
    \ lower = false\n        }\n        if key.uppercased() != key {\n           \
    \ upper = false\n        }\n    }\n    return lower || upper\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpocg_p6am/tmpocg_p6am.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60db3e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60db0deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60db0de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60db0dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpocg_p6am                        0x000055a9ef083b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b60db5d3460 __libc_start_main +
    245

    6    tmpocg_p6am                        0x000055a9ef083359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict.count == 0 {\n        return false\n\
    \    }\n    var upper = true\n    var lower = true\n    for (key, _) in dict {\n\
    \        if key.uppercased() != key {\n            upper = false\n        }\n\
    \        if key.lowercased() != key {\n            lower = false\n        }\n\
    \    }\n    return upper || lower\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp9h1b9268/tmp9h1b9268.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b8422ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b83f21b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b83f21988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b83f207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9h1b9268                        0x000055bb6ca0ebc0 <unavailable> + 7104

    5    libc.so.6                          0x00002b7b84416460 __libc_start_main +
    245

    6    tmp9h1b9268                        0x000055bb6ca0e3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for (key, _) in dict {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpciop7nxl/tmpciop7nxl.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a7f2bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a7efb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a7efb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a7efb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpciop7nxl                        0x000055d4727b2b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b4a7f4ab460 __libc_start_main +
    245

    6    tmpciop7nxl                        0x000055d4727b2359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict.count == 0 {\n        return false\n\
    \    }\n    var isUpper = false\n    var isLower = false\n    for (key, _) in\
    \ dict {\n        if key.uppercased() == key {\n            isUpper = true\n \
    \       }\n        if key.lowercased() == key {\n            isLower = true\n\
    \        }\n    }\n    return isUpper && isLower\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpkojkqrxd/tmpkojkqrxd.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2f04c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2f01beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac2f01be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac2f01bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkojkqrxd                        0x00005654d7bbf7f3 <unavailable> + 6131

    5    libc.so.6                          0x00002ac2f06b3460 __libc_start_main +
    245

    6    tmpkojkqrxd                        0x00005654d7bbf3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for key in dict.keys {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpaaqweq9j/tmpaaqweq9j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafb13fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafb10f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafb10f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafb10f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaaqweq9j                        0x0000558d60262bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002aafb15e7460 __libc_start_main +
    245

    6    tmpaaqweq9j                        0x0000558d602623b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lower = true\n    var upper = true\n \
    \   for (key, _) in dict {\n        if key.lowercased() != key {\n           \
    \ lower = false\n        }\n        if key.uppercased() != key {\n           \
    \ upper = false\n        }\n    }\n    return lower || upper\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpocg_p6am/tmpocg_p6am.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60db3e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60db0deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60db0de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60db0dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpocg_p6am                        0x000055a9ef083b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b60db5d3460 __libc_start_main +
    245

    6    tmpocg_p6am                        0x000055a9ef083359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict.count == 0 {\n        return false\n\
    \    }\n    var isUpper = false\n    var isLower = false\n    for (key, _) in\
    \ dict {\n        if key.lowercased() == key {\n            isLower = true\n \
    \       } else if key.uppercased() == key {\n            isUpper = true\n    \
    \    } else {\n            return false\n        }\n    }\n    return isUpper\
    \ || isLower\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\"\
    \ : \"apple\"]) == false)\nassert(check_dict_case(dict: [\"Name\" : \"John\",\
    \ \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict:\
    \ [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict:\
    \ [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmp25khf3xe/tmp25khf3xe.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b464f3d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b464f0c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b464f0c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b464f0c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp25khf3xe                        0x000055684517f9c5 <unavailable> + 6597

    5    libc.so.6                          0x00002b464f5bd460 __libc_start_main +
    245

    6    tmp25khf3xe                        0x000055684517f3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659823180
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var allUpper = true\n    var allLower = true\n\
    \    for (key, _) in dict {\n        if key.uppercased() != key {\n          \
    \  allUpper = false\n        }\n        if key.lowercased() != key {\n       \
    \     allLower = false\n        }\n    }\n    return allUpper || allLower\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpw2urxd1n/tmpw2urxd1n.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab86b7fdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab86b4f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab86b4f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab86b4f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2urxd1n                        0x00005636502d3b70 <unavailable> + 7024

    5    libc.so.6                          0x00002ab86b9e9460 __libc_start_main +
    245

    6    tmpw2urxd1n                        0x00005636502d3359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for key in dict.keys {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpaaqweq9j/tmpaaqweq9j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafb13fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafb10f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafb10f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafb10f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaaqweq9j                        0x0000558d60262bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002aafb15e7460 __libc_start_main +
    245

    6    tmpaaqweq9j                        0x0000558d602623b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lower = true\n    var upper = true\n \
    \   for key in dict.keys {\n        if key.lowercased() != key {\n           \
    \ lower = false\n        }\n        if key.uppercased() != key {\n           \
    \ upper = false\n        }\n    }\n    return lower || upper\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmprnu9lpug/tmprnu9lpug.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae863bebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8638e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8638e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8638e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprnu9lpug                        0x000055b67baa6bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002ae863dd7460 __libc_start_main +
    245

    6    tmprnu9lpug                        0x000055b67baa63b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for (key, _) in dict {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpciop7nxl/tmpciop7nxl.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a7f2bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a7efb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a7efb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a7efb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpciop7nxl                        0x000055d4727b2b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b4a7f4ab460 __libc_start_main +
    245

    6    tmpciop7nxl                        0x000055d4727b2359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for (key, _) in dict {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpciop7nxl/tmpciop7nxl.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a7f2bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a7efb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a7efb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a7efb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpciop7nxl                        0x000055d4727b2b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b4a7f4ab460 __libc_start_main +
    245

    6    tmpciop7nxl                        0x000055d4727b2359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for key in dict.keys {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpaaqweq9j/tmpaaqweq9j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafb13fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafb10f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafb10f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafb10f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaaqweq9j                        0x0000558d60262bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002aafb15e7460 __libc_start_main +
    245

    6    tmpaaqweq9j                        0x0000558d602623b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    if dict.count == 0 {\n        return false\n\
    \    }\n    var isLower = false\n    var isUpper = false\n    for (key, _) in\
    \ dict {\n        if key.lowercased() == key {\n            isLower = true\n \
    \       }\n        if key.uppercased() == key {\n            isUpper = true\n\
    \        }\n    }\n    return isLower || isUpper\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"\
    banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\"\
    \ : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"\
    p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmppbl1o3by/tmppbl1o3by.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af39c91cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af39c613b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af39c613988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af39c6127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppbl1o3by                        0x0000556853a809c5 <unavailable> + 6597

    5    libc.so.6                          0x00002af39cb08460 __libc_start_main +
    245

    6    tmppbl1o3by                        0x0000556853a803a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659823180
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lower = true\n    var upper = true\n \
    \   for (key, _) in dict {\n        if key.lowercased() != key {\n           \
    \ lower = false\n        }\n        if key.uppercased() != key {\n           \
    \ upper = false\n        }\n    }\n    return lower || upper\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpocg_p6am/tmpocg_p6am.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60db3e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60db0deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60db0de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60db0dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpocg_p6am                        0x000055a9ef083b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b60db5d3460 __libc_start_main +
    245

    6    tmpocg_p6am                        0x000055a9ef083359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var upperCase = true\n    var lowerCase =\
    \ true\n    for key in dict.keys {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return upperCase || lowerCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp4n7_if7o/tmp4n7_if7o.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b97a1a3bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b97a1732b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b97a1732988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b97a17317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4n7_if7o                        0x0000563333d99bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b97a1c27460 __libc_start_main +
    245

    6    tmp4n7_if7o                        0x0000563333d993b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var upper = true\n    var lower = true\n \
    \   for key in dict.keys {\n        if key.uppercased() != key {\n           \
    \ upper = false\n        }\n        if key.lowercased() != key {\n           \
    \ lower = false\n        }\n    }\n    return upper || lower\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp4f66tebp/tmp4f66tebp.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae2acd0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae2a9c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae2a9c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae2a9c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4f66tebp                        0x000055cd76a40bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002aae2aebc460 __libc_start_main +
    245

    6    tmp4f66tebp                        0x000055cd76a403b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for key in dict.keys {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpaaqweq9j/tmpaaqweq9j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafb13fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafb10f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafb10f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafb10f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaaqweq9j                        0x0000558d60262bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002aafb15e7460 __libc_start_main +
    245

    6    tmpaaqweq9j                        0x0000558d602623b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for (key, _) in dict {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpciop7nxl/tmpciop7nxl.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a7f2bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a7efb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a7efb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a7efb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpciop7nxl                        0x000055d4727b2b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b4a7f4ab460 __libc_start_main +
    245

    6    tmpciop7nxl                        0x000055d4727b2359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for (key, _) in dict {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpciop7nxl/tmpciop7nxl.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a7f2bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a7efb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a7efb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a7efb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpciop7nxl                        0x000055d4727b2b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b4a7f4ab460 __libc_start_main +
    245

    6    tmpciop7nxl                        0x000055d4727b2359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for (key, _) in dict {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpciop7nxl/tmpciop7nxl.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a7f2bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a7efb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a7efb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a7efb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpciop7nxl                        0x000055d4727b2b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b4a7f4ab460 __libc_start_main +
    245

    6    tmpciop7nxl                        0x000055d4727b2359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var result = true\n    var isUpper = false\n\
    \    var isLower = false\n    for (key, _) in dict {\n        if key.uppercased()\
    \ == key {\n            isUpper = true\n        } else if key.lowercased() ==\
    \ key {\n            isLower = true\n        } else {\n            result = false\n\
    \            break\n        }\n    }\n    if isUpper && isLower {\n        result\
    \ = false\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" : \"banana\"]) == true)\n\
    assert(check_dict_case(dict: [\"p\" : \"pineapple\", \"A\" : \"banana\", \"B\"\
    \ : \"banana\"]) == false)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"Name\" : \"John\", \"Age\" : \"36\", \"City\" : \"Houston\"]) == false)\n\
    assert(check_dict_case(dict: [\"STATE\" : \"NC\", \"ZIP\" : \"12345\"]) == true)\n\
    assert(check_dict_case(dict: [\"fruit\" : \"Orange\", \"taste\" : \"Sweet\"])\
    \ == true)\nassert(check_dict_case(dict: [:] as [String : String]) == false)"
  status: Exception
  stderr: 'tmpf81hwgq7/tmpf81hwgq7.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55c283dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55c2534b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55c2534988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55c25337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf81hwgq7                        0x0000564ac6eed18d <unavailable> + 8589

    5    libc.so.6                          0x00002b55c2a29460 __libc_start_main +
    245

    6    tmpf81hwgq7                        0x0000564ac6eec359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823180
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for (key, _) in dict {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpciop7nxl/tmpciop7nxl.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a7f2bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a7efb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a7efb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a7efb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpciop7nxl                        0x000055d4727b2b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b4a7f4ab460 __libc_start_main +
    245

    6    tmpciop7nxl                        0x000055d4727b2359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for key in dict.keys {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpaaqweq9j/tmpaaqweq9j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafb13fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafb10f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafb10f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafb10f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaaqweq9j                        0x0000558d60262bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002aafb15e7460 __libc_start_main +
    245

    6    tmpaaqweq9j                        0x0000558d602623b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for (key, _) in dict {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpciop7nxl/tmpciop7nxl.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a7f2bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a7efb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a7efb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a7efb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpciop7nxl                        0x000055d4727b2b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b4a7f4ab460 __libc_start_main +
    245

    6    tmpciop7nxl                        0x000055d4727b2359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var upperCase = true\n    var lowerCase =\
    \ true\n    for (key, _) in dict {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return upperCase || lowerCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpxew7709d/tmpxew7709d.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afeecae6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afeec7ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afeec7dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afeec7dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxew7709d                        0x000055cd2c40bb70 <unavailable> + 7024

    5    libc.so.6                          0x00002afeeccd2460 __libc_start_main +
    245

    6    tmpxew7709d                        0x000055cd2c40b359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823180
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for (key, _) in dict {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpciop7nxl/tmpciop7nxl.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a7f2bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a7efb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a7efb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a7efb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpciop7nxl                        0x000055d4727b2b70 <unavailable> + 7024

    5    libc.so.6                          0x00002b4a7f4ab460 __libc_start_main +
    245

    6    tmpciop7nxl                        0x000055d4727b2359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659823179
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var upper = true\n    var lower = true\n \
    \   for key in dict.keys {\n        if key.lowercased() != key {\n           \
    \ lower = false\n        }\n        if key.uppercased() != key {\n           \
    \ upper = false\n        }\n    }\n    return upper || lower\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\", \"b\" :\
    \ \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmp6vyie7ap/tmp6vyie7ap.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b722edcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b722eac1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b722eac1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b722eac07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6vyie7ap                        0x000055f722630bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002b722efb6460 __libc_start_main +
    245

    6    tmp6vyie7ap                        0x000055f7226303b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659823180
- exit_code: -4
  program: "\n/// Given a dictionary, return True if all keys are strings in lower\
    \ \n/// case or all keys are strings in upper case, else return False.\n/// The\
    \ function should return False is the given dictionary is empty.\n/// Examples:\n\
    /// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    /// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n/// check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n/// check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n/// check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nfunc check_dict_case(dict:\
    \ [String : String]) -> Bool {\n    var lowerCase = true\n    var upperCase =\
    \ true\n    for key in dict.keys {\n        if key.lowercased() != key {\n   \
    \         lowerCase = false\n        }\n        if key.uppercased() != key {\n\
    \            upperCase = false\n        }\n    }\n    return lowerCase || upperCase\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(check_dict_case(dict: [\"p\" : \"pineapple\",\
    \ \"b\" : \"banana\"]) == true)\nassert(check_dict_case(dict: [\"p\" : \"pineapple\"\
    , \"A\" : \"banana\", \"B\" : \"banana\"]) == false)\nassert(check_dict_case(dict:\
    \ [\"p\" : \"pineapple\", \"5\" : \"banana\", \"a\" : \"apple\"]) == false)\n\
    assert(check_dict_case(dict: [\"Name\" : \"John\", \"Age\" : \"36\", \"City\"\
    \ : \"Houston\"]) == false)\nassert(check_dict_case(dict: [\"STATE\" : \"NC\"\
    , \"ZIP\" : \"12345\"]) == true)\nassert(check_dict_case(dict: [\"fruit\" : \"\
    Orange\", \"taste\" : \"Sweet\"]) == true)\nassert(check_dict_case(dict: [:] as\
    \ [String : String]) == false)"
  status: Exception
  stderr: 'tmpaaqweq9j/tmpaaqweq9j.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafb13fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafb10f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafb10f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafb10f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaaqweq9j                        0x0000558d60262bd0 <unavailable> + 7120

    5    libc.so.6                          0x00002aafb15e7460 __libc_start_main +
    245

    6    tmpaaqweq9j                        0x0000558d602623b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659823179
