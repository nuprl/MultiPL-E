language: swift
name: HumanEval_8_sum_product
results:
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    return (numbers.reduce(0, +), numbers.reduce(1,\
    \ *))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sum_product(numbers: []\
    \ as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers:\
    \ [100, 0]) == (100, 0))\nassert(sum_product(numbers: [3, 5, 7]) == (15, 105))\n\
    assert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    return (numbers.reduce(0, +), numbers.reduce(1,\
    \ *))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sum_product(numbers: []\
    \ as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers:\
    \ [100, 0]) == (100, 0))\nassert(sum_product(numbers: [3, 5, 7]) == (15, 105))\n\
    assert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    return (numbers.reduce(0, +), numbers.reduce(1,\
    \ *))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sum_product(numbers: []\
    \ as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers:\
    \ [100, 0]) == (100, 0))\nassert(sum_product(numbers: [3, 5, 7]) == (15, 105))\n\
    assert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 1
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    return (numbers.reduce(0, combine: +), numbers.reduce(1,\
    \ combine: *))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: SyntaxError
  stderr: "/tmp/tmpuueezg60.swift:9:27: error: extraneous argument label 'combine:'\
    \ in call\n    return (numbers.reduce(0, combine: +), numbers.reduce(1, combine:\
    \ *))\n                          ^   ~~~~~~~~~\n                             \
    \ \n/tmp/tmpuueezg60.swift:9:58: error: extraneous argument label 'combine:' in\
    \ call\n    return (numbers.reduce(0, combine: +), numbers.reduce(1, combine:\
    \ *))\n                                                         ^   ~~~~~~~~~\n\
    \                                                             \n"
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for num in\
    \ numbers {\n        sum += num\n        product *= num\n    }\n    return (sum,\
    \ product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 1
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    return (numbers.reduce(0, combine: +), numbers.reduce(1,\
    \ combine: *))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: SyntaxError
  stderr: "/tmp/tmpuueezg60.swift:9:27: error: extraneous argument label 'combine:'\
    \ in call\n    return (numbers.reduce(0, combine: +), numbers.reduce(1, combine:\
    \ *))\n                          ^   ~~~~~~~~~\n                             \
    \ \n/tmp/tmpuueezg60.swift:9:58: error: extraneous argument label 'combine:' in\
    \ call\n    return (numbers.reduce(0, combine: +), numbers.reduce(1, combine:\
    \ *))\n                                                         ^   ~~~~~~~~~\n\
    \                                                             \n"
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    return (numbers.reduce(0, +), numbers.reduce(1,\
    \ *))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sum_product(numbers: []\
    \ as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers:\
    \ [100, 0]) == (100, 0))\nassert(sum_product(numbers: [3, 5, 7]) == (15, 105))\n\
    assert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    return (numbers.reduce(0, +), numbers.reduce(1,\
    \ *))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sum_product(numbers: []\
    \ as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers:\
    \ [100, 0]) == (100, 0))\nassert(sum_product(numbers: [3, 5, 7]) == (15, 105))\n\
    assert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    return (numbers.reduce(0, +), numbers.reduce(1,\
    \ *))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sum_product(numbers: []\
    \ as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers:\
    \ [100, 0]) == (100, 0))\nassert(sum_product(numbers: [3, 5, 7]) == (15, 105))\n\
    assert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    return (numbers.reduce(0, +), numbers.reduce(1,\
    \ *))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sum_product(numbers: []\
    \ as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\nassert(sum_product(numbers:\
    \ [100, 0]) == (100, 0))\nassert(sum_product(numbers: [3, 5, 7]) == (15, 105))\n\
    assert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 1
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    return (numbers.reduce(0, combine: +), numbers.reduce(1,\
    \ combine: *))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: SyntaxError
  stderr: "/tmp/tmpuueezg60.swift:9:27: error: extraneous argument label 'combine:'\
    \ in call\n    return (numbers.reduce(0, combine: +), numbers.reduce(1, combine:\
    \ *))\n                          ^   ~~~~~~~~~\n                             \
    \ \n/tmp/tmpuueezg60.swift:9:58: error: extraneous argument label 'combine:' in\
    \ call\n    return (numbers.reduce(0, combine: +), numbers.reduce(1, combine:\
    \ *))\n                                                         ^   ~~~~~~~~~\n\
    \                                                             \n"
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
- exit_code: 0
  program: "\n/// For a given list of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a list.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product([])\n/// (0,\
    \ 1)\n/// >>> sum_product([1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers:\
    \ [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number\
    \ in numbers {\n        sum += number\n        product *= number\n    }\n    return\
    \ (sum, product)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sum_product(numbers:\
    \ [] as [Int]) == (0, 1))\nassert(sum_product(numbers: [1, 1, 1]) == (3, 1))\n\
    assert(sum_product(numbers: [100, 0]) == (100, 0))\nassert(sum_product(numbers:\
    \ [3, 5, 7]) == (15, 105))\nassert(sum_product(numbers: [10]) == (10, 10))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013849
