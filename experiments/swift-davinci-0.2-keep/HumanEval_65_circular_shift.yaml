name: HumanEval_65_circular_shift
language: swift
prompt: "\n/// Circular shift the digits of the integer x, shift the digits right\
  \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
  \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>> circular_shift(12,\
  \ 2)\n/// \"12\"\nfunc circular_shift(x: Int, shift: Int) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(circular_shift(x: 100, shift: 2) == \"001\"\
  )\nassert(circular_shift(x: 12, shift: 2) == \"12\")\nassert(circular_shift(x: 97,\
  \ shift: 8) == \"79\")\nassert(circular_shift(x: 12, shift: 1) == \"21\")\nassert(circular_shift(x:\
  \ 11, shift: 101) == \"11\")"
completions: ["    var x = x\n    var shift = shift\n    var digits = [Int]()\n  \
    \  while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n    if\
    \ shift > digits.count {\n        return String(digits.reverse())\n    }\n   \
    \ let first = digits[0..<shift]\n    let second = digits[shift..<digits.count]\n\
    \    return String(second + first)", "    let s = String(x)\n    let n = s.characters.count\n\
    \    if shift > n {\n        return String(s.characters.reverse())\n    }\n  \
    \  let start = s.startIndex\n    let end = s.startIndex.advancedBy(shift)\n  \
    \  let a = s.substringFromIndex(end)\n    let b = s.substringToIndex(end)\n  \
    \  return a + b", "    var x = x\n    var shift = shift\n    var digits = [Int]()\n\
    \    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n  \
    \  if shift > digits.count {\n        return String(digits.reverse())\n    }\n\
    \    let shifted = digits[digits.count - shift..<digits.count] + digits[0..<digits.count\
    \ - shift]\n    return String(shifted)", "    var x = x\n    var shift = shift\n\
    \    var digits: [Int] = []\n    while x > 0 {\n        digits.append(x % 10)\n\
    \        x /= 10\n    }\n    if shift > digits.count {\n        shift = digits.count\n\
    \    }\n    digits = digits.reverse()\n    var result = \"\"\n    for i in 0..<digits.count\
    \ {\n        result += String(digits[(i + shift) % digits.count])\n    }\n   \
    \ return result", "    var x = x\n    var shift = shift\n    var digits = [Int]()\n\
    \    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n  \
    \  if shift > digits.count {\n        shift = digits.count\n    }\n    var result\
    \ = \"\"\n    for i in 0..<digits.count {\n        result += String(digits[(i\
    \ + shift) % digits.count])\n    }\n    return result", "    var x = x\n    var\
    \ digits = [Int]()\n    while x > 0 {\n        digits.append(x % 10)\n       \
    \ x /= 10\n    }\n    if shift > digits.count {\n        return digits.reverse().map\
    \ { String($0) }.joinWithSeparator(\"\")\n    }\n    for _ in 0..<shift {\n  \
    \      let digit = digits.removeLast()\n        digits.insert(digit, atIndex:\
    \ 0)\n    }\n    return digits.map { String($0) }.joinWithSeparator(\"\")", " \
    \   var x = x\n    var digits = [Int]()\n    while x > 0 {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    if shift > digits.count {\n        return\
    \ String(digits.reverse())\n    }\n    let shift = shift % digits.count\n    let\
    \ shifted = digits[shift..<digits.count] + digits[0..<shift]\n    return String(shifted)",
  "    var x = x\n    var shift = shift\n    var digits = [Int]()\n    while x > 0\
    \ {\n        digits.append(x % 10)\n        x /= 10\n    }\n    if shift > digits.count\
    \ {\n        return String(digits.reverse())\n    }\n    let first = digits[0..<shift]\n\
    \    let second = digits[shift..<digits.count]\n    return String(second + first)",
  "    var x = x\n    var shift = shift\n    var digits = [Int]()\n    while x > 0\
    \ {\n        digits.append(x % 10)\n        x /= 10\n    }\n    if shift > digits.count\
    \ {\n        return String(digits.reverse())\n    }\n    let shifted = digits[digits.count\
    \ - shift ..< digits.count] + digits[0 ..< digits.count - shift]\n    return String(shifted)",
  "    var digits = String(x)\n    if shift > digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ let prefix = digits[..<index]\n    let suffix = digits[index...]\n    return\
    \ String(suffix + prefix)", "    var x = x\n    var digits = [Int]()\n    while\
    \ x > 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n    if shift\
    \ > digits.count {\n        return String(digits.reverse())\n    }\n    let shifted\
    \ = digits[shift..<digits.count] + digits[0..<shift]\n    return String(shifted)",
  "    let digits = String(x)\n    if shift > digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ return String(digits[index...] + digits[..<index])", "    var x = x\n    var\
    \ digits = [Int]()\n    while x > 0 {\n        digits.append(x % 10)\n       \
    \ x /= 10\n    }\n    var shifted = [Int]()\n    for i in 0..<digits.count {\n\
    \        shifted.append(digits[(i + shift) % digits.count])\n    }\n    return\
    \ shifted.map { String($0) }.joined()", "    let digits = String(x)\n    let n\
    \ = digits.characters.count\n    if shift >= n {\n        return String(digits.characters.reverse())\n\
    \    }\n    let shift_digits = digits.substringToIndex(digits.startIndex.advancedBy(shift))\n\
    \    let remaining_digits = digits.substringFromIndex(digits.startIndex.advancedBy(shift))\n\
    \    return remaining_digits + shift_digits", "    var x = x\n    var shift =\
    \ shift\n    var digits = [Int]()\n    while x > 0 {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    if shift > digits.count {\n        return\
    \ String(digits.reverse())\n    }\n    let shifted = digits[shift..<digits.count]\
    \ + digits[0..<shift]\n    return String(shifted)", "    let x_str = String(x)\n\
    \    if shift >= x_str.count {\n        return String(x_str.reversed())\n    }\n\
    \    let index = x_str.index(x_str.startIndex, offsetBy: shift)\n    return String(x_str[index...]\
    \ + x_str[..<index])", "    var x = x\n    var digits = [Int]()\n    while x >\
    \ 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n    var result =\
    \ \"\"\n    for i in 0..<digits.count {\n        result += String(digits[(i +\
    \ shift) % digits.count])\n    }\n    return result", "    var x = x\n    var\
    \ shift = shift\n    var digits = [Int]()\n    while x > 0 {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    if shift > digits.count {\n        return\
    \ digits.reversed().map { String($0) }.joined()\n    }\n    let shifted = digits[digits.count\
    \ - shift ..< digits.count] + digits[0 ..< digits.count - shift]\n    return shifted.map\
    \ { String($0) }.joined()", "    var x = x\n    var digits = [Int]()\n    while\
    \ x > 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n    if shift\
    \ > digits.count {\n        return String(digits.reverse())\n    }\n    for _\
    \ in 0..<shift {\n        let d = digits.removeLast()\n        digits.insert(d,\
    \ atIndex: 0)\n    }\n    return String(digits)", "    var x = x\n    var digits\
    \ = [Int]()\n    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n\
    \    }\n    if shift > digits.count {\n        return String(digits.reverse())\n\
    \    }\n    let shifted = digits[digits.count - shift..<digits.count] + digits[0..<digits.count\
    \ - shift]\n    return String(shifted)", "    let s = String(x)\n    if shift\
    \ > s.count {\n        return String(s.reversed())\n    }\n    let i = s.index(s.startIndex,\
    \ offsetBy: shift)\n    return String(s[i...] + s[..<i])", "    let s = String(x)\n\
    \    let n = s.characters.count\n    if shift >= n {\n        return String(s.characters.reverse())\n\
    \    }\n    let i = s.startIndex.advancedBy(shift)\n    return s.substringFromIndex(i)\
    \ + s.substringToIndex(i)", "    var x = x\n    var shift = shift\n    var digits\
    \ = [Int]()\n    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n\
    \    }\n    if shift > digits.count {\n        return digits.reverse().map { String($0)\
    \ }.joinWithSeparator(\"\")\n    }\n    return digits.rotate(shift).map { String($0)\
    \ }.joinWithSeparator(\"\")", "    var x = x\n    var digits = [Int]()\n    while\
    \ x > 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n    for _ in\
    \ 0..<shift {\n        let digit = digits.removeLast()\n        digits.insert(digit,\
    \ atIndex: 0)\n    }\n    return digits.map { String($0) }.joinWithSeparator(\"\
    \")", "    var x = x\n    var shift = shift\n    var result = \"\"\n    var digit\
    \ = 0\n    var count = 0\n    while x > 0 {\n        digit = x % 10\n        x\
    \ /= 10\n        count += 1\n        result = String(digit) + result\n    }\n\
    \    if shift > count {\n        return result\n    }\n    let left = result[result.startIndex..<result.index(result.startIndex,\
    \ offsetBy: shift)]\n    let right = result[result.index(result.startIndex, offsetBy:\
    \ shift)..<result.endIndex]\n    return String(right + left)", "    let str =\
    \ String(x)\n    let len = str.characters.count\n    if shift > len {\n      \
    \  return String(str.characters.reverse())\n    }\n    let index = str.startIndex.advancedBy(shift)\n\
    \    return str.substringFromIndex(index) + str.substringToIndex(index)", "  \
    \  let digits = String(x)\n    let len = digits.characters.count\n    if shift\
    \ >= len {\n        return String(digits.characters.reverse())\n    }\n    let\
    \ index = digits.startIndex.advancedBy(shift)\n    return digits.substringFromIndex(index)\
    \ + digits.substringToIndex(index)", "    let digits = String(x)\n    let n =\
    \ digits.characters.count\n    if shift >= n {\n        return String(digits.characters.reverse())\n\
    \    }\n    let left = digits.substringToIndex(digits.startIndex.advancedBy(shift))\n\
    \    let right = digits.substringFromIndex(digits.startIndex.advancedBy(shift))\n\
    \    return right + left", "    var digits = String(x)\n    if shift >= digits.count\
    \ {\n        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let prefix = digits[..<index]\n    let suffix = digits[index...]\n\
    \    return String(suffix + prefix)", "    var x = x\n    var shift = shift\n\
    \    var digits = [Int]()\n    while x > 0 {\n        digits.append(x % 10)\n\
    \        x /= 10\n    }\n    if shift > digits.count {\n        return String(digits.reverse())\n\
    \    }\n    let shifted = digits[shift..<digits.count] + digits[0..<shift]\n \
    \   return String(shifted)", "    var x = x\n    var shift = shift\n    var digits\
    \ = [Int]()\n    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n\
    \    }\n    if shift > digits.count {\n        return String(digits.reverse())\n\
    \    }\n    let shifted = digits[digits.count - shift..<digits.count] + digits[0..<digits.count\
    \ - shift]\n    return String(shifted)", "    var x = x\n    var digits = [Int]()\n\
    \    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n  \
    \  if shift > digits.count {\n        return String(digits.reverse())\n    }\n\
    \    let shifted = digits[shift..<digits.count] + digits[0..<shift]\n    return\
    \ String(shifted)", "    let digits = String(x)\n    let length = digits.characters.count\n\
    \    let shift = shift % length\n    let left = digits.substringToIndex(digits.startIndex.advancedBy(shift))\n\
    \    let right = digits.substringFromIndex(digits.startIndex.advancedBy(shift))\n\
    \    return right + left", "    var x = x\n    var shift = shift\n    var digits\
    \ = [Int]()\n    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n\
    \    }\n    if shift > digits.count {\n        return digits.reversed().map {\
    \ String($0) }.joined()\n    }\n    let shifted = digits[shift..<digits.count]\
    \ + digits[0..<shift]\n    return shifted.map { String($0) }.joined()", "    let\
    \ s = String(x)\n    let n = s.characters.count\n    if shift >= n {\n       \
    \ return String(s.characters.reverse())\n    }\n    let i = s.startIndex.advancedBy(shift)\n\
    \    return s.substringFromIndex(i) + s.substringToIndex(i)", "    let s = String(x)\n\
    \    let n = s.characters.count\n    if shift > n {\n        return String(s.characters.reverse())\n\
    \    }\n    let i = s.index(s.startIndex, offsetBy: shift)\n    return s.substring(from:\
    \ i) + s.substring(to: i)", "    var x = x\n    var digits = [Int]()\n    while\
    \ x > 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n    if shift\
    \ > digits.count {\n        return String(digits.reverse())\n    }\n    let shifted\
    \ = digits[digits.count - shift..<digits.count] + digits[0..<digits.count - shift]\n\
    \    return String(shifted)", "    var x = x\n    var digits = [Int]()\n    while\
    \ x > 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n    if shift\
    \ > digits.count {\n        return digits.reversed().map { String($0) }.joined()\n\
    \    }\n    let shift = shift % digits.count\n    let shifted = digits[shift..<digits.count]\
    \ + digits[0..<shift]\n    return shifted.map { String($0) }.joined()", "    var\
    \ digits = String(x)\n    if shift > digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ let prefix = digits[..<index]\n    let suffix = digits[index...]\n    return\
    \ String(suffix + prefix)", "    var digits = String(x)\n    if shift > digits.count\
    \ {\n        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    return String(digits[index...] + digits[..<index])", " \
    \   let str = String(x)\n    let len = str.characters.count\n    if shift > len\
    \ {\n        return String(str.characters.reverse())\n    }\n    let index = str.startIndex.advancedBy(shift)\n\
    \    return str.substringFromIndex(index) + str.substringToIndex(index)", "  \
    \  var x = x\n    var digits = [Int]()\n    while x > 0 {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    var result = \"\"\n    for i in 0..<digits.count\
    \ {\n        result += String(digits[(i + shift) % digits.count])\n    }\n   \
    \ return result", "    var x = x\n    var shift = shift\n    var result = \"\"\
    \n    while x > 0 {\n        let digit = x % 10\n        result = String(digit)\
    \ + result\n        x /= 10\n    }\n    if shift > result.characters.count {\n\
    \        return String(result.characters.reverse())\n    }\n    let index = result.startIndex.advancedBy(shift)\n\
    \    return result.substringFromIndex(index) + result.substringToIndex(index)",
  "    var result = \"\"\n    var x = x\n    var shift = shift\n    while x > 0 {\n\
    \        result = \"\\(x % 10)\" + result\n        x /= 10\n        shift -= 1\n\
    \    }\n    while shift > 0 {\n        result = \"0\" + result\n        shift\
    \ -= 1\n    }\n    return result", "    var x = x\n    var digits = [Int]()\n\
    \    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n  \
    \  if shift > digits.count {\n        return String(digits.reverse())\n    }\n\
    \    let shifted = digits[digits.count - shift..<digits.count] + digits[0..<digits.count\
    \ - shift]\n    return String(shifted)", "    var x = x\n    var digits = [Int]()\n\
    \    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n  \
    \  digits.reverse()\n    var result = \"\"\n    for i in 0..<digits.count {\n\
    \        result += String(digits[(i + shift) % digits.count])\n    }\n    return\
    \ result", "    let str = String(x)\n    let len = str.characters.count\n    if\
    \ shift > len {\n        return String(str.characters.reverse())\n    }\n    let\
    \ index = str.startIndex.advancedBy(shift)\n    return str.substringFromIndex(index)\
    \ + str.substringToIndex(index)", "    var x = x\n    var shift = shift\n    var\
    \ digits = [Int]()\n    while x > 0 {\n        digits.append(x % 10)\n       \
    \ x /= 10\n    }\n    if shift > digits.count {\n        return String(digits.reverse())\n\
    \    }\n    var result = [Int]()\n    for i in shift..<digits.count {\n      \
    \  result.append(digits[i])\n    }\n    for i in 0..<shift {\n        result.append(digits[i])\n\
    \    }\n    return String(result)", "    let s = String(x)\n    let n = s.characters.count\n\
    \    if shift > n {\n        return String(s.characters.reverse())\n    }\n  \
    \  let i = s.startIndex.advancedBy(shift)\n    return s.substringFromIndex(i)\
    \ + s.substringToIndex(i)", "    let digits = String(x)\n    let len = digits.characters.count\n\
    \    if shift > len {\n        return String(digits.characters.reverse())\n  \
    \  }\n    let index = digits.startIndex.advancedBy(shift)\n    return digits.substringFromIndex(index)\
    \ + digits.substringToIndex(index)", "    var x = x\n    var result = \"\"\n \
    \   for _ in 0..<shift {\n        let digit = x % 10\n        x /= 10\n      \
    \  result = String(digit) + result\n    }\n    result += String(x)\n    return\
    \ result", "    var x = x\n    var shift = shift\n    var result = \"\"\n    var\
    \ digits = 0\n    var tmp = x\n    while tmp > 0 {\n        tmp /= 10\n      \
    \  digits += 1\n    }\n    if shift > digits {\n        for _ in 0..<digits {\n\
    \            result = \"\\(x % 10)\" + result\n            x /= 10\n        }\n\
    \    } else {\n        for _ in 0..<shift {\n            result = \"\\(x % 10)\"\
    \ + result\n            x /= 10\n        }\n        for _ in 0..<digits - shift\
    \ {\n            result += \"\\(x % 10)\"\n            x /= 10\n        }\n  \
    \  }\n    return result", "    var x = x\n    var digits = [Int]()\n    while\
    \ x > 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n    if shift\
    \ > digits.count {\n        return String(digits.reverse())\n    }\n    for _\
    \ in 0..<shift {\n        let last = digits.removeLast()\n        digits.insert(last,\
    \ atIndex: 0)\n    }\n    return String(digits)", "    var x = x\n    var shift\
    \ = shift\n    var digits = [Int]()\n    while x > 0 {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    if shift > digits.count {\n        return\
    \ String(digits.reverse())\n    }\n    let shifted = digits[shift..<digits.count]\
    \ + digits[0..<shift]\n    return String(shifted)", "    var x = x\n    var shift\
    \ = shift\n    var digits: [Int] = []\n    while x > 0 {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    if shift > digits.count {\n        return\
    \ String(digits.reverse())\n    }\n    let first = digits[0..<shift]\n    let\
    \ second = digits[shift..<digits.count]\n    return String(second + first)", " \
    \   let digits = String(x)\n    let count = digits.characters.count\n    if shift\
    \ >= count {\n        return String(digits.characters.reverse())\n    }\n    let\
    \ index = digits.startIndex.advancedBy(shift)\n    let prefix = digits.substringToIndex(index)\n\
    \    let suffix = digits.substringFromIndex(index)\n    return suffix + prefix",
  "    var x = x\n    var digits = [Int]()\n    while x > 0 {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    var result = \"\"\n    let n = digits.count\n\
    \    for i in 0..<n {\n        let j = (i + shift) % n\n        result += String(digits[j])\n\
    \    }\n    return result", "    var x = x\n    var shift = shift\n    var digits\
    \ = [Int]()\n    var result = \"\"\n    while x > 0 {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    if shift > digits.count {\n        shift\
    \ = digits.count\n    }\n    for i in 0..<shift {\n        result += String(digits[digits.count\
    \ - shift + i])\n    }\n    for i in 0..<digits.count - shift {\n        result\
    \ += String(digits[i])\n    }\n    return result", "    var x = x\n    var result\
    \ = \"\"\n    for _ in 0..<shift {\n        result = String(x % 10) + result\n\
    \        x /= 10\n    }\n    for _ in shift..<num_digits(x) {\n        result\
    \ += String(x % 10)\n        x /= 10\n    }\n    return result", "    let digits\
    \ = String(x)\n    let n = digits.characters.count\n    if shift >= n {\n    \
    \    return String(digits.characters.reverse())\n    }\n    let left = digits.substringToIndex(digits.startIndex.advancedBy(shift))\n\
    \    let right = digits.substringFromIndex(digits.startIndex.advancedBy(shift))\n\
    \    return right + left", "    var x = x\n    var digits = [Int]()\n    while\
    \ x > 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n    if shift\
    \ > digits.count {\n        return String(digits.reverse())\n    }\n    let shifted\
    \ = digits[digits.count - shift..<digits.count] + digits[0..<digits.count - shift]\n\
    \    return String(shifted)", "    let s = String(x)\n    let n = s.characters.count\n\
    \    if shift >= n {\n        return String(s.characters.reverse())\n    }\n \
    \   let a = s.startIndex\n    let b = s.startIndex.advancedBy(shift)\n    let\
    \ c = s.startIndex.advancedBy(n)\n    return s[b..<c] + s[a..<b]", "    let digits\
    \ = String(x)\n    let n = digits.characters.count\n    if shift >= n {\n    \
    \    return String(digits.characters.reverse())\n    }\n    let i = n - shift\n\
    \    let left = digits.substringToIndex(digits.startIndex.advancedBy(i))\n   \
    \ let right = digits.substringFromIndex(digits.startIndex.advancedBy(i))\n   \
    \ return right + left", "    let str = String(x)\n    let len = str.characters.count\n\
    \    if shift >= len {\n        return String(str.characters.reverse())\n    }\n\
    \    let start = str.startIndex.advancedBy(shift)\n    let end = str.endIndex\n\
    \    let s1 = str.substringWithRange(start..<end)\n    let s2 = str.substringWithRange(str.startIndex..<start)\n\
    \    return s1 + s2", "    var x = x\n    var shift = shift\n    var digits =\
    \ [Int]()\n    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n\
    \    }\n    if shift > digits.count {\n        return String(digits.reverse())\n\
    \    }\n    let shifted = digits[shift..<digits.count] + digits[0..<shift]\n \
    \   return String(shifted)", "    var x = x\n    var shift = shift\n    var digits\
    \ = [Int]()\n    var result = \"\"\n    while x > 0 {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    if shift > digits.count {\n        shift\
    \ = digits.count\n    }\n    for i in 0..<shift {\n        result += String(digits[digits.count\
    \ - shift + i])\n    }\n    for i in 0..<digits.count - shift {\n        result\
    \ += String(digits[i])\n    }\n    return result", "    var x = x\n    var shift\
    \ = shift\n    var digits = [Int]()\n    var result = \"\"\n    while x > 0 {\n\
    \        digits.append(x % 10)\n        x /= 10\n    }\n    if shift > digits.count\
    \ {\n        shift = digits.count\n    }\n    for i in 0..<shift {\n        result\
    \ += String(digits[digits.count - shift + i])\n    }\n    for i in 0..<digits.count\
    \ - shift {\n        result += String(digits[i])\n    }\n    return result", " \
    \   var x = x\n    var shift = shift\n    var digits = [Int]()\n    while x >\
    \ 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n    if shift > digits.count\
    \ {\n        return String(digits.reverse())\n    }\n    let shifted = digits[shift..<digits.count]\
    \ + digits[0..<shift]\n    return String(shifted)", "    var x = x\n    var shift\
    \ = shift\n    var digits = [Int]()\n    var result = \"\"\n    while x > 0 {\n\
    \        digits.append(x % 10)\n        x /= 10\n    }\n    if shift > digits.count\
    \ {\n        shift = digits.count\n    }\n    for i in 0..<shift {\n        result\
    \ += String(digits[digits.count - shift + i])\n    }\n    for i in 0..<digits.count\
    \ - shift {\n        result += String(digits[i])\n    }\n    return result", " \
    \   var x = x\n    var shift = shift\n    var digits = [Int]()\n    while x >\
    \ 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n    if shift > digits.count\
    \ {\n        return String(digits.reverse())\n    }\n    let shifted = digits[shift..<digits.count]\
    \ + digits[0..<shift]\n    return String(shifted)", "    var x = x\n    var result\
    \ = \"\"\n    for _ in 0..<shift {\n        let digit = x % 10\n        x /= 10\n\
    \        result = String(digit) + result\n    }\n    result += String(x)\n   \
    \ return result", "    var x = x\n    var digits = [Int]()\n    while x > 0 {\n\
    \        digits.append(x % 10)\n        x /= 10\n    }\n    if shift > digits.count\
    \ {\n        return String(digits.reverse())\n    }\n    let shifted = digits[shift..<digits.count]\
    \ + digits[0..<shift]\n    return String(shifted)", "    var x = x\n    var shift\
    \ = shift\n    var digits = [Int]()\n    while x > 0 {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    if shift > digits.count {\n        shift\
    \ = digits.count\n    }\n    for _ in 0..<shift {\n        let digit = digits.removeLast()\n\
    \        digits.insert(digit, atIndex: 0)\n    }\n    return digits.map { String($0)\
    \ }.joinWithSeparator(\"\")", "    var x = x\n    var shift = shift\n    var result\
    \ = \"\"\n    var digit = 0\n    while x > 0 {\n        digit = x % 10\n     \
    \   x = x / 10\n        result = String(digit) + result\n    }\n    if shift >\
    \ result.characters.count {\n        return String(result.characters.reverse())\n\
    \    }\n    let index = result.startIndex.advancedBy(shift)\n    return result.substringFromIndex(index)\
    \ + result.substringToIndex(index)", "    var x = x\n    var shift = shift\n \
    \   var digits = [Int]()\n    while x > 0 {\n        digits.append(x % 10)\n \
    \       x /= 10\n    }\n    if shift > digits.count {\n        return String(digits.reverse())\n\
    \    }\n    let shifted = digits[digits.count - shift ..< digits.count] + digits[0\
    \ ..< digits.count - shift]\n    return String(shifted)", "    let s = String(x)\n\
    \    let n = s.characters.count\n    if shift >= n {\n        return String(s.characters.reverse())\n\
    \    }\n    let i = s.startIndex.advancedBy(shift)\n    return s.substringFromIndex(i)\
    \ + s.substringToIndex(i)", "    let s = String(x)\n    let n = s.characters.count\n\
    \    if shift >= n {\n        return String(s.characters.reverse())\n    }\n \
    \   let i = s.startIndex.advancedBy(shift)\n    return s.substringFromIndex(i)\
    \ + s.substringToIndex(i)", "    let s = String(x)\n    if shift > s.count {\n\
    \        return String(s.reversed())\n    }\n    let i = s.index(s.startIndex,\
    \ offsetBy: shift)\n    return String(s[i..<s.endIndex] + s[s.startIndex..<i])",
  "    var x = x\n    var digits = [Int]()\n    while x > 0 {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    if shift > digits.count {\n        return\
    \ String(digits.reverse())\n    }\n    for _ in 0..<shift {\n        let digit\
    \ = digits.removeLast()\n        digits.insert(digit, atIndex: 0)\n    }\n   \
    \ return String(digits)", "    let s = String(x)\n    let n = s.characters.count\n\
    \    if shift > n {\n        return String(s.characters.reverse())\n    }\n  \
    \  let i = s.startIndex.advancedBy(shift)\n    return s.substringFromIndex(i)\
    \ + s.substringToIndex(i)", "    var x = x\n    var shift = shift\n    var digits\
    \ = [Int]()\n    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n\
    \    }\n    if shift > digits.count {\n        return digits.reversed().map {\
    \ String($0) }.joined()\n    }\n    var result = digits[shift..<digits.count]\n\
    \    result.append(contentsOf: digits[0..<shift])\n    return result.map { String($0)\
    \ }.joined()", "    var x = x\n    var digits = [Int]()\n    while x > 0 {\n \
    \       digits.append(x % 10)\n        x /= 10\n    }\n    if shift > digits.count\
    \ {\n        return String(digits.reverse())\n    }\n    for _ in 0..<shift {\n\
    \        digits.append(digits.removeAtIndex(0))\n    }\n    return String(digits)",
  "    var x = x\n    var digits = [Int]()\n    while x > 0 {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    if shift > digits.count {\n        return\
    \ String(digits.reverse())\n    }\n    for _ in 0..<shift {\n        let last\
    \ = digits.removeLast()\n        digits.insert(last, atIndex: 0)\n    }\n    return\
    \ String(digits)", "    var x = x\n    var shift = shift\n    var digits = [Int]()\n\
    \    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n  \
    \  if shift > digits.count {\n        return String(digits.reverse())\n    }\n\
    \    let shifted = digits[shift..<digits.count] + digits[0..<shift]\n    return\
    \ String(shifted)", "    var x = x\n    var digits = [Int]()\n    while x > 0\
    \ {\n        digits.append(x % 10)\n        x /= 10\n    }\n    if shift > digits.count\
    \ {\n        return String(digits.reverse())\n    }\n    let shifted = digits[shift..<digits.count]\
    \ + digits[0..<shift]\n    return String(shifted)", "    let s = String(x)\n \
    \   let n = s.characters.count\n    if shift > n {\n        return String(s.characters.reverse())\n\
    \    }\n    let i = s.startIndex.advancedBy(shift)\n    return s.substringFromIndex(i)\
    \ + s.substringToIndex(i)", "    let digits = digits_of(x)\n    let shift = shift\
    \ % digits.count\n    let shifted = digits[shift..<digits.count] + digits[0..<shift]\n\
    \    return String(shifted)", "    var x = x\n    var shift = shift\n    var digits\
    \ = [Int]()\n    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n\
    \    }\n    if shift > digits.count {\n        return digits.reversed().map {\
    \ String($0) }.joined()\n    }\n    var result = [Int]()\n    for i in 0..<digits.count\
    \ {\n        result.append(digits[(i + shift) % digits.count])\n    }\n    return\
    \ result.map { String($0) }.joined()", "    var x = x\n    var digits = [Int]()\n\
    \    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n  \
    \  if shift > digits.count {\n        return String(digits.reverse())\n    }\n\
    \    return String(digits.reverse()[shift..<digits.count] + digits.reverse()[0..<shift])",
  "    let s = String(x)\n    if shift > s.count {\n        return String(s.reversed())\n\
    \    }\n    let i = s.index(s.startIndex, offsetBy: shift)\n    return String(s[i...]\
    \ + s[..<i])", "    let str = String(x)\n    let len = str.characters.count\n\
    \    if shift >= len {\n        return String(str.characters.reverse())\n    }\n\
    \    let start = str.startIndex.advancedBy(shift)\n    let end = str.endIndex\n\
    \    let range = start..<end\n    let suffix = str.substringWithRange(range)\n\
    \    let prefix = str.substringToIndex(start)\n    return suffix + prefix", " \
    \   var x = x\n    var result = \"\"\n    var shift = shift\n    while x > 0 {\n\
    \        result = String(x % 10) + result\n        x /= 10\n    }\n    if shift\
    \ > result.characters.count {\n        return String(result.characters.reverse())\n\
    \    }\n    return String(result.characters.suffix(shift).reverse()) + String(result.characters.prefix(result.characters.count\
    \ - shift))", "    var x = x\n    var result = \"\"\n    for _ in 0..<shift {\n\
    \        result = \"\\(x % 10)\" + result\n        x /= 10\n    }\n    return\
    \ result", "    var x = x\n    var shift = shift\n    var digits = [Int]()\n \
    \   while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n   \
    \ if shift > digits.count {\n        return String(digits.reverse())\n    }\n\
    \    let shifted = digits[digits.count - shift..<digits.count] + digits[0..<digits.count\
    \ - shift]\n    return String(shifted)", "    var x = x\n    var digits = [Int]()\n\
    \    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n  \
    \  if shift > digits.count {\n        return String(digits.reverse())\n    }\n\
    \    for _ in 0..<shift {\n        digits.append(digits.removeAtIndex(0))\n  \
    \  }\n    return String(digits)", "    let s = String(x)\n    let n = s.characters.count\n\
    \    if shift >= n {\n        return String(s.characters.reverse())\n    }\n \
    \   let i = s.startIndex.advancedBy(shift)\n    return s.substringFromIndex(i)\
    \ + s.substringToIndex(i)", "    var x = x\n    var shift = shift\n    var digits\
    \ = [Int]()\n    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n\
    \    }\n    shift %= digits.count\n    if shift == 0 {\n        return digits.map\
    \ { String($0) }.joined()\n    }\n    return digits.reversed().map { String($0)\
    \ }.joined()", "    let digits = String(x)\n    if shift > digits.count {\n  \
    \      return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    return String(digits[index...] + digits[..<index])", " \
    \   let s = String(x)\n    if shift >= s.count {\n        return String(s.reversed())\n\
    \    }\n    let a = s.index(s.startIndex, offsetBy: shift)\n    let b = s.index(s.endIndex,\
    \ offsetBy: -shift)\n    return String(s[a..<b]) + String(s[s.startIndex..<a])\
    \ + String(s[b..<s.endIndex])", "    var x = x\n    var digits = [Int]()\n   \
    \ while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n    if\
    \ shift > digits.count {\n        return String(digits.reverse())\n    }\n   \
    \ let shifted = digits[digits.count - shift..<digits.count] + digits[0..<digits.count\
    \ - shift]\n    return String(shifted)", "    var digits = String(x)\n    if shift\
    \ > digits.count {\n        return String(digits.reversed())\n    }\n    let index\
    \ = digits.index(digits.startIndex, offsetBy: shift)\n    let prefix = digits[..<index]\n\
    \    let suffix = digits[index...]\n    return String(suffix + prefix)", "   \
    \ var x = x\n    var result = \"\"\n    for _ in 0..<shift {\n        result =\
    \ \"\\(x % 10)\" + result\n        x /= 10\n    }\n    return \"\\(x)\" + result",
  "    var x = x\n    var shift = shift\n    var digits = [Int]()\n    var result\
    \ = \"\"\n    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n\
    \    }\n    if shift > digits.count {\n        shift = digits.count\n    }\n \
    \   for i in 0..<shift {\n        result += String(digits[digits.count - shift\
    \ + i])\n    }\n    for i in 0..<digits.count - shift {\n        result += String(digits[i])\n\
    \    }\n    return result", "    var x = x\n    var shift = shift\n    var digits:\
    \ [Int] = []\n    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n\
    \    }\n    shift %= digits.count\n    if shift == 0 {\n        return digits.map\
    \ { String($0) }.joinWithSeparator(\"\")\n    }\n    let shifted = digits[shift..<digits.count]\
    \ + digits[0..<shift]\n    return shifted.map { String($0) }.joinWithSeparator(\"\
    \")", "    let s = String(x)\n    let n = s.characters.count\n    if shift >=\
    \ n {\n        return String(s.characters.reverse())\n    }\n    let i = s.startIndex.advancedBy(shift)\n\
    \    return s.substringFromIndex(i) + s.substringToIndex(i)", "    var x = x\n\
    \    var shift = shift\n    var digits = [Int]()\n    while x > 0 {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    if shift > digits.count {\n        return\
    \ digits.reversed().map(String.init).joined()\n    }\n    let first = digits[0..<shift].reversed()\n\
    \    let second = digits[shift..<digits.count].reversed()\n    return (first +\
    \ second).map(String.init).joined()", "    let digits = String(x)\n    let len\
    \ = digits.characters.count\n    if shift >= len {\n        return String(digits.characters.reverse())\n\
    \    }\n    let start = digits.startIndex.advancedBy(shift)\n    let end = digits.endIndex\n\
    \    let prefix = digits.substringToIndex(start)\n    let suffix = digits.substringFromIndex(start)\n\
    \    return suffix + prefix", "    var x = x\n    var shift = shift\n    var digits:\
    \ [Int] = []\n    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n\
    \    }\n    if shift > digits.count {\n        return digits.reverse().map { String($0)\
    \ }.joinWithSeparator(\"\")\n    }\n    var result: [Int] = []\n    for i in 0..<digits.count\
    \ {\n        result.append(digits[(i + shift) % digits.count])\n    }\n    return\
    \ result.map { String($0) }.joinWithSeparator(\"\")", "    let digits = String(x)\n\
    \    let length = digits.characters.count\n    if shift >= length {\n        return\
    \ String(digits.characters.reverse())\n    }\n    let start = digits.startIndex.advancedBy(shift)\n\
    \    let end = digits.endIndex\n    let shifted = digits.substringWithRange(start..<end)\
    \ + digits.substringToIndex(start)\n    return shifted", "    var digits = String(x)\n\
    \    var result = \"\"\n    if shift > digits.count {\n        result = String(digits.reversed())\n\
    \    } else {\n        let index = digits.index(digits.startIndex, offsetBy: shift)\n\
    \        result = digits.substring(from: index) + digits.substring(to: index)\n\
    \    }\n    return result", "    var x = x\n    var digits = [Int]()\n    var\
    \ result = \"\"\n    while x > 0 {\n        digits.append(x % 10)\n        x /=\
    \ 10\n    }\n    for i in 0..<shift {\n        result += String(digits.popLast()!)\n\
    \    }\n    for i in 0..<digits.count {\n        result += String(digits[i])\n\
    \    }\n    return result", "    var x = x\n    var shift = shift\n    var digits\
    \ = [Int]()\n    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n\
    \    }\n    shift %= digits.count\n    if shift == 0 {\n        return digits.map\
    \ { String($0) }.joinWithSeparator(\"\")\n    }\n    let shifted = digits[shift..<digits.count]\
    \ + digits[0..<shift]\n    return shifted.map { String($0) }.joinWithSeparator(\"\
    \")", "    let s = String(x)\n    let n = s.characters.count\n    if shift > n\
    \ {\n        return String(s.characters.reverse())\n    }\n    let i = s.startIndex.advancedBy(shift)\n\
    \    return s.substringFromIndex(i) + s.substringToIndex(i)", "    var x = x\n\
    \    var shift = shift\n    var digits = [Int]()\n    while x > 0 {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    if shift > digits.count {\n        return\
    \ String(digits.reverse())\n    }\n    let shift_digits = digits[0..<shift].reverse()\n\
    \    let rest_digits = digits[shift..<digits.count]\n    return String(shift_digits\
    \ + rest_digits)", "    let digits = String(x)\n    if shift >= digits.count {\n\
    \        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    return String(digits[index...] + digits[..<index])", " \
    \   let digits = String(x)\n    let len = digits.characters.count\n    if shift\
    \ >= len {\n        return String(digits.characters.reverse())\n    }\n    let\
    \ index = digits.startIndex.advancedBy(shift)\n    return digits.substringFromIndex(index)\
    \ + digits.substringToIndex(index)", "    let digits = String(x)\n    let n =\
    \ digits.characters.count\n    if shift >= n {\n        return String(digits.characters.reverse())\n\
    \    }\n    let left = digits.substringToIndex(digits.startIndex.advancedBy(shift))\n\
    \    let right = digits.substringFromIndex(digits.startIndex.advancedBy(shift))\n\
    \    return right + left", "    var x = x\n    var digits = [Int]()\n    while\
    \ x > 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n    if shift\
    \ > digits.count {\n        return String(digits.reverse())\n    }\n    let shifted\
    \ = digits[digits.count - shift..<digits.count] + digits[0..<digits.count - shift]\n\
    \    return String(shifted)", "    var x = x\n    var shift = shift\n    var result\
    \ = \"\"\n    while x > 0 {\n        result = String(x % 10) + result\n      \
    \  x /= 10\n    }\n    shift %= result.count\n    return String(result.suffix(shift)\
    \ + result.prefix(result.count - shift))", "    var x = x\n    var result = \"\
    \"\n    for _ in 0..<shift {\n        result = \"\\(x % 10)\" + result\n     \
    \   x /= 10\n    }\n    return result", "    let digits = String(x)\n    let len\
    \ = digits.characters.count\n    if shift >= len {\n        return String(digits.characters.reverse())\n\
    \    }\n    let index = digits.startIndex.advancedBy(shift)\n    return digits.substringFromIndex(index)\
    \ + digits.substringToIndex(index)", "    var x = x\n    var shift = shift\n \
    \   var digits = [Int]()\n    while x > 0 {\n        digits.append(x % 10)\n \
    \       x /= 10\n    }\n    if shift > digits.count {\n        shift = digits.count\n\
    \    }\n    digits = digits.reverse()\n    let shifted = digits[shift..<digits.count]\
    \ + digits[0..<shift]\n    return shifted.map { String($0) }.joinWithSeparator(\"\
    \")", "    var digits = String(x)\n    if shift > digits.count {\n        return\
    \ String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let prefix = digits[..<index]\n    let suffix = digits[index...]\n\
    \    return String(suffix + prefix)", "    let s = String(x)\n    let n = s.characters.count\n\
    \    if shift >= n {\n        return String(s.characters.reverse())\n    }\n \
    \   let i = s.startIndex.advancedBy(shift)\n    return s.substringFromIndex(i)\
    \ + s.substringToIndex(i)", "    var digits = [Int]()\n    var x = x\n    while\
    \ x > 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n    if shift\
    \ >= digits.count {\n        return String(digits.reverse())\n    }\n    let shifted\
    \ = digits[shift..<digits.count] + digits[0..<shift]\n    return String(shifted)",
  "    var x = x\n    var shift = shift\n    var digits = [Int]()\n    while x > 0\
    \ {\n        digits.append(x % 10)\n        x /= 10\n    }\n    if shift > digits.count\
    \ {\n        return String(digits.reverse())\n    }\n    let shifted = digits[digits.count\
    \ - shift..<digits.count] + digits[0..<digits.count - shift]\n    return String(shifted)",
  "    let str = String(x)\n    let len = str.characters.count\n    if shift > len\
    \ {\n        return String(str.characters.reverse())\n    }\n    let index = str.startIndex.advancedBy(shift)\n\
    \    return str.substringFromIndex(index) + str.substringToIndex(index)", "  \
    \  var x = x\n    var shift = shift\n    var digits = [Int]()\n    var result\
    \ = \"\"\n    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n\
    \    }\n    if shift > digits.count {\n        shift = digits.count\n    }\n \
    \   for i in 0..<shift {\n        result = String(digits[digits.count - shift\
    \ + i]) + result\n    }\n    for i in shift..<digits.count {\n        result =\
    \ String(digits[i - shift]) + result\n    }\n    return result", "    var x =\
    \ x\n    var shift = shift\n    var digits = [Int]()\n    var result = \"\"\n\
    \    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n  \
    \  if shift >= digits.count {\n        shift = shift % digits.count\n    }\n \
    \   for i in 0..<digits.count {\n        result += String(digits[(i + shift) %\
    \ digits.count])\n    }\n    return result", "    var x = x\n    var digits =\
    \ [Int]()\n    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n\
    \    }\n    var result = \"\"\n    for i in 0..<digits.count {\n        result\
    \ += String(digits[(i + shift) % digits.count])\n    }\n    return result", " \
    \   let digits = String(x)\n    let len = digits.characters.count\n    if shift\
    \ >= len {\n        return String(digits.characters.reverse())\n    }\n    let\
    \ start = digits.startIndex.advancedBy(shift)\n    let end = digits.endIndex\n\
    \    let prefix = digits.substringToIndex(start)\n    let suffix = digits.substringFromIndex(start)\n\
    \    return suffix + prefix", "    let digits = String(x)\n    let n = digits.count\n\
    \    if shift >= n {\n        return String(digits.reversed())\n    }\n    let\
    \ left = digits.index(digits.startIndex, offsetBy: shift)\n    let right = digits.index(digits.startIndex,\
    \ offsetBy: n)\n    return String(digits[left..<right] + digits[digits.startIndex..<left])",
  "    let digits = String(x)\n    let len = digits.characters.count\n    if shift\
    \ >= len {\n        return String(digits.characters.reverse())\n    }\n    let\
    \ index = digits.startIndex.advancedBy(shift)\n    return digits.substringFromIndex(index)\
    \ + digits.substringToIndex(index)", "    var x = x\n    var result = \"\"\n \
    \   for _ in 0..<shift {\n        result = \"\\(x % 10)\" + result\n        x\
    \ /= 10\n    }\n    return \"\\(x)\" + result", "    var digits = String(x)\n\
    \    if shift > digits.count {\n        return String(digits.reversed())\n   \
    \ }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n    let\
    \ prefix = digits[..<index]\n    let suffix = digits[index...]\n    return String(suffix\
    \ + prefix)", "    var x = x\n    var digits = [Int]()\n    var result = \"\"\n\
    \    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n  \
    \  if shift > digits.count {\n        for i in 0..<digits.count {\n          \
    \  result += String(digits[digits.count - i - 1])\n        }\n    } else {\n \
    \       for i in 0..<digits.count {\n            result += String(digits[(i +\
    \ shift) % digits.count])\n        }\n    }\n    return result", "    var x =\
    \ x\n    var shift = shift\n    var digits: [Int] = []\n    var result: String\
    \ = \"\"\n    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n\
    \    }\n    if shift > digits.count {\n        shift = digits.count\n    }\n \
    \   for i in 0..<shift {\n        result += String(digits[digits.count - shift\
    \ + i])\n    }\n    for i in 0..<digits.count - shift {\n        result += String(digits[i])\n\
    \    }\n    return result", "    var x = x\n    var shift = shift\n    var digits:\
    \ [Int] = []\n    var result: String = \"\"\n    while x > 0 {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    if shift > digits.count {\n        shift\
    \ = digits.count\n    }\n    for i in 0..<digits.count {\n        result += String(digits[(i\
    \ + shift) % digits.count])\n    }\n    return result", "    var x = x\n    var\
    \ digits = [Int]()\n    while x > 0 {\n        digits.append(x % 10)\n       \
    \ x /= 10\n    }\n    if shift > digits.count {\n        return digits.reversed().map\
    \ { String($0) }.joined()\n    }\n    let shift = shift % digits.count\n    let\
    \ shifted = digits[shift..<digits.count] + digits[0..<shift]\n    return shifted.map\
    \ { String($0) }.joined()", "    var x = x\n    var digits = [Int]()\n    while\
    \ x > 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n    if shift\
    \ > digits.count {\n        return String(digits.reverse())\n    }\n    for _\
    \ in 0..<shift {\n        let last = digits.removeLast()\n        digits.insert(last,\
    \ atIndex: 0)\n    }\n    return String(digits)", "    let s = String(x)\n   \
    \ let n = s.characters.count\n    if shift >= n {\n        return String(s.characters.reverse())\n\
    \    }\n    let i = s.startIndex.advancedBy(shift)\n    return s.substringFromIndex(i)\
    \ + s.substringToIndex(i)", "    let digits = String(x)\n    let n = digits.characters.count\n\
    \    if shift > n {\n        return String(digits.characters.reverse())\n    }\n\
    \    let a = digits.startIndex.advancedBy(shift)\n    let b = digits.endIndex\n\
    \    let c = digits.startIndex\n    let d = digits.startIndex.advancedBy(n - shift)\n\
    \    return digits.substringWithRange(a..<b) + digits.substringWithRange(c..<d)",
  "    var x = x\n    var digits = [Int]()\n    while x > 0 {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    if shift > digits.count {\n        return\
    \ digits.reverse().map { String($0) }.joinWithSeparator(\"\")\n    }\n    for\
    \ _ in 0..<shift {\n        let last = digits.removeLast()\n        digits.insert(last,\
    \ atIndex: 0)\n    }\n    return digits.map { String($0) }.joinWithSeparator(\"\
    \")", "    var x = x\n    var shift = shift\n    var digits = [Int]()\n    var\
    \ result = \"\"\n    while x > 0 {\n        digits.append(x % 10)\n        x /=\
    \ 10\n    }\n    if shift > digits.count {\n        shift = digits.count\n   \
    \ }\n    for i in 0..<shift {\n        result += String(digits[digits.count -\
    \ shift + i])\n    }\n    for i in 0..<digits.count - shift {\n        result\
    \ += String(digits[i])\n    }\n    return result", "    var x = x\n    var result\
    \ = \"\"\n    for _ in 0..<shift {\n        result = String(x % 10) + result\n\
    \        x /= 10\n    }\n    return String(x) + result", "    let s = String(x)\n\
    \    let n = s.characters.count\n    if shift >= n {\n        return String(s.characters.reverse())\n\
    \    }\n    let a = s.substringToIndex(s.startIndex.advancedBy(shift))\n    let\
    \ b = s.substringFromIndex(s.startIndex.advancedBy(shift))\n    return b + a",
  "    var x = x\n    var digits = [Int]()\n    while x > 0 {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    if shift > digits.count {\n        return\
    \ String(digits.reverse())\n    }\n    digits = digits.reverse()\n    let shifted\
    \ = digits[shift..<digits.count] + digits[0..<shift]\n    return String(shifted)",
  "    var x = x\n    var shift = shift\n    var digits = [Int]()\n    while x > 0\
    \ {\n        digits.append(x % 10)\n        x /= 10\n    }\n    if shift > digits.count\
    \ {\n        return digits.reversed().map { String($0) }.joined()\n    }\n   \
    \ let left = digits.count - shift\n    let right = digits.count - 1\n    return\
    \ digits[left...right].map { String($0) }.joined() + digits[0..<left].map { String($0)\
    \ }.joined()", "    var x = x\n    var shift = shift\n    var digits: [Int] =\
    \ []\n    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n\
    \    if shift > digits.count {\n        return String(digits.reverse())\n    }\n\
    \    let shifted = digits[shift..<digits.count] + digits[0..<shift]\n    return\
    \ String(shifted)", "    var x = x\n    var shift = shift\n    var digits = [Int]()\n\
    \    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n  \
    \  if shift > digits.count {\n        return String(digits.reverse())\n    }\n\
    \    let shifted = digits[shift..<digits.count] + digits[0..<shift]\n    return\
    \ String(shifted)", "    let digits = String(x)\n    if shift >= digits.count\
    \ {\n        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    return String(digits[index...] + digits[..<index])", " \
    \   let digits = String(x)\n    let length = digits.characters.count\n    if shift\
    \ >= length {\n        return String(digits.characters.reverse())\n    }\n   \
    \ let index = digits.startIndex.advancedBy(shift)\n    return digits.substringFromIndex(index)\
    \ + digits.substringToIndex(index)", "    var x = x\n    var shift = shift\n \
    \   var digits: [Int] = []\n    var result: String = \"\"\n    while x > 0 {\n\
    \        digits.append(x % 10)\n        x /= 10\n    }\n    if shift > digits.count\
    \ {\n        shift = digits.count\n    }\n    for i in 0..<digits.count {\n  \
    \      result += String(digits[(i + shift) % digits.count])\n    }\n    return\
    \ result", "    let digits = String(x)\n    let n = digits.characters.count\n\
    \    if shift >= n {\n        return String(digits.characters.reverse())\n   \
    \ }\n    let i = digits.startIndex.advancedBy(shift)\n    return digits.substringFromIndex(i)\
    \ + digits.substringToIndex(i)", "    let digits = String(x)\n    if shift > digits.count\
    \ {\n        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    return String(digits[index...] + digits[..<index])", " \
    \   var x = x\n    var result = \"\"\n    var i = 0\n    while x > 0 {\n     \
    \   if i == shift {\n            result = \"\\(x % 10)\" + result\n        } else\
    \ {\n            result += \"\\(x % 10)\"\n        }\n        x /= 10\n      \
    \  i++\n    }\n    return result", "    let digits = String(x)\n    if shift >=\
    \ digits.count {\n        return String(digits.reversed())\n    }\n    let index\
    \ = digits.index(digits.startIndex, offsetBy: shift)\n    return String(digits[index...]\
    \ + digits[..<index])", "    var x = x\n    var result = \"\"\n    for _ in 0..<shift\
    \ {\n        result = \"\\(x % 10)\" + result\n        x /= 10\n    }\n    return\
    \ result", "    var x = x\n    var digits = [Int]()\n    while x > 0 {\n     \
    \   digits.append(x % 10)\n        x /= 10\n    }\n    if shift > digits.count\
    \ {\n        return String(digits.reverse())\n    }\n    return String(digits.reverse()[shift..<digits.count]\
    \ + digits.reverse()[0..<shift])", "    var x = x\n    var shift = shift\n   \
    \ var digits = [Int]()\n    var result = \"\"\n    while x > 0 {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    if shift > digits.count {\n        shift\
    \ = digits.count\n    }\n    for i in 0..<digits.count {\n        result += String(digits[(i\
    \ + shift) % digits.count])\n    }\n    return result", "    var x = x\n    var\
    \ shift = shift\n    var digits = [Int]()\n    var result = \"\"\n    while x\
    \ > 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n    if shift >\
    \ digits.count {\n        shift = digits.count\n    }\n    for i in 0..<shift\
    \ {\n        result += String(digits[digits.count - shift + i])\n    }\n    for\
    \ i in 0..<digits.count - shift {\n        result += String(digits[i])\n    }\n\
    \    return result", "    var x = x\n    var shift = shift\n    var result = \"\
    \"\n    while x > 0 {\n        result = String(x % 10) + result\n        x /=\
    \ 10\n    }\n    if shift > result.count {\n        return String(result.reversed())\n\
    \    }\n    return String(result.suffix(result.count - shift) + result.prefix(shift))",
  "    let digits = String(x)\n    let n = digits.count\n    if shift > n {\n    \
    \    return String(digits.reversed())\n    }\n    let a = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let b = digits.index(digits.endIndex, offsetBy: -shift)\n\
    \    return String(digits[a..<b]) + String(digits[digits.startIndex..<a]) + String(digits[b..<digits.endIndex])",
  "    var digits = String(x)\n    if shift >= digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ let prefix = digits[..<index]\n    let suffix = digits[index...]\n    return\
    \ String(suffix + prefix)", "    let digits = String(x)\n    if shift > digits.count\
    \ {\n        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    return String(digits[index...] + digits[..<index])", " \
    \   var x = x\n    var result = \"\"\n    var shift = shift\n    while x > 0 {\n\
    \        result = String(x % 10) + result\n        x /= 10\n    }\n    if shift\
    \ > result.count {\n        return String(result.reversed())\n    }\n    return\
    \ String(result.suffix(shift) + result.prefix(result.count - shift))", "    var\
    \ x = x\n    var shift = shift\n    var digits = [Int]()\n    while x > 0 {\n\
    \        digits.append(x % 10)\n        x /= 10\n    }\n    if shift > digits.count\
    \ {\n        return digits.reversed().map { String($0) }.joined()\n    }\n   \
    \ var result = digits.reversed()\n    for _ in 0..<shift {\n        result.append(result.removeFirst())\n\
    \    }\n    return result.map { String($0) }.joined()", "    var x = x\n    var\
    \ digits = [Int]()\n    while x > 0 {\n        digits.append(x % 10)\n       \
    \ x /= 10\n    }\n    if shift > digits.count {\n        return digits.reverse().map\
    \ { String($0) }.joinWithSeparator(\"\")\n    }\n    let shift = shift % digits.count\n\
    \    let shifted = digits[shift..<digits.count] + digits[0..<shift]\n    return\
    \ shifted.map { String($0) }.joinWithSeparator(\"\")", "    let str = String(x)\n\
    \    let len = str.characters.count\n    if shift > len {\n        return String(str.characters.reverse())\n\
    \    }\n    let index = str.startIndex.advancedBy(shift)\n    return str.substringFromIndex(index)\
    \ + str.substringToIndex(index)", "    var x = x\n    var digits = [Int]()\n \
    \   while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n   \
    \ if shift > digits.count {\n        return digits.reversed().map { String($0)\
    \ }.joined()\n    }\n    let shift = shift % digits.count\n    let shifted = digits[shift..<digits.count]\
    \ + digits[0..<shift]\n    return shifted.map { String($0) }.joined()", "    var\
    \ x = x\n    var shift = shift\n    var digits = [Int]()\n    while x > 0 {\n\
    \        digits.append(x % 10)\n        x /= 10\n    }\n    shift %= digits.count\n\
    \    let shifted = digits[shift..<digits.count] + digits[0..<shift]\n    return\
    \ shifted.map { String($0) }.reduce(\"\", +)", "    var x = x\n    var shift =\
    \ shift\n    var digits = [Int]()\n    while x > 0 {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    if shift >= digits.count {\n        return\
    \ String(digits.reverse())\n    }\n    return String(digits[shift..<digits.count]\
    \ + digits[0..<shift])", "    var x = x\n    var shift = shift\n    var digits\
    \ = [Int]()\n    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n\
    \    }\n    if shift > digits.count {\n        return String(digits.reverse())\n\
    \    }\n    let shifted = digits[shift..<digits.count] + digits[0..<shift]\n \
    \   return String(shifted)", "    let s = String(x)\n    let n = s.characters.count\n\
    \    if shift >= n {\n        return String(s.characters.reverse())\n    }\n \
    \   let a = s.startIndex\n    let b = s.startIndex.advancedBy(shift)\n    let\
    \ c = s.startIndex.advancedBy(n)\n    return s[b..<c] + s[a..<b]", "    var x\
    \ = x\n    var shift = shift\n    var digits: [Int] = []\n    while x > 0 {\n\
    \        digits.append(x % 10)\n        x /= 10\n    }\n    shift %= digits.count\n\
    \    if shift == 0 {\n        return digits.map({String($0)}).joinWithSeparator(\"\
    \")\n    }\n    let shifted = digits[shift..<digits.count] + digits[0..<shift]\n\
    \    return shifted.map({String($0)}).joinWithSeparator(\"\")", "    var x = x\n\
    \    var shift = shift\n    var digits = [Int]()\n    while x > 0 {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    if shift > digits.count {\n        return\
    \ digits.reversed().map { String($0) }.joined()\n    }\n    shift %= digits.count\n\
    \    let shifted = digits[shift..<digits.count] + digits[0..<shift]\n    return\
    \ shifted.map { String($0) }.joined()", "    var x = x\n    var shift = shift\n\
    \    var digits: [Int] = []\n    var result: String = \"\"\n    while x > 0 {\n\
    \        digits.append(x % 10)\n        x /= 10\n    }\n    if shift > digits.count\
    \ {\n        shift = digits.count\n    }\n    for i in 0..<shift {\n        result\
    \ += String(digits[digits.count - shift + i])\n    }\n    for i in 0..<digits.count\
    \ - shift {\n        result += String(digits[i])\n    }\n    return result", " \
    \   var x = x\n    var shift = shift\n    var digits = [Int]()\n    while x >\
    \ 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n    if shift > digits.count\
    \ {\n        return String(digits.reverse())\n    }\n    let shifted = digits[digits.count\
    \ - shift..<digits.count] + digits[0..<digits.count - shift]\n    return String(shifted)",
  "    var x = x\n    var digits = [Int]()\n    while x > 0 {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    if shift > digits.count {\n        return\
    \ String(digits.reverse())\n    }\n    for _ in 0..<shift {\n        let digit\
    \ = digits.removeLast()\n        digits.insert(digit, atIndex: 0)\n    }\n   \
    \ return String(digits)", "    var x = x\n    var shift = shift\n    var digits\
    \ = [Int]()\n    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n\
    \    }\n    if shift > digits.count {\n        shift = digits.count\n    }\n \
    \   var result = \"\"\n    for i in 0..<digits.count {\n        result += String(digits[(i\
    \ + shift) % digits.count])\n    }\n    return result", "    let s = String(x)\n\
    \    let n = s.characters.count\n    if shift >= n {\n        return String(s.characters.reverse())\n\
    \    }\n    let i = s.startIndex.advancedBy(shift)\n    return s.substringFromIndex(i)\
    \ + s.substringToIndex(i)", "    var digits = String(x)\n    if shift > digits.count\
    \ {\n        return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let prefix = digits[..<index]\n    let suffix = digits[index...]\n\
    \    return String(suffix + prefix)", "    var x = x\n    var shift = shift\n\
    \    var digits = [Int]()\n    while x > 0 {\n        digits.append(x % 10)\n\
    \        x /= 10\n    }\n    if shift > digits.count {\n        return String(digits.reverse())\n\
    \    }\n    digits = digits.reverse()\n    let shifted = digits[shift..<digits.count]\
    \ + digits[0..<shift]\n    return String(shifted)", "    var digits = String(x)\n\
    \    if shift > digits.count {\n        return String(digits.reversed())\n   \
    \ }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n    let\
    \ prefix = digits[..<index]\n    let suffix = digits[index...]\n    return String(suffix\
    \ + prefix)", "    var x = x\n    var shift = shift\n    if shift > number_of_digits(x)\
    \ {\n        return reverse_digits(x)\n    }\n    var result = \"\"\n    for _\
    \ in 0..<shift {\n        result += String(x % 10)\n        x /= 10\n    }\n \
    \   result += String(x)\n    return result", "    var x = x\n    var shift = shift\n\
    \    var digits: [Int] = []\n    var result: String = \"\"\n    while x > 0 {\n\
    \        digits.append(x % 10)\n        x /= 10\n    }\n    if shift > digits.count\
    \ {\n        shift = digits.count\n    }\n    for i in 0..<digits.count {\n  \
    \      result += String(digits[(i + shift) % digits.count])\n    }\n    return\
    \ result", "    var digits = String(x)\n    if shift > digits.count {\n      \
    \  return String(digits.reversed())\n    }\n    let index = digits.index(digits.startIndex,\
    \ offsetBy: shift)\n    let prefix = digits[..<index]\n    let suffix = digits[index...]\n\
    \    return String(suffix + prefix)", "    var x = x\n    var digits = [Int]()\n\
    \    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n  \
    \  if shift > digits.count {\n        return digits.reverse().map { String($0)\
    \ }.joinWithSeparator(\"\")\n    }\n    let shift = shift % digits.count\n   \
    \ let shifted = digits[digits.count - shift..<digits.count] + digits[0..<digits.count\
    \ - shift]\n    return shifted.map { String($0) }.joinWithSeparator(\"\")", " \
    \   var x = x\n    var shift = shift\n    var digits = [Int]()\n    while x >\
    \ 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n    if shift > digits.count\
    \ {\n        return String(digits.reverse())\n    }\n    let first = digits[0..<shift]\n\
    \    let second = digits[shift..<digits.count]\n    return String(second + first)",
  "    var x = x\n    var shift = shift\n    var digits = [Int]()\n    while x > 0\
    \ {\n        digits.append(x % 10)\n        x /= 10\n    }\n    if shift > digits.count\
    \ {\n        return String(digits.reverse())\n    }\n    let first = digits[0..<shift]\n\
    \    let second = digits[shift..<digits.count]\n    return String(second + first)",
  "    var x = x\n    var digits = [Int]()\n    while x > 0 {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    var result = \"\"\n    for i in 0..<digits.count\
    \ {\n        result += String(digits[(i + shift) % digits.count])\n    }\n   \
    \ return result", "    var x = x\n    var shift = shift\n    var result = \"\"\
    \n    while x > 0 {\n        result = String(x % 10) + result\n        x /= 10\n\
    \    }\n    if shift > result.characters.count {\n        return String(result.characters.reverse())\n\
    \    }\n    let index = result.startIndex.advancedBy(shift)\n    return result.substringFromIndex(index)\
    \ + result.substringToIndex(index)", "    var digits = String(x)\n    if shift\
    \ > digits.count {\n        return String(digits.reversed())\n    }\n    let index\
    \ = digits.index(digits.startIndex, offsetBy: shift)\n    return digits.substring(from:\
    \ index) + digits.substring(to: index)", "    var x = x\n    var s = \"\"\n  \
    \  while x > 0 {\n        s = String(x % 10) + s\n        x /= 10\n    }\n   \
    \ if shift > s.characters.count {\n        return String(s.characters.reverse())\n\
    \    }\n    return s.substringFromIndex(s.startIndex.advancedBy(shift)) + s.substringToIndex(s.startIndex.advancedBy(shift))",
  "    let digits = String(x)\n    if shift >= digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ return String(digits[index...] + digits[..<index])", "    let digits = String(x)\n\
    \    if shift >= digits.count {\n        return String(digits.reversed())\n  \
    \  }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n    return\
    \ String(digits[index...] + digits[..<index])", "    let s = String(x)\n    if\
    \ shift > s.count {\n        return String(s.reversed())\n    }\n    let index\
    \ = s.index(s.startIndex, offsetBy: shift)\n    return String(s[index...] + s[..<index])",
  "    let str = String(x)\n    let len = str.characters.count\n    if shift >= len\
    \ {\n        return String(str.characters.reverse())\n    }\n    let index = str.startIndex.advancedBy(shift)\n\
    \    return str.substringFromIndex(index) + str.substringToIndex(index)", "  \
    \  var x = x\n    var shift = shift\n    var digits = [Int]()\n    while x > 0\
    \ {\n        digits.append(x % 10)\n        x /= 10\n    }\n    if shift > digits.count\
    \ {\n        return String(digits.reverse())\n    }\n    var result = [Int]()\n\
    \    for i in shift..<digits.count {\n        result.append(digits[i])\n    }\n\
    \    for i in 0..<shift {\n        result.append(digits[i])\n    }\n    return\
    \ String(result)", "    var digits = String(x)\n    if shift > digits.characters.count\
    \ {\n        return String(digits.characters.reverse())\n    }\n    let index\
    \ = digits.startIndex.advancedBy(shift)\n    let prefix = digits.substringToIndex(index)\n\
    \    let suffix = digits.substringFromIndex(index)\n    return suffix + prefix"]
stop_tokens:
- "\n}"
