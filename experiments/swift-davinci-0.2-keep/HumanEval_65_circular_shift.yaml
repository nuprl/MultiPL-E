name: HumanEval_65_circular_shift
language: swift
prompt: "\n/// Circular shift the digits of the integer x, shift the digits right\
  \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
  \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// \"21\"\n/// >>> circular_shift(12,\
  \ 2)\n/// \"12\"\nfunc circular_shift(x: Int, shift: Int) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(circular_shift(x: 100, shift: 2) == \"001\"\
  )\nassert(circular_shift(x: 12, shift: 2) == \"12\")\nassert(circular_shift(x: 97,\
  \ shift: 8) == \"79\")\nassert(circular_shift(x: 12, shift: 1) == \"21\")\nassert(circular_shift(x:\
  \ 11, shift: 101) == \"11\")"
completions: ["    var x = x\n    var shift = shift\n    var digits = [Int]()\n  \
    \  while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n    if\
    \ shift > digits.count {\n        return String(digits.reverse())\n    }\n   \
    \ let first = digits[0..<shift]\n    let second = digits[shift..<digits.count]\n\
    \    return String(second + first)", "    let s = String(x)\n    let n = s.characters.count\n\
    \    if shift > n {\n        return String(s.characters.reverse())\n    }\n  \
    \  let start = s.startIndex\n    let end = s.startIndex.advancedBy(shift)\n  \
    \  let a = s.substringFromIndex(end)\n    let b = s.substringToIndex(end)\n  \
    \  return a + b", "    var x = x\n    var shift = shift\n    var digits = [Int]()\n\
    \    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n  \
    \  if shift > digits.count {\n        return String(digits.reverse())\n    }\n\
    \    let shifted = digits[digits.count - shift..<digits.count] + digits[0..<digits.count\
    \ - shift]\n    return String(shifted)", "    var x = x\n    var shift = shift\n\
    \    var digits: [Int] = []\n    while x > 0 {\n        digits.append(x % 10)\n\
    \        x /= 10\n    }\n    if shift > digits.count {\n        shift = digits.count\n\
    \    }\n    digits = digits.reverse()\n    var result = \"\"\n    for i in 0..<digits.count\
    \ {\n        result += String(digits[(i + shift) % digits.count])\n    }\n   \
    \ return result", "    var x = x\n    var shift = shift\n    var digits = [Int]()\n\
    \    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n  \
    \  if shift > digits.count {\n        shift = digits.count\n    }\n    var result\
    \ = \"\"\n    for i in 0..<digits.count {\n        result += String(digits[(i\
    \ + shift) % digits.count])\n    }\n    return result", "    var x = x\n    var\
    \ digits = [Int]()\n    while x > 0 {\n        digits.append(x % 10)\n       \
    \ x /= 10\n    }\n    if shift > digits.count {\n        return digits.reverse().map\
    \ { String($0) }.joinWithSeparator(\"\")\n    }\n    for _ in 0..<shift {\n  \
    \      let digit = digits.removeLast()\n        digits.insert(digit, atIndex:\
    \ 0)\n    }\n    return digits.map { String($0) }.joinWithSeparator(\"\")", " \
    \   var x = x\n    var digits = [Int]()\n    while x > 0 {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    if shift > digits.count {\n        return\
    \ String(digits.reverse())\n    }\n    let shift = shift % digits.count\n    let\
    \ shifted = digits[shift..<digits.count] + digits[0..<shift]\n    return String(shifted)",
  "    var x = x\n    var shift = shift\n    var digits = [Int]()\n    while x > 0\
    \ {\n        digits.append(x % 10)\n        x /= 10\n    }\n    if shift > digits.count\
    \ {\n        return String(digits.reverse())\n    }\n    let first = digits[0..<shift]\n\
    \    let second = digits[shift..<digits.count]\n    return String(second + first)",
  "    var x = x\n    var shift = shift\n    var digits = [Int]()\n    while x > 0\
    \ {\n        digits.append(x % 10)\n        x /= 10\n    }\n    if shift > digits.count\
    \ {\n        return String(digits.reverse())\n    }\n    let shifted = digits[digits.count\
    \ - shift ..< digits.count] + digits[0 ..< digits.count - shift]\n    return String(shifted)",
  "    var digits = String(x)\n    if shift > digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ let prefix = digits[..<index]\n    let suffix = digits[index...]\n    return\
    \ String(suffix + prefix)", "    var x = x\n    var digits = [Int]()\n    while\
    \ x > 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n    if shift\
    \ > digits.count {\n        return String(digits.reverse())\n    }\n    let shifted\
    \ = digits[shift..<digits.count] + digits[0..<shift]\n    return String(shifted)",
  "    let digits = String(x)\n    if shift > digits.count {\n        return String(digits.reversed())\n\
    \    }\n    let index = digits.index(digits.startIndex, offsetBy: shift)\n   \
    \ return String(digits[index...] + digits[..<index])", "    var x = x\n    var\
    \ digits = [Int]()\n    while x > 0 {\n        digits.append(x % 10)\n       \
    \ x /= 10\n    }\n    var shifted = [Int]()\n    for i in 0..<digits.count {\n\
    \        shifted.append(digits[(i + shift) % digits.count])\n    }\n    return\
    \ shifted.map { String($0) }.joined()", "    let digits = String(x)\n    let n\
    \ = digits.characters.count\n    if shift >= n {\n        return String(digits.characters.reverse())\n\
    \    }\n    let shift_digits = digits.substringToIndex(digits.startIndex.advancedBy(shift))\n\
    \    let remaining_digits = digits.substringFromIndex(digits.startIndex.advancedBy(shift))\n\
    \    return remaining_digits + shift_digits", "    var x = x\n    var shift =\
    \ shift\n    var digits = [Int]()\n    while x > 0 {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    if shift > digits.count {\n        return\
    \ String(digits.reverse())\n    }\n    let shifted = digits[shift..<digits.count]\
    \ + digits[0..<shift]\n    return String(shifted)", "    let x_str = String(x)\n\
    \    if shift >= x_str.count {\n        return String(x_str.reversed())\n    }\n\
    \    let index = x_str.index(x_str.startIndex, offsetBy: shift)\n    return String(x_str[index...]\
    \ + x_str[..<index])", "    var x = x\n    var digits = [Int]()\n    while x >\
    \ 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n    var result =\
    \ \"\"\n    for i in 0..<digits.count {\n        result += String(digits[(i +\
    \ shift) % digits.count])\n    }\n    return result", "    var x = x\n    var\
    \ shift = shift\n    var digits = [Int]()\n    while x > 0 {\n        digits.append(x\
    \ % 10)\n        x /= 10\n    }\n    if shift > digits.count {\n        return\
    \ digits.reversed().map { String($0) }.joined()\n    }\n    let shifted = digits[digits.count\
    \ - shift ..< digits.count] + digits[0 ..< digits.count - shift]\n    return shifted.map\
    \ { String($0) }.joined()", "    var x = x\n    var digits = [Int]()\n    while\
    \ x > 0 {\n        digits.append(x % 10)\n        x /= 10\n    }\n    if shift\
    \ > digits.count {\n        return String(digits.reverse())\n    }\n    for _\
    \ in 0..<shift {\n        let d = digits.removeLast()\n        digits.insert(d,\
    \ atIndex: 0)\n    }\n    return String(digits)", "    var x = x\n    var digits\
    \ = [Int]()\n    while x > 0 {\n        digits.append(x % 10)\n        x /= 10\n\
    \    }\n    if shift > digits.count {\n        return String(digits.reverse())\n\
    \    }\n    let shifted = digits[digits.count - shift..<digits.count] + digits[0..<digits.count\
    \ - shift]\n    return String(shifted)"]
stop_tokens:
- "\n}"
