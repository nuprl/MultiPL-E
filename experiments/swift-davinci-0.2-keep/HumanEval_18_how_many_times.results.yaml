language: swift
name: HumanEval_18_how_many_times
results:
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if let range = string.range(of: substring, range: index..<string.endIndex)\
    \ {\n            count += 1\n            index = range.upperBound\n        } else\
    \ {\n            break\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmphv9dtqc_.swift:13:31: error: value of type 'String' has no member\
    \ 'range'\n        if let range = string.range(of: substring, range: index..<string.endIndex)\
    \ {\n                       ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xtcs_ko.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = 0\n    while index < string.count {\n        if let\
    \ range = string.range(of: substring, options: .literal, range: index..<string.endIndex,\
    \ locale: nil) {\n            count += 1\n            index = range.upperBound\n\
    \        } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7_o6_kxx.swift:13:31: error: value of type 'String' has no member\
    \ 'range'\n        if let range = string.range(of: substring, options: .literal,\
    \ range: index..<string.endIndex, locale: nil) {\n                       ~~~~~~\
    \ ^~~~~\n/tmp/tmp7_o6_kxx.swift:13:62: error: cannot infer contextual base in\
    \ reference to member 'literal'\n        if let range = string.range(of: substring,\
    \ options: .literal, range: index..<string.endIndex, locale: nil) {\n        \
    \                                                    ~^~~~~~~\n/tmp/tmp7_o6_kxx.swift:13:111:\
    \ error: 'nil' requires a contextual type\n        if let range = string.range(of:\
    \ substring, options: .literal, range: index..<string.endIndex, locale: nil) {\n\
    \                                                                            \
    \                                  ^\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while start < string.endIndex\
    \ {\n        let range = string.rangeOfString(substring, range: start..<string.endIndex)\n\
    \        if let range = range {\n            count += 1\n            start = range.endIndex\n\
    \        } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpx_clt1jk.swift:13:28: error: value of type 'String' has no member\
    \ 'rangeOfString'\n        let range = string.rangeOfString(substring, range:\
    \ start..<string.endIndex)\n                    ~~~~~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xtcs_ko.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xtcs_ko.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xtcs_ko.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    let\
    \ length = string.characters.count\n    let sublength = substring.characters.count\n\
    \    var count = 0\n    for i in 0..<length {\n        if i + sublength <= length\
    \ {\n            let start = string.index(string.startIndex, offsetBy: i)\n  \
    \          let end = string.index(string.startIndex, offsetBy: i + sublength)\n\
    \            let range = start..<end\n            if string[range] == substring\
    \ {\n                count += 1\n            }\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp8qa78aam.swift:10:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    let length = string.characters.count\n            \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmp8qa78aam.swift:11:31: error: 'characters' is unavailable: Please use String\
    \ directly\n    let sublength = substring.characters.count\n                 \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        let range = string.rangeOfString(substring, range: index..<string.endIndex)\n\
    \        if range != nil {\n            count++\n            index = range!.endIndex\n\
    \        } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpr6zu6yua.swift:13:28: error: value of type 'String' has no member\
    \ 'rangeOfString'\n        let range = string.rangeOfString(substring, range:\
    \ index..<string.endIndex)\n                    ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmpr6zu6yua.swift:15:18:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  count++\n                 ^~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        let range = string.rangeOfString(substring, range: index..<string.endIndex)\n\
    \        if range == nil {\n            break\n        }\n        count++\n  \
    \      index = range!.endIndex\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp1h3cqcz6.swift:13:28: error: value of type 'String' has no member\
    \ 'rangeOfString'\n        let range = string.rangeOfString(substring, range:\
    \ index..<string.endIndex)\n                    ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmp1h3cqcz6.swift:17:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        count++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index != string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp9_shtl11.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xtcs_ko.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        let range = string.rangeOfString(substring, range: index..<string.endIndex)\n\
    \        if range != nil {\n            count++\n            index = range!.endIndex\n\
    \        } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpr6zu6yua.swift:13:28: error: value of type 'String' has no member\
    \ 'rangeOfString'\n        let range = string.rangeOfString(substring, range:\
    \ index..<string.endIndex)\n                    ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmpr6zu6yua.swift:15:18:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  count++\n                 ^~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if let range = string.range(of: substring, range: index..<string.endIndex)\
    \ {\n            count += 1\n            index = range.upperBound\n        } else\
    \ {\n            break\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmphv9dtqc_.swift:13:31: error: value of type 'String' has no member\
    \ 'range'\n        if let range = string.range(of: substring, range: index..<string.endIndex)\
    \ {\n                       ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.substringFromIndex(index).hasPrefix(substring) {\n    \
    \        count += 1\n            index = index.advancedBy(substring.characters.count\
    \ - 1)\n        }\n        index = index.advancedBy(1)\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpu89rac8m.swift:13:19: error: value of type 'String' has no member\
    \ 'substringFromIndex'\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpu89rac8m.swift:15:27: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n            index =\
    \ index.advancedBy(substring.characters.count - 1)\n                    ~~~~~\
    \ ^~~~~~~~~~\n/tmp/tmpu89rac8m.swift:17:23: error: value of type 'String.Index'\
    \ has no member 'advancedBy'\n        index = index.advancedBy(1)\n          \
    \      ~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    return\
    \ string.components(separatedBy: substring).count - 1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzlvsugpa.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    return string.components(separatedBy: substring).count - 1\n\
    \           ~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        let range = string.rangeOfString(substring, range: index..<string.endIndex)\n\
    \        if range != nil {\n            count++\n            index = range!.endIndex\n\
    \        } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpr6zu6yua.swift:13:28: error: value of type 'String' has no member\
    \ 'rangeOfString'\n        let range = string.rangeOfString(substring, range:\
    \ index..<string.endIndex)\n                    ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmpr6zu6yua.swift:15:18:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  count++\n                 ^~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index != string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp9_shtl11.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xtcs_ko.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        let range = string.rangeOfString(substring, range: index..<string.endIndex)\n\
    \        if range == nil {\n            break\n        }\n        count++\n  \
    \      index = range!.endIndex\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp1h3cqcz6.swift:13:28: error: value of type 'String' has no member\
    \ 'rangeOfString'\n        let range = string.rangeOfString(substring, range:\
    \ index..<string.endIndex)\n                    ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmp1h3cqcz6.swift:17:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        count++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xtcs_ko.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if let range = string.range(of: substring, range: index..<string.endIndex)\
    \ {\n            count += 1\n            index = range.upperBound\n        } else\
    \ {\n            break\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmphv9dtqc_.swift:13:31: error: value of type 'String' has no member\
    \ 'range'\n        if let range = string.range(of: substring, range: index..<string.endIndex)\
    \ {\n                       ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while start != string.endIndex\
    \ {\n        if let range = string.rangeOfString(substring, range: start..<string.endIndex)\
    \ {\n            count += 1\n            start = range.endIndex\n        } else\
    \ {\n            break\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpn3bmss94.swift:13:31: error: value of type 'String' has no member\
    \ 'rangeOfString'\n        if let range = string.rangeOfString(substring, range:\
    \ start..<string.endIndex) {\n                       ~~~~~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xtcs_ko.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while start < string.endIndex\
    \ {\n        if let range = string.rangeOfString(substring, range: start..<string.endIndex)\
    \ {\n            count += 1\n            start = range.endIndex\n        } else\
    \ {\n            break\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi3a67kit.swift:13:31: error: value of type 'String' has no member\
    \ 'rangeOfString'\n        if let range = string.rangeOfString(substring, range:\
    \ start..<string.endIndex) {\n                       ~~~~~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xtcs_ko.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var startIndex = string.startIndex\n    while let range = string.range(of:\
    \ substring, options: [], range: startIndex..<string.endIndex, locale: nil) {\n\
    \        count += 1\n        startIndex = range.upperBound\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7qd5sef3.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, options: [], range:\
    \ startIndex..<string.endIndex, locale: nil) {\n                      ~~~~~~ ^~~~~\n\
    /tmp/tmp7qd5sef3.swift:12:109: error: 'nil' requires a contextual type\n    while\
    \ let range = string.range(of: substring, options: [], range: startIndex..<string.endIndex,\
    \ locale: nil) {\n                                                           \
    \                                                 ^\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while start < string.endIndex\
    \ {\n        let range = string.rangeOfString(substring, range: start..<string.endIndex)\n\
    \        if let range = range {\n            count += 1\n            start = range.endIndex\n\
    \        } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpx_clt1jk.swift:13:28: error: value of type 'String' has no member\
    \ 'rangeOfString'\n        let range = string.rangeOfString(substring, range:\
    \ start..<string.endIndex)\n                    ~~~~~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xtcs_ko.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xtcs_ko.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if let range = string.range(of: substring, range: index..<string.endIndex)\
    \ {\n            count += 1\n            index = range.upperBound\n        } else\
    \ {\n            break\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmphv9dtqc_.swift:13:31: error: value of type 'String' has no member\
    \ 'range'\n        if let range = string.range(of: substring, range: index..<string.endIndex)\
    \ {\n                       ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index != string.endIndex\
    \ {\n        let range = string.rangeOfString(substring, range: index..<string.endIndex)\n\
    \        if range != nil {\n            count++\n            index = range!.endIndex\n\
    \        } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp3wsn463m.swift:13:28: error: value of type 'String' has no member\
    \ 'rangeOfString'\n        let range = string.rangeOfString(substring, range:\
    \ index..<string.endIndex)\n                    ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmp3wsn463m.swift:15:18:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  count++\n                 ^~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xtcs_ko.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xtcs_ko.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.rangeOfString(substring, options: nil, range: Range<String.Index>(start:\
    \ index, end: string.endIndex), locale: nil) != nil {\n            count++\n \
    \           index = advance(index, 1)\n        } else {\n            break\n \
    \       }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp6zg431ha.swift:13:19: error: value of type 'String' has no member\
    \ 'rangeOfString'\n        if string.rangeOfString(substring, options: nil, range:\
    \ Range<String.Index>(start: index, end: string.endIndex), locale: nil) != nil\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmp6zg431ha.swift:13:53: error: 'nil'\
    \ requires a contextual type\n        if string.rangeOfString(substring, options:\
    \ nil, range: Range<String.Index>(start: index, end: string.endIndex), locale:\
    \ nil) != nil {\n                                                    ^\n/tmp/tmp6zg431ha.swift:13:65:\
    \ error: referencing initializer 'init(_:)' on 'Range' requires that 'String.Index'\
    \ conform to 'Strideable'\n        if string.rangeOfString(substring, options:\
    \ nil, range: Range<String.Index>(start: index, end: string.endIndex), locale:\
    \ nil) != nil {\n                                                            \
    \    ^\nSwift.Range:1:11: note: where 'Bound' = 'String.Index'\nextension Range\
    \ where Bound : Strideable, Bound.Stride : SignedInteger {\n          ^\n/tmp/tmp6zg431ha.swift:13:111:\
    \ error: extra argument 'end' in call\n        if string.rangeOfString(substring,\
    \ options: nil, range: Range<String.Index>(start: index, end: string.endIndex),\
    \ locale: nil) != nil {\n                                                    \
    \                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~\n/tmp/tmp6zg431ha.swift:13:92:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'ClosedRange<String.Index>'\n        if string.rangeOfString(substring, options:\
    \ nil, range: Range<String.Index>(start: index, end: string.endIndex), locale:\
    \ nil) != nil {\n                                                            \
    \                               ^\n/tmp/tmp6zg431ha.swift:13:130: error: 'nil'\
    \ requires a contextual type\n        if string.rangeOfString(substring, options:\
    \ nil, range: Range<String.Index>(start: index, end: string.endIndex), locale:\
    \ nil) != nil {\n                                                            \
    \                                                        "
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xtcs_ko.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var startIndex = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: startIndex..<string.endIndex) {\n        count += 1\n    \
    \    startIndex = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpu250sk41.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: startIndex..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xtcs_ko.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xtcs_ko.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        let range = string.rangeOfString(substring, range: index..<string.endIndex)\n\
    \        if range != nil {\n            count++\n            index = range!.endIndex\n\
    \        } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpr6zu6yua.swift:13:28: error: value of type 'String' has no member\
    \ 'rangeOfString'\n        let range = string.rangeOfString(substring, range:\
    \ index..<string.endIndex)\n                    ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmpr6zu6yua.swift:15:18:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  count++\n                 ^~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index != string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp9_shtl11.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if let range = string.range(of: substring, range: index..<string.endIndex)\
    \ {\n            count += 1\n            index = range.upperBound\n        } else\
    \ {\n            break\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmphv9dtqc_.swift:13:31: error: value of type 'String' has no member\
    \ 'range'\n        if let range = string.range(of: substring, range: index..<string.endIndex)\
    \ {\n                       ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xtcs_ko.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if let range = string.range(of: substring, range: index..<string.endIndex)\
    \ {\n            count += 1\n            index = range.upperBound\n        } else\
    \ {\n            break\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmphv9dtqc_.swift:13:31: error: value of type 'String' has no member\
    \ 'range'\n        if let range = string.range(of: substring, range: index..<string.endIndex)\
    \ {\n                       ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xtcs_ko.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xtcs_ko.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    return\
    \ string.components(separatedBy: substring).count - 1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzlvsugpa.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    return string.components(separatedBy: substring).count - 1\n\
    \           ~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        let range = index..<string.endIndex\n        if let found = string.range(of:\
    \ substring, options: .caseInsensitive, range: range, locale: nil) {\n       \
    \     count += 1\n            index = found.upperBound\n        } else {\n   \
    \         break\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp1un1pw4a.swift:14:31: error: value of type 'String' has no member\
    \ 'range'\n        if let found = string.range(of: substring, options: .caseInsensitive,\
    \ range: range, locale: nil) {\n                       ~~~~~~ ^~~~~\n/tmp/tmp1un1pw4a.swift:14:62:\
    \ error: cannot infer contextual base in reference to member 'caseInsensitive'\n\
    \        if let found = string.range(of: substring, options: .caseInsensitive,\
    \ range: range, locale: nil) {\n                                             \
    \               ~^~~~~~~~~~~~~~~\n/tmp/tmp1un1pw4a.swift:14:101: error: 'nil'\
    \ requires a contextual type\n        if let found = string.range(of: substring,\
    \ options: .caseInsensitive, range: range, locale: nil) {\n                  \
    \                                                                            \
    \      ^\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xtcs_ko.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xtcs_ko.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xtcs_ko.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while start < string.endIndex\
    \ {\n        if let range = string.rangeOfString(substring, range: start..<string.endIndex)\
    \ {\n            count += 1\n            start = range.endIndex\n        } else\
    \ {\n            break\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi3a67kit.swift:13:31: error: value of type 'String' has no member\
    \ 'rangeOfString'\n        if let range = string.rangeOfString(substring, range:\
    \ start..<string.endIndex) {\n                       ~~~~~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xtcs_ko.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xtcs_ko.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        let range = string.rangeOfString(substring, range: index..<string.endIndex)\n\
    \        if range != nil {\n            count++\n            index = range!.endIndex\n\
    \        } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpr6zu6yua.swift:13:28: error: value of type 'String' has no member\
    \ 'rangeOfString'\n        let range = string.rangeOfString(substring, range:\
    \ index..<string.endIndex)\n                    ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmpr6zu6yua.swift:15:18:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  count++\n                 ^~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    if\
    \ string.isEmpty || substring.isEmpty {\n        return 0\n    }\n    var count\
    \ = 0\n    var index = string.startIndex\n    while index < string.endIndex {\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n            count\
    \ += 1\n            index = string.index(index, offsetBy: substring.count)\n \
    \       } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpb6hour73.swift:16:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while start < string.endIndex\
    \ {\n        if let range = string.rangeOfString(substring, range: start..<string.endIndex)\
    \ {\n            count += 1\n            start = range.endIndex\n        } else\
    \ {\n            break\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi3a67kit.swift:13:31: error: value of type 'String' has no member\
    \ 'rangeOfString'\n        if let range = string.rangeOfString(substring, range:\
    \ start..<string.endIndex) {\n                       ~~~~~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        let range = string.rangeOfString(substring, range: index..<string.endIndex)\n\
    \        if range != nil {\n            count++\n            index = range!.endIndex\n\
    \        } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpr6zu6yua.swift:13:28: error: value of type 'String' has no member\
    \ 'rangeOfString'\n        let range = string.rangeOfString(substring, range:\
    \ index..<string.endIndex)\n                    ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmpr6zu6yua.swift:15:18:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  count++\n                 ^~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xtcs_ko.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: -4
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    var end = string.index(start,\
    \ offsetBy: substring.count)\n    while end <= string.endIndex {\n        if string[start..<end]\
    \ == substring {\n            count += 1\n        }\n        start = string.index(after:\
    \ start)\n        end = string.index(after: end)\n    }\n    return count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: Exception
  stderr: 'Swift/StringCharacterView.swift:153: Fatal error: String index is out of
    bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002af768bf1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af7688e8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af7688e8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af7688e813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af7688e7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002af768a1bb0d <unavailable> + 2693901

    6    tmpqftn_bm8                        0x000055ecf4ac5b5d <unavailable> + 7005

    7    tmpqftn_bm8                        0x000055ecf4ac56f0 <unavailable> + 5872

    8    libc.so.6                          0x00002af768ddd460 __libc_start_main +
    245

    9    tmpqftn_bm8                        0x000055ecf4ac53c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index != string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp9_shtl11.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if let range = string.range(of: substring, range: index..<string.endIndex)\
    \ {\n            count += 1\n            index = range.upperBound\n        } else\
    \ {\n            break\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmphv9dtqc_.swift:13:31: error: value of type 'String' has no member\
    \ 'range'\n        if let range = string.range(of: substring, range: index..<string.endIndex)\
    \ {\n                       ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xtcs_ko.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    return\
    \ string.components(separatedBy: substring).count - 1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzlvsugpa.swift:10:19: error: value of type 'String' has no member\
    \ 'components'\n    return string.components(separatedBy: substring).count - 1\n\
    \           ~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        let range = string.rangeOfString(substring, range: index..<string.endIndex)\n\
    \        if range != nil {\n            count++\n            index = range!.endIndex\n\
    \        } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpr6zu6yua.swift:13:28: error: value of type 'String' has no member\
    \ 'rangeOfString'\n        let range = string.rangeOfString(substring, range:\
    \ index..<string.endIndex)\n                    ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmpr6zu6yua.swift:15:18:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  count++\n                 ^~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.substringFromIndex(index).hasPrefix(substring) {\n    \
    \        count += 1\n            index = index.advancedBy(substring.characters.count\
    \ - 1)\n        }\n        index = index.advancedBy(1)\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpu89rac8m.swift:13:19: error: value of type 'String' has no member\
    \ 'substringFromIndex'\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpu89rac8m.swift:15:27: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n            index =\
    \ index.advancedBy(substring.characters.count - 1)\n                    ~~~~~\
    \ ^~~~~~~~~~\n/tmp/tmpu89rac8m.swift:17:23: error: value of type 'String.Index'\
    \ has no member 'advancedBy'\n        index = index.advancedBy(1)\n          \
    \      ~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var last_index = string.startIndex\n    while let index = string.range(of:\
    \ substring, range: last_index..<string.endIndex)?.lowerBound {\n        count\
    \ += 1\n        last_index = index\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpf7qc1811.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let index = string.range(of: substring, range: last_index..<string.endIndex)?.lowerBound\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xtcs_ko.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xtcs_ko.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xtcs_ko.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xtcs_ko.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xtcs_ko.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while start < string.endIndex\
    \ {\n        if let range = string.rangeOfString(substring, range: start..<string.endIndex)\
    \ {\n            count += 1\n            start = range.endIndex\n        } else\
    \ {\n            break\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi3a67kit.swift:13:31: error: value of type 'String' has no member\
    \ 'rangeOfString'\n        if let range = string.rangeOfString(substring, range:\
    \ start..<string.endIndex) {\n                       ~~~~~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        let range = string.rangeOfString(substring, options: .LiteralSearch,\
    \ range: index..<string.endIndex, locale: nil)\n        if let range = range {\n\
    \            count += 1\n            index = range.endIndex\n        } else {\n\
    \            break\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpagwhwc6t.swift:13:28: error: value of type 'String' has no member\
    \ 'rangeOfString'\n        let range = string.rangeOfString(substring, options:\
    \ .LiteralSearch, range: index..<string.endIndex, locale: nil)\n             \
    \       ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmpagwhwc6t.swift:13:63: error: cannot infer\
    \ contextual base in reference to member 'LiteralSearch'\n        let range =\
    \ string.rangeOfString(substring, options: .LiteralSearch, range: index..<string.endIndex,\
    \ locale: nil)\n                                                             ~^~~~~~~~~~~~~\n\
    /tmp/tmpagwhwc6t.swift:13:118: error: 'nil' requires a contextual type\n     \
    \   let range = string.rangeOfString(substring, options: .LiteralSearch, range:\
    \ index..<string.endIndex, locale: nil)\n                                    \
    \                                                                            \
    \     ^\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if let range = string.range(of: substring, range: index..<string.endIndex)\
    \ {\n            count += 1\n            index = range.upperBound\n        } else\
    \ {\n            break\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmphv9dtqc_.swift:13:31: error: value of type 'String' has no member\
    \ 'range'\n        if let range = string.range(of: substring, range: index..<string.endIndex)\
    \ {\n                       ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xtcs_ko.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xtcs_ko.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xtcs_ko.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    if\
    \ string.isEmpty || substring.isEmpty {\n        return 0\n    }\n    var count\
    \ = 0\n    for i in 0..<string.count {\n        if string[i...].hasPrefix(substring)\
    \ {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpojs13rn5.swift:15:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an integer range, use a String.Index range instead.\n\
    \        if string[i...].hasPrefix(substring) {\n           ^~~~~~~~~~~~\nSwift.String:5:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript<R>(bounds: R) -> String where R : RangeExpression, R.Bound == Int\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xtcs_ko.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.substringFromIndex(index).hasPrefix(substring) {\n    \
    \        count += 1\n            index = index.advancedBy(substring.characters.count)\n\
    \        } else {\n            index = index.advancedBy(1)\n        }\n    }\n\
    \    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmps7kx60_0.swift:13:19: error: value of type 'String' has no member\
    \ 'substringFromIndex'\n        if string.substringFromIndex(index).hasPrefix(substring)\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmps7kx60_0.swift:15:27: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n            index =\
    \ index.advancedBy(substring.characters.count)\n                    ~~~~~ ^~~~~~~~~~\n\
    /tmp/tmps7kx60_0.swift:17:27: error: value of type 'String.Index' has no member\
    \ 'advancedBy'\n            index = index.advancedBy(1)\n                    ~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        let range = string.rangeOfString(substring, range: index..<string.endIndex)\n\
    \        if range == nil {\n            break\n        }\n        count++\n  \
    \      index = range!.endIndex\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp1h3cqcz6.swift:13:28: error: value of type 'String' has no member\
    \ 'rangeOfString'\n        let range = string.rangeOfString(substring, range:\
    \ index..<string.endIndex)\n                    ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmp1h3cqcz6.swift:17:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        count++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index != string.endIndex\
    \ {\n        let range = string.rangeOfString(substring, range: index..<string.endIndex)\n\
    \        if range != nil {\n            count++\n            index = range!.endIndex\n\
    \        } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp3wsn463m.swift:13:28: error: value of type 'String' has no member\
    \ 'rangeOfString'\n        let range = string.rangeOfString(substring, range:\
    \ index..<string.endIndex)\n                    ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmp3wsn463m.swift:15:18:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  count++\n                 ^~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xtcs_ko.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        let range = string.rangeOfString(substring, options: [], range: index..<string.endIndex,\
    \ locale: nil)\n        if range != nil {\n            count++\n            index\
    \ = range!.endIndex\n        } else {\n            break\n        }\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpmehki7k8.swift:13:28: error: value of type 'String' has no member\
    \ 'rangeOfString'\n        let range = string.rangeOfString(substring, options:\
    \ [], range: index..<string.endIndex, locale: nil)\n                    ~~~~~~\
    \ ^~~~~~~~~~~~~\n/tmp/tmpmehki7k8.swift:13:106: error: 'nil' requires a contextual\
    \ type\n        let range = string.rangeOfString(substring, options: [], range:\
    \ index..<string.endIndex, locale: nil)\n                                    \
    \                                                                     ^\n/tmp/tmpmehki7k8.swift:15:18:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  count++\n                 ^~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xtcs_ko.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xtcs_ko.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: index..<string.endIndex) {\n        count += 1\n        index\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpur58l1kc.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: index..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        let range = string.rangeOfString(substring, range: index..<string.endIndex)\n\
    \        if range != nil {\n            count++\n            index = range!.endIndex\n\
    \        } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpr6zu6yua.swift:13:28: error: value of type 'String' has no member\
    \ 'rangeOfString'\n        let range = string.rangeOfString(substring, range:\
    \ index..<string.endIndex)\n                    ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmpr6zu6yua.swift:15:18:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  count++\n                 ^~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xtcs_ko.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var str = string\n    while let range = str.range(of: substring)\
    \ {\n        str = str.replacingCharacters(in: range, with: \"\")\n        count\
    \ += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpdo2b_rgp.swift:12:27: error: value of type 'String' has no member\
    \ 'range'\n    while let range = str.range(of: substring) {\n                \
    \      ~~~ ^~~~~\n/tmp/tmpdo2b_rgp.swift:13:19: error: value of type 'String'\
    \ has no member 'replacingCharacters'\n        str = str.replacingCharacters(in:\
    \ range, with: \"\")\n              ~~~ ^~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while start < string.endIndex\
    \ {\n        if let range = string.rangeOfString(substring, range: start..<string.endIndex)\
    \ {\n            count += 1\n            start = range.endIndex\n        } else\
    \ {\n            break\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi3a67kit.swift:13:31: error: value of type 'String' has no member\
    \ 'rangeOfString'\n        if let range = string.rangeOfString(substring, range:\
    \ start..<string.endIndex) {\n                       ~~~~~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        let range = string.rangeOfString(substring, range: index..<string.endIndex)\n\
    \        if range != nil {\n            count++\n            index = range!.endIndex\n\
    \        } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpr6zu6yua.swift:13:28: error: value of type 'String' has no member\
    \ 'rangeOfString'\n        let range = string.rangeOfString(substring, range:\
    \ index..<string.endIndex)\n                    ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmpr6zu6yua.swift:15:18:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  count++\n                 ^~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        let range = string.rangeOfString(substring, range: index..<string.endIndex)\n\
    \        if range != nil {\n            count++\n            index = range!.endIndex\n\
    \        } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpr6zu6yua.swift:13:28: error: value of type 'String' has no member\
    \ 'rangeOfString'\n        let range = string.rangeOfString(substring, range:\
    \ index..<string.endIndex)\n                    ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmpr6zu6yua.swift:15:18:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  count++\n                 ^~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while start < string.endIndex\
    \ {\n        if let range = string.rangeOfString(substring, range: start..<string.endIndex)\
    \ {\n            count += 1\n            start = range.endIndex\n        } else\
    \ {\n            break\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi3a67kit.swift:13:31: error: value of type 'String' has no member\
    \ 'rangeOfString'\n        if let range = string.rangeOfString(substring, range:\
    \ start..<string.endIndex) {\n                       ~~~~~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xtcs_ko.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        let range = string.rangeOfString(substring, range: index..<string.endIndex)\n\
    \        if range != nil {\n            count++\n            index = range!.endIndex\n\
    \        } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpr6zu6yua.swift:13:28: error: value of type 'String' has no member\
    \ 'rangeOfString'\n        let range = string.rangeOfString(substring, range:\
    \ index..<string.endIndex)\n                    ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmpr6zu6yua.swift:15:18:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  count++\n                 ^~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xtcs_ko.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xtcs_ko.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xtcs_ko.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xtcs_ko.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        let range = string.rangeOfString(substring, range: index..<string.endIndex)\n\
    \        if range != nil {\n            count++\n            index = range!.endIndex\n\
    \        } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpr6zu6yua.swift:13:28: error: value of type 'String' has no member\
    \ 'rangeOfString'\n        let range = string.rangeOfString(substring, range:\
    \ index..<string.endIndex)\n                    ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmpr6zu6yua.swift:15:18:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  count++\n                 ^~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = 0\n    while index < string.count {\n        let\
    \ range = string.range(of: substring, options: .literal, range: index..<string.endIndex,\
    \ locale: nil)\n        if let range = range {\n            count += 1\n     \
    \       index = range.upperBound\n        } else {\n            break\n      \
    \  }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpt_7c59q0.swift:13:28: error: value of type 'String' has no member\
    \ 'range'\n        let range = string.range(of: substring, options: .literal,\
    \ range: index..<string.endIndex, locale: nil)\n                    ~~~~~~ ^~~~~\n\
    /tmp/tmpt_7c59q0.swift:13:59: error: cannot infer contextual base in reference\
    \ to member 'literal'\n        let range = string.range(of: substring, options:\
    \ .literal, range: index..<string.endIndex, locale: nil)\n                   \
    \                                      ~^~~~~~~\n/tmp/tmpt_7c59q0.swift:13:108:\
    \ error: 'nil' requires a contextual type\n        let range = string.range(of:\
    \ substring, options: .literal, range: index..<string.endIndex, locale: nil)\n\
    \                                                                            \
    \                               ^\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xtcs_ko.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if let range = string.range(of: substring, range: index..<string.endIndex)\
    \ {\n            count += 1\n            index = range.upperBound\n        } else\
    \ {\n            break\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmphv9dtqc_.swift:13:31: error: value of type 'String' has no member\
    \ 'range'\n        if let range = string.range(of: substring, range: index..<string.endIndex)\
    \ {\n                       ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xtcs_ko.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xtcs_ko.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xtcs_ko.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xtcs_ko.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        let range = string.rangeOfString(substring, range: index..<string.endIndex)\n\
    \        if range == nil {\n            break\n        }\n        count++\n  \
    \      index = range!.endIndex\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp1h3cqcz6.swift:13:28: error: value of type 'String' has no member\
    \ 'rangeOfString'\n        let range = string.rangeOfString(substring, range:\
    \ index..<string.endIndex)\n                    ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmp1h3cqcz6.swift:17:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        count++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xtcs_ko.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var startIndex = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: startIndex..<string.endIndex) {\n        count += 1\n    \
    \    startIndex = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpu250sk41.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: startIndex..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if let range = string.range(of: substring, range: index..<string.endIndex)\
    \ {\n            count += 1\n            index = range.upperBound\n        } else\
    \ {\n            break\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmphv9dtqc_.swift:13:31: error: value of type 'String' has no member\
    \ 'range'\n        if let range = string.range(of: substring, range: index..<string.endIndex)\
    \ {\n                       ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index != string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp9_shtl11.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        let range = string.rangeOfString(substring, range: index..<string.endIndex)\n\
    \        if range != nil {\n            count++\n            index = range!.endIndex\n\
    \        } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpr6zu6yua.swift:13:28: error: value of type 'String' has no member\
    \ 'rangeOfString'\n        let range = string.rangeOfString(substring, range:\
    \ index..<string.endIndex)\n                    ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmpr6zu6yua.swift:15:18:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  count++\n                 ^~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xtcs_ko.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        let range = string.rangeOfString(substring, range: index..<string.endIndex)\n\
    \        if range == nil {\n            break\n        }\n        count++\n  \
    \      index = range!.endIndex\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp1h3cqcz6.swift:13:28: error: value of type 'String' has no member\
    \ 'rangeOfString'\n        let range = string.rangeOfString(substring, range:\
    \ index..<string.endIndex)\n                    ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmp1h3cqcz6.swift:17:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        count++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        let range = string.rangeOfString(substring, range: index..<string.endIndex)\n\
    \        if range == nil {\n            break\n        }\n        count++\n  \
    \      index = range!.endIndex\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp1h3cqcz6.swift:13:28: error: value of type 'String' has no member\
    \ 'rangeOfString'\n        let range = string.rangeOfString(substring, range:\
    \ index..<string.endIndex)\n                    ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmp1h3cqcz6.swift:17:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        count++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        let range = string.rangeOfString(substring, range: index..<string.endIndex)\n\
    \        if range != nil {\n            count++\n            index = range!.endIndex\n\
    \        } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpr6zu6yua.swift:13:28: error: value of type 'String' has no member\
    \ 'rangeOfString'\n        let range = string.rangeOfString(substring, range:\
    \ index..<string.endIndex)\n                    ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmpr6zu6yua.swift:15:18:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  count++\n                 ^~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    let\
    \ length = string.characters.count\n    let sublength = substring.characters.count\n\
    \    var count = 0\n    var i = 0\n    while i < length {\n        if string[i..<i+sublength]\
    \ == substring {\n            count += 1\n            i += sublength\n       \
    \ } else {\n            i += 1\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp6t61zlg1.swift:10:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    let length = string.characters.count\n            \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmp6t61zlg1.swift:11:31: error: 'characters' is unavailable: Please use String\
    \ directly\n    let sublength = substring.characters.count\n                 \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp6t61zlg1.swift:15:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an integer range, use a String.Index range instead.\n\
    \        if string[i..<i+sublength] == substring {\n           ^~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    if\
    \ string.isEmpty || substring.isEmpty {\n        return 0\n    }\n    var count\
    \ = 0\n    var index = string.startIndex\n    while index < string.endIndex {\n\
    \        if string.hasPrefix(substring, offset: index) {\n            count +=\
    \ 1\n            index = string.index(index, offsetBy: substring.count)\n    \
    \    } else {\n            index = string.index(after: index)\n        }\n   \
    \ }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpdvxvqvv3.swift:16:48: error: extra argument 'offset' in call\n\
    \        if string.hasPrefix(substring, offset: index) {\n                   \
    \        ~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xtcs_ko.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xtcs_ko.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        let range = string.rangeOfString(substring, range: index..<string.endIndex)\n\
    \        if range != nil {\n            count++\n            index = range!.endIndex\n\
    \        } else {\n            break\n        }\n    }\n    return count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(how_many_times(string: \"\", substring: \"x\"\
    ) == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\n\
    assert(how_many_times(string: \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string:\
    \ \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpr6zu6yua.swift:13:28: error: value of type 'String' has no member\
    \ 'rangeOfString'\n        let range = string.rangeOfString(substring, range:\
    \ index..<string.endIndex)\n                    ~~~~~~ ^~~~~~~~~~~~~\n/tmp/tmpr6zu6yua.swift:15:18:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  count++\n                 ^~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xtcs_ko.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xtcs_ko.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var start = string.startIndex\n    while let range = string.range(of:\
    \ substring, range: start..<string.endIndex) {\n        count += 1\n        start\
    \ = range.upperBound\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\nassert(how_many_times(string:\
    \ \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\"\
    , substring: \"cac\") == 4)\nassert(how_many_times(string: \"john doe\", substring:\
    \ \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp7xtcs_ko.swift:12:30: error: value of type 'String' has no member\
    \ 'range'\n    while let range = string.range(of: substring, range: start..<string.endIndex)\
    \ {\n                      ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if let range = string.range(of: substring, range: index..<string.endIndex)\
    \ {\n            count += 1\n            index = range.upperBound\n        } else\
    \ {\n            break\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(how_many_times(string: \"\", substring: \"x\") == 0)\n\
    assert(how_many_times(string: \"xyxyxyx\", substring: \"x\") == 4)\nassert(how_many_times(string:\
    \ \"cacacacac\", substring: \"cac\") == 4)\nassert(how_many_times(string: \"john\
    \ doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmphv9dtqc_.swift:13:31: error: value of type 'String' has no member\
    \ 'range'\n        if let range = string.range(of: substring, range: index..<string.endIndex)\
    \ {\n                       ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index != string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp9_shtl11.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
- exit_code: 1
  program: "\n/// Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n/// >>> how_many_times('', 'a')\n/// 0\n///\
    \ >>> how_many_times('aaa', 'a')\n/// 3\n/// >>> how_many_times('aaaa', 'aa')\n\
    /// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    var\
    \ count = 0\n    var index = string.startIndex\n    while index < string.endIndex\
    \ {\n        if string.hasPrefix(substring, startingAt: index) {\n           \
    \ count += 1\n            index = string.index(index, offsetBy: substring.count)\n\
    \        } else {\n            index = string.index(after: index)\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(how_many_times(string:\
    \ \"\", substring: \"x\") == 0)\nassert(how_many_times(string: \"xyxyxyx\", substring:\
    \ \"x\") == 4)\nassert(how_many_times(string: \"cacacacac\", substring: \"cac\"\
    ) == 4)\nassert(how_many_times(string: \"john doe\", substring: \"john\") == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpzvfojgsm.swift:13:52: error: extra argument 'startingAt' in call\n\
    \        if string.hasPrefix(substring, startingAt: index) {\n               \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824821
