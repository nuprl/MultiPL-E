language: swift
name: HumanEval_116_sort_array
results:
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted {\n        let a = String($0, radix: 2).filter\
    \ { $0 == \"1\" }.count\n        let b = String($1, radix: 2).filter { $0 == \"\
    1\" }.count\n        return a == b ? $0 < $1 : a < b\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted {\n        let a = String($0, radix: 2)\n\
    \        let b = String($1, radix: 2)\n        return a.filter { $0 == \"1\" }.count\
    \ == b.filter { $0 == \"1\" }.count ? $0 < $1 : a.filter { $0 == \"1\" }.count\
    \ < b.filter { $0 == \"1\" }.count\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted {\n        let aOnes = $0.nonzeroBitCount\n\
    \        let bOnes = $1.nonzeroBitCount\n        if aOnes == bOnes {\n       \
    \     return $0 < $1\n        }\n        return aOnes < bOnes\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp2o_15kqi/tmp2o_15kqi.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6ecc2cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6ec923b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6ec923988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6ec9227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2o_15kqi                        0x0000564635e4f59b <unavailable> + 5531

    5    libc.so.6                          0x00002ad6ece18460 __libc_start_main +
    245

    6    tmp2o_15kqi                        0x0000564635e4f039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aBinary =\
    \ String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n        let\
    \ aOnes = aBinary.filter { $0 == \"1\" }.count\n        let bOnes = bBinary.filter\
    \ { $0 == \"1\" }.count\n        if aOnes == bOnes {\n            return a < b\n\
    \        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpvsfzj76r/tmpvsfzj76r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fed64dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fed344b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fed344988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fed3437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvsfzj76r                        0x000055fd7521b59b <unavailable> + 5531

    5    libc.so.6                          0x00002b5fed839460 __libc_start_main +
    245

    6    tmpvsfzj76r                        0x000055fd7521b039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.numberOfOnes\n\
    \        let bOnes = b.numberOfOnes\n        if aOnes == bOnes {\n           \
    \ return a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmp8xn6ab4d.swift:11:23: error: value of type 'Int' has no member\
    \ 'numberOfOnes'\n        let aOnes = a.numberOfOnes\n                    ~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824649
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aBinary =\
    \ String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n        if aBinary.characters.filter({\
    \ $0 == \"1\" }).count == bBinary.characters.filter({ $0 == \"1\" }).count {\n\
    \            return a < b\n        }\n        return aBinary.characters.filter({\
    \ $0 == \"1\" }).count < bBinary.characters.filter({ $0 == \"1\" }).count\n  \
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3,\
    \ 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4,\
    \ -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\
    assert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp45rqrz8a.swift:13:20: error: 'characters' is unavailable: Please\
    \ use String directly\n        if aBinary.characters.filter({ $0 == \"1\" }).count\
    \ == bBinary.characters.filter({ $0 == \"1\" }).count {\n                   ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp45rqrz8a.swift:13:70:\
    \ error: 'characters' is unavailable: Please use String directly\n        if aBinary.characters.filter({\
    \ $0 == \"1\" }).count == bBinary.characters.filter({ $0 == \"1\" }).count {\n\
    \                                                                     ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp45rqrz8a.swift:16:24:\
    \ error: 'characters' is unavailable: Please use String directly\n        return\
    \ aBinary.characters.filter({ $0 == \"1\" }).count < bBinary.characters.filter({\
    \ $0 == \"1\" }).count\n                       ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp45rqrz8a.swift:16:73: error: 'characters'\
    \ is unavailable: Please use String directly\n        return aBinary.characters.filter({\
    \ $0 == \"1\" }).count < bBinary.characters.filter({ $0 == \"1\" }).count\n  \
    \                                                                      ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted {\n        let a = String($0, radix: 2)\n\
    \        let b = String($1, radix: 2)\n        if a.filter({ $0 == \"1\" }).count\
    \ == b.filter({ $0 == \"1\" }).count {\n            return $0 < $1\n        }\n\
    \        return a.filter({ $0 == \"1\" }).count < b.filter({ $0 == \"1\" }).count\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpvsfzj76r/tmpvsfzj76r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fed64dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fed344b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fed344988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fed3437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvsfzj76r                        0x000055fd7521b59b <unavailable> + 5531

    5    libc.so.6                          0x00002b5fed839460 __libc_start_main +
    245

    6    tmpvsfzj76r                        0x000055fd7521b039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted(by: {\n        let a = String($0, radix: 2)\n\
    \        let b = String($1, radix: 2)\n        return a.filter({ $0 == \"1\" }).count\
    \ < b.filter({ $0 == \"1\" }).count\n    })\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpzhfx_74w/tmpzhfx_74w.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1080c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae107dbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae107dba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae107db97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzhfx_74w                        0x00005570c266f714 <unavailable> + 5908

    5    libc.so.6                          0x00002ae1082af460 __libc_start_main +
    245

    6    tmpzhfx_74w                        0x00005570c266f2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpvsfzj76r/tmpvsfzj76r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fed64dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fed344b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fed344988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fed3437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvsfzj76r                        0x000055fd7521b59b <unavailable> + 5531

    5    libc.so.6                          0x00002b5fed839460 __libc_start_main +
    245

    6    tmpvsfzj76r                        0x000055fd7521b039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var sorted = arr.sorted { (a, b) -> Bool in\n        let aBinary\
    \ = String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n        return\
    \ aBinary.filter { $0 == \"1\" }.count < bBinary.filter { $0 == \"1\" }.count\n\
    \    }\n    sorted.sort { (a, b) -> Bool in\n        let aBinary = String(a, radix:\
    \ 2)\n        let bBinary = String(b, radix: 2)\n        return aBinary.filter\
    \ { $0 == \"1\" }.count == bBinary.filter { $0 == \"1\" }.count ? a < b : false\n\
    \    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted(by: {\n        let a = String($0, radix: 2).filter({\
    \ $0 == \"1\" }).count\n        let b = String($1, radix: 2).filter({ $0 == \"\
    1\" }).count\n        return a == b ? $0 < $1 : a < b\n    })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aBinary =\
    \ String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n        let\
    \ aOnes = aBinary.filter { $0 == \"1\" }.count\n        let bOnes = bBinary.filter\
    \ { $0 == \"1\" }.count\n        if aOnes == bOnes {\n            return a < b\n\
    \        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted(by: { (a, b) -> Bool in\n        let a1 =\
    \ String(a, radix: 2).filter { $0 == \"1\" }.count\n        let b1 = String(b,\
    \ radix: 2).filter { $0 == \"1\" }.count\n        return a1 < b1 || (a1 == b1\
    \ && a < b)\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted {\n        let a = String($0, radix: 2)\n\
    \        let b = String($1, radix: 2)\n        return a.filter { $0 == \"1\" }.count\
    \ == b.filter { $0 == \"1\" }.count ? $0 < $1 : a.filter { $0 == \"1\" }.count\
    \ < b.filter { $0 == \"1\" }.count\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.onesInBinary()\n\
    \        let bOnes = b.onesInBinary()\n        if aOnes == bOnes {\n         \
    \   return a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmphloqz3a2.swift:11:23: error: value of type 'Int' has no member\
    \ 'onesInBinary'\n        let aOnes = a.onesInBinary()\n                    ~\
    \ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aBinary =\
    \ String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n        let\
    \ aOnes = aBinary.filter { $0 == \"1\" }.count\n        let bOnes = bBinary.filter\
    \ { $0 == \"1\" }.count\n        if aOnes == bOnes {\n            return a < b\n\
    \        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted {\n        let a = String($0, radix: 2).filter\
    \ { $0 == \"1\" }.count\n        let b = String($1, radix: 2).filter { $0 == \"\
    1\" }.count\n        return a == b ? $0 < $1 : a < b\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aBinary =\
    \ String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n        let\
    \ aOnes = aBinary.filter { $0 == \"1\" }.count\n        let bOnes = bBinary.filter\
    \ { $0 == \"1\" }.count\n        if aOnes == bOnes {\n            return a < b\n\
    \        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aBinary =\
    \ String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n        let\
    \ aOnes = aBinary.filter { $0 == \"1\" }.count\n        let bOnes = bBinary.filter\
    \ { $0 == \"1\" }.count\n        if aOnes == bOnes {\n            return a < b\n\
    \        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aBinary =\
    \ String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n        let\
    \ aOnes = aBinary.filter { $0 == \"1\" }.count\n        let bOnes = bBinary.filter\
    \ { $0 == \"1\" }.count\n        if aOnes == bOnes {\n            return a < b\n\
    \        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted {\n        let a = String($0, radix: 2).filter\
    \ { $0 == \"1\" }.count\n        let b = String($1, radix: 2).filter { $0 == \"\
    1\" }.count\n        return a == b ? $0 < $1 : a < b\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted(by: { (a, b) -> Bool in\n        let aOnes\
    \ = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n        if aOnes\
    \ == bOnes {\n            return a < b\n        }\n        return aOnes < bOnes\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpzepdqxh9/tmpzepdqxh9.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5107115c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5106e0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5106e0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5106e0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzepdqxh9                        0x000055a9a868859b <unavailable> + 5531

    5    libc.so.6                          0x00002b5107301460 __libc_start_main +
    245

    6    tmpzepdqxh9                        0x000055a9a8688039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpvsfzj76r/tmpvsfzj76r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fed64dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fed344b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fed344988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fed3437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvsfzj76r                        0x000055fd7521b59b <unavailable> + 5531

    5    libc.so.6                          0x00002b5fed839460 __libc_start_main +
    245

    6    tmpvsfzj76r                        0x000055fd7521b039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpvsfzj76r/tmpvsfzj76r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fed64dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fed344b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fed344988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fed3437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvsfzj76r                        0x000055fd7521b59b <unavailable> + 5531

    5    libc.so.6                          0x00002b5fed839460 __libc_start_main +
    245

    6    tmpvsfzj76r                        0x000055fd7521b039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted(by: { (a, b) -> Bool in\n        let aOnes\
    \ = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n        if aOnes\
    \ == bOnes {\n            return a < b\n        }\n        return aOnes < bOnes\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpzepdqxh9/tmpzepdqxh9.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5107115c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5106e0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5106e0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5106e0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzepdqxh9                        0x000055a9a868859b <unavailable> + 5531

    5    libc.so.6                          0x00002b5107301460 __libc_start_main +
    245

    6    tmpzepdqxh9                        0x000055a9a8688039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpvsfzj76r/tmpvsfzj76r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fed64dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fed344b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fed344988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fed3437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvsfzj76r                        0x000055fd7521b59b <unavailable> + 5531

    5    libc.so.6                          0x00002b5fed839460 __libc_start_main +
    245

    6    tmpvsfzj76r                        0x000055fd7521b039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted(by: { (a, b) -> Bool in\n        let aBin\
    \ = String(a, radix: 2)\n        let bBin = String(b, radix: 2)\n        if aBin.filter({\
    \ $0 == \"1\" }).count == bBin.filter({ $0 == \"1\" }).count {\n            return\
    \ a < b\n        }\n        return aBin.filter({ $0 == \"1\" }).count < bBin.filter({\
    \ $0 == \"1\" }).count\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpvsfzj76r/tmpvsfzj76r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fed64dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fed344b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fed344988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fed3437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvsfzj76r                        0x000055fd7521b59b <unavailable> + 5531

    5    libc.so.6                          0x00002b5fed839460 __libc_start_main +
    245

    6    tmpvsfzj76r                        0x000055fd7521b039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted(by: {\n        let a = String($0, radix: 2).filter\
    \ { $0 == \"1\" }.count\n        let b = String($1, radix: 2).filter { $0 == \"\
    1\" }.count\n        return a == b ? $0 < $1 : a < b\n    })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted(by: { (a, b) -> Bool in\n        let aOnes\
    \ = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n        if aOnes\
    \ == bOnes {\n            return a < b\n        }\n        return aOnes < bOnes\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpzepdqxh9/tmpzepdqxh9.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5107115c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5106e0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5106e0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5106e0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzepdqxh9                        0x000055a9a868859b <unavailable> + 5531

    5    libc.so.6                          0x00002b5107301460 __libc_start_main +
    245

    6    tmpzepdqxh9                        0x000055a9a8688039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted(by: { (a, b) -> Bool in\n        let aOnes\
    \ = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n        if aOnes\
    \ == bOnes {\n            return a < b\n        }\n        return aOnes < bOnes\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpzepdqxh9/tmpzepdqxh9.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5107115c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5106e0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5106e0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5106e0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzepdqxh9                        0x000055a9a868859b <unavailable> + 5531

    5    libc.so.6                          0x00002b5107301460 __libc_start_main +
    245

    6    tmpzepdqxh9                        0x000055a9a8688039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aBinary =\
    \ String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n        if aBinary.filter({\
    \ $0 == \"1\" }).count == bBinary.filter({ $0 == \"1\" }).count {\n          \
    \  return a < b\n        }\n        return aBinary.filter({ $0 == \"1\" }).count\
    \ < bBinary.filter({ $0 == \"1\" }).count\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aBinary =\
    \ String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n        let\
    \ aOnes = aBinary.filter { $0 == \"1\" }.count\n        let bOnes = bBinary.filter\
    \ { $0 == \"1\" }.count\n        if aOnes == bOnes {\n            return a < b\n\
    \        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted(by: {\n        let count1 = $0.nonzeroBitCount\n\
    \        let count2 = $1.nonzeroBitCount\n        if count1 == count2 {\n    \
    \        return $0 < $1\n        }\n        return count1 < count2\n    })\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpkm2t1qp7/tmpkm2t1qp7.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac6afc45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac6af93cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac6af93c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac6af93b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm2t1qp7                        0x000055c9c770659b <unavailable> + 5531

    5    libc.so.6                          0x00002ac6afe31460 __libc_start_main +
    245

    6    tmpkm2t1qp7                        0x000055c9c7706039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aBinary =\
    \ String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n        let\
    \ aOnes = aBinary.filter { $0 == \"1\" }.count\n        let bOnes = bBinary.filter\
    \ { $0 == \"1\" }.count\n        if aOnes == bOnes {\n            return a < b\n\
    \        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.numberOfOnes\n\
    \        let bOnes = b.numberOfOnes\n        if aOnes == bOnes {\n           \
    \ return a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmp8xn6ab4d.swift:11:23: error: value of type 'Int' has no member\
    \ 'numberOfOnes'\n        let aOnes = a.numberOfOnes\n                    ~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824649
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted(by: { (a, b) -> Bool in\n        let aOnes\
    \ = numberOfOnes(a)\n        let bOnes = numberOfOnes(b)\n        if aOnes ==\
    \ bOnes {\n            return a < b\n        }\n        return aOnes < bOnes\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpxq4wfj89.swift:11:21: error: cannot find 'numberOfOnes' in scope\n\
    \        let aOnes = numberOfOnes(a)\n                    ^~~~~~~~~~~~\n/tmp/tmpxq4wfj89.swift:12:21:\
    \ error: cannot find 'numberOfOnes' in scope\n        let bOnes = numberOfOnes(b)\n\
    \                    ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted(by: {\n        let a = String($0, radix: 2).filter\
    \ { $0 == \"1\" }.count\n        let b = String($1, radix: 2).filter { $0 == \"\
    1\" }.count\n        return a == b ? $0 < $1 : a < b\n    })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aBinary =\
    \ String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n        let\
    \ aOnes = aBinary.filter { $0 == \"1\" }.count\n        let bOnes = bBinary.filter\
    \ { $0 == \"1\" }.count\n        if aOnes == bOnes {\n            return a < b\n\
    \        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aBinary =\
    \ String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n        if aBinary.filter({\
    \ $0 == \"1\" }).count == bBinary.filter({ $0 == \"1\" }).count {\n          \
    \  return a < b\n        }\n        return aBinary.filter({ $0 == \"1\" }).count\
    \ < bBinary.filter({ $0 == \"1\" }).count\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted(by: {\n        let x = String($0, radix: 2).filter\
    \ { $0 == \"1\" }.count\n        let y = String($1, radix: 2).filter { $0 == \"\
    1\" }.count\n        return x == y ? $0 < $1 : x < y\n    })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted(by: {\n        let a = String($0, radix: 2).filter\
    \ { $0 == \"1\" }.count\n        let b = String($1, radix: 2).filter { $0 == \"\
    1\" }.count\n        return a == b ? $0 < $1 : a < b\n    })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted(by: { (a, b) -> Bool in\n        let aOnes\
    \ = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n        if aOnes\
    \ == bOnes {\n            return a < b\n        }\n        return aOnes < bOnes\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpzepdqxh9/tmpzepdqxh9.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5107115c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5106e0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5106e0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5106e0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzepdqxh9                        0x000055a9a868859b <unavailable> + 5531

    5    libc.so.6                          0x00002b5107301460 __libc_start_main +
    245

    6    tmpzepdqxh9                        0x000055a9a8688039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    let sorted = arr.sorted { (a, b) -> Bool in\n        let aBinary\
    \ = String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n        let\
    \ aOnes = aBinary.filter { $0 == \"1\" }.count\n        let bOnes = bBinary.filter\
    \ { $0 == \"1\" }.count\n        if aOnes == bOnes {\n            return a < b\n\
    \        }\n        return aOnes < bOnes\n    }\n    return sorted\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpvsfzj76r/tmpvsfzj76r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fed64dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fed344b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fed344988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fed3437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvsfzj76r                        0x000055fd7521b59b <unavailable> + 5531

    5    libc.so.6                          0x00002b5fed839460 __libc_start_main +
    245

    6    tmpvsfzj76r                        0x000055fd7521b039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpvsfzj76r/tmpvsfzj76r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fed64dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fed344b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fed344988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fed3437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvsfzj76r                        0x000055fd7521b59b <unavailable> + 5531

    5    libc.so.6                          0x00002b5fed839460 __libc_start_main +
    245

    6    tmpvsfzj76r                        0x000055fd7521b039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted(by: { (a, b) -> Bool in\n        let aOnes\
    \ = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n        if aOnes\
    \ == bOnes {\n            return a < b\n        }\n        return aOnes < bOnes\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpzepdqxh9/tmpzepdqxh9.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5107115c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5106e0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5106e0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5106e0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzepdqxh9                        0x000055a9a868859b <unavailable> + 5531

    5    libc.so.6                          0x00002b5107301460 __libc_start_main +
    245

    6    tmpzepdqxh9                        0x000055a9a8688039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aBinary =\
    \ String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n        let\
    \ aOnes = aBinary.filter { $0 == \"1\" }.count\n        let bOnes = bBinary.filter\
    \ { $0 == \"1\" }.count\n        if aOnes == bOnes {\n            return a < b\n\
    \        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted {\n        let a = $0.nonzeroBitCount\n  \
    \      let b = $1.nonzeroBitCount\n        return a == b ? $0 < $1 : a < b\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpx7geoaut/tmpx7geoaut.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b052b336c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b052b02db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b052b02d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b052b02c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx7geoaut                        0x000056142da1a59b <unavailable> + 5531

    5    libc.so.6                          0x00002b052b522460 __libc_start_main +
    245

    6    tmpx7geoaut                        0x000056142da1a039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpvsfzj76r/tmpvsfzj76r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fed64dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fed344b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fed344988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fed3437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvsfzj76r                        0x000055fd7521b59b <unavailable> + 5531

    5    libc.so.6                          0x00002b5fed839460 __libc_start_main +
    245

    6    tmpvsfzj76r                        0x000055fd7521b039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted(by: { (a, b) -> Bool in\n        let aOnes\
    \ = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n        if aOnes\
    \ == bOnes {\n            return a < b\n        }\n        return aOnes < bOnes\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpzepdqxh9/tmpzepdqxh9.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5107115c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5106e0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5106e0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5106e0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzepdqxh9                        0x000055a9a868859b <unavailable> + 5531

    5    libc.so.6                          0x00002b5107301460 __libc_start_main +
    245

    6    tmpzepdqxh9                        0x000055a9a8688039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted {\n        let a = String($0, radix: 2)\n\
    \        let b = String($1, radix: 2)\n        if a.filter { $0 == \"1\" }.count\
    \ == b.filter { $0 == \"1\" }.count {\n            return $0 < $1\n        }\n\
    \        return a.filter { $0 == \"1\" }.count < b.filter { $0 == \"1\" }.count\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpvsfzj76r/tmpvsfzj76r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fed64dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fed344b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fed344988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fed3437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvsfzj76r                        0x000055fd7521b59b <unavailable> + 5531

    5    libc.so.6                          0x00002b5fed839460 __libc_start_main +
    245

    6    tmpvsfzj76r                        0x000055fd7521b039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted(by: { (a, b) -> Bool in\n        let aBin\
    \ = String(a, radix: 2)\n        let bBin = String(b, radix: 2)\n        if aBin.filter({\
    \ $0 == \"1\" }).count == bBin.filter({ $0 == \"1\" }).count {\n            return\
    \ a < b\n        }\n        return aBin.filter({ $0 == \"1\" }).count < bBin.filter({\
    \ $0 == \"1\" }).count\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted {\n        let ones1 = $0.nonzeroBitCount\n\
    \        let ones2 = $1.nonzeroBitCount\n        return ones1 == ones2 ? $0 <\
    \ $1 : ones1 < ones2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4grmvyka/tmp4grmvyka.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb80aa4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb8079bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb8079b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb8079a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4grmvyka                        0x000055dd82f1059b <unavailable> + 5531

    5    libc.so.6                          0x00002afb80c90460 __libc_start_main +
    245

    6    tmp4grmvyka                        0x000055dd82f10039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aBinary =\
    \ String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n        if aBinary.count\
    \ == bBinary.count {\n            return a < b\n        }\n        return aBinary.count\
    \ < bBinary.count\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpr2hjp3gj/tmpr2hjp3gj.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67e0082c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67dfd79b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67dfd79988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67dfd787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr2hjp3gj                        0x000055aaabf9c554 <unavailable> + 5460

    5    libc.so.6                          0x00002b67e026e460 __libc_start_main +
    245

    6    tmpr2hjp3gj                        0x000055aaabf9c139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted {\n        let ones1 = $0.nonzeroBitCount\n\
    \        let ones2 = $1.nonzeroBitCount\n        return ones1 == ones2 ? $0 <\
    \ $1 : ones1 < ones2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp4grmvyka/tmp4grmvyka.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb80aa4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb8079bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb8079b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb8079a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4grmvyka                        0x000055dd82f1059b <unavailable> + 5531

    5    libc.so.6                          0x00002afb80c90460 __libc_start_main +
    245

    6    tmp4grmvyka                        0x000055dd82f10039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted {\n        let a = String($0, radix: 2).filter\
    \ { $0 == \"1\" }.count\n        let b = String($1, radix: 2).filter { $0 == \"\
    1\" }.count\n        return a == b ? $0 < $1 : a < b\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted(by: {\n        let a = String($0, radix: 2).filter\
    \ { $0 == \"1\" }.count\n        let b = String($1, radix: 2).filter { $0 == \"\
    1\" }.count\n        return a == b ? $0 < $1 : a < b\n    })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (lhs, rhs) -> Bool in\n        let lhsOnes\
    \ = lhs.onesCount\n        let rhsOnes = rhs.onesCount\n        if lhsOnes ==\
    \ rhsOnes {\n            return lhs < rhs\n        }\n        return lhsOnes <\
    \ rhsOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp5vmuve9u.swift:11:27: error: value of type 'Int' has no member\
    \ 'onesCount'\n        let lhsOnes = lhs.onesCount\n                      ~~~\
    \ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted(by: { (a, b) -> Bool in\n        let aBinary\
    \ = String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n        if\
    \ aBinary.filter({ $0 == \"1\" }).count == bBinary.filter({ $0 == \"1\" }).count\
    \ {\n            return a < b\n        }\n        return aBinary.filter({ $0 ==\
    \ \"1\" }).count < bBinary.filter({ $0 == \"1\" }).count\n    })\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted {\n        let a = String($0, radix: 2).filter\
    \ { $0 == \"1\" }.count\n        let b = String($1, radix: 2).filter { $0 == \"\
    1\" }.count\n        return a == b ? $0 < $1 : a < b\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aBinary =\
    \ String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n        let\
    \ aOnes = aBinary.filter { $0 == \"1\" }.count\n        let bOnes = bBinary.filter\
    \ { $0 == \"1\" }.count\n        if aOnes == bOnes {\n            return a < b\n\
    \        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (lhs, rhs) -> Bool in\n        let lhsBinary\
    \ = String(lhs, radix: 2)\n        let rhsBinary = String(rhs, radix: 2)\n   \
    \     let lhsOnes = lhsBinary.filter { $0 == \"1\" }.count\n        let rhsOnes\
    \ = rhsBinary.filter { $0 == \"1\" }.count\n        if lhsOnes == rhsOnes {\n\
    \            return lhs < rhs\n        }\n        return lhsOnes < rhsOnes\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var sorted = arr.sorted { (a, b) -> Bool in\n        let aOnes\
    \ = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n        if aOnes\
    \ == bOnes {\n            return a < b\n        }\n        return aOnes < bOnes\n\
    \    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp_9wvv8y7/tmp_9wvv8y7.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0129739c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0129430b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0129430988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b012942f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_9wvv8y7                        0x00005604ae76759b <unavailable> + 5531

    5    libc.so.6                          0x00002b0129925460 __libc_start_main +
    245

    6    tmp_9wvv8y7                        0x00005604ae767039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpvsfzj76r/tmpvsfzj76r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fed64dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fed344b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fed344988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fed3437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvsfzj76r                        0x000055fd7521b59b <unavailable> + 5531

    5    libc.so.6                          0x00002b5fed839460 __libc_start_main +
    245

    6    tmpvsfzj76r                        0x000055fd7521b039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aBinary =\
    \ String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n        if aBinary.count\
    \ == bBinary.count {\n            return a < b\n        }\n        return aBinary.count\
    \ < bBinary.count\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpr2hjp3gj/tmpr2hjp3gj.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67e0082c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67dfd79b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67dfd79988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67dfd787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr2hjp3gj                        0x000055aaabf9c554 <unavailable> + 5460

    5    libc.so.6                          0x00002b67e026e460 __libc_start_main +
    245

    6    tmpr2hjp3gj                        0x000055aaabf9c139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpvsfzj76r/tmpvsfzj76r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fed64dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fed344b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fed344988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fed3437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvsfzj76r                        0x000055fd7521b59b <unavailable> + 5531

    5    libc.so.6                          0x00002b5fed839460 __libc_start_main +
    245

    6    tmpvsfzj76r                        0x000055fd7521b039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aBinary =\
    \ String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n        if aBinary.filter({\
    \ $0 == \"1\" }).count == bBinary.filter({ $0 == \"1\" }).count {\n          \
    \  return a < b\n        }\n        return aBinary.filter({ $0 == \"1\" }).count\
    \ < bBinary.filter({ $0 == \"1\" }).count\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted(by: {\n        let a = String($0, radix: 2).filter\
    \ { $0 == \"1\" }.count\n        let b = String($1, radix: 2).filter { $0 == \"\
    1\" }.count\n        return a == b ? $0 < $1 : a < b\n    })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted {\n        let a = String($0, radix: 2).filter\
    \ { $0 == \"1\" }.count\n        let b = String($1, radix: 2).filter { $0 == \"\
    1\" }.count\n        return a < b || (a == b && $0 < $1)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpvsfzj76r/tmpvsfzj76r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fed64dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fed344b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fed344988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fed3437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvsfzj76r                        0x000055fd7521b59b <unavailable> + 5531

    5    libc.so.6                          0x00002b5fed839460 __libc_start_main +
    245

    6    tmpvsfzj76r                        0x000055fd7521b039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aBinary =\
    \ String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n        let\
    \ aOnes = aBinary.filter { $0 == \"1\" }.count\n        let bOnes = bBinary.filter\
    \ { $0 == \"1\" }.count\n        if aOnes == bOnes {\n            return a < b\n\
    \        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpvsfzj76r/tmpvsfzj76r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fed64dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fed344b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fed344988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fed3437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvsfzj76r                        0x000055fd7521b59b <unavailable> + 5531

    5    libc.so.6                          0x00002b5fed839460 __libc_start_main +
    245

    6    tmpvsfzj76r                        0x000055fd7521b039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aBinary =\
    \ String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n        let\
    \ aOnes = aBinary.filter { $0 == \"1\" }.count\n        let bOnes = bBinary.filter\
    \ { $0 == \"1\" }.count\n        if aOnes == bOnes {\n            return a < b\n\
    \        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = String(a,\
    \ radix: 2).filter { $0 == \"1\" }.count\n        let bOnes = String(b, radix:\
    \ 2).filter { $0 == \"1\" }.count\n        return aOnes == bOnes ? a < b : aOnes\
    \ < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.onesCount\n\
    \        let bOnes = b.onesCount\n        return aOnes == bOnes ? a < b : aOnes\
    \ < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpmxk7ncqc.swift:11:23: error: value of type 'Int' has no member\
    \ 'onesCount'\n        let aOnes = a.onesCount\n                    ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aBinary =\
    \ String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n        let\
    \ aOnes = aBinary.filter { $0 == \"1\" }.count\n        let bOnes = bBinary.filter\
    \ { $0 == \"1\" }.count\n        if aOnes == bOnes {\n            return a < b\n\
    \        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpvsfzj76r/tmpvsfzj76r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fed64dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fed344b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fed344988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fed3437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvsfzj76r                        0x000055fd7521b59b <unavailable> + 5531

    5    libc.so.6                          0x00002b5fed839460 __libc_start_main +
    245

    6    tmpvsfzj76r                        0x000055fd7521b039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted(by: { (a, b) -> Bool in\n        let aOnes\
    \ = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n        if aOnes\
    \ == bOnes {\n            return a < b\n        }\n        return aOnes < bOnes\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpzepdqxh9/tmpzepdqxh9.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5107115c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5106e0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5106e0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5106e0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzepdqxh9                        0x000055a9a868859b <unavailable> + 5531

    5    libc.so.6                          0x00002b5107301460 __libc_start_main +
    245

    6    tmpzepdqxh9                        0x000055a9a8688039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aBinary =\
    \ String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n        let\
    \ aOnes = aBinary.filter { $0 == \"1\" }.count\n        let bOnes = bBinary.filter\
    \ { $0 == \"1\" }.count\n        if aOnes == bOnes {\n            return a < b\n\
    \        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aBinary =\
    \ String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n        if aBinary.filter({\
    \ $0 == \"1\" }).count == bBinary.filter({ $0 == \"1\" }).count {\n          \
    \  return a < b\n        }\n        return aBinary.filter({ $0 == \"1\" }).count\
    \ < bBinary.filter({ $0 == \"1\" }).count\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aBinary =\
    \ String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n        let\
    \ aOnes = aBinary.filter { $0 == \"1\" }.count\n        let bOnes = bBinary.filter\
    \ { $0 == \"1\" }.count\n        if aOnes == bOnes {\n            return a < b\n\
    \        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted(by: {\n        let a = String($0, radix: 2).filter\
    \ { $0 == \"1\" }.count\n        let b = String($1, radix: 2).filter { $0 == \"\
    1\" }.count\n        return a == b ? $0 < $1 : a < b\n    })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = String(a,\
    \ radix: 2).filter { $0 == \"1\" }.count\n        let bOnes = String(b, radix:\
    \ 2).filter { $0 == \"1\" }.count\n        return aOnes == bOnes ? a < b : aOnes\
    \ < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted(by: {\n        let a = String($0, radix: 2)\n\
    \        let b = String($1, radix: 2)\n        if a.filter({ $0 == \"1\" }).count\
    \ == b.filter({ $0 == \"1\" }).count {\n            return $0 < $1\n        }\n\
    \        return a.filter({ $0 == \"1\" }).count < b.filter({ $0 == \"1\" }).count\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aBinary =\
    \ String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n        if aBinary.filter({\
    \ $0 == \"1\" }).count == bBinary.filter({ $0 == \"1\" }).count {\n          \
    \  return a < b\n        }\n        return aBinary.filter({ $0 == \"1\" }).count\
    \ < bBinary.filter({ $0 == \"1\" }).count\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aBinary =\
    \ String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n        let\
    \ aOnes = aBinary.filter { $0 == \"1\" }.count\n        let bOnes = bBinary.filter\
    \ { $0 == \"1\" }.count\n        if aOnes == bOnes {\n            return a < b\n\
    \        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aBinary =\
    \ String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n        let\
    \ aOnes = aBinary.filter { $0 == \"1\" }.count\n        let bOnes = bBinary.filter\
    \ { $0 == \"1\" }.count\n        if aOnes == bOnes {\n            return a < b\n\
    \        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpvsfzj76r/tmpvsfzj76r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fed64dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fed344b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fed344988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fed3437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvsfzj76r                        0x000055fd7521b59b <unavailable> + 5531

    5    libc.so.6                          0x00002b5fed839460 __libc_start_main +
    245

    6    tmpvsfzj76r                        0x000055fd7521b039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = String(a,\
    \ radix: 2).filter { $0 == \"1\" }.count\n        let bOnes = String(b, radix:\
    \ 2).filter { $0 == \"1\" }.count\n        return aOnes == bOnes ? a < b : aOnes\
    \ < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpvsfzj76r/tmpvsfzj76r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fed64dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fed344b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fed344988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fed3437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvsfzj76r                        0x000055fd7521b59b <unavailable> + 5531

    5    libc.so.6                          0x00002b5fed839460 __libc_start_main +
    245

    6    tmpvsfzj76r                        0x000055fd7521b039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (lhs, rhs) -> Bool in\n        let lhsBinary\
    \ = String(lhs, radix: 2)\n        let rhsBinary = String(rhs, radix: 2)\n   \
    \     let lhsOnes = lhsBinary.filter { $0 == \"1\" }.count\n        let rhsOnes\
    \ = rhsBinary.filter { $0 == \"1\" }.count\n        if lhsOnes == rhsOnes {\n\
    \            return lhs < rhs\n        }\n        return lhsOnes < rhsOnes\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var arr = arr\n    arr.sort {\n        if $0.nonzeroBitCount\
    \ == $1.nonzeroBitCount {\n            return $0 < $1\n        }\n        return\
    \ $0.nonzeroBitCount < $1.nonzeroBitCount\n    }\n    return arr\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmph2yjrl6t/tmph2yjrl6t.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7238dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7235d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7235d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7235d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph2yjrl6t                        0x000055d4bcbe55ab <unavailable> + 5547

    5    libc.so.6                          0x00002ac723aca460 __libc_start_main +
    245

    6    tmph2yjrl6t                        0x000055d4bcbe5049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aBinary =\
    \ String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n        if aBinary.filter({\
    \ $0 == \"1\" }).count == bBinary.filter({ $0 == \"1\" }).count {\n          \
    \  return a < b\n        }\n        return aBinary.filter({ $0 == \"1\" }).count\
    \ < bBinary.filter({ $0 == \"1\" }).count\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted(by: {\n        let a = String($0, radix: 2).filter\
    \ { $0 == \"1\" }.count\n        let b = String($1, radix: 2).filter { $0 == \"\
    1\" }.count\n        return a == b ? $0 < $1 : a < b\n    })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted(by: {\n        let a = String($0, radix: 2)\n\
    \        let b = String($1, radix: 2)\n        if a.filter({ $0 == \"1\" }).count\
    \ == b.filter({ $0 == \"1\" }).count {\n            return $0 < $1\n        }\n\
    \        return a.filter({ $0 == \"1\" }).count < b.filter({ $0 == \"1\" }).count\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = String(a,\
    \ radix: 2).filter { $0 == \"1\" }.count\n        let bOnes = String(b, radix:\
    \ 2).filter { $0 == \"1\" }.count\n        return aOnes == bOnes ? a < b : aOnes\
    \ < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aBinary =\
    \ String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n        if aBinary.filter({\
    \ $0 == \"1\" }).count == bBinary.filter({ $0 == \"1\" }).count {\n          \
    \  return a < b\n        }\n        return aBinary.filter({ $0 == \"1\" }).count\
    \ < bBinary.filter({ $0 == \"1\" }).count\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted(by: { (a, b) -> Bool in\n        let aOnes\
    \ = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n        if aOnes\
    \ == bOnes {\n            return a < b\n        }\n        return aOnes < bOnes\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpzepdqxh9/tmpzepdqxh9.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5107115c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5106e0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5106e0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5106e0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzepdqxh9                        0x000055a9a868859b <unavailable> + 5531

    5    libc.so.6                          0x00002b5107301460 __libc_start_main +
    245

    6    tmpzepdqxh9                        0x000055a9a8688039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aBinary =\
    \ String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n        let\
    \ aOnes = aBinary.filter { $0 == \"1\" }.count\n        let bOnes = bBinary.filter\
    \ { $0 == \"1\" }.count\n        if aOnes == bOnes {\n            return a < b\n\
    \        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var arr = arr\n    arr.sort { (a, b) -> Bool in\n        let\
    \ aOnes = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n        if\
    \ aOnes == bOnes {\n            return a < b\n        }\n        return aOnes\
    \ < bOnes\n    }\n    return arr\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpiv7k7qnn/tmpiv7k7qnn.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b794ae9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b794ab96b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b794ab96988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b794ab957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiv7k7qnn                        0x000055dd5f9445ab <unavailable> + 5547

    5    libc.so.6                          0x00002b794b08b460 __libc_start_main +
    245

    6    tmpiv7k7qnn                        0x000055dd5f944049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpvsfzj76r/tmpvsfzj76r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fed64dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fed344b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fed344988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fed3437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvsfzj76r                        0x000055fd7521b59b <unavailable> + 5531

    5    libc.so.6                          0x00002b5fed839460 __libc_start_main +
    245

    6    tmpvsfzj76r                        0x000055fd7521b039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aBinary =\
    \ String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n        let\
    \ aOnes = aBinary.filter { $0 == \"1\" }.count\n        let bOnes = bBinary.filter\
    \ { $0 == \"1\" }.count\n        if aOnes == bOnes {\n            return a < b\n\
    \        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aBinary =\
    \ String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n        let\
    \ aOnes = aBinary.filter { $0 == \"1\" }.count\n        let bOnes = bBinary.filter\
    \ { $0 == \"1\" }.count\n        if aOnes == bOnes {\n            return a < b\n\
    \        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let a1 = a.nonzeroBitCount\n\
    \        let b1 = b.nonzeroBitCount\n        if a1 == b1 {\n            return\
    \ a < b\n        }\n        return a1 < b1\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpsk7hd9a3/tmpsk7hd9a3.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b509129cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5090f93b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5090f93988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5090f927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsk7hd9a3                        0x0000564adda6459b <unavailable> + 5531

    5    libc.so.6                          0x00002b5091488460 __libc_start_main +
    245

    6    tmpsk7hd9a3                        0x0000564adda64039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aBinary =\
    \ String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n        let\
    \ aOnes = aBinary.filter { $0 == \"1\" }.count\n        let bOnes = bBinary.filter\
    \ { $0 == \"1\" }.count\n        if aOnes == bOnes {\n            return a < b\n\
    \        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aBin = String(a,\
    \ radix: 2)\n        let bBin = String(b, radix: 2)\n        let aOnes = aBin.filter\
    \ { $0 == \"1\" }.count\n        let bOnes = bBin.filter { $0 == \"1\" }.count\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted(by: {\n        let a = String($0, radix: 2).filter\
    \ { $0 == \"1\" }.count\n        let b = String($1, radix: 2).filter { $0 == \"\
    1\" }.count\n        return a < b || (a == b && $0 < $1)\n    })\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted(by: {\n        let a = $0\n        let b =\
    \ $1\n        let aBinary = String(a, radix: 2)\n        let bBinary = String(b,\
    \ radix: 2)\n        let aOnes = aBinary.filter { $0 == \"1\" }.count\n      \
    \  let bOnes = bBinary.filter { $0 == \"1\" }.count\n        if aOnes == bOnes\
    \ {\n            return a < b\n        }\n        return aOnes < bOnes\n    })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpvsfzj76r/tmpvsfzj76r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fed64dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fed344b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fed344988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fed3437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvsfzj76r                        0x000055fd7521b59b <unavailable> + 5531

    5    libc.so.6                          0x00002b5fed839460 __libc_start_main +
    245

    6    tmpvsfzj76r                        0x000055fd7521b039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted(by: {\n        let a = String($0, radix: 2).filter({\
    \ $0 == \"1\" }).count\n        let b = String($1, radix: 2).filter({ $0 == \"\
    1\" }).count\n        return a == b ? $0 < $1 : a < b\n    })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted(by: {\n        let a = String($0, radix: 2).filter({\
    \ $0 == \"1\" }).count\n        let b = String($1, radix: 2).filter({ $0 == \"\
    1\" }).count\n        return a == b ? $0 < $1 : a < b\n    })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted(by: { (a, b) -> Bool in\n        let aOnes\
    \ = a.numberOfOnes\n        let bOnes = b.numberOfOnes\n        if aOnes == bOnes\
    \ {\n            return a < b\n        }\n        return aOnes < bOnes\n    })\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp6tjng6o6.swift:11:23: error: value of type 'Int' has no member\
    \ 'numberOfOnes'\n        let aOnes = a.numberOfOnes\n                    ~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted(by: {\n        let ones1 = $0.nonzeroBitCount\n\
    \        let ones2 = $1.nonzeroBitCount\n        if ones1 == ones2 {\n       \
    \     return $0 < $1\n        }\n        return ones1 < ones2\n    })\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp3eopr85a/tmp3eopr85a.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd10d4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd10a42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd10a42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd10a417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3eopr85a                        0x00005559c0ab659b <unavailable> + 5531

    5    libc.so.6                          0x00002abd10f37460 __libc_start_main +
    245

    6    tmp3eopr85a                        0x00005559c0ab6039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.onesCount\n\
    \        let bOnes = b.onesCount\n        if aOnes == bOnes {\n            return\
    \ a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmpnunesqa3.swift:11:23: error: value of type 'Int' has no member\
    \ 'onesCount'\n        let aOnes = a.onesCount\n                    ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aBinary =\
    \ String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n        let\
    \ aOnes = aBinary.filter { $0 == \"1\" }.count\n        let bOnes = bBinary.filter\
    \ { $0 == \"1\" }.count\n        if aOnes == bOnes {\n            return a < b\n\
    \        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.onesInBinary\n\
    \        let bOnes = b.onesInBinary\n        if aOnes == bOnes {\n           \
    \ return a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmp7mtidppe.swift:11:23: error: value of type 'Int' has no member\
    \ 'onesInBinary'\n        let aOnes = a.onesInBinary\n                    ~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpvsfzj76r/tmpvsfzj76r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fed64dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fed344b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fed344988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fed3437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvsfzj76r                        0x000055fd7521b59b <unavailable> + 5531

    5    libc.so.6                          0x00002b5fed839460 __libc_start_main +
    245

    6    tmpvsfzj76r                        0x000055fd7521b039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aBinary =\
    \ String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n        let\
    \ aOnes = aBinary.filter { $0 == \"1\" }.count\n        let bOnes = bBinary.filter\
    \ { $0 == \"1\" }.count\n        if aOnes == bOnes {\n            return a < b\n\
    \        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aBinary =\
    \ String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n        let\
    \ aOnes = aBinary.filter { $0 == \"1\" }.count\n        let bOnes = bBinary.filter\
    \ { $0 == \"1\" }.count\n        if aOnes == bOnes {\n            return a < b\n\
    \        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted(by: { (a, b) -> Bool in\n        let aOnes\
    \ = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n        if aOnes\
    \ == bOnes {\n            return a < b\n        }\n        return aOnes < bOnes\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpzepdqxh9/tmpzepdqxh9.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5107115c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5106e0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5106e0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5106e0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzepdqxh9                        0x000055a9a868859b <unavailable> + 5531

    5    libc.so.6                          0x00002b5107301460 __libc_start_main +
    245

    6    tmpzepdqxh9                        0x000055a9a8688039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpvsfzj76r/tmpvsfzj76r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fed64dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fed344b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fed344988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fed3437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvsfzj76r                        0x000055fd7521b59b <unavailable> + 5531

    5    libc.so.6                          0x00002b5fed839460 __libc_start_main +
    245

    6    tmpvsfzj76r                        0x000055fd7521b039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = String(a,\
    \ radix: 2).filter { $0 == \"1\" }.count\n        let bOnes = String(b, radix:\
    \ 2).filter { $0 == \"1\" }.count\n        return aOnes == bOnes ? a < b : aOnes\
    \ < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted {\n        if $0.nonzeroBitCount == $1.nonzeroBitCount\
    \ {\n            return $0 < $1\n        }\n        return $0.nonzeroBitCount\
    \ < $1.nonzeroBitCount\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp96u6u3o_/tmp96u6u3o_.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd2c515c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd2c20cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd2c20c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd2c20b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp96u6u3o_                        0x000055893fd3359b <unavailable> + 5531

    5    libc.so.6                          0x00002acd2c701460 __libc_start_main +
    245

    6    tmp96u6u3o_                        0x000055893fd33039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted(by: { (a, b) -> Bool in\n        let aOnes\
    \ = a.onesCount\n        let bOnes = b.onesCount\n        if aOnes == bOnes {\n\
    \            return a < b\n        }\n        return aOnes < bOnes\n    })\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp272qd8cy.swift:11:23: error: value of type 'Int' has no member\
    \ 'onesCount'\n        let aOnes = a.onesCount\n                    ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpvsfzj76r/tmpvsfzj76r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fed64dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fed344b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fed344988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fed3437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvsfzj76r                        0x000055fd7521b59b <unavailable> + 5531

    5    libc.so.6                          0x00002b5fed839460 __libc_start_main +
    245

    6    tmpvsfzj76r                        0x000055fd7521b039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpvsfzj76r/tmpvsfzj76r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fed64dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fed344b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fed344988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fed3437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvsfzj76r                        0x000055fd7521b59b <unavailable> + 5531

    5    libc.so.6                          0x00002b5fed839460 __libc_start_main +
    245

    6    tmpvsfzj76r                        0x000055fd7521b039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpvsfzj76r/tmpvsfzj76r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fed64dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fed344b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fed344988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fed3437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvsfzj76r                        0x000055fd7521b59b <unavailable> + 5531

    5    libc.so.6                          0x00002b5fed839460 __libc_start_main +
    245

    6    tmpvsfzj76r                        0x000055fd7521b039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted(by: { (a, b) -> Bool in\n        let aBinary\
    \ = String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n        if\
    \ aBinary.filter({ $0 == \"1\" }).count == bBinary.filter({ $0 == \"1\" }).count\
    \ {\n            return a < b\n        }\n        return aBinary.filter({ $0 ==\
    \ \"1\" }).count < bBinary.filter({ $0 == \"1\" }).count\n    })\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.onesCount\n\
    \        let bOnes = b.onesCount\n        if aOnes == bOnes {\n            return\
    \ a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmpnunesqa3.swift:11:23: error: value of type 'Int' has no member\
    \ 'onesCount'\n        let aOnes = a.onesCount\n                    ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824649
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.onesCount\n\
    \        let bOnes = b.onesCount\n        if aOnes == bOnes {\n            return\
    \ a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmpnunesqa3.swift:11:23: error: value of type 'Int' has no member\
    \ 'onesCount'\n        let aOnes = a.onesCount\n                    ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted(by: {\n        let a = String($0, radix: 2).filter\
    \ { $0 == \"1\" }.count\n        let b = String($1, radix: 2).filter { $0 == \"\
    1\" }.count\n        return a == b ? $0 < $1 : a < b\n    })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted(by: { (a, b) -> Bool in\n        let aOnes\
    \ = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n        if aOnes\
    \ == bOnes {\n            return a < b\n        }\n        return aOnes < bOnes\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpzepdqxh9/tmpzepdqxh9.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5107115c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5106e0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5106e0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5106e0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzepdqxh9                        0x000055a9a868859b <unavailable> + 5531

    5    libc.so.6                          0x00002b5107301460 __libc_start_main +
    245

    6    tmpzepdqxh9                        0x000055a9a8688039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpvsfzj76r/tmpvsfzj76r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fed64dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fed344b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fed344988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fed3437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvsfzj76r                        0x000055fd7521b59b <unavailable> + 5531

    5    libc.so.6                          0x00002b5fed839460 __libc_start_main +
    245

    6    tmpvsfzj76r                        0x000055fd7521b039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted {\n        let a = String($0, radix: 2).filter\
    \ { $0 == \"1\" }.count\n        let b = String($1, radix: 2).filter { $0 == \"\
    1\" }.count\n        return a == b ? $0 < $1 : a < b\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.binary.filter\
    \ { $0 == \"1\" }.count\n        let bOnes = b.binary.filter { $0 == \"1\" }.count\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp8hfys9fu.swift:11:23: error: value of type 'Int' has no member\
    \ 'binary'\n        let aOnes = a.binary.filter { $0 == \"1\" }.count\n      \
    \              ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpvsfzj76r/tmpvsfzj76r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fed64dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fed344b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fed344988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fed3437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvsfzj76r                        0x000055fd7521b59b <unavailable> + 5531

    5    libc.so.6                          0x00002b5fed839460 __libc_start_main +
    245

    6    tmpvsfzj76r                        0x000055fd7521b039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted(by: {\n        let a = String($0, radix: 2).filter\
    \ { $0 == \"1\" }.count\n        let b = String($1, radix: 2).filter { $0 == \"\
    1\" }.count\n        return a == b ? $0 < $1 : a < b\n    })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.onesInBinary()\n\
    \        let bOnes = b.onesInBinary()\n        if aOnes == bOnes {\n         \
    \   return a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmphloqz3a2.swift:11:23: error: value of type 'Int' has no member\
    \ 'onesInBinary'\n        let aOnes = a.onesInBinary()\n                    ~\
    \ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpvsfzj76r/tmpvsfzj76r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fed64dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fed344b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fed344988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fed3437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvsfzj76r                        0x000055fd7521b59b <unavailable> + 5531

    5    libc.so.6                          0x00002b5fed839460 __libc_start_main +
    245

    6    tmpvsfzj76r                        0x000055fd7521b039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpvsfzj76r/tmpvsfzj76r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fed64dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fed344b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fed344988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fed3437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvsfzj76r                        0x000055fd7521b59b <unavailable> + 5531

    5    libc.so.6                          0x00002b5fed839460 __libc_start_main +
    245

    6    tmpvsfzj76r                        0x000055fd7521b039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted(by: { (lhs, rhs) -> Bool in\n        let lhsOnes\
    \ = lhs.nonzeroBitCount\n        let rhsOnes = rhs.nonzeroBitCount\n        if\
    \ lhsOnes == rhsOnes {\n            return lhs < rhs\n        }\n        return\
    \ lhsOnes < rhsOnes\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpiwpbbjqb/tmpiwpbbjqb.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b102b74cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b102b443b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b102b443988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b102b4427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiwpbbjqb                        0x0000564ef4a5659b <unavailable> + 5531

    5    libc.so.6                          0x00002b102b938460 __libc_start_main +
    245

    6    tmpiwpbbjqb                        0x0000564ef4a56039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted {\n        let ones1 = $0.nonzeroBitCount\n\
    \        let ones2 = $1.nonzeroBitCount\n        if ones1 == ones2 {\n       \
    \     return $0 < $1\n        }\n        return ones1 < ones2\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpnsvx_z2o/tmpnsvx_z2o.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a8ac78c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a8a96fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a8a96f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a8a96e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnsvx_z2o                        0x00005629e25ca59b <unavailable> + 5531

    5    libc.so.6                          0x00002b3a8ae64460 __libc_start_main +
    245

    6    tmpnsvx_z2o                        0x00005629e25ca039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpvsfzj76r/tmpvsfzj76r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fed64dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fed344b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fed344988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fed3437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvsfzj76r                        0x000055fd7521b59b <unavailable> + 5531

    5    libc.so.6                          0x00002b5fed839460 __libc_start_main +
    245

    6    tmpvsfzj76r                        0x000055fd7521b039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aBinary =\
    \ String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n        let\
    \ aOnes = aBinary.filter { $0 == \"1\" }.count\n        let bOnes = bBinary.filter\
    \ { $0 == \"1\" }.count\n        if aOnes == bOnes {\n            return a < b\n\
    \        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpvsfzj76r/tmpvsfzj76r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fed64dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fed344b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fed344988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fed3437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvsfzj76r                        0x000055fd7521b59b <unavailable> + 5531

    5    libc.so.6                          0x00002b5fed839460 __libc_start_main +
    245

    6    tmpvsfzj76r                        0x000055fd7521b039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpvsfzj76r/tmpvsfzj76r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fed64dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fed344b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fed344988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fed3437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvsfzj76r                        0x000055fd7521b59b <unavailable> + 5531

    5    libc.so.6                          0x00002b5fed839460 __libc_start_main +
    245

    6    tmpvsfzj76r                        0x000055fd7521b039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted(by: {\n        let a = String($0, radix: 2).filter\
    \ { $0 == \"1\" }.count\n        let b = String($1, radix: 2).filter { $0 == \"\
    1\" }.count\n        return a == b ? $0 < $1 : a < b\n    })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted(by: { (a, b) -> Bool in\n        let aOnes\
    \ = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n        if aOnes\
    \ == bOnes {\n            return a < b\n        }\n        return aOnes < bOnes\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpzepdqxh9/tmpzepdqxh9.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5107115c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5106e0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5106e0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5106e0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzepdqxh9                        0x000055a9a868859b <unavailable> + 5531

    5    libc.so.6                          0x00002b5107301460 __libc_start_main +
    245

    6    tmpzepdqxh9                        0x000055a9a8688039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aBinary =\
    \ String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n        let\
    \ aCount = aBinary.filter { $0 == \"1\" }.count\n        let bCount = bBinary.filter\
    \ { $0 == \"1\" }.count\n        if aCount == bCount {\n            return a <\
    \ b\n        }\n        return aCount < bCount\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.numberOfOnes\n\
    \        let bOnes = b.numberOfOnes\n        if aOnes == bOnes {\n           \
    \ return a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmp8xn6ab4d.swift:11:23: error: value of type 'Int' has no member\
    \ 'numberOfOnes'\n        let aOnes = a.numberOfOnes\n                    ~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824649
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.onesCount\n\
    \        let bOnes = b.onesCount\n        if aOnes == bOnes {\n            return\
    \ a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmpnunesqa3.swift:11:23: error: value of type 'Int' has no member\
    \ 'onesCount'\n        let aOnes = a.onesCount\n                    ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpvsfzj76r/tmpvsfzj76r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fed64dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fed344b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fed344988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fed3437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvsfzj76r                        0x000055fd7521b59b <unavailable> + 5531

    5    libc.so.6                          0x00002b5fed839460 __libc_start_main +
    245

    6    tmpvsfzj76r                        0x000055fd7521b039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpvsfzj76r/tmpvsfzj76r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fed64dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fed344b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fed344988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fed3437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvsfzj76r                        0x000055fd7521b59b <unavailable> + 5531

    5    libc.so.6                          0x00002b5fed839460 __libc_start_main +
    245

    6    tmpvsfzj76r                        0x000055fd7521b039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted(by: {\n        let a = String($0, radix: 2).filter\
    \ { $0 == \"1\" }.count\n        let b = String($1, radix: 2).filter { $0 == \"\
    1\" }.count\n        return a == b ? $0 < $1 : a < b\n    })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = String(a,\
    \ radix: 2).filter { $0 == \"1\" }.count\n        let bOnes = String(b, radix:\
    \ 2).filter { $0 == \"1\" }.count\n        return aOnes == bOnes ? a < b : aOnes\
    \ < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted {\n        let a = String($0, radix: 2)\n\
    \        let b = String($1, radix: 2)\n        if a.filter({ $0 == \"1\" }).count\
    \ == b.filter({ $0 == \"1\" }).count {\n            return $0 < $1\n        }\n\
    \        return a.filter({ $0 == \"1\" }).count < b.filter({ $0 == \"1\" }).count\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    var ones = [Int]()\n    var zeros = [Int]()\n    for i in arr\
    \ {\n        if i.nonzeroBitCount == 0 {\n            zeros.append(i)\n      \
    \  } else {\n            ones.append(i)\n        }\n    }\n    ones.sort()\n \
    \   zeros.sort()\n    return ones + zeros\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpjj0t1vqr/tmpjj0t1vqr.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef02ceac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef029e1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef029e1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef029e07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjj0t1vqr                        0x0000561cef549784 <unavailable> + 6020

    5    libc.so.6                          0x00002aef02ed6460 __libc_start_main +
    245

    6    tmpjj0t1vqr                        0x0000561cef549369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpvsfzj76r/tmpvsfzj76r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fed64dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fed344b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fed344988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fed3437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvsfzj76r                        0x000055fd7521b59b <unavailable> + 5531

    5    libc.so.6                          0x00002b5fed839460 __libc_start_main +
    245

    6    tmpvsfzj76r                        0x000055fd7521b039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpvsfzj76r/tmpvsfzj76r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fed64dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fed344b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fed344988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fed3437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvsfzj76r                        0x000055fd7521b59b <unavailable> + 5531

    5    libc.so.6                          0x00002b5fed839460 __libc_start_main +
    245

    6    tmpvsfzj76r                        0x000055fd7521b039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    let sorted = arr.sorted { (a, b) -> Bool in\n        let aOnes\
    \ = a.onesCount\n        let bOnes = b.onesCount\n        if aOnes == bOnes {\n\
    \            return a < b\n        }\n        return aOnes < bOnes\n    }\n  \
    \  return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmphzh__reo.swift:11:23: error: value of type 'Int' has no member\
    \ 'onesCount'\n        let aOnes = a.onesCount\n                    ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted {\n        let a = String($0, radix: 2)\n\
    \        let b = String($1, radix: 2)\n        if a.filter({ $0 == \"1\" }).count\
    \ == b.filter({ $0 == \"1\" }).count {\n            return $0 < $1\n        }\n\
    \        return a.filter({ $0 == \"1\" }).count < b.filter({ $0 == \"1\" }).count\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted {\n        let a = String($0, radix: 2).filter\
    \ { $0 == \"1\" }.count\n        let b = String($1, radix: 2).filter { $0 == \"\
    1\" }.count\n        return a == b ? $0 < $1 : a < b\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted(by: {\n        let a = $0.nonzeroBitCount\n\
    \        let b = $1.nonzeroBitCount\n        return a == b ? $0 < $1 : a < b\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmps6w83i7b/tmps6w83i7b.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afe6a91cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afe6a613b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afe6a613988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afe6a6127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps6w83i7b                        0x00005556864bd59b <unavailable> + 5531

    5    libc.so.6                          0x00002afe6ab08460 __libc_start_main +
    245

    6    tmps6w83i7b                        0x00005556864bd039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aBinary =\
    \ String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n        if aBinary.filter({\
    \ $0 == \"1\" }).count == bBinary.filter({ $0 == \"1\" }).count {\n          \
    \  return a < b\n        }\n        return aBinary.filter({ $0 == \"1\" }).count\
    \ < bBinary.filter({ $0 == \"1\" }).count\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted(by: { (a, b) -> Bool in\n        let aOnes\
    \ = String(a, radix: 2).filter({ $0 == \"1\" }).count\n        let bOnes = String(b,\
    \ radix: 2).filter({ $0 == \"1\" }).count\n        if aOnes == bOnes {\n     \
    \       return a < b\n        }\n        return aOnes < bOnes\n    })\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.binary.filter\
    \ { $0 == \"1\" }.count\n        let bOnes = b.binary.filter { $0 == \"1\" }.count\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp8hfys9fu.swift:11:23: error: value of type 'Int' has no member\
    \ 'binary'\n        let aOnes = a.binary.filter { $0 == \"1\" }.count\n      \
    \              ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824649
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let a1 = a.numberOfOnes\n\
    \        let b1 = b.numberOfOnes\n        if a1 == b1 {\n            return a\
    \ < b\n        }\n        return a1 < b1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpp1ah8foq.swift:11:20: error: value of type 'Int' has no member\
    \ 'numberOfOnes'\n        let a1 = a.numberOfOnes\n                 ~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted(by: { (a, b) -> Bool in\n        let aOnes\
    \ = String(a, radix: 2).filter { $0 == \"1\" }.count\n        let bOnes = String(b,\
    \ radix: 2).filter { $0 == \"1\" }.count\n        return aOnes == bOnes ? a <\
    \ b : aOnes < bOnes\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpvsfzj76r/tmpvsfzj76r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fed64dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fed344b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fed344988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fed3437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvsfzj76r                        0x000055fd7521b59b <unavailable> + 5531

    5    libc.so.6                          0x00002b5fed839460 __libc_start_main +
    245

    6    tmpvsfzj76r                        0x000055fd7521b039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let a1 = a.nonzeroBitCount\n\
    \        let b1 = b.nonzeroBitCount\n        if a1 == b1 {\n            return\
    \ a < b\n        }\n        return a1 < b1\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpsk7hd9a3/tmpsk7hd9a3.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b509129cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5090f93b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5090f93988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5090f927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsk7hd9a3                        0x0000564adda6459b <unavailable> + 5531

    5    libc.so.6                          0x00002b5091488460 __libc_start_main +
    245

    6    tmpsk7hd9a3                        0x0000564adda64039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted(by: {\n        let a = String($0, radix: 2).filter\
    \ { $0 == \"1\" }.count\n        let b = String($1, radix: 2).filter { $0 == \"\
    1\" }.count\n        return a == b ? $0 < $1 : a < b\n    })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted {\n        let a = String($0, radix: 2)\n\
    \        let b = String($1, radix: 2)\n        if a.filter({ $0 == \"1\" }).count\
    \ == b.filter({ $0 == \"1\" }).count {\n            return $0 < $1\n        }\n\
    \        return a.filter({ $0 == \"1\" }).count < b.filter({ $0 == \"1\" }).count\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let onesA = String(a,\
    \ radix: 2).filter { $0 == \"1\" }.count\n        let onesB = String(b, radix:\
    \ 2).filter { $0 == \"1\" }.count\n        if onesA == onesB {\n            return\
    \ a < b\n        }\n        return onesA < onesB\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aBinary =\
    \ String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n        let\
    \ aOnes = aBinary.filter { $0 == \"1\" }.count\n        let bOnes = bBinary.filter\
    \ { $0 == \"1\" }.count\n        if aOnes == bOnes {\n            return a < b\n\
    \        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.onesInBinary\n\
    \        let bOnes = b.onesInBinary\n        return aOnes == bOnes ? a < b : aOnes\
    \ < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmpcu05060f.swift:11:23: error: value of type 'Int' has no member\
    \ 'onesInBinary'\n        let aOnes = a.onesInBinary\n                    ~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpvsfzj76r/tmpvsfzj76r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fed64dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fed344b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fed344988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fed3437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvsfzj76r                        0x000055fd7521b59b <unavailable> + 5531

    5    libc.so.6                          0x00002b5fed839460 __libc_start_main +
    245

    6    tmpvsfzj76r                        0x000055fd7521b039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aCount =\
    \ a.nonzeroBitCount\n        let bCount = b.nonzeroBitCount\n        if aCount\
    \ == bCount {\n            return a < b\n        }\n        return aCount < bCount\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmp676qmi09/tmp676qmi09.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b682cfc1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b682ccb8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b682ccb8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b682ccb77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp676qmi09                        0x000055aeaf0a759b <unavailable> + 5531

    5    libc.so.6                          0x00002b682d1ad460 __libc_start_main +
    245

    6    tmp676qmi09                        0x000055aeaf0a7039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted(by: {\n        let a = String($0, radix: 2).filter\
    \ { $0 == \"1\" }.count\n        let b = String($1, radix: 2).filter { $0 == \"\
    1\" }.count\n        return a == b ? $0 < $1 : a < b\n    })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted(by: { (a, b) -> Bool in\n        let aOnes\
    \ = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n        if aOnes\
    \ == bOnes {\n            return a < b\n        }\n        return aOnes < bOnes\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpzepdqxh9/tmpzepdqxh9.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5107115c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5106e0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5106e0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5106e0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzepdqxh9                        0x000055a9a868859b <unavailable> + 5531

    5    libc.so.6                          0x00002b5107301460 __libc_start_main +
    245

    6    tmpzepdqxh9                        0x000055a9a8688039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aBinary =\
    \ String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n        let\
    \ aOnes = aBinary.filter { $0 == \"1\" }.count\n        let bOnes = bBinary.filter\
    \ { $0 == \"1\" }.count\n        if aOnes == bOnes {\n            return a < b\n\
    \        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aBinary =\
    \ String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n        if aBinary.filter({\
    \ $0 == \"1\" }).count == bBinary.filter({ $0 == \"1\" }).count {\n          \
    \  return a < b\n        }\n        return aBinary.filter({ $0 == \"1\" }).count\
    \ < bBinary.filter({ $0 == \"1\" }).count\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted(by: {\n        let a = String($0, radix: 2)\n\
    \        let b = String($1, radix: 2)\n        if a.filter({ $0 == \"1\" }).count\
    \ == b.filter({ $0 == \"1\" }).count {\n            return $0 < $1\n        }\n\
    \        return a.filter({ $0 == \"1\" }).count < b.filter({ $0 == \"1\" }).count\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted(by: { (a, b) -> Bool in\n        let aOnes\
    \ = a.nonzeroBitCount\n        let bOnes = b.nonzeroBitCount\n        if aOnes\
    \ == bOnes {\n            return a < b\n        }\n        return aOnes < bOnes\n\
    \    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1, 5,\
    \ 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpzepdqxh9/tmpzepdqxh9.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5107115c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5106e0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5106e0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5106e0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzepdqxh9                        0x000055a9a868859b <unavailable> + 5531

    5    libc.so.6                          0x00002b5107301460 __libc_start_main +
    245

    6    tmpzepdqxh9                        0x000055a9a8688039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpvsfzj76r/tmpvsfzj76r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fed64dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fed344b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fed344988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fed3437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvsfzj76r                        0x000055fd7521b59b <unavailable> + 5531

    5    libc.so.6                          0x00002b5fed839460 __libc_start_main +
    245

    6    tmpvsfzj76r                        0x000055fd7521b039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpvsfzj76r/tmpvsfzj76r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fed64dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fed344b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fed344988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fed3437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvsfzj76r                        0x000055fd7521b59b <unavailable> + 5531

    5    libc.so.6                          0x00002b5fed839460 __libc_start_main +
    245

    6    tmpvsfzj76r                        0x000055fd7521b039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpvsfzj76r/tmpvsfzj76r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fed64dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fed344b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fed344988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fed3437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvsfzj76r                        0x000055fd7521b59b <unavailable> + 5531

    5    libc.so.6                          0x00002b5fed839460 __libc_start_main +
    245

    6    tmpvsfzj76r                        0x000055fd7521b039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.onesCount\n\
    \        let bOnes = b.onesCount\n        if aOnes == bOnes {\n            return\
    \ a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\
    assert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr:\
    \ [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) ==\
    \ [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
    \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32,\
    \ 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) ==\
    \ [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
    \ 32])"
  status: SyntaxError
  stderr: "/tmp/tmpnunesqa3.swift:11:23: error: value of type 'Int' has no member\
    \ 'onesCount'\n        let aOnes = a.onesCount\n                    ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted(by: { (a, b) -> Bool in\n        let aBinary\
    \ = String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n        if\
    \ aBinary.filter({ $0 == \"1\" }).count == bBinary.filter({ $0 == \"1\" }).count\
    \ {\n            return a < b\n        }\n        return aBinary.filter({ $0 ==\
    \ \"1\" }).count < bBinary.filter({ $0 == \"1\" }).count\n    })\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpvsfzj76r/tmpvsfzj76r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fed64dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fed344b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fed344988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fed3437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvsfzj76r                        0x000055fd7521b59b <unavailable> + 5531

    5    libc.so.6                          0x00002b5fed839460 __libc_start_main +
    245

    6    tmpvsfzj76r                        0x000055fd7521b039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: 1
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.numberOfOnes()\n\
    \        let bOnes = b.numberOfOnes()\n        if aOnes == bOnes {\n         \
    \   return a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: SyntaxError
  stderr: "/tmp/tmp94qckp8f.swift:11:23: error: value of type 'Int' has no member\
    \ 'numberOfOnes'\n        let aOnes = a.numberOfOnes()\n                    ~\
    \ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpvsfzj76r/tmpvsfzj76r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fed64dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fed344b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fed344988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fed3437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvsfzj76r                        0x000055fd7521b59b <unavailable> + 5531

    5    libc.so.6                          0x00002b5fed839460 __libc_start_main +
    245

    6    tmpvsfzj76r                        0x000055fd7521b039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aBin = String(a,\
    \ radix: 2)\n        let bBin = String(b, radix: 2)\n        let aOnes = aBin.filter\
    \ { $0 == \"1\" }.count\n        let bOnes = bBin.filter { $0 == \"1\" }.count\n\
    \        if aOnes == bOnes {\n            return a < b\n        }\n        return\
    \ aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(arr:\
    \ [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5,\
    \ -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpvsfzj76r/tmpvsfzj76r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fed64dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fed344b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fed344988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fed3437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvsfzj76r                        0x000055fd7521b59b <unavailable> + 5531

    5    libc.so.6                          0x00002b5fed839460 __libc_start_main +
    245

    6    tmpvsfzj76r                        0x000055fd7521b039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: -4
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = a.nonzeroBitCount\n\
    \        let bOnes = b.nonzeroBitCount\n        if aOnes == bOnes {\n        \
    \    return a < b\n        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4,\
    \ 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\n\
    assert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5,\
    \ 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr:\
    \ [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32])"
  status: Exception
  stderr: 'tmpvsfzj76r/tmpvsfzj76r.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fed64dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fed344b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fed344988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fed3437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvsfzj76r                        0x000055fd7521b59b <unavailable> + 5531

    5    libc.so.6                          0x00002b5fed839460 __libc_start_main +
    245

    6    tmpvsfzj76r                        0x000055fd7521b039 <unavailable> + 4153

    '
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aOnes = String(a,\
    \ radix: 2).filter { $0 == \"1\" }.count\n        let bOnes = String(b, radix:\
    \ 2).filter { $0 == \"1\" }.count\n        return aOnes == bOnes ? a < b : aOnes\
    \ < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(arr: [1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr: [-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as [Int])\nassert(sort_array(arr:\
    \ [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\
    assert(sort_array(arr: [3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr:\
    \ [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16,\
    \ 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
- exit_code: 0
  program: "\n/// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n/// number of ones in their binary representation in ascending\
    \ order.\n/// For similar number of ones, sort based on decimal value.\n/// It\
    \ must be implemented like this:\n/// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n/// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
    /// >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int])\
    \ -> [Int] {\n    return arr.sorted { (a, b) -> Bool in\n        let aBinary =\
    \ String(a, radix: 2)\n        let bBinary = String(b, radix: 2)\n        let\
    \ aOnes = aBinary.filter { $0 == \"1\" }.count\n        let bOnes = bBinary.filter\
    \ { $0 == \"1\" }.count\n        if aOnes == bOnes {\n            return a < b\n\
    \        }\n        return aOnes < bOnes\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(arr: [1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\nassert(sort_array(arr:\
    \ [-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3])\nassert(sort_array(arr: [1, 0,\
    \ 2, 3, 4]) == [0, 1, 2, 4, 3])\nassert(sort_array(arr: [] as [Int]) == [] as\
    \ [Int])\nassert(sort_array(arr: [2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2,\
    \ 4, 4, 3, 3, 5, 5, 5, 7, 77])\nassert(sort_array(arr: [3, 6, 44, 12, 32, 5])\
    \ == [32, 3, 5, 6, 12, 44])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32])\nassert(sort_array(arr: [2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824649
