name: HumanEval_55_fib
language: swift
prompt: "\n/// Return n-th Fibonacci number.\n/// >>> fib(10)\n/// 55\n/// >>> fib(1)\n\
  /// 1\n/// >>> fib(8)\n/// 21\nfunc fib(n: Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(fib(n: 10) == 55)\nassert(fib(n: 1) == 1)\n\
  assert(fib(n: 8) == 21)\nassert(fib(n: 11) == 89)\nassert(fib(n: 12) == 144)"
completions: ["    if n <= 1 {\n        return n\n    }\n    return fib(n - 1) + fib(n\
    \ - 2)", "    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 1\n    } else {\n        return fib(n - 1) + fib(n - 2)\n    }", "    if n ==\
    \ 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else\
    \ {\n        return fib(n - 1) + fib(n - 2)\n    }", "    if n <= 1 {\n      \
    \  return n\n    }\n    return fib(n - 1) + fib(n - 2)", "    if n <= 1 {\n  \
    \      return n\n    }\n    return fib(n - 1) + fib(n - 2)", "    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n  \
    \      return fib(n - 1) + fib(n - 2)\n    }", "    if n == 0 {\n        return\
    \ 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return fib(n\
    \ - 1) + fib(n - 2)\n    }", "    if n == 0 {\n        return 0\n    } else if\
    \ n == 1 {\n        return 1\n    } else {\n        return fib(n - 1) + fib(n\
    \ - 2)\n    }", "    if n <= 2 {\n        return 1\n    } else {\n        return\
    \ fib(n - 1) + fib(n - 2)\n    }", "    if n == 0 {\n        return 0\n    } else\
    \ if n == 1 {\n        return 1\n    } else {\n        return fib(n - 1) + fib(n\
    \ - 2)\n    }", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n \
    \       return 1\n    }\n    return fib(n - 1) + fib(n - 2)", "    if n <= 1 {\n\
    \        return n\n    }\n    return fib(n - 1) + fib(n - 2)", "    if n == 0\
    \ {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n\
    \        return fib(n - 1) + fib(n - 2)\n    }", "    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 1\n    }\n    return fib(n - 1) +\
    \ fib(n - 2)", "    if n <= 1 {\n        return n\n    } else {\n        return\
    \ fib(n - 1) + fib(n - 2)\n    }", "    if n == 0 {\n        return 0\n    } else\
    \ if n == 1 {\n        return 1\n    } else {\n        return fib(n - 1) + fib(n\
    \ - 2)\n    }", "    if n <= 1 {\n        return n\n    } else {\n        return\
    \ fib(n - 1) + fib(n - 2)\n    }", "    if n <= 1 {\n        return n\n    } else\
    \ {\n        return fib(n - 1) + fib(n - 2)\n    }", "    if n == 0 {\n      \
    \  return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return\
    \ fib(n - 1) + fib(n - 2)\n    }", "    if n == 0 {\n        return 0\n    } else\
    \ if n == 1 {\n        return 1\n    } else {\n        return fib(n - 1) + fib(n\
    \ - 2)\n    }"]
stop_tokens:
- "\n}"
