name: HumanEval_56_correct_bracketing
language: swift
prompt: "\n/// brackets is a string of \"<\" and \">\".\n/// return True if every\
  \ opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(\"\
  <\")\n/// False\n/// >>> correct_bracketing(\"<>\")\n/// True\n/// >>> correct_bracketing(\"\
  <<><>>\")\n/// True\n/// >>> correct_bracketing(\"><<>\")\n/// False\nfunc correct_bracketing(brackets:\
  \ String) -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(correct_bracketing(brackets: \"<>\") ==\
  \ true)\nassert(correct_bracketing(brackets: \"<<><>>\") == true)\nassert(correct_bracketing(brackets:\
  \ \"<><><<><>><>\") == true)\nassert(correct_bracketing(brackets: \"<><><<<><><>><>><<><><<>>>\"\
  ) == true)\nassert(correct_bracketing(brackets: \"<<<><>>>>\") == false)\nassert(correct_bracketing(brackets:\
  \ \"><<>\") == false)\nassert(correct_bracketing(brackets: \"<\") == false)\nassert(correct_bracketing(brackets:\
  \ \"<<<<\") == false)\nassert(correct_bracketing(brackets: \">\") == false)\nassert(correct_bracketing(brackets:\
  \ \"<<>\") == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>><<>\")\
  \ == false)\nassert(correct_bracketing(brackets: \"<><><<><>><>>><>\") == false)"
completions: ["    var stack = Stack<Character>()\n    for bracket in brackets {\n\
    \        if bracket == \"<\" {\n            stack.push(bracket)\n        } else\
    \ if bracket == \">\" {\n            if stack.isEmpty() {\n                return\
    \ false\n            } else {\n                stack.pop()\n            }\n  \
    \      }\n    }\n    return stack.isEmpty()", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty() {\n    \
    \            return false\n            } else {\n                stack.pop()\n\
    \            }\n        }\n    }\n    return stack.isEmpty()", "    var stack\
    \ = Stack<Character>()\n    for bracket in brackets {\n        if bracket == \"\
    <\" {\n            stack.push(bracket)\n        } else if bracket == \">\" {\n\
    \            if stack.isEmpty {\n                return false\n            } else\
    \ {\n                stack.pop()\n            }\n        }\n    }\n    return\
    \ stack.isEmpty", "    var count = 0\n    for char in brackets {\n        if char\
    \ == \"<\" {\n            count += 1\n        } else if char == \">\" {\n    \
    \        count -= 1\n        }\n        if count < 0 {\n            return false\n\
    \        }\n    }\n    return count == 0", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty() {\n    \
    \            return false\n            } else {\n                stack.pop()\n\
    \            }\n        }\n    }\n    return stack.isEmpty()", "    var stack\
    \ = Stack<Character>()\n    for bracket in brackets {\n        if bracket == \"\
    <\" {\n            stack.push(bracket)\n        } else if bracket == \">\" {\n\
    \            if stack.isEmpty {\n                return false\n            } else\
    \ {\n                stack.pop()\n            }\n        }\n    }\n    return\
    \ stack.isEmpty", "    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty() {\n             \
    \   return false\n            } else {\n                stack.pop()\n        \
    \    }\n        }\n    }\n    return stack.isEmpty()", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty() {\n    \
    \            return false\n            } else {\n                stack.pop()\n\
    \            }\n        }\n    }\n    return stack.isEmpty()", "    var stack\
    \ = Stack<Character>()\n    for bracket in brackets {\n        if bracket == \"\
    <\" {\n            stack.push(bracket)\n        } else if bracket == \">\" {\n\
    \            if stack.isEmpty {\n                return false\n            } else\
    \ {\n                stack.pop()\n            }\n        }\n    }\n    return\
    \ stack.isEmpty", "    var stack = Stack<Character>()\n    for bracket in brackets\
    \ {\n        if bracket == \"<\" {\n            stack.push(bracket)\n        }\
    \ else if bracket == \">\" {\n            if stack.isEmpty() {\n             \
    \   return false\n            } else {\n                stack.pop()\n        \
    \    }\n        }\n    }\n    return stack.isEmpty()", "    var stack = Stack<Character>()\n\
    \    for char in brackets {\n        if char == \"<\" {\n            stack.push(char)\n\
    \        } else if char == \">\" {\n            if stack.isEmpty {\n         \
    \       return false\n            } else {\n                stack.pop()\n    \
    \        }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty {\n      \
    \          return false\n            } else {\n                stack.pop()\n \
    \           }\n        }\n    }\n    return stack.isEmpty", "    var stack = Stack<Character>()\n\
    \    for bracket in brackets {\n        if bracket == \"<\" {\n            stack.push(bracket)\n\
    \        } else if bracket == \">\" {\n            if stack.isEmpty() {\n    \
    \            return false\n            } else {\n                stack.pop()\n\
    \            }\n        }\n    }\n    return stack.isEmpty()"]
stop_tokens:
- "\n}"
