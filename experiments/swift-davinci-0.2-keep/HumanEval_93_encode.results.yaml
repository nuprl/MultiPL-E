language: swift
name: HumanEval_93_encode
results:
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message.lowercased()\
    \ {\n        if vowels.contains(char) {\n            let index = letters.index(of:\
    \ char)!\n            let newIndex = letters.index(index, offsetBy: 2)\n     \
    \       encoded.append(letters[newIndex])\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp96nwwedh/tmp96nwwedh.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e55be0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e558d7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e558d7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e558d67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp96nwwedh                        0x0000558f85905867 <unavailable> + 6247

    5    libc.so.6                          0x00002b9e55dcc460 __libc_start_main +
    245

    6    tmp96nwwedh                        0x0000558f859053b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encodedMessage = \"\"\n    for\
    \ character in message.characters {\n        if character.isVowel() {\n      \
    \      encodedMessage.append(character.nextVowel())\n        } else {\n      \
    \      encodedMessage.append(character.swapCase())\n        }\n    }\n    return\
    \ encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpi6lkf1_x.swift:14:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    for character in message.characters {\n           \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpi6lkf1_x.swift:15:22: error: value of type 'Character' has no member\
    \ 'isVowel'\n        if character.isVowel() {\n           ~~~~~~~~~ ^~~~~~~\n\
    /tmp/tmpi6lkf1_x.swift:16:45: error: value of type 'Character' has no member 'nextVowel'\n\
    \            encodedMessage.append(character.nextVowel())\n                  \
    \                ~~~~~~~~~ ^~~~~~~~~\n/tmp/tmpi6lkf1_x.swift:18:45: error: value\
    \ of type 'Character' has no member 'swapCase'\n            encodedMessage.append(character.swapCase())\n\
    \                                  ~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824430
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    let encoded = message.characters.map {\
    \ char -> Character in\n        if let index = alphabet.characters.indexOf(char)\
    \ {\n            if vowels.characters.contains(char) {\n                let newIndex\
    \ = index.advancedBy(2) % alphabet.characters.count\n                return alphabet.characters[newIndex]\n\
    \            } else {\n                return alphabet.characters[index.advancedBy(2)\
    \ % alphabet.characters.count].uppercaseString.characters.first!\n           \
    \ }\n        } else {\n            return char\n        }\n    }\n    return String(encoded)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp1bypio02.swift:16:44: error: value of type 'String' has no member\
    \ 'indexOf'\n        if let index = alphabet.characters.indexOf(char) {\n    \
    \                   ~~~~~~~~~~~~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encodedMessage = \"\"\n    let\
    \ vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for\
    \ letter in message.lowercased() {\n        if vowels.contains(letter) {\n   \
    \         let index = alphabet.index(of: letter)!\n            let newIndex =\
    \ alphabet.index(index, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(letter)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpewx3wyte/tmpewx3wyte.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1c3fa0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af1c3c97b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af1c3c97988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1c3c967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpewx3wyte                        0x000055acda24b867 <unavailable> + 6247

    5    libc.so.6                          0x00002af1c418c460 __libc_start_main +
    245

    6    tmpewx3wyte                        0x000055acda24b3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message.lowercased()\
    \ {\n        if vowels.contains(char) {\n            let index = alphabet.index(alphabet.startIndex,\
    \ offsetBy: alphabet.distance(from: alphabet.startIndex, to: alphabet.index(of:\
    \ char)!))\n            encoded.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n        } else {\n            encoded.append(char)\n        }\n    }\n\
    \    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpdkdcdz76/tmpdkdcdz76.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6ec9c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6ec6b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6ec6b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6ec6b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdkdcdz76                        0x000055fbfee64927 <unavailable> + 6439

    5    libc.so.6                          0x00002ab6ecbad460 __libc_start_main +
    245

    6    tmpdkdcdz76                        0x000055fbfee64479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for character\
    \ in message.lowercased() {\n        if vowels.contains(character) {\n       \
    \     let index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.distance(from:\
    \ alphabet.startIndex, to: alphabet.index(of: character)!) + 2)\n            encodedMessage.append(alphabet[index])\n\
    \        } else {\n            encodedMessage.append(character)\n        }\n \
    \   }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp4lypotku/tmp4lypotku.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c7483ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c74531b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c74531988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c745307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4lypotku                        0x0000560ed165a927 <unavailable> + 6439

    5    libc.so.6                          0x00002b9c74a26460 __libc_start_main +
    245

    6    tmp4lypotku                        0x0000560ed165a479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encodedMessage = \"\"\n    for\
    \ character in message.characters {\n        if character.isVowel() {\n      \
    \      let encodedCharacter = character.encodeVowel()\n            encodedMessage.append(encodedCharacter)\n\
    \        } else {\n            let encodedCharacter = character.encodeConsonant()\n\
    \            encodedMessage.append(encodedCharacter)\n        }\n    }\n    return\
    \ encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplyq7xf_g.swift:14:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    for character in message.characters {\n           \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmplyq7xf_g.swift:15:22: error: value of type 'Character' has no member\
    \ 'isVowel'\n        if character.isVowel() {\n           ~~~~~~~~~ ^~~~~~~\n\
    /tmp/tmplyq7xf_g.swift:16:46: error: value of type 'Character' has no member 'encodeVowel'\n\
    \            let encodedCharacter = character.encodeVowel()\n                \
    \                   ~~~~~~~~~ ^~~~~~~~~~~\n/tmp/tmplyq7xf_g.swift:19:46: error:\
    \ value of type 'Character' has no member 'encodeConsonant'\n            let encodedCharacter\
    \ = character.encodeConsonant()\n                                   ~~~~~~~~~\
    \ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824430
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message.lowercased()\
    \ {\n        if let index = letters.index(of: char) {\n            let newIndex\
    \ = (index + 2) % letters.count\n            encoded.append(letters[newIndex])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpsmy34875.swift:17:32: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let index = letters.index(of: char) {\n   \
    \                            ^\n/tmp/tmpsmy34875.swift:17:32: note: use 'firstIndex(of:)'\
    \ instead\n        if let index = letters.index(of: char) {\n                \
    \               ^~~~~\n                               firstIndex\n/tmp/tmpsmy34875.swift:18:29:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n            let newIndex = (index + 2) % letters.count\n            \
    \                ^\n"
  stdout: ''
  timestamp: 1659824430
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encodedMessage = \"\"\n    for\
    \ char in message.characters {\n        if char.isVowel() {\n            encodedMessage.append(char.next().next())\n\
    \        } else {\n            encodedMessage.append(char.swapCase())\n      \
    \  }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp6ej_wwhn.swift:14:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp6ej_wwhn.swift:15:17:\
    \ error: value of type 'Character' has no member 'isVowel'\n        if char.isVowel()\
    \ {\n           ~~~~ ^~~~~~~\n/tmp/tmp6ej_wwhn.swift:16:40: error: value of type\
    \ 'Character' has no member 'next'\n            encodedMessage.append(char.next().next())\n\
    \                                  ~~~~ ^~~~\n/tmp/tmp6ej_wwhn.swift:18:40: error:\
    \ value of type 'Character' has no member 'swapCase'\n            encodedMessage.append(char.swapCase())\n\
    \                                  ~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824430
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encodedMessage = \"\"\n    for\
    \ char in message.characters {\n        if char.isVowel {\n            encodedMessage.append(char.next().next())\n\
    \        } else {\n            encodedMessage.append(char.swapCase())\n      \
    \  }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp_furotct.swift:14:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp_furotct.swift:15:17:\
    \ error: value of type 'Character' has no member 'isVowel'\n        if char.isVowel\
    \ {\n           ~~~~ ^~~~~~~\n/tmp/tmp_furotct.swift:16:40: error: value of type\
    \ 'Character' has no member 'next'\n            encodedMessage.append(char.next().next())\n\
    \                                  ~~~~ ^~~~\n/tmp/tmp_furotct.swift:18:40: error:\
    \ value of type 'Character' has no member 'swapCase'\n            encodedMessage.append(char.swapCase())\n\
    \                                  ~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message.lowercased() {\n        if let index = alphabet.index(of:\
    \ char) {\n            if vowels.contains(String(char)) {\n                let\
    \ nextIndex = alphabet.index(index, offsetBy: 2)\n                encoded.append(alphabet[nextIndex])\n\
    \            } else {\n                encoded.append(alphabet[index])\n     \
    \       }\n        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpkwq9j_8m/tmpkwq9j_8m.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8c31b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8c2ea9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8c2ea9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8c2ea87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkwq9j_8m                        0x000055e924d06937 <unavailable> + 6455

    5    libc.so.6                          0x00002ba8c339e460 __libc_start_main +
    245

    6    tmpkwq9j_8m                        0x000055e924d06489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encodedMessage = \"\"\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for char in message.lowercased() {\n        if vowels.contains(String(char))\
    \ {\n            let index = alphabet.index(of: char)\n            let newIndex\
    \ = alphabet.index(index!, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpp12v9fo2/tmpp12v9fo2.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e6a4c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e6a1bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e6a1bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e6a1ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp12v9fo2                        0x00005571b5cb49c7 <unavailable> + 6599

    5    libc.so.6                          0x00002b3e6a6b0460 __libc_start_main +
    245

    6    tmpp12v9fo2                        0x00005571b5cb4519 <unavailable> + 5401

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char\
    \ in message.lowercased() {\n        if vowels.contains(char) {\n            let\
    \ index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.index(of: char)!\
    \ + 2)\n            encodedMessage.append(alphabet[index])\n        } else {\n\
    \            encodedMessage.append(char)\n        }\n    }\n    return encodedMessage\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpwcyhvwf4.swift:18:95: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n            let index = alphabet.index(alphabet.startIndex,\
    \ offsetBy: alphabet.index(of: char)! + 2)\n                                 \
    \                                                             ^\n"
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message.lowercased()\
    \ {\n        if let index = alphabet.index(of: char) {\n            let newIndex\
    \ = alphabet.index(index, offsetBy: 2)\n            encoded.append(alphabet[newIndex])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpodijfm_e/tmpodijfm_e.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3e8080c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3e7d77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3e7d77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3e7d767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpodijfm_e                        0x000055bb3d331647 <unavailable> + 5703

    5    libc.so.6                          0x00002ba3e826c460 __libc_start_main +
    245

    6    tmpodijfm_e                        0x000055bb3d331289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encoded = \"\"\n    let vowels\
    \ = \"aeiou\"\n    for char in message.characters {\n        if vowels.containsString(String(char))\
    \ {\n            let index = vowels.startIndex.distanceTo(vowels.startIndex.advancedBy(vowels.characters.indexOf(char)!\
    \ + 2))\n            encoded.append(vowels[vowels.startIndex.advancedBy(index)])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp_vk0wyc4.swift:15:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp_vk0wyc4.swift:16:19:\
    \ error: value of type 'String' has no member 'containsString'\n        if vowels.containsString(String(char))\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmp_vk0wyc4.swift:17:43: error: value\
    \ of type 'String.Index' has no member 'distanceTo'\n            let index = vowels.startIndex.distanceTo(vowels.startIndex.advancedBy(vowels.characters.indexOf(char)!\
    \ + 2))\n                        ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp_vk0wyc4.swift:17:72:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n           \
    \ let index = vowels.startIndex.distanceTo(vowels.startIndex.advancedBy(vowels.characters.indexOf(char)!\
    \ + 2))\n                                                     ~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~\n/tmp/tmp_vk0wyc4.swift:17:101: error: value of type 'String' has\
    \ no member 'indexOf'\n            let index = vowels.startIndex.distanceTo(vowels.startIndex.advancedBy(vowels.characters.indexOf(char)!\
    \ + 2))\n                                                                    \
    \              ~~~~~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmp_vk0wyc4.swift:18:53: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n            encoded.append(vowels[vowels.startIndex.advancedBy(index)])\n\
    \                                  ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824430
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encoded = \"\"\n    let vowels\
    \ = \"aeiou\"\n    for char in message.characters {\n        if vowels.containsString(String(char).lowercaseString)\
    \ {\n            let index = vowels.startIndex.distanceTo(vowels.startIndex.advancedBy(vowels.characters.indexOf(char)!\
    \ + 2))\n            encoded.append(vowels[vowels.startIndex.advancedBy(index)])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpy3o9h8mn.swift:15:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpy3o9h8mn.swift:16:19:\
    \ error: value of type 'String' has no member 'containsString'\n        if vowels.containsString(String(char).lowercaseString)\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmpy3o9h8mn.swift:16:47: error: value\
    \ of type 'String' has no member 'lowercaseString'\n        if vowels.containsString(String(char).lowercaseString)\
    \ {\n                                 ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpy3o9h8mn.swift:17:43:\
    \ error: value of type 'String.Index' has no member 'distanceTo'\n           \
    \ let index = vowels.startIndex.distanceTo(vowels.startIndex.advancedBy(vowels.characters.indexOf(char)!\
    \ + 2))\n                        ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpy3o9h8mn.swift:17:72:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n           \
    \ let index = vowels.startIndex.distanceTo(vowels.startIndex.advancedBy(vowels.characters.indexOf(char)!\
    \ + 2))\n                                                     ~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~\n/tmp/tmpy3o9h8mn.swift:17:101: error: value of type 'String' has\
    \ no member 'indexOf'\n            let index = vowels.startIndex.distanceTo(vowels.startIndex.advancedBy(vowels.characters.indexOf(char)!\
    \ + 2))\n                                                                    \
    \              ~~~~~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmpy3o9h8mn.swift:18:53: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n            encoded.append(vowels[vowels.startIndex.advancedBy(index)])\n\
    \                                  ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encodedMessage = \"\"\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for char in message.lowercased() {\n        if vowels.contains(String(char))\
    \ {\n            if let index = alphabet.index(of: char) {\n                let\
    \ newIndex = alphabet.index(index, offsetBy: 2)\n                encodedMessage.append(alphabet[newIndex])\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpouvn0r4w/tmpouvn0r4w.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9901c6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9901961b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9901961988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b99019607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpouvn0r4w                        0x0000559c23759937 <unavailable> + 6455

    5    libc.so.6                          0x00002b9901e56460 __libc_start_main +
    245

    6    tmpouvn0r4w                        0x0000559c23759489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpuxy54hfc/tmpuxy54hfc.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b38da61cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b38da313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b38da313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38da3127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuxy54hfc                        0x000055bc3bde7307 <unavailable> + 4871

    5    libc.so.6                          0x00002b38da808460 __libc_start_main +
    245

    6    tmpuxy54hfc                        0x000055bc3bde6f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encodedMessage = \"\"\n    for\
    \ char in message.characters {\n        if char.isVowel() {\n            encodedMessage.append(char.next().next())\n\
    \        } else {\n            encodedMessage.append(char.swapCase())\n      \
    \  }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp6ej_wwhn.swift:14:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp6ej_wwhn.swift:15:17:\
    \ error: value of type 'Character' has no member 'isVowel'\n        if char.isVowel()\
    \ {\n           ~~~~ ^~~~~~~\n/tmp/tmp6ej_wwhn.swift:16:40: error: value of type\
    \ 'Character' has no member 'next'\n            encodedMessage.append(char.next().next())\n\
    \                                  ~~~~ ^~~~\n/tmp/tmp6ej_wwhn.swift:18:40: error:\
    \ value of type 'Character' has no member 'swapCase'\n            encodedMessage.append(char.swapCase())\n\
    \                                  ~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpuxy54hfc/tmpuxy54hfc.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b38da61cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b38da313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b38da313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38da3127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuxy54hfc                        0x000055bc3bde7307 <unavailable> + 4871

    5    libc.so.6                          0x00002b38da808460 __libc_start_main +
    245

    6    tmpuxy54hfc                        0x000055bc3bde6f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encodedMessage = \"\"\n    for\
    \ char in message.characters {\n        if char.isVowel() {\n            encodedMessage.append(char.next(2).lowercased())\n\
    \        } else {\n            encodedMessage.append(char.lowercased())\n    \
    \    }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpzow29i5r.swift:14:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpzow29i5r.swift:15:17:\
    \ error: value of type 'Character' has no member 'isVowel'\n        if char.isVowel()\
    \ {\n           ~~~~ ^~~~~~~\n/tmp/tmpzow29i5r.swift:16:40: error: value of type\
    \ 'Character' has no member 'next'\n            encodedMessage.append(char.next(2).lowercased())\n\
    \                                  ~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for letter in\
    \ message.lowercased() {\n        if let index = alphabet.index(of: letter) {\n\
    \            if vowels.contains(letter) {\n                let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n                encoded.append(alphabet[newIndex])\n         \
    \   } else {\n                encoded.append(letter)\n            }\n        }\n\
    \    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp8gvcwpct/tmp8gvcwpct.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98f9fb4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98f9cabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98f9cab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98f9caa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8gvcwpct                        0x000055a2a001a7d7 <unavailable> + 6103

    5    libc.so.6                          0x00002b98fa1a0460 __libc_start_main +
    245

    6    tmp8gvcwpct                        0x000055a2a001a329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message.lowercased()\
    \ {\n        if vowels.contains(char) {\n            let index = letters.index(of:\
    \ char)!\n            let newIndex = letters.index(index, offsetBy: 2)\n     \
    \       encoded.append(letters[newIndex])\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp96nwwedh/tmp96nwwedh.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e55be0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e558d7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e558d7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e558d67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp96nwwedh                        0x0000558f85905867 <unavailable> + 6247

    5    libc.so.6                          0x00002b9e55dcc460 __libc_start_main +
    245

    6    tmp96nwwedh                        0x0000558f859053b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for character\
    \ in message.lowercased() {\n        if vowels.contains(character) {\n       \
    \     if let index = alphabet.index(of: character) {\n                let nextIndex\
    \ = alphabet.index(index, offsetBy: 2)\n                encoded.append(alphabet[nextIndex])\n\
    \            }\n        } else {\n            encoded.append(character)\n    \
    \    }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmphdbpo3rg/tmphdbpo3rg.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae21a63dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae21a334b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae21a334988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae21a3337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphdbpo3rg                        0x000055e8294d37d7 <unavailable> + 6103

    5    libc.so.6                          0x00002ae21a829460 __libc_start_main +
    245

    6    tmphdbpo3rg                        0x000055e8294d3329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char\
    \ in message.lowercased() {\n        if vowels.contains(char) {\n            let\
    \ index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.distance(from:\
    \ alphabet.startIndex, to: alphabet.index(of: char)!))\n            encodedMessage.append(alphabet[alphabet.index(index,\
    \ offsetBy: 2)])\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmphc22cdl_/tmphc22cdl_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b44d8c8fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b44d8986b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b44d8986988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b44d89857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphc22cdl_                        0x000055c1e1a51927 <unavailable> + 6439

    5    libc.so.6                          0x00002b44d8e7b460 __libc_start_main +
    245

    6    tmphc22cdl_                        0x000055c1e1a51479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for character\
    \ in message.lowercased() {\n        if vowels.contains(character) {\n       \
    \     let index = alphabet.index(of: character)!\n            let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n      \
    \  } else {\n            encodedMessage.append(character)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpeb1ep9xs/tmpeb1ep9xs.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61462cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6145fc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6145fc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6145fc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeb1ep9xs                        0x0000560820ec7867 <unavailable> + 6247

    5    libc.so.6                          0x00002b61464b6460 __libc_start_main +
    245

    6    tmpeb1ep9xs                        0x0000560820ec73b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char\
    \ in message.lowercased() {\n        if vowels.contains(char) {\n            if\
    \ let index = vowels.index(of: char) {\n                let nextIndex = vowels.index(index,\
    \ offsetBy: 2)\n                encodedMessage.append(vowels[nextIndex])\n   \
    \         }\n        } else if letters.contains(char) {\n            if let index\
    \ = letters.index(of: char) {\n                let nextIndex = letters.index(index,\
    \ offsetBy: 2)\n                encodedMessage.append(letters[nextIndex])\n  \
    \          }\n        } else {\n            encodedMessage.append(char)\n    \
    \    }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpx8pac4h7/tmpx8pac4h7.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aefaf494c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aefaf18bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aefaf18b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aefaf18a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx8pac4h7                        0x00005636d0b5d6e7 <unavailable> + 5863

    5    libc.so.6                          0x00002aefaf680460 __libc_start_main +
    245

    6    tmpx8pac4h7                        0x00005636d0b5d329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char\
    \ in message.lowercased() {\n        if vowels.contains(char) {\n            let\
    \ index = alphabet.index(of: char)!\n            let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n      \
    \  } else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmptvn8k_mj/tmptvn8k_mj.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22a4b1ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22a4811b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22a4811988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22a48107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptvn8k_mj                        0x000055a517980867 <unavailable> + 6247

    5    libc.so.6                          0x00002b22a4d06460 __libc_start_main +
    245

    6    tmptvn8k_mj                        0x000055a5179803b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for letter\
    \ in message.lowercased() {\n        if vowels.contains(letter) {\n          \
    \  let index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.index(of:\
    \ letter)! + 2)\n            encodedMessage.append(alphabet[index])\n        }\
    \ else {\n            encodedMessage.append(letter)\n        }\n    }\n    return\
    \ encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpz79xc3tw.swift:18:97: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n            let index = alphabet.index(alphabet.startIndex,\
    \ offsetBy: alphabet.index(of: letter)! + 2)\n                               \
    \                                                                 ^\n"
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message.lowercased()\
    \ {\n        if vowels.contains(char) {\n            if let index = alphabet.index(of:\
    \ char) {\n                let newIndex = alphabet.index(index, offsetBy: 2)\n\
    \                encoded.append(alphabet[newIndex])\n            }\n        }\
    \ else {\n            encoded.append(char)\n        }\n    }\n    return encoded\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp3cs64oht/tmp3cs64oht.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cc0dd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cc0accb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cc0acc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cc0acb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3cs64oht                        0x000056481d9487d7 <unavailable> + 6103

    5    libc.so.6                          0x00002b6cc0fc1460 __libc_start_main +
    245

    6    tmp3cs64oht                        0x000056481d948329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char\
    \ in message.lowercased() {\n        if let index = alphabet.index(of: char) {\n\
    \            encodedMessage.append(alphabet[alphabet.index(index, offsetBy: 2)])\n\
    \        } else if let index = vowels.index(of: char) {\n            encodedMessage.append(vowels[vowels.index(index,\
    \ offsetBy: 2)])\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpm8k7i926/tmpm8k7i926.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1125cd4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11259cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11259cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11259ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm8k7i926                        0x000055c53d442647 <unavailable> + 5703

    5    libc.so.6                          0x00002b1125ec0460 __libc_start_main +
    245

    6    tmpm8k7i926                        0x000055c53d442289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encodedMessage = \"\"\n    for\
    \ character in message.characters {\n        if character.isVowel() {\n      \
    \      encodedMessage.append(character.getNextVowel())\n        } else {\n   \
    \         encodedMessage.append(character.swapCase())\n        }\n    }\n    return\
    \ encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpal61eymw.swift:14:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    for character in message.characters {\n           \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpal61eymw.swift:15:22: error: value of type 'Character' has no member\
    \ 'isVowel'\n        if character.isVowel() {\n           ~~~~~~~~~ ^~~~~~~\n\
    /tmp/tmpal61eymw.swift:16:45: error: value of type 'Character' has no member 'getNextVowel'\n\
    \            encodedMessage.append(character.getNextVowel())\n               \
    \                   ~~~~~~~~~ ^~~~~~~~~~~~\n/tmp/tmpal61eymw.swift:18:45: error:\
    \ value of type 'Character' has no member 'swapCase'\n            encodedMessage.append(character.swapCase())\n\
    \                                  ~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message.lowercased()\
    \ {\n        if vowels.contains(char) {\n            let index = alphabet.index(alphabet.startIndex,\
    \ offsetBy: alphabet.distance(from: alphabet.startIndex, to: alphabet.firstIndex(of:\
    \ char)!))\n            let nextIndex = alphabet.index(index, offsetBy: 2)\n \
    \           encoded.append(alphabet[nextIndex])\n        } else {\n          \
    \  encoded.append(char)\n        }\n    }\n    return encoded\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpx43huhqr/tmpx43huhqr.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d23130c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d22e27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d22e27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d22e267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx43huhqr                        0x000056284c66f927 <unavailable> + 6439

    5    libc.so.6                          0x00002b1d2331c460 __libc_start_main +
    245

    6    tmpx43huhqr                        0x000056284c66f479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for letter\
    \ in message.lowercased() {\n        if vowels.contains(letter) {\n          \
    \  let index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.distance(from:\
    \ alphabet.startIndex, to: alphabet.index(of: letter)!) + 2)\n            encodedMessage.append(alphabet[index])\n\
    \        } else {\n            encodedMessage.append(letter)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp_rg2mls_/tmp_rg2mls_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cd7e2cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cd7b23b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cd7b23988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cd7b227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_rg2mls_                        0x0000559494317927 <unavailable> + 6439

    5    libc.so.6                          0x00002b6cd8018460 __libc_start_main +
    245

    6    tmp_rg2mls_                        0x0000559494317479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message.lowercased()\
    \ {\n        if vowels.contains(char) {\n            let index = alphabet.index(alphabet.startIndex,\
    \ offsetBy: alphabet.distance(from: alphabet.startIndex, to: alphabet.index(of:\
    \ char)!))\n            encoded.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n        } else {\n            encoded.append(char)\n        }\n    }\n\
    \    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpdkdcdz76/tmpdkdcdz76.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6ec9c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6ec6b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6ec6b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6ec6b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdkdcdz76                        0x000055fbfee64927 <unavailable> + 6439

    5    libc.so.6                          0x00002ab6ecbad460 __libc_start_main +
    245

    6    tmpdkdcdz76                        0x000055fbfee64479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char\
    \ in message.lowercased() {\n        if vowels.contains(char) {\n            if\
    \ let index = alphabet.index(of: char) {\n                let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n                encodedMessage.append(alphabet[newIndex])\n  \
    \          }\n        } else {\n            encodedMessage.append(char)\n    \
    \    }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpkohsbdy7/tmpkohsbdy7.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6042209c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6041f00b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6041f00988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6041eff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkohsbdy7                        0x000055d2bed197d7 <unavailable> + 6103

    5    libc.so.6                          0x00002b60423f5460 __libc_start_main +
    245

    6    tmpkohsbdy7                        0x000055d2bed19329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for character\
    \ in message.lowercased() {\n        if let index = alphabet.index(of: character)\
    \ {\n            encodedMessage.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n        } else if let index = vowels.index(of: character) {\n        \
    \    encodedMessage.append(vowels[vowels.index(index, offsetBy: 2)])\n       \
    \ } else {\n            encodedMessage.append(character)\n        }\n    }\n \
    \   return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp7_k0guf6/tmp7_k0guf6.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8db5873c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8db556ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8db556a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8db55697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7_k0guf6                        0x000056396970c647 <unavailable> + 5703

    5    libc.so.6                          0x00002b8db5a5f460 __libc_start_main +
    245

    6    tmp7_k0guf6                        0x000056396970c289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let vowels2\
    \ = \"cdfghjklmnpqrstvwxyz\"\n    let vowels3 = \"bdfhjlnprtvxz\"\n    let vowels4\
    \ = \"aeiou\"\n    let vowels5 = \"cdfghjklmnpqrstvwxyz\"\n    let vowels6 = \"\
    bdfhjlnprtvxz\"\n    var encoded = \"\"\n    for char in message.characters {\n\
    \        if vowels.containsString(String(char)) {\n            if vowels2.containsString(String(char))\
    \ {\n                if vowels3.containsString(String(char)) {\n             \
    \       if vowels4.containsString(String(char)) {\n                        if\
    \ vowels5.containsString(String(char)) {\n                            if vowels6.containsString(String(char))\
    \ {\n                                encoded.append(char)\n                  \
    \          } else {\n                                encoded.append(vowels[vowels.startIndex.advancedBy(4)])\n\
    \                            }\n                        } else {\n           \
    \                 encoded.append(vowels[vowels.startIndex.advancedBy(3)])\n  \
    \                      }\n                    } else {\n                     \
    \   encoded.append(vowels[vowels.startIndex.advancedBy(2)])\n                \
    \    }\n                } else {\n                    encoded.append(vowels[vowels.startIndex.advancedBy(1)])\n\
    \                }\n            } else {\n                encoded.append(vowels[vowels.startIndex.advancedBy(0)])\n\
    \            }\n        } else {\n            encoded.append(char)\n        }\n\
    \    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmptndk0h22.swift:20:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmptndk0h22.swift:21:19:\
    \ error: value of type 'String' has no member 'containsString'\n        if vowels.containsString(String(char))\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmptndk0h22.swift:22:24: error: value\
    \ of type 'String' has no member 'containsString'\n            if vowels2.containsString(String(char))\
    \ {\n               ~~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmptndk0h22.swift:23:28: error:\
    \ value of type 'String' has no member 'containsString'\n                if vowels3.containsString(String(char))\
    \ {\n                   ~~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmptndk0h22.swift:24:32:\
    \ error: value of type 'String' has no member 'containsString'\n             \
    \       if vowels4.containsString(String(char)) {\n                       ~~~~~~~\
    \ ^~~~~~~~~~~~~~\n/tmp/tmptndk0h22.swift:25:36: error: value of type 'String'\
    \ has no member 'containsString'\n                        if vowels5.containsString(String(char))\
    \ {\n                           ~~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmptndk0h22.swift:26:40:\
    \ error: value of type 'String' has no member 'containsString'\n             \
    \               if vowels6.containsString(String(char)) {\n                  \
    \             ~~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmptndk0h22.swift:29:73: error: value\
    \ of type 'String.Index' has no member 'advancedBy'\n                        \
    \        encoded.append(vowels[vowels.startIndex.advancedBy(4)])\n           \
    \                                           ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmptndk0h22.swift:32:69:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n           \
    \                 encoded.append(vowels[vowels.startIndex.advancedBy(3)])\n  \
    \                                                ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmptndk0h22.swift:35:65: error: value of type 'String.Index' h"
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message.lowercased() {\n        if let index = alphabet.index(of:\
    \ char) {\n            let newIndex = alphabet.index(index, offsetBy: 2)\n   \
    \         if vowels.contains(String(char)) {\n                encoded.append(alphabet[newIndex])\n\
    \            } else {\n                encoded.append(alphabet[index])\n     \
    \       }\n        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpdj9fmsw9/tmpdj9fmsw9.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7884da2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7884a99b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7884a99988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7884a987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdj9fmsw9                        0x000055f8c09fc937 <unavailable> + 6455

    5    libc.so.6                          0x00002b7884f8e460 __libc_start_main +
    245

    6    tmpdj9fmsw9                        0x000055f8c09fc489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char\
    \ in message.lowercased() {\n        if vowels.contains(char) {\n            let\
    \ index = alphabet.index(of: char)!\n            let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n      \
    \  } else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmptvn8k_mj/tmptvn8k_mj.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22a4b1ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22a4811b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22a4811988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22a48107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptvn8k_mj                        0x000055a517980867 <unavailable> + 6247

    5    libc.so.6                          0x00002b22a4d06460 __libc_start_main +
    245

    6    tmptvn8k_mj                        0x000055a5179803b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message.lowercased()\
    \ {\n        if vowels.contains(char) {\n            let index = letters.index(of:\
    \ char)!\n            let newIndex = letters.index(index, offsetBy: 2)\n     \
    \       encoded.append(letters[newIndex])\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp96nwwedh/tmp96nwwedh.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e55be0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e558d7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e558d7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e558d67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp96nwwedh                        0x0000558f85905867 <unavailable> + 6247

    5    libc.so.6                          0x00002b9e55dcc460 __libc_start_main +
    245

    6    tmp96nwwedh                        0x0000558f859053b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encodedMessage = \"\"\n    for\
    \ character in message.characters {\n        if character.isVowel() {\n      \
    \      encodedMessage.append(character.nextVowel())\n        } else {\n      \
    \      encodedMessage.append(character.swapCase())\n        }\n    }\n    return\
    \ encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpi6lkf1_x.swift:14:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    for character in message.characters {\n           \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpi6lkf1_x.swift:15:22: error: value of type 'Character' has no member\
    \ 'isVowel'\n        if character.isVowel() {\n           ~~~~~~~~~ ^~~~~~~\n\
    /tmp/tmpi6lkf1_x.swift:16:45: error: value of type 'Character' has no member 'nextVowel'\n\
    \            encodedMessage.append(character.nextVowel())\n                  \
    \                ~~~~~~~~~ ^~~~~~~~~\n/tmp/tmpi6lkf1_x.swift:18:45: error: value\
    \ of type 'Character' has no member 'swapCase'\n            encodedMessage.append(character.swapCase())\n\
    \                                  ~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824430
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char\
    \ in message.lowercased() {\n        if let index = alphabet.index(of: char) {\n\
    \            let newIndex = (index + 2) % alphabet.count\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpmb12n2pf.swift:17:33: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let index = alphabet.index(of: char) {\n  \
    \                              ^\n/tmp/tmpmb12n2pf.swift:17:33: note: use 'firstIndex(of:)'\
    \ instead\n        if let index = alphabet.index(of: char) {\n               \
    \                 ^~~~~\n                                firstIndex\n/tmp/tmpmb12n2pf.swift:18:29:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n            let newIndex = (index + 2) % alphabet.count\n           \
    \                 ^\n"
  stdout: ''
  timestamp: 1659824431
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encodedMessage = \"\"\n    for\
    \ character in message.characters {\n        if character.isVowel() {\n      \
    \      encodedMessage.append(character.next().next())\n        } else {\n    \
    \        encodedMessage.append(character.swapCase())\n        }\n    }\n    return\
    \ encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp8y17wt9n.swift:14:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    for character in message.characters {\n           \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp8y17wt9n.swift:15:22: error: value of type 'Character' has no member\
    \ 'isVowel'\n        if character.isVowel() {\n           ~~~~~~~~~ ^~~~~~~\n\
    /tmp/tmp8y17wt9n.swift:16:45: error: value of type 'Character' has no member 'next'\n\
    \            encodedMessage.append(character.next().next())\n                \
    \                  ~~~~~~~~~ ^~~~\n/tmp/tmp8y17wt9n.swift:18:45: error: value\
    \ of type 'Character' has no member 'swapCase'\n            encodedMessage.append(character.swapCase())\n\
    \                                  ~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824431
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message.lowercased()\
    \ {\n        if vowels.contains(char) {\n            let index = letters.index(letters.startIndex,\
    \ offsetBy: letters.index(of: char)! + 2)\n            encoded.append(letters[index])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp5d5y7_ag.swift:18:92: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n            let index = letters.index(letters.startIndex,\
    \ offsetBy: letters.index(of: char)! + 2)\n                                  \
    \                                                         ^\n"
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels: [Character] = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character] = [\"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\"]\n    var encodedMessage: String = \"\"\n    for character in message\
    \ {\n        if vowels.contains(character) {\n            let index = alphabet.firstIndex(of:\
    \ character)!\n            encodedMessage.append(alphabet[(index + 2) % 26])\n\
    \        } else if alphabet.contains(character) {\n            let index = alphabet.firstIndex(of:\
    \ character)!\n            encodedMessage.append(alphabet[(index + 13) % 26])\n\
    \        } else {\n            encodedMessage.append(character)\n        }\n \
    \   }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpdawzccvy/tmpdawzccvy.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23c5219c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23c4f10b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23c4f10988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23c4f0f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdawzccvy                        0x00005628a1780827 <unavailable> + 6183

    5    libc.so.6                          0x00002b23c5405460 __libc_start_main +
    245

    6    tmpdawzccvy                        0x00005628a1780469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message.lowercased()\
    \ {\n        if let index = alphabet.index(of: char) {\n            let newIndex\
    \ = (index + 2) % alphabet.count\n            encoded.append(alphabet[newIndex])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmps79l8o1f.swift:17:33: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let index = alphabet.index(of: char) {\n  \
    \                              ^\n/tmp/tmps79l8o1f.swift:17:33: note: use 'firstIndex(of:)'\
    \ instead\n        if let index = alphabet.index(of: char) {\n               \
    \                 ^~~~~\n                                firstIndex\n/tmp/tmps79l8o1f.swift:18:29:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n            let newIndex = (index + 2) % alphabet.count\n           \
    \                 ^\n"
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var result = \"\"\n    let vowels =\
    \ \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for char in\
    \ message.lowercased() {\n        if let index = alphabet.index(of: char) {\n\
    \            if vowels.contains(char) {\n                let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n                result.append(alphabet[newIndex])\n          \
    \  } else {\n                result.append(alphabet[index])\n            }\n \
    \       }\n    }\n    return result.uppercased()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpfmjsjv_i/tmpfmjsjv_i.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afac4e70c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afac4b67b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afac4b67988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afac4b667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfmjsjv_i                        0x000055665aaf7737 <unavailable> + 5943

    5    libc.so.6                          0x00002afac505c460 __libc_start_main +
    245

    6    tmpfmjsjv_i                        0x000055665aaf7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message.lowercased() {\n        if vowels.contains(String(char))\
    \ {\n            let index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.distance(from:\
    \ alphabet.startIndex, to: alphabet.index(of: char)!) + 2)\n            encodedMessage.append(alphabet[index])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpxmdzvrj7/tmpxmdzvrj7.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b226278ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2262481b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2262481988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22624807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxmdzvrj7                        0x00005632da7c9a87 <unavailable> + 6791

    5    libc.so.6                          0x00002b2262976460 __libc_start_main +
    245

    6    tmpxmdzvrj7                        0x00005632da7c95d9 <unavailable> + 5593

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for letter\
    \ in message.lowercased() {\n        if vowels.contains(letter) {\n          \
    \  let index = letters.index(of: letter)!\n            let newIndex = letters.index(index,\
    \ offsetBy: 2)\n            encodedMessage.append(letters[newIndex])\n       \
    \ } else {\n            encodedMessage.append(letter)\n        }\n    }\n    return\
    \ encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpbnwqul15/tmpbnwqul15.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbb2a4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbb2742b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbb2742988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbb27417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbnwqul15                        0x000055e8de276867 <unavailable> + 6247

    5    libc.so.6                          0x00002adbb2c37460 __libc_start_main +
    245

    6    tmpbnwqul15                        0x000055e8de2763b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char\
    \ in message.lowercased() {\n        if vowels.contains(char) {\n            let\
    \ index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.distance(from:\
    \ alphabet.startIndex, to: alphabet.index(of: char)!) + 2)\n            encodedMessage.append(alphabet[index])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmprl2lg6xw/tmprl2lg6xw.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b642994ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6429645b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6429645988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64296447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprl2lg6xw                        0x00005637354ca927 <unavailable> + 6439

    5    libc.so.6                          0x00002b6429b3a460 __libc_start_main +
    245

    6    tmprl2lg6xw                        0x00005637354ca479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"]\n    var encodedMessage = \"\"\n    for char in message.characters\
    \ {\n        if vowels.contains(String(char).lowercased()) {\n            let\
    \ index = vowels.index(of: String(char).lowercased())\n            let newIndex\
    \ = (index! + 2) % 5\n            encodedMessage += vowels[newIndex].uppercased()\n\
    \        } else {\n            encodedMessage += String(char).uppercased()\n \
    \       }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp50yc8gh9.swift:15:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp50yc8gh9.swift:17:32:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        \
    \    let index = vowels.index(of: String(char).lowercased())\n               \
    \                ^\n/tmp/tmp50yc8gh9.swift:17:32: note: use 'firstIndex(of:)'\
    \ instead\n            let index = vowels.index(of: String(char).lowercased())\n\
    \                               ^~~~~\n                               firstIndex\n"
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for letter\
    \ in message.lowercased() {\n        if vowels.contains(letter) {\n          \
    \  let index = letters.index(of: letter)!\n            let nextIndex = letters.index(index,\
    \ offsetBy: 2)\n            encodedMessage.append(letters[nextIndex])\n      \
    \  } else {\n            encodedMessage.append(letter)\n        }\n    }\n   \
    \ return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpdjma8_74/tmpdjma8_74.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4037e42c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4037b39b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4037b39988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4037b387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdjma8_74                        0x000055662d14f867 <unavailable> + 6247

    5    libc.so.6                          0x00002b403802e460 __libc_start_main +
    245

    6    tmpdjma8_74                        0x000055662d14f3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"]\n    var encodedMessage = \"\"\n    for char in message.characters\
    \ {\n        if vowels.contains(String(char).lowercased()) {\n            encodedMessage\
    \ += String(char).lowercased() == \"u\" ? \"a\" : String(characters.index(after:\
    \ characters.index(of: char)!)!)\n        } else {\n            encodedMessage\
    \ += String(char).lowercased() == String(char) ? String(characters.index(of: char)!).uppercased()\
    \ : String(characters.index(of: char)!)\n        }\n    }\n    return encodedMessage\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpw042vdes.swift:15:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpw042vdes.swift:17:79:\
    \ error: cannot find 'characters' in scope\n            encodedMessage += String(char).lowercased()\
    \ == \"u\" ? \"a\" : String(characters.index(after: characters.index(of: char)!)!)\n\
    \                                                                            \
    \  ^~~~~~~~~~\n/tmp/tmpw042vdes.swift:17:103: error: cannot find 'characters'\
    \ in scope\n            encodedMessage += String(char).lowercased() == \"u\" ?\
    \ \"a\" : String(characters.index(after: characters.index(of: char)!)!)\n    \
    \                                                                            \
    \                      ^~~~~~~~~~\n/tmp/tmpw042vdes.swift:19:82: error: cannot\
    \ find 'characters' in scope\n            encodedMessage += String(char).lowercased()\
    \ == String(char) ? String(characters.index(of: char)!).uppercased() : String(characters.index(of:\
    \ char)!)\n                                                                  \
    \               ^~~~~~~~~~\n/tmp/tmpw042vdes.swift:19:133: error: cannot find\
    \ 'characters' in scope\n            encodedMessage += String(char).lowercased()\
    \ == String(char) ? String(characters.index(of: char)!).uppercased() : String(characters.index(of:\
    \ char)!)\n                                                                  \
    \                                                                  ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for letter\
    \ in message.lowercased() {\n        if vowels.contains(letter) {\n          \
    \  let index = letters.index(of: letter)!\n            let newIndex = letters.index(index,\
    \ offsetBy: 2)\n            encodedMessage.append(letters[newIndex])\n       \
    \ } else {\n            encodedMessage.append(letter)\n        }\n    }\n    return\
    \ encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpbnwqul15/tmpbnwqul15.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbb2a4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbb2742b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbb2742988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbb27417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbnwqul15                        0x000055e8de276867 <unavailable> + 6247

    5    libc.so.6                          0x00002adbb2c37460 __libc_start_main +
    245

    6    tmpbnwqul15                        0x000055e8de2763b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    let alphabetUpper = alphabet.uppercaseString\n\
    \    var encodedMessage = \"\"\n    for char in message.characters {\n       \
    \ if vowels.containsString(String(char)) {\n            let index = alphabet.startIndex.distanceTo(alphabet.startIndex.advancedBy(alphabet.characters.indexOf(char)!\
    \ + 2))\n            encodedMessage.append(alphabet[alphabet.startIndex.advancedBy(index)])\n\
    \        } else if alphabetUpper.containsString(String(char)) {\n            let\
    \ index = alphabetUpper.startIndex.distanceTo(alphabetUpper.startIndex.advancedBy(alphabetUpper.characters.indexOf(char)!\
    \ + 2))\n            encodedMessage.append(alphabetUpper[alphabetUpper.startIndex.advancedBy(index)])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp3dyo_lds.swift:15:34: error: value of type 'String' has no member\
    \ 'uppercaseString'\n    let alphabetUpper = alphabet.uppercaseString\n      \
    \                  ~~~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp3dyo_lds.swift:17:25: error:\
    \ 'characters' is unavailable: Please use String directly\n    for char in message.characters\
    \ {\n                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp3dyo_lds.swift:18:19: error: value of type 'String'\
    \ has no member 'containsString'\n        if vowels.containsString(String(char))\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmp3dyo_lds.swift:19:45: error: value\
    \ of type 'String.Index' has no member 'distanceTo'\n            let index = alphabet.startIndex.distanceTo(alphabet.startIndex.advancedBy(alphabet.characters.indexOf(char)!\
    \ + 2))\n                        ~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp3dyo_lds.swift:19:76:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n           \
    \ let index = alphabet.startIndex.distanceTo(alphabet.startIndex.advancedBy(alphabet.characters.indexOf(char)!\
    \ + 2))\n                                                       ~~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~\n/tmp/tmp3dyo_lds.swift:19:107: error: value of type 'String' has\
    \ no member 'indexOf'\n            let index = alphabet.startIndex.distanceTo(alphabet.startIndex.advancedBy(alphabet.characters.indexOf(char)!\
    \ + 2))\n                                                                    \
    \                  ~~~~~~~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmp3dyo_lds.swift:20:64:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n           \
    \ encodedMessage.append(alphabet[alphabet.startIndex.advancedBy(index)])\n   \
    \                                        ~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824431
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encodedMessage = \"\"\n    for\
    \ character in message.characters {\n        if character.isVowel() {\n      \
    \      encodedMessage.append(character.next().next())\n        } else {\n    \
    \        encodedMessage.append(character.swapCase())\n        }\n    }\n    return\
    \ encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp8y17wt9n.swift:14:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    for character in message.characters {\n           \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp8y17wt9n.swift:15:22: error: value of type 'Character' has no member\
    \ 'isVowel'\n        if character.isVowel() {\n           ~~~~~~~~~ ^~~~~~~\n\
    /tmp/tmp8y17wt9n.swift:16:45: error: value of type 'Character' has no member 'next'\n\
    \            encodedMessage.append(character.next().next())\n                \
    \                  ~~~~~~~~~ ^~~~\n/tmp/tmp8y17wt9n.swift:18:45: error: value\
    \ of type 'Character' has no member 'swapCase'\n            encodedMessage.append(character.swapCase())\n\
    \                                  ~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for character\
    \ in message.lowercased() {\n        if vowels.contains(character) {\n       \
    \     let index = alphabet.index(of: character)!\n            let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n      \
    \  } else {\n            encodedMessage.append(character)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpeb1ep9xs/tmpeb1ep9xs.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61462cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6145fc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6145fc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6145fc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeb1ep9xs                        0x0000560820ec7867 <unavailable> + 6247

    5    libc.so.6                          0x00002b61464b6460 __libc_start_main +
    245

    6    tmpeb1ep9xs                        0x0000560820ec73b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels: [Character] = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character] = [\"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\"]\n    var encodedMessage: String = \"\"\n    for char in message {\n \
    \       if vowels.contains(char) {\n            let index = alphabet.firstIndex(of:\
    \ char)!\n            encodedMessage.append(alphabet[(index + 2) % alphabet.count])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpe57hz6v5/tmpe57hz6v5.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2df682c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af2df379b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af2df379988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2df3787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe57hz6v5                        0x0000559873c48877 <unavailable> + 6263

    5    libc.so.6                          0x00002af2df86e460 __libc_start_main +
    245

    6    tmpe57hz6v5                        0x0000559873c484b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for letter in\
    \ message.lowercased() {\n        if vowels.contains(letter) {\n            let\
    \ index = letters.index(letters.startIndex, offsetBy: letters.index(of: letter)!\
    \ + 2)\n            encoded.append(letters[index])\n        } else {\n       \
    \     encoded.append(letter)\n        }\n    }\n    return encoded\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpbvvifhjx.swift:18:94: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n            let index = letters.index(letters.startIndex,\
    \ offsetBy: letters.index(of: letter)! + 2)\n                                \
    \                                                             ^\n"
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels: Set<Character> = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character] = [\"a\", \"b\",\
    \ \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var encodedMessage = \"\"\n    for char in message {\n  \
    \      if vowels.contains(char) {\n            let index = alphabet.firstIndex(of:\
    \ char)!\n            let newIndex = (index + 2) % alphabet.count\n          \
    \  encodedMessage.append(alphabet[newIndex])\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpzci5bgxa/tmpzci5bgxa.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8aec84fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8aec546b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8aec546988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8aec5457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzci5bgxa                        0x000056032daf9907 <unavailable> + 6407

    5    libc.so.6                          0x00002b8aeca3b460 __libc_start_main +
    245

    6    tmpzci5bgxa                        0x000056032daf9549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message.lowercased() {\n        if vowels.contains(String(char))\
    \ {\n            let index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.index(of:\
    \ char)! + 2)\n            encodedMessage.append(alphabet[index])\n        } else\
    \ {\n            encodedMessage.append(char)\n        }\n    }\n    return encodedMessage\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpq86njrza.swift:18:95: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n            let index = alphabet.index(alphabet.startIndex,\
    \ offsetBy: alphabet.index(of: char)! + 2)\n                                 \
    \                                                             ^\n"
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char\
    \ in message.lowercased() {\n        if vowels.contains(char) {\n            let\
    \ index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.distance(from:\
    \ alphabet.startIndex, to: alphabet.index(of: char)!))\n            encodedMessage.append(alphabet[alphabet.index(index,\
    \ offsetBy: 2)])\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmphc22cdl_/tmphc22cdl_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b44d8c8fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b44d8986b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b44d8986988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b44d89857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphc22cdl_                        0x000055c1e1a51927 <unavailable> + 6439

    5    libc.so.6                          0x00002b44d8e7b460 __libc_start_main +
    245

    6    tmphc22cdl_                        0x000055c1e1a51479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encodedMessage = \"\"\n    for\
    \ char in message.characters {\n        if char.isVowel() {\n            encodedMessage.append(char.nextVowel())\n\
    \        } else {\n            encodedMessage.append(char.swapCase())\n      \
    \  }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpoh47w_2e.swift:14:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpoh47w_2e.swift:15:17:\
    \ error: value of type 'Character' has no member 'isVowel'\n        if char.isVowel()\
    \ {\n           ~~~~ ^~~~~~~\n/tmp/tmpoh47w_2e.swift:16:40: error: value of type\
    \ 'Character' has no member 'nextVowel'\n            encodedMessage.append(char.nextVowel())\n\
    \                                  ~~~~ ^~~~~~~~~\n/tmp/tmpoh47w_2e.swift:18:40:\
    \ error: value of type 'Character' has no member 'swapCase'\n            encodedMessage.append(char.swapCase())\n\
    \                                  ~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824431
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encodedMessage = \"\"\n    for\
    \ character in message.characters {\n        if character.isLetter {\n       \
    \     if character.isUpper {\n                encodedMessage.append(character.lowercased())\n\
    \            } else {\n                encodedMessage.append(character.uppercased())\n\
    \            }\n        } else {\n            encodedMessage.append(character)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp3w2zbd62.swift:14:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    for character in message.characters {\n           \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp3w2zbd62.swift:16:26: error: value of type 'Character' has no member\
    \ 'isUpper'\n            if character.isUpper {\n               ~~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824431
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message.lowercased()\
    \ {\n        if vowels.contains(char) {\n            let index = letters.index(letters.startIndex,\
    \ offsetBy: letters.index(of: char)! + 2)\n            encoded.append(letters[index])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp5d5y7_ag.swift:18:92: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n            let index = letters.index(letters.startIndex,\
    \ offsetBy: letters.index(of: char)! + 2)\n                                  \
    \                                                         ^\n"
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char\
    \ in message.lowercased() {\n        if vowels.contains(char) {\n            let\
    \ index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.distance(from:\
    \ alphabet.startIndex, to: alphabet.firstIndex(of: char)!))\n            let newIndex\
    \ = alphabet.index(index, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpgg3rkp_w/tmpgg3rkp_w.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0da8cd9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0da89d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0da89d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0da89cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgg3rkp_w                        0x00005631324eb927 <unavailable> + 6439

    5    libc.so.6                          0x00002b0da8ec5460 __libc_start_main +
    245

    6    tmpgg3rkp_w                        0x00005631324eb479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encodedMessage = \"\"\n    let\
    \ vowels = \"aeiou\"\n    for char in message.characters {\n        if vowels.containsString(String(char))\
    \ {\n            let index = vowels.startIndex.distanceTo(vowels.startIndex.advancedBy(vowels.characters.indexOf(char)!\
    \ + 2))\n            encodedMessage.append(vowels[vowels.startIndex.advancedBy(index)])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp_kmo34s0.swift:15:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp_kmo34s0.swift:16:19:\
    \ error: value of type 'String' has no member 'containsString'\n        if vowels.containsString(String(char))\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmp_kmo34s0.swift:17:43: error: value\
    \ of type 'String.Index' has no member 'distanceTo'\n            let index = vowels.startIndex.distanceTo(vowels.startIndex.advancedBy(vowels.characters.indexOf(char)!\
    \ + 2))\n                        ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp_kmo34s0.swift:17:72:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n           \
    \ let index = vowels.startIndex.distanceTo(vowels.startIndex.advancedBy(vowels.characters.indexOf(char)!\
    \ + 2))\n                                                     ~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~\n/tmp/tmp_kmo34s0.swift:17:101: error: value of type 'String' has\
    \ no member 'indexOf'\n            let index = vowels.startIndex.distanceTo(vowels.startIndex.advancedBy(vowels.characters.indexOf(char)!\
    \ + 2))\n                                                                    \
    \              ~~~~~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmp_kmo34s0.swift:18:60: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n            encodedMessage.append(vowels[vowels.startIndex.advancedBy(index)])\n\
    \                                         ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824431
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"]\n    var encoded = \"\"\n    for char in message.characters {\n\
    \        if vowels.contains(String(char).lowercased()) {\n            let index\
    \ = vowels.index(of: String(char).lowercased())\n            if index == 4 {\n\
    \                encoded += \"a\"\n            } else {\n                encoded\
    \ += vowels[index! + 2]\n            }\n        } else {\n            encoded\
    \ += String(char)\n        }\n    }\n    return encoded\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpxi6525av.swift:15:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpxi6525av.swift:17:32:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        \
    \    let index = vowels.index(of: String(char).lowercased())\n               \
    \                ^\n/tmp/tmpxi6525av.swift:17:32: note: use 'firstIndex(of:)'\
    \ instead\n            let index = vowels.index(of: String(char).lowercased())\n\
    \                               ^~~~~\n                               firstIndex\n"
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message.lowercased()\
    \ {\n        if vowels.contains(char) {\n            if let index = alphabet.index(of:\
    \ char) {\n                let nextIndex = alphabet.index(index, offsetBy: 2)\n\
    \                encoded.append(alphabet[nextIndex])\n            }\n        }\
    \ else {\n            encoded.append(char)\n        }\n    }\n    return encoded\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp_w9micso/tmp_w9micso.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5b8e985c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5b8e67cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5b8e67c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5b8e67b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_w9micso                        0x00005612f7c617d7 <unavailable> + 6103

    5    libc.so.6                          0x00002b5b8eb71460 __libc_start_main +
    245

    6    tmp_w9micso                        0x00005612f7c61329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encoded = \"\"\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for char\
    \ in message.lowercased() {\n        if vowels.contains(char) {\n            let\
    \ index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.distance(from:\
    \ alphabet.startIndex, to: alphabet.index(of: char)!))\n            encoded.append(alphabet[alphabet.index(index,\
    \ offsetBy: 2)])\n        } else {\n            encoded.append(char)\n       \
    \ }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpe4464whs/tmpe4464whs.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac9f1951c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac9f1648b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac9f1648988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac9f16477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe4464whs                        0x000055d963bd3927 <unavailable> + 6439

    5    libc.so.6                          0x00002ac9f1b3d460 __libc_start_main +
    245

    6    tmpe4464whs                        0x000055d963bd3479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message.lowercased()\
    \ {\n        if vowels.contains(char) {\n            let index = letters.index(of:\
    \ char)!\n            let newIndex = letters.index(index, offsetBy: 2)\n     \
    \       encoded.append(letters[newIndex])\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp96nwwedh/tmp96nwwedh.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e55be0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e558d7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e558d7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e558d67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp96nwwedh                        0x0000558f85905867 <unavailable> + 6247

    5    libc.so.6                          0x00002b9e55dcc460 __libc_start_main +
    245

    6    tmp96nwwedh                        0x0000558f859053b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    return message.characters.map {\n \
    \       let char = String($0)\n        if char.lowercaseString == char {\n   \
    \         return char.uppercaseString\n        } else {\n            return char.lowercaseString\n\
    \        }\n    }.joinWithSeparator(\"\")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpchcwfv_z.swift:20:7: error: value of type 'Array<_>' has no member\
    \ 'joinWithSeparator'\n    }.joinWithSeparator(\"\")\n~~~~~ ^~~~~~~~~~~~~~~~~\n\
    /tmp/tmpchcwfv_z.swift:15:17: error: value of type 'String' has no member 'lowercaseString'\n\
    \        if char.lowercaseString == char {\n           ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824431
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char\
    \ in message.lowercased() {\n        if let index = alphabet.index(of: char) {\n\
    \            let newIndex = index + 2\n            if newIndex < alphabet.count\
    \ {\n                encodedMessage.append(alphabet[newIndex])\n            }\
    \ else {\n                encodedMessage.append(alphabet[newIndex - alphabet.count])\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpyn0bgqx2.swift:17:33: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let index = alphabet.index(of: char) {\n  \
    \                              ^\n/tmp/tmpyn0bgqx2.swift:17:33: note: use 'firstIndex(of:)'\
    \ instead\n        if let index = alphabet.index(of: char) {\n               \
    \                 ^~~~~\n                                firstIndex\n/tmp/tmpyn0bgqx2.swift:18:28:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n            let newIndex = index + 2\n                           ^\n"
  stdout: ''
  timestamp: 1659824431
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encodedMessage = \"\"\n    for\
    \ character in message.characters {\n        if character.isLetter {\n       \
    \     if character.isUpper {\n                encodedMessage.append(character.lowercased())\n\
    \            } else {\n                encodedMessage.append(character.uppercased())\n\
    \            }\n        } else {\n            encodedMessage.append(character)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp3w2zbd62.swift:14:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    for character in message.characters {\n           \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp3w2zbd62.swift:16:26: error: value of type 'Character' has no member\
    \ 'isUpper'\n            if character.isUpper {\n               ~~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encodedMessage = \"\"\n    let\
    \ vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for\
    \ char in message.lowercased() {\n        if vowels.contains(char) {\n       \
    \     if let index = alphabet.index(of: char) {\n                let newIndex\
    \ = alphabet.index(index, offsetBy: 2)\n                encodedMessage.append(alphabet[newIndex])\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage.uppercased()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmprluk5sq3/tmprluk5sq3.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48408c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48405bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48405bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48405ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprluk5sq3                        0x0000560f69bb6737 <unavailable> + 5943

    5    libc.so.6                          0x00002b4840ab0460 __libc_start_main +
    245

    6    tmprluk5sq3                        0x0000560f69bb6379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char\
    \ in message.lowercased() {\n        if vowels.contains(char) {\n            let\
    \ index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.distance(from:\
    \ alphabet.startIndex, to: alphabet.index(of: char)!))\n            let nextIndex\
    \ = alphabet.index(index, offsetBy: 2)\n            encodedMessage.append(alphabet[nextIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpkt_pxyx7/tmpkt_pxyx7.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b16e9557c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b16e924eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b16e924e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16e924d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkt_pxyx7                        0x000056083428e927 <unavailable> + 6439

    5    libc.so.6                          0x00002b16e9743460 __libc_start_main +
    245

    6    tmpkt_pxyx7                        0x000056083428e479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encodedMessage = \"\"\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for char in message.characters\
    \ {\n        if vowels.contains(String(char).lowercased()) {\n            let\
    \ index = vowels.index(of: String(char).lowercased())\n            if index ==\
    \ 4 {\n                encodedMessage += vowels[0]\n            } else {\n   \
    \             encodedMessage += vowels[index! + 2]\n            }\n        } else\
    \ {\n            encodedMessage += String(char)\n        }\n    }\n    return\
    \ encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpjmcsmh76.swift:15:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpjmcsmh76.swift:17:32:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        \
    \    let index = vowels.index(of: String(char).lowercased())\n               \
    \                ^\n/tmp/tmpjmcsmh76.swift:17:32: note: use 'firstIndex(of:)'\
    \ instead\n            let index = vowels.index(of: String(char).lowercased())\n\
    \                               ^~~~~\n                               firstIndex\n"
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char\
    \ in message.lowercased() {\n        if vowels.contains(char) {\n            let\
    \ index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.distance(from:\
    \ alphabet.startIndex, to: alphabet.index(of: char)!))\n            encodedMessage.append(alphabet[alphabet.index(index,\
    \ offsetBy: 2)])\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmphc22cdl_/tmphc22cdl_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b44d8c8fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b44d8986b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b44d8986988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b44d89857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphc22cdl_                        0x000055c1e1a51927 <unavailable> + 6439

    5    libc.so.6                          0x00002b44d8e7b460 __libc_start_main +
    245

    6    tmphc22cdl_                        0x000055c1e1a51479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char\
    \ in message.lowercased() {\n        if vowels.contains(char) {\n            let\
    \ index = letters.index(of: char)!\n            let newIndex = letters.index(index,\
    \ offsetBy: 2)\n            encodedMessage.append(letters[newIndex])\n       \
    \ } else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpux7qi0rw/tmpux7qi0rw.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac3dccdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac3d9c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac3d9c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac3d9c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpux7qi0rw                        0x000056158d1ec867 <unavailable> + 6247

    5    libc.so.6                          0x00002aac3deb9460 __libc_start_main +
    245

    6    tmpux7qi0rw                        0x000056158d1ec3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\"\n    var encodedMessage = \"\"\n    for character\
    \ in message.lowercased() {\n        if vowels.contains(character) {\n       \
    \     let index = vowels.index(of: character)!\n            let newIndex = (index\
    \ + 2) % vowels.count\n            encodedMessage.append(vowels[newIndex])\n \
    \       } else if consonants.contains(character) {\n            let index = consonants.index(of:\
    \ character)!\n            let newIndex = (index + 2) % consonants.count\n   \
    \         encodedMessage.append(consonants[newIndex])\n        } else {\n    \
    \        encodedMessage.append(character)\n        }\n    }\n    return encodedMessage\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp6agmej89.swift:18:32: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n            let index = vowels.index(of: character)!\n\
    \                               ^\n/tmp/tmp6agmej89.swift:18:32: note: use 'firstIndex(of:)'\
    \ instead\n            let index = vowels.index(of: character)!\n            \
    \                   ^~~~~\n                               firstIndex\n/tmp/tmp6agmej89.swift:19:29:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n            let newIndex = (index + 2) % vowels.count\n             \
    \               ^\n/tmp/tmp6agmej89.swift:22:36: warning: 'index(of:)' is deprecated:\
    \ renamed to 'firstIndex(of:)'\n            let index = consonants.index(of: character)!\n\
    \                                   ^\n/tmp/tmp6agmej89.swift:22:36: note: use\
    \ 'firstIndex(of:)' instead\n            let index = consonants.index(of: character)!\n\
    \                                   ^~~~~\n                                  \
    \ firstIndex\n/tmp/tmp6agmej89.swift:23:29: error: cannot convert value of type\
    \ 'String.Index' to expected argument type 'Int'\n            let newIndex = (index\
    \ + 2) % consonants.count\n                            ^\n"
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encodedMessage = \"\"\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for letter in message.lowercased() {\n        if let index = alphabet.index(of:\
    \ letter) {\n            let newIndex = alphabet.index(index, offsetBy: 2)\n \
    \           if vowels.contains(String(letter)) {\n                encodedMessage.append(alphabet[newIndex])\n\
    \            } else {\n                encodedMessage.append(alphabet[index])\n\
    \            }\n        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpcfdz6u6c/tmpcfdz6u6c.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae944142c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae943e39b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae943e39988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae943e387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcfdz6u6c                        0x000055c568941937 <unavailable> + 6455

    5    libc.so.6                          0x00002ae94432e460 __libc_start_main +
    245

    6    tmpcfdz6u6c                        0x000055c568941489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char\
    \ in message.lowercased() {\n        if vowels.contains(char) {\n            if\
    \ let index = alphabet.index(of: char) {\n                let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n                encodedMessage.append(alphabet[newIndex])\n  \
    \          }\n        } else {\n            encodedMessage.append(char)\n    \
    \    }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpkohsbdy7/tmpkohsbdy7.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6042209c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6041f00b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6041f00988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6041eff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkohsbdy7                        0x000055d2bed197d7 <unavailable> + 6103

    5    libc.so.6                          0x00002b60423f5460 __libc_start_main +
    245

    6    tmpkohsbdy7                        0x000055d2bed19329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encodedMessage = \"\"\n    let\
    \ vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet:\
    \ [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    for letter in message {\n   \
    \     if let index = alphabet.firstIndex(of: letter) {\n            if vowels.contains(letter)\
    \ {\n                let newIndex = index + 2\n                encodedMessage.append(alphabet[newIndex\
    \ % alphabet.count])\n            } else {\n                encodedMessage.append(alphabet[index].uppercased())\n\
    \            }\n        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpi_h4bazc/tmpi_h4bazc.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adefb381c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adefb078b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adefb078988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adefb0777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi_h4bazc                        0x0000560d92b1e927 <unavailable> + 6439

    5    libc.so.6                          0x00002adefb56d460 __libc_start_main +
    245

    6    tmpi_h4bazc                        0x0000560d92b1e569 <unavailable> + 5481

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message.lowercased()\
    \ {\n        if vowels.contains(char) {\n            let index = alphabet.index(of:\
    \ char)!\n            let newIndex = alphabet.index(index, offsetBy: 2)\n    \
    \        encoded.append(alphabet[newIndex])\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpin9ixzc1/tmpin9ixzc1.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6043d44c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6043a3bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6043a3b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6043a3a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpin9ixzc1                        0x000055b0ee08c867 <unavailable> + 6247

    5    libc.so.6                          0x00002b6043f30460 __libc_start_main +
    245

    6    tmpin9ixzc1                        0x000055b0ee08c3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char\
    \ in message.lowercased() {\n        if vowels.contains(char) {\n            let\
    \ index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.distance(from:\
    \ alphabet.startIndex, to: alphabet.index(of: char)!))\n            encodedMessage.append(alphabet[alphabet.index(index,\
    \ offsetBy: 2)])\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmphc22cdl_/tmphc22cdl_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b44d8c8fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b44d8986b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b44d8986988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b44d89857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphc22cdl_                        0x000055c1e1a51927 <unavailable> + 6439

    5    libc.so.6                          0x00002b44d8e7b460 __libc_start_main +
    245

    6    tmphc22cdl_                        0x000055c1e1a51479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char\
    \ in message.lowercased() {\n        if vowels.contains(char) {\n            let\
    \ index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.index(of: char)!\
    \ + 2)\n            encodedMessage.append(alphabet[index])\n        } else {\n\
    \            encodedMessage.append(char)\n        }\n    }\n    return encodedMessage\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpwcyhvwf4.swift:18:95: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n            let index = alphabet.index(alphabet.startIndex,\
    \ offsetBy: alphabet.index(of: char)! + 2)\n                                 \
    \                                                             ^\n"
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message.lowercased()\
    \ {\n        if vowels.contains(char) {\n            let index = alphabet.index(of:\
    \ char)!\n            let newIndex = alphabet.index(index, offsetBy: 2)\n    \
    \        encoded.append(alphabet[newIndex])\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpin9ixzc1/tmpin9ixzc1.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6043d44c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6043a3bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6043a3b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6043a3a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpin9ixzc1                        0x000055b0ee08c867 <unavailable> + 6247

    5    libc.so.6                          0x00002b6043f30460 __libc_start_main +
    245

    6    tmpin9ixzc1                        0x000055b0ee08c3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message.lowercased()\
    \ {\n        if vowels.contains(char) {\n            let index = alphabet.index(alphabet.startIndex,\
    \ offsetBy: alphabet.distance(from: alphabet.startIndex, to: alphabet.index(of:\
    \ char)!))\n            encoded.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n        } else {\n            encoded.append(char)\n        }\n    }\n\
    \    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpdkdcdz76/tmpdkdcdz76.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6ec9c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6ec6b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6ec6b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6ec6b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdkdcdz76                        0x000055fbfee64927 <unavailable> + 6439

    5    libc.so.6                          0x00002ab6ecbad460 __libc_start_main +
    245

    6    tmpdkdcdz76                        0x000055fbfee64479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message.lowercased()\
    \ {\n        if let index = alphabet.index(of: char) {\n            let newIndex\
    \ = index + 2\n            if newIndex < alphabet.count {\n                encoded.append(alphabet[newIndex])\n\
    \            } else {\n                encoded.append(alphabet[newIndex - alphabet.count])\n\
    \            }\n        } else if let index = vowels.index(of: char) {\n     \
    \       let newIndex = index + 2\n            if newIndex < vowels.count {\n \
    \               encoded.append(vowels[newIndex])\n            } else {\n     \
    \           encoded.append(vowels[newIndex - vowels.count])\n            }\n \
    \       } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp34y_30hb.swift:17:33: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        if let index = alphabet.index(of: char) {\n  \
    \                              ^\n/tmp/tmp34y_30hb.swift:17:33: note: use 'firstIndex(of:)'\
    \ instead\n        if let index = alphabet.index(of: char) {\n               \
    \                 ^~~~~\n                                firstIndex\n/tmp/tmp34y_30hb.swift:18:28:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n            let newIndex = index + 2\n                           ^\n\
    /tmp/tmp34y_30hb.swift:24:38: warning: 'index(of:)' is deprecated: renamed to\
    \ 'firstIndex(of:)'\n        } else if let index = vowels.index(of: char) {\n\
    \                                     ^\n/tmp/tmp34y_30hb.swift:24:38: note: use\
    \ 'firstIndex(of:)' instead\n        } else if let index = vowels.index(of: char)\
    \ {\n                                     ^~~~~\n                            \
    \         firstIndex\n/tmp/tmp34y_30hb.swift:25:28: error: cannot convert value\
    \ of type 'String.Index' to expected argument type 'Int'\n            let newIndex\
    \ = index + 2\n                           ^\n"
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message.lowercased()\
    \ {\n        if vowels.contains(char) {\n            let index = alphabet.index(alphabet.startIndex,\
    \ offsetBy: alphabet.distance(from: alphabet.startIndex, to: alphabet.index(of:\
    \ char)!))\n            encoded.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n        } else {\n            encoded.append(char)\n        }\n    }\n\
    \    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpdkdcdz76/tmpdkdcdz76.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6ec9c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6ec6b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6ec6b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6ec6b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdkdcdz76                        0x000055fbfee64927 <unavailable> + 6439

    5    libc.so.6                          0x00002ab6ecbad460 __libc_start_main +
    245

    6    tmpdkdcdz76                        0x000055fbfee64479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encodedMessage = \"\"\n    for\
    \ char in message.characters {\n        if char.isVowel() {\n            encodedMessage.append(char.next().next())\n\
    \        } else {\n            encodedMessage.append(char.swapCase())\n      \
    \  }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp6ej_wwhn.swift:14:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp6ej_wwhn.swift:15:17:\
    \ error: value of type 'Character' has no member 'isVowel'\n        if char.isVowel()\
    \ {\n           ~~~~ ^~~~~~~\n/tmp/tmp6ej_wwhn.swift:16:40: error: value of type\
    \ 'Character' has no member 'next'\n            encodedMessage.append(char.next().next())\n\
    \                                  ~~~~ ^~~~\n/tmp/tmp6ej_wwhn.swift:18:40: error:\
    \ value of type 'Character' has no member 'swapCase'\n            encodedMessage.append(char.swapCase())\n\
    \                                  ~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824430
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encodedMessage = \"\"\n    for\
    \ char in message.characters {\n        if char.isVowel() {\n            encodedMessage.append(char.next().next())\n\
    \        } else {\n            encodedMessage.append(char.swapCase())\n      \
    \  }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp6ej_wwhn.swift:14:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp6ej_wwhn.swift:15:17:\
    \ error: value of type 'Character' has no member 'isVowel'\n        if char.isVowel()\
    \ {\n           ~~~~ ^~~~~~~\n/tmp/tmp6ej_wwhn.swift:16:40: error: value of type\
    \ 'Character' has no member 'next'\n            encodedMessage.append(char.next().next())\n\
    \                                  ~~~~ ^~~~\n/tmp/tmp6ej_wwhn.swift:18:40: error:\
    \ value of type 'Character' has no member 'swapCase'\n            encodedMessage.append(char.swapCase())\n\
    \                                  ~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message.lowercased() {\n        if vowels.contains(String(char))\
    \ {\n            let index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.distance(from:\
    \ alphabet.startIndex, to: alphabet.index(of: char)!) + 2)\n            encoded.append(alphabet[index])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpi4kbxf06/tmpi4kbxf06.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af3a1264c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3a0f5bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af3a0f5b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3a0f5a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi4kbxf06                        0x000055e65458ca87 <unavailable> + 6791

    5    libc.so.6                          0x00002af3a1450460 __libc_start_main +
    245

    6    tmpi4kbxf06                        0x000055e65458c5d9 <unavailable> + 5593

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message.lowercased() {\n        if vowels.contains(String(char))\
    \ {\n            let index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.distance(from:\
    \ alphabet.startIndex, to: alphabet.index(of: char)!) + 2)\n            encodedMessage.append(alphabet[index])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpxmdzvrj7/tmpxmdzvrj7.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b226278ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2262481b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2262481988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22624807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxmdzvrj7                        0x00005632da7c9a87 <unavailable> + 6791

    5    libc.so.6                          0x00002b2262976460 __libc_start_main +
    245

    6    tmpxmdzvrj7                        0x00005632da7c95d9 <unavailable> + 5593

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encoded = \"\"\n    for char in\
    \ message.characters {\n        if char.isVowel() {\n            encoded.append(char.next(2))\n\
    \        } else {\n            encoded.append(char.swapCase())\n        }\n  \
    \  }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp3qp6gx0f.swift:14:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp3qp6gx0f.swift:15:17:\
    \ error: value of type 'Character' has no member 'isVowel'\n        if char.isVowel()\
    \ {\n           ~~~~ ^~~~~~~\n/tmp/tmp3qp6gx0f.swift:16:33: error: value of type\
    \ 'Character' has no member 'next'\n            encoded.append(char.next(2))\n\
    \                           ~~~~ ^~~~\n/tmp/tmp3qp6gx0f.swift:18:33: error: value\
    \ of type 'Character' has no member 'swapCase'\n            encoded.append(char.swapCase())\n\
    \                           ~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels: Set<Character> = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character] = [\"a\", \"b\",\
    \ \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var encodedMessage = \"\"\n    for character in message {\n\
    \        if vowels.contains(character) {\n            let index = alphabet.firstIndex(of:\
    \ character)!\n            let indexOfNextVowel = (index + 2) % alphabet.count\n\
    \            encodedMessage.append(alphabet[indexOfNextVowel])\n        } else\
    \ {\n            encodedMessage.append(character)\n        }\n    }\n    return\
    \ encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpmd57u68p/tmpmd57u68p.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd1a9efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd1a6e6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd1a6e6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd1a6e57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmd57u68p                        0x000055d7d662b907 <unavailable> + 6407

    5    libc.so.6                          0x00002acd1abdb460 __libc_start_main +
    245

    6    tmpmd57u68p                        0x000055d7d662b549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    var encoded\
    \ = \"\"\n    for char in message.characters {\n        if vowels.containsString(String(char))\
    \ {\n            let index = vowels.startIndex.distanceTo(vowels.startIndex.advancedBy(vowels.characters.indexOf(char)!\
    \ + 2))\n            encoded.append(vowels[vowels.startIndex.advancedBy(index)])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpeqtn4ybt.swift:15:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpeqtn4ybt.swift:16:19:\
    \ error: value of type 'String' has no member 'containsString'\n        if vowels.containsString(String(char))\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmpeqtn4ybt.swift:17:43: error: value\
    \ of type 'String.Index' has no member 'distanceTo'\n            let index = vowels.startIndex.distanceTo(vowels.startIndex.advancedBy(vowels.characters.indexOf(char)!\
    \ + 2))\n                        ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpeqtn4ybt.swift:17:72:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n           \
    \ let index = vowels.startIndex.distanceTo(vowels.startIndex.advancedBy(vowels.characters.indexOf(char)!\
    \ + 2))\n                                                     ~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~~~~\n/tmp/tmpeqtn4ybt.swift:17:101: error: value of type 'String' has\
    \ no member 'indexOf'\n            let index = vowels.startIndex.distanceTo(vowels.startIndex.advancedBy(vowels.characters.indexOf(char)!\
    \ + 2))\n                                                                    \
    \              ~~~~~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmpeqtn4ybt.swift:18:53: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n            encoded.append(vowels[vowels.startIndex.advancedBy(index)])\n\
    \                                  ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824431
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encodedMessage = \"\"\n    for\
    \ character in message.characters {\n        if character.isLetter {\n       \
    \     if character.isUpper {\n                encodedMessage.append(character.lowercased())\n\
    \            } else {\n                encodedMessage.append(character.uppercased())\n\
    \            }\n        } else {\n            encodedMessage.append(character)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp3w2zbd62.swift:14:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    for character in message.characters {\n           \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp3w2zbd62.swift:16:26: error: value of type 'Character' has no member\
    \ 'isUpper'\n            if character.isUpper {\n               ~~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824431
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for c in message.characters\
    \ {\n        if vowels.containsString(String(c)) {\n            let index = letters.characters.indexOf(c)\n\
    \            let next = letters.characters.startIndex.advancedBy(index! + 2)\n\
    \            encoded += String(letters[next])\n        } else {\n            encoded\
    \ += String(c)\n        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpo7uxko0f.swift:16:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in message.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpo7uxko0f.swift:17:19:\
    \ error: value of type 'String' has no member 'containsString'\n        if vowels.containsString(String(c))\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmpo7uxko0f.swift:18:44: error: value\
    \ of type 'String' has no member 'indexOf'\n            let index = letters.characters.indexOf(c)\n\
    \                        ~~~~~~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmpo7uxko0f.swift:19:54:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n           \
    \ let next = letters.characters.startIndex.advancedBy(index! + 2)\n          \
    \             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824431
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encodedMessage = \"\"\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for letter in message.characters\
    \ {\n        if vowels.contains(String(letter).lowercased()) {\n            encodedMessage\
    \ += String(letter).lowercased() == \"u\" ? \"a\" : String(Array(String(letter).lowercased().unicodeScalars)[0].value\
    \ + 2)\n        } else {\n            encodedMessage += String(letter).lowercased()\
    \ == String(letter) ? String(letter).uppercased() : String(letter).lowercased()\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp2rzk4qpn.swift:15:27: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in message.characters {\n              \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpuxy54hfc/tmpuxy54hfc.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b38da61cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b38da313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b38da313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38da3127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuxy54hfc                        0x000055bc3bde7307 <unavailable> + 4871

    5    libc.so.6                          0x00002b38da808460 __libc_start_main +
    245

    6    tmpuxy54hfc                        0x000055bc3bde6f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message.lowercased()\
    \ {\n        if vowels.contains(char) {\n            if let index = vowels.firstIndex(of:\
    \ char) {\n                let nextIndex = vowels.index(index, offsetBy: 2)\n\
    \                encoded.append(vowels[nextIndex])\n            }\n        } else\
    \ if letters.contains(char) {\n            if let index = letters.firstIndex(of:\
    \ char) {\n                let nextIndex = letters.index(index, offsetBy: 2)\n\
    \                encoded.append(letters[nextIndex])\n            }\n        }\
    \ else {\n            encoded.append(char)\n        }\n    }\n    return encoded\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp3ya8dlya/tmp3ya8dlya.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4cd9f0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4cd9c06b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4cd9c06988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4cd9c057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3ya8dlya                        0x000056215bb5a6e7 <unavailable> + 5863

    5    libc.so.6                          0x00002b4cda0fb460 __libc_start_main +
    245

    6    tmp3ya8dlya                        0x000056215bb5a329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char\
    \ in message.lowercased() {\n        if vowels.contains(char) {\n            let\
    \ index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.distance(from:\
    \ alphabet.startIndex, to: alphabet.firstIndex(of: char)!))\n            let nextIndex\
    \ = alphabet.index(index, offsetBy: 2)\n            encodedMessage.append(alphabet[nextIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpb5r7ixyx/tmpb5r7ixyx.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acfdc609c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acfdc300b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acfdc300988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acfdc2ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb5r7ixyx                        0x0000561814ace927 <unavailable> + 6439

    5    libc.so.6                          0x00002acfdc7f5460 __libc_start_main +
    245

    6    tmpb5r7ixyx                        0x0000561814ace479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encodedMessage = \"\"\n    for\
    \ char in message.characters {\n        if char.isVowel() {\n            encodedMessage.append(char.next(2))\n\
    \        } else {\n            encodedMessage.append(char.swapCase())\n      \
    \  }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpwqzxg5gk.swift:14:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpwqzxg5gk.swift:15:17:\
    \ error: value of type 'Character' has no member 'isVowel'\n        if char.isVowel()\
    \ {\n           ~~~~ ^~~~~~~\n/tmp/tmpwqzxg5gk.swift:16:40: error: value of type\
    \ 'Character' has no member 'next'\n            encodedMessage.append(char.next(2))\n\
    \                                  ~~~~ ^~~~\n/tmp/tmpwqzxg5gk.swift:18:40: error:\
    \ value of type 'Character' has no member 'swapCase'\n            encodedMessage.append(char.swapCase())\n\
    \                                  ~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message.lowercased()\
    \ {\n        if vowels.contains(char) {\n            let index = alphabet.index(of:\
    \ char)!\n            let newIndex = alphabet.index(index, offsetBy: 2)\n    \
    \        encoded.append(alphabet[newIndex])\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpin9ixzc1/tmpin9ixzc1.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6043d44c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6043a3bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6043a3b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6043a3a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpin9ixzc1                        0x000055b0ee08c867 <unavailable> + 6247

    5    libc.so.6                          0x00002b6043f30460 __libc_start_main +
    245

    6    tmpin9ixzc1                        0x000055b0ee08c3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message.lowercased() {\n        if vowels.contains(String(char))\
    \ {\n            let index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.count\
    \ - alphabet.count + alphabet.index(of: char)!.encodedOffset + 2)\n          \
    \  encoded.append(alphabet[index])\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpy52df3co/tmpy52df3co.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a3852dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a38224b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a38224988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a382237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy52df3co                        0x000056553cd19ad7 <unavailable> + 6871

    5    libc.so.6                          0x00002b5a38719460 __libc_start_main +
    245

    6    tmpy52df3co                        0x000056553cd19629 <unavailable> + 5673

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    return message.characters.map {\n \
    \       switch $0 {\n        case \"a\":\n            return \"c\"\n        case\
    \ \"e\":\n            return \"g\"\n        case \"i\":\n            return \"\
    k\"\n        case \"o\":\n            return \"q\"\n        case \"u\":\n    \
    \        return \"y\"\n        case \"A\":\n            return \"C\"\n       \
    \ case \"E\":\n            return \"G\"\n        case \"I\":\n            return\
    \ \"K\"\n        case \"O\":\n            return \"Q\"\n        case \"U\":\n\
    \            return \"Y\"\n        default:\n            return String($0).uppercased()\
    \ == String($0) ? String($0).lowercased() : String($0).uppercased()\n        }\n\
    \    }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpvs347gc2.swift:13:20: error: 'characters' is unavailable: Please\
    \ use String directly\n    return message.characters.map {\n                 \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824431
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encoded = \"\"\n    for char in\
    \ message.characters {\n        if char.isVowel() {\n            encoded.append(char.next().next())\n\
    \        } else {\n            encoded.append(char.swapCase())\n        }\n  \
    \  }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpc6j6x_i8.swift:14:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpc6j6x_i8.swift:15:17:\
    \ error: value of type 'Character' has no member 'isVowel'\n        if char.isVowel()\
    \ {\n           ~~~~ ^~~~~~~\n/tmp/tmpc6j6x_i8.swift:16:33: error: value of type\
    \ 'Character' has no member 'next'\n            encoded.append(char.next().next())\n\
    \                           ~~~~ ^~~~\n/tmp/tmpc6j6x_i8.swift:18:33: error: value\
    \ of type 'Character' has no member 'swapCase'\n            encoded.append(char.swapCase())\n\
    \                           ~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels: Set<Character> = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character] = [\"a\", \"b\",\
    \ \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var encodedMessage = \"\"\n    for char in message {\n  \
    \      if vowels.contains(char) {\n            let index = alphabet.firstIndex(of:\
    \ char)!\n            let newIndex = (index + 2) % alphabet.count\n          \
    \  encodedMessage.append(alphabet[newIndex])\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpzci5bgxa/tmpzci5bgxa.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8aec84fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8aec546b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8aec546988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8aec5457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzci5bgxa                        0x000056032daf9907 <unavailable> + 6407

    5    libc.so.6                          0x00002b8aeca3b460 __libc_start_main +
    245

    6    tmpzci5bgxa                        0x000056032daf9549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encoded = \"\"\n    for char in\
    \ message.characters {\n        if char.isVowel() {\n            encoded.append(char.next().next())\n\
    \        } else {\n            encoded.append(char.swapCase())\n        }\n  \
    \  }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpc6j6x_i8.swift:14:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpc6j6x_i8.swift:15:17:\
    \ error: value of type 'Character' has no member 'isVowel'\n        if char.isVowel()\
    \ {\n           ~~~~ ^~~~~~~\n/tmp/tmpc6j6x_i8.swift:16:33: error: value of type\
    \ 'Character' has no member 'next'\n            encoded.append(char.next().next())\n\
    \                           ~~~~ ^~~~\n/tmp/tmpc6j6x_i8.swift:18:33: error: value\
    \ of type 'Character' has no member 'swapCase'\n            encoded.append(char.swapCase())\n\
    \                           ~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char\
    \ in message.lowercased() {\n        if vowels.contains(char) {\n            if\
    \ let index = alphabet.index(of: char) {\n                let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n                encodedMessage.append(alphabet[newIndex])\n  \
    \          }\n        } else {\n            encodedMessage.append(char)\n    \
    \    }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpkohsbdy7/tmpkohsbdy7.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6042209c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6041f00b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6041f00988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6041eff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkohsbdy7                        0x000055d2bed197d7 <unavailable> + 6103

    5    libc.so.6                          0x00002b60423f5460 __libc_start_main +
    245

    6    tmpkohsbdy7                        0x000055d2bed19329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encodedMessage = \"\"\n    for\
    \ character in message.characters {\n        let lowercaseCharacter = String(character).lowercased()\n\
    \        if lowercaseCharacter == \"a\" {\n            encodedMessage += \"c\"\
    \n        } else if lowercaseCharacter == \"e\" {\n            encodedMessage\
    \ += \"g\"\n        } else if lowercaseCharacter == \"i\" {\n            encodedMessage\
    \ += \"k\"\n        } else if lowercaseCharacter == \"o\" {\n            encodedMessage\
    \ += \"q\"\n        } else if lowercaseCharacter == \"u\" {\n            encodedMessage\
    \ += \"y\"\n        } else if lowercaseCharacter == \"y\" {\n            encodedMessage\
    \ += \"a\"\n        } else {\n            encodedMessage += String(character).uppercased()\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpmtc_xzws.swift:14:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    for character in message.characters {\n           \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659824431
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let vowels2\
    \ = \"cdfghjklmnpqrstvwxyz\"\n    let vowels3 = \"bdfhjlnprtvxz\"\n    let vowels4\
    \ = \"aeiouy\"\n    let vowels5 = \"bcdfghjklmnpqrstvwxyz\"\n    let vowels6 =\
    \ \"cdfghjklmnpqrstvwxyz\"\n    let vowels7 = \"aeiouy\"\n    let vowels8 = \"\
    bcdfghjklmnpqrstvwxyz\"\n    let vowels9 = \"cdfghjklmnpqrstvwxyz\"\n    let vowels10\
    \ = \"aeiouy\"\n    let vowels11 = \"bcdfghjklmnpqrstvwxyz\"\n    let vowels12\
    \ = \"cdfghjklmnpqrstvwxyz\"\n    let vowels13 = \"aeiouy\"\n    let vowels14\
    \ = \"bcdfghjklmnpqrstvwxyz\"\n    let vowels15 = \"cdfghjklmnpqrstvwxyz\"\n \
    \   let vowels16 = \"aeiouy\"\n    let vowels17 = \"bcdfghjklmnpqrstvwxyz\"\n\
    \    let vowels18 = \"cdfghjklmnpqrstvwxyz\"\n    let vowels19 = \"aeiouy\"\n\
    \    let vowels20 = \"bcdfghjklmnpqrstvwxyz\"\n    let vowels21 = \"cdfghjklmnpqrstvwxyz\"\
    \n    let vowels22 = \"aeiouy\"\n    let vowels23 = \"bcdfghjklmnpqrstvwxyz\"\n\
    \    let vowels24 = \"cdfghjklmnpqrstvwxyz\"\n    let vowels25 = \"aeiouy\"\n\
    \    let vowels26 = \"bcdfghjklmnpqrstvwxyz\"\n    let vowels27 = \"cdfgh\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpm0drlw83.swift:39:20: error: unterminated string literal\n    let\
    \ vowels27 = \"cdfgh\n                   ^\n"
  stdout: ''
  timestamp: 1659824431
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encodedMessage = \"\"\n    var\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for char in message.characters\
    \ {\n        if vowels.contains(String(char).lowercased()) {\n            let\
    \ index = vowels.index(of: String(char).lowercased())\n            if index ==\
    \ 4 {\n                encodedMessage += vowels[0]\n            } else {\n   \
    \             encodedMessage += vowels[index! + 2]\n            }\n        } else\
    \ {\n            encodedMessage += String(char)\n        }\n    }\n    return\
    \ encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpuyg931kb.swift:15:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpuyg931kb.swift:17:32:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        \
    \    let index = vowels.index(of: String(char).lowercased())\n               \
    \                ^\n/tmp/tmpuyg931kb.swift:17:32: note: use 'firstIndex(of:)'\
    \ instead\n            let index = vowels.index(of: String(char).lowercased())\n\
    \                               ^~~~~\n                               firstIndex\n\
    /tmp/tmpuyg931kb.swift:14:9: warning: variable 'vowels' was never mutated; consider\
    \ changing to 'let' constant\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encodedMessage = \"\"\n    let\
    \ vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet:\
    \ [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    for letter in message {\n   \
    \     if let index = alphabet.firstIndex(of: letter) {\n            if vowels.contains(letter)\
    \ {\n                encodedMessage.append(alphabet[index + 2])\n            }\
    \ else {\n                encodedMessage.append(alphabet[index].uppercased())\n\
    \            }\n        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp9wji_t6a/tmp9wji_t6a.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2de6fadc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2de6ca4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2de6ca4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2de6ca37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9wji_t6a                        0x000055d26f550837 <unavailable> + 6199

    5    libc.so.6                          0x00002b2de7199460 __libc_start_main +
    245

    6    tmp9wji_t6a                        0x000055d26f550479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encoded = \"\"\n    for char in\
    \ message.characters {\n        if char.isVowel() {\n            encoded.append(char.next().next())\n\
    \        } else {\n            encoded.append(char.swapCase())\n        }\n  \
    \  }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpc6j6x_i8.swift:14:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpc6j6x_i8.swift:15:17:\
    \ error: value of type 'Character' has no member 'isVowel'\n        if char.isVowel()\
    \ {\n           ~~~~ ^~~~~~~\n/tmp/tmpc6j6x_i8.swift:16:33: error: value of type\
    \ 'Character' has no member 'next'\n            encoded.append(char.next().next())\n\
    \                           ~~~~ ^~~~\n/tmp/tmpc6j6x_i8.swift:18:33: error: value\
    \ of type 'Character' has no member 'swapCase'\n            encoded.append(char.swapCase())\n\
    \                           ~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message.lowercased()\
    \ {\n        if vowels.contains(char) {\n            let index = letters.index(of:\
    \ char)!\n            let newIndex = letters.index(index, offsetBy: 2)\n     \
    \       encoded.append(letters[newIndex])\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp96nwwedh/tmp96nwwedh.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e55be0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e558d7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e558d7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e558d67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp96nwwedh                        0x0000558f85905867 <unavailable> + 6247

    5    libc.so.6                          0x00002b9e55dcc460 __libc_start_main +
    245

    6    tmp96nwwedh                        0x0000558f859053b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char\
    \ in message.lowercased() {\n        if vowels.contains(char) {\n            encodedMessage\
    \ += String(alphabet[alphabet.index(alphabet.startIndex, offsetBy: alphabet.index(of:\
    \ char)! + 2)])\n        } else {\n            encodedMessage += String(char)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpg0i1ksxx.swift:18:117: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n            encodedMessage += String(alphabet[alphabet.index(alphabet.startIndex,\
    \ offsetBy: alphabet.index(of: char)! + 2)])\n                               \
    \                                                                            \
    \         ^\n"
  stdout: ''
  timestamp: 1659824431
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"]\n    var encodedMessage = \"\"\n    for character in message.characters\
    \ {\n        if vowels.contains(String(character).lowercased()) {\n          \
    \  encodedMessage += String(character).lowercased() == \"u\" ? \"a\" : String(character).lowercased().unicodeScalars.map\
    \ { UnicodeScalar($0.value + 2)! }.map { Character($0) }.joined()\n        } else\
    \ {\n            encodedMessage += String(character).lowercased() == String(character)\
    \ ? String(character).uppercased() : String(character).lowercased()\n        }\n\
    \    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpmsl50c3v.swift:15:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    for character in message.characters {\n           \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpmsl50c3v.swift:17:166: error: cannot convert value of type 'Character'\
    \ to closure result type 'String'\n            encodedMessage += String(character).lowercased()\
    \ == \"u\" ? \"a\" : String(character).lowercased().unicodeScalars.map { UnicodeScalar($0.value\
    \ + 2)! }.map { Character($0) }.joined()\n                                   \
    \                                                                            \
    \                                                      ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824432
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"]\n    var encodedMessage = \"\"\n    for char in message.characters\
    \ {\n        if vowels.contains(String(char).lowercased()) {\n            encodedMessage\
    \ += String(char).lowercased() == \"u\" ? \"a\" : String(characters.index(of:\
    \ char)!.advanced(by: 2))\n        } else {\n            encodedMessage += String(char).lowercased()\
    \ == String(char) ? String(char).uppercased() : String(char).lowercased()\n  \
    \      }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp2qwalmlu.swift:15:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp2qwalmlu.swift:17:79:\
    \ error: cannot find 'characters' in scope\n            encodedMessage += String(char).lowercased()\
    \ == \"u\" ? \"a\" : String(characters.index(of: char)!.advanced(by: 2))\n   \
    \                                                                           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824431
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encodedMessage = \"\"\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for character in message.characters\
    \ {\n        if vowels.contains(String(character).lowercased()) {\n          \
    \  if String(character).lowercased() == \"u\" {\n                encodedMessage\
    \ += \"a\"\n            } else {\n                encodedMessage += String(character).lowercased().unicodeScalars.map\
    \ {\n                    UnicodeScalar(($0.value + 2) % 26 + $0.value / 26 * 26)!\n\
    \                }\n            }\n        } else {\n            encodedMessage\
    \ += String(character).lowercased().unicodeScalars.map {\n                UnicodeScalar(($0.value\
    \ + 32) % 26 + $0.value / 26 * 26)!\n            }\n        }\n    }\n    return\
    \ encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpinqgzqf2.swift:15:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    for character in message.characters {\n           \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpinqgzqf2.swift:20:17: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n                encodedMessage += String(character).lowercased().unicodeScalars.map\
    \ {\n                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpinqgzqf2.swift:25:13: error: the compiler is unable to type-check this\
    \ expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n            encodedMessage += String(character).lowercased().unicodeScalars.map\
    \ {\n            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824484
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message.lowercased()\
    \ {\n        if vowels.contains(char) {\n            let index = alphabet.index(alphabet.startIndex,\
    \ offsetBy: alphabet.distance(from: alphabet.startIndex, to: alphabet.index(of:\
    \ char)!))\n            encoded.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n        } else {\n            encoded.append(char)\n        }\n    }\n\
    \    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpdkdcdz76/tmpdkdcdz76.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6ec9c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6ec6b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6ec6b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6ec6b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdkdcdz76                        0x000055fbfee64927 <unavailable> + 6439

    5    libc.so.6                          0x00002ab6ecbad460 __libc_start_main +
    245

    6    tmpdkdcdz76                        0x000055fbfee64479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message.lowercased()\
    \ {\n        if vowels.contains(char) {\n            let index = letters.index(letters.startIndex,\
    \ offsetBy: letters.distance(from: letters.startIndex, to: letters.firstIndex(of:\
    \ char)!))\n            encoded.append(letters[letters.index(index, offsetBy:\
    \ 2)])\n        } else {\n            encoded.append(char)\n        }\n    }\n\
    \    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpb726cps8/tmpb726cps8.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f064e8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f061dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f061df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f061de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb726cps8                        0x000055e083f4f927 <unavailable> + 6439

    5    libc.so.6                          0x00002b3f066d4460 __libc_start_main +
    245

    6    tmpb726cps8                        0x000055e083f4f479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for character\
    \ in message.lowercased() {\n        if let index = letters.index(of: character)\
    \ {\n            let nextIndex = letters.index(index, offsetBy: 2)\n         \
    \   encoded.append(letters[nextIndex])\n        } else {\n            encoded.append(character)\n\
    \        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpm6rto206/tmpm6rto206.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0bde44c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0bdb3bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0bdb3b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0bdb3a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm6rto206                        0x00005610f0c7d647 <unavailable> + 5703

    5    libc.so.6                          0x00002ad0be030460 __libc_start_main +
    245

    6    tmpm6rto206                        0x00005610f0c7d289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encodedMessage = \"\"\n    for\
    \ char in message.characters {\n        if char.isUppercase {\n            encodedMessage.append(char.lowercase)\n\
    \        } else {\n            encodedMessage.append(char.uppercase)\n       \
    \ }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp26gl6vws.swift:14:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp26gl6vws.swift:16:40:\
    \ error: value of type 'Character' has no member 'lowercase'\n            encodedMessage.append(char.lowercase)\n\
    \                                  ~~~~ ^~~~~~~~~\n/tmp/tmp26gl6vws.swift:18:40:\
    \ error: value of type 'Character' has no member 'uppercase'\n            encodedMessage.append(char.uppercase)\n\
    \                                  ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message.lowercased()\
    \ {\n        if vowels.contains(char) {\n            let index = letters.index(letters.startIndex,\
    \ offsetBy: letters.distance(from: letters.startIndex, to: letters.index(of: char)!))\n\
    \            let next = letters.index(index, offsetBy: 2)\n            encoded.append(letters[next])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp68mzt0vi/tmp68mzt0vi.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ece6cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ece3c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ece3c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ece3c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp68mzt0vi                        0x000055d18bf0c927 <unavailable> + 6439

    5    libc.so.6                          0x00002b9ece8bb460 __libc_start_main +
    245

    6    tmp68mzt0vi                        0x000055d18bf0c479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for letter\
    \ in message.lowercased() {\n        if vowels.contains(letter) {\n          \
    \  let index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.distance(from:\
    \ alphabet.startIndex, to: alphabet.firstIndex(of: letter)!))\n            encodedMessage.append(alphabet[alphabet.index(index,\
    \ offsetBy: 2)])\n        } else {\n            encodedMessage.append(letter)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpy01dpc3d/tmpy01dpc3d.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1279461c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1279158b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1279158988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b12791577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy01dpc3d                        0x0000556219646927 <unavailable> + 6439

    5    libc.so.6                          0x00002b127964d460 __libc_start_main +
    245

    6    tmpy01dpc3d                        0x0000556219646479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encodedMessage = \"\"\n    for\
    \ char in message.characters {\n        if char.isVowel() {\n            encodedMessage.append(char.next().next())\n\
    \        } else {\n            encodedMessage.append(char.swapCase())\n      \
    \  }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp6ej_wwhn.swift:14:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp6ej_wwhn.swift:15:17:\
    \ error: value of type 'Character' has no member 'isVowel'\n        if char.isVowel()\
    \ {\n           ~~~~ ^~~~~~~\n/tmp/tmp6ej_wwhn.swift:16:40: error: value of type\
    \ 'Character' has no member 'next'\n            encodedMessage.append(char.next().next())\n\
    \                                  ~~~~ ^~~~\n/tmp/tmp6ej_wwhn.swift:18:40: error:\
    \ value of type 'Character' has no member 'swapCase'\n            encodedMessage.append(char.swapCase())\n\
    \                                  ~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for letter\
    \ in message.lowercased() {\n        if vowels.contains(letter) {\n          \
    \  let index = letters.index(of: letter)!\n            let nextIndex = letters.index(index,\
    \ offsetBy: 2)\n            let nextLetter = letters[nextIndex]\n            encodedMessage.append(nextLetter)\n\
    \        } else {\n            encodedMessage.append(letter)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpmcxn3ysn/tmpmcxn3ysn.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2cacea1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2cacb98b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2cacb98988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2cacb977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmcxn3ysn                        0x0000557b9b6e5867 <unavailable> + 6247

    5    libc.so.6                          0x00002b2cad08d460 __libc_start_main +
    245

    6    tmpmcxn3ysn                        0x0000557b9b6e53b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"]\n    let letters = Array(message.lowercased())\n    var encoded\
    \ = \"\"\n    for letter in letters {\n        if vowels.contains(letter) {\n\
    \            let index = vowels.index(of: letter)!\n            let newIndex =\
    \ (index + 2) % vowels.count\n            encoded += vowels[newIndex]\n      \
    \  } else {\n            encoded += String(letter)\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpr45la28c.swift:17:28: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'String'\n        if vowels.contains(letter)\
    \ {\n                           ^\n/tmp/tmpr45la28c.swift:18:42: error: cannot\
    \ convert value of type 'String.Element' (aka 'Character') to expected argument\
    \ type 'String'\n            let index = vowels.index(of: letter)!\n         \
    \                                ^\n"
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message.lowercased() {\n        if let index = alphabet.index(of:\
    \ char) {\n            let newIndex = alphabet.index(index, offsetBy: 2)\n   \
    \         encoded.append(alphabet[newIndex])\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpgqf2ihgs/tmpgqf2ihgs.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5bd69fdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5bd66f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5bd66f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5bd66f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgqf2ihgs                        0x00005578ea1dd747 <unavailable> + 5959

    5    libc.so.6                          0x00002b5bd6be9460 __libc_start_main +
    245

    6    tmpgqf2ihgs                        0x00005578ea1dd389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encoded = \"\"\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for char\
    \ in message.lowercased() {\n        if let index = alphabet.index(of: char) {\n\
    \            let newIndex = alphabet.index(index, offsetBy: 2)\n            encoded.append(alphabet[newIndex])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpbxyh2n7s/tmpbxyh2n7s.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3283be5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b32838dcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b32838dc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b32838db7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbxyh2n7s                        0x000055e153324647 <unavailable> + 5703

    5    libc.so.6                          0x00002b3283dd1460 __libc_start_main +
    245

    6    tmpbxyh2n7s                        0x000055e153324289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for letter\
    \ in message.lowercased() {\n        if let index = alphabet.index(of: letter)\
    \ {\n            if let vowelIndex = vowels.index(of: letter) {\n            \
    \    let newIndex = alphabet.index(vowelIndex, offsetBy: 2)\n                encodedMessage.append(alphabet[newIndex])\n\
    \            } else {\n                encodedMessage.append(alphabet[index])\n\
    \            }\n        } else {\n            encodedMessage.append(letter)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpmgw5pauu/tmpmgw5pauu.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7fec72ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7fec425b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7fec425988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7fec4247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmgw5pauu                        0x0000555f84840647 <unavailable> + 5703

    5    libc.so.6                          0x00002b7fec91a460 __libc_start_main +
    245

    6    tmpmgw5pauu                        0x0000555f84840289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message.lowercased()\
    \ {\n        if vowels.contains(char) {\n            let index = alphabet.index(alphabet.startIndex,\
    \ offsetBy: alphabet.distance(from: alphabet.startIndex, to: alphabet.index(of:\
    \ char)!))\n            encoded.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n        } else {\n            encoded.append(char)\n        }\n    }\n\
    \    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpdkdcdz76/tmpdkdcdz76.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6ec9c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6ec6b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6ec6b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6ec6b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdkdcdz76                        0x000055fbfee64927 <unavailable> + 6439

    5    libc.so.6                          0x00002ab6ecbad460 __libc_start_main +
    245

    6    tmpdkdcdz76                        0x000055fbfee64479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message.lowercased()\
    \ {\n        if vowels.contains(char) {\n            let index = letters.index(of:\
    \ char)!\n            encoded.append(letters[letters.index(index, offsetBy: 2)])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmprek751mh/tmprek751mh.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b381c7e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b381c4d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b381c4d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b381c4d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprek751mh                        0x0000555cbc720867 <unavailable> + 6247

    5    libc.so.6                          0x00002b381c9cd460 __libc_start_main +
    245

    6    tmprek751mh                        0x0000555cbc7203b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message.lowercased()\
    \ {\n        if let index = alphabet.index(of: char) {\n            let newIndex\
    \ = (index.encodedOffset + 2) % alphabet.count\n            encoded.append(alphabet[alphabet.index(alphabet.startIndex,\
    \ offsetBy: newIndex)])\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp3ydzjfbv/tmp3ydzjfbv.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae0d49b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae0d46adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae0d46ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae0d46ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3ydzjfbv                        0x000055b22b14f7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002ae0d4ba2460 __libc_start_main +
    245

    6    tmp3ydzjfbv                        0x000055b22b14f429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encodedMessage = \"\"\n    let\
    \ vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for\
    \ char in message.lowercased() {\n        if vowels.contains(char) {\n       \
    \     let index = alphabet.index(of: char)!\n            let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n      \
    \  } else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp38w908_2/tmp38w908_2.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09a7416c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09a710db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09a710d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09a710c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp38w908_2                        0x000056006cafe867 <unavailable> + 6247

    5    libc.so.6                          0x00002b09a7602460 __libc_start_main +
    245

    6    tmp38w908_2                        0x000056006cafe3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encodedMessage = \"\"\n    for\
    \ character in message.characters {\n        if character.isVowel {\n        \
    \    encodedMessage.append(character.next(2).uppercased())\n        } else {\n\
    \            encodedMessage.append(character.uppercased())\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmphmk6f0qp.swift:14:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    for character in message.characters {\n           \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmphmk6f0qp.swift:15:22: error: value of type 'Character' has no member\
    \ 'isVowel'\n        if character.isVowel {\n           ~~~~~~~~~ ^~~~~~~\n/tmp/tmphmk6f0qp.swift:16:45:\
    \ error: value of type 'Character' has no member 'next'\n            encodedMessage.append(character.next(2).uppercased())\n\
    \                                  ~~~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char\
    \ in message.lowercased() {\n        if vowels.contains(char) {\n            let\
    \ index = alphabet.index(of: char)!\n            let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n      \
    \  } else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmptvn8k_mj/tmptvn8k_mj.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22a4b1ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22a4811b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22a4811988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22a48107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptvn8k_mj                        0x000055a517980867 <unavailable> + 6247

    5    libc.so.6                          0x00002b22a4d06460 __libc_start_main +
    245

    6    tmptvn8k_mj                        0x000055a5179803b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message.lowercased()\
    \ {\n        if let index = alphabet.index(of: char) {\n            let nextIndex\
    \ = alphabet.index(index, offsetBy: 2)\n            encoded.append(alphabet[nextIndex])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp6q3eza65/tmp6q3eza65.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c82f33c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c82c2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c82c2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c82c297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6q3eza65                        0x000055bfbe3a3647 <unavailable> + 5703

    5    libc.so.6                          0x00002b3c8311f460 __libc_start_main +
    245

    6    tmp6q3eza65                        0x000055bfbe3a3289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    // TODO: Implement this function\n\
    \    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpt4xnwud1/tmpt4xnwud1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae53f458c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae53f14fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae53f14f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae53f14e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt4xnwud1                        0x000055dd38464307 <unavailable> + 4871

    5    libc.so.6                          0x00002ae53f644460 __libc_start_main +
    245

    6    tmpt4xnwud1                        0x000055dd38463f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encodedMessage = \"\"\n    for\
    \ char in message.characters {\n        if char.isVowel() {\n            encodedMessage.append(char.next().next())\n\
    \        } else {\n            encodedMessage.append(char.swapCase())\n      \
    \  }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp6ej_wwhn.swift:14:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp6ej_wwhn.swift:15:17:\
    \ error: value of type 'Character' has no member 'isVowel'\n        if char.isVowel()\
    \ {\n           ~~~~ ^~~~~~~\n/tmp/tmp6ej_wwhn.swift:16:40: error: value of type\
    \ 'Character' has no member 'next'\n            encodedMessage.append(char.next().next())\n\
    \                                  ~~~~ ^~~~\n/tmp/tmp6ej_wwhn.swift:18:40: error:\
    \ value of type 'Character' has no member 'swapCase'\n            encodedMessage.append(char.swapCase())\n\
    \                                  ~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message.lowercased() {\n        if let index = alphabet.index(of:\
    \ char) {\n            let nextIndex = alphabet.index(index, offsetBy: 2)\n  \
    \          encoded.append(alphabet[nextIndex])\n        } else {\n           \
    \ encoded.append(char)\n        }\n    }\n    return encoded\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp1yggbuvp/tmp1yggbuvp.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b441e4f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b441e1ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b441e1eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b441e1ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1yggbuvp                        0x000055beb8c5b747 <unavailable> + 5959

    5    libc.so.6                          0x00002b441e6e0460 __libc_start_main +
    245

    6    tmp1yggbuvp                        0x000055beb8c5b389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char\
    \ in message.lowercased() {\n        if vowels.contains(char) {\n            let\
    \ index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.index(of: char)!\
    \ + 2)\n            encodedMessage.append(alphabet[index])\n        } else {\n\
    \            encodedMessage.append(char)\n        }\n    }\n    return encodedMessage\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpwcyhvwf4.swift:18:95: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n            let index = alphabet.index(alphabet.startIndex,\
    \ offsetBy: alphabet.index(of: char)! + 2)\n                                 \
    \                                                             ^\n"
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encodedMessage = \"\"\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for char in message.lowercased() {\n        if let index = alphabet.index(of:\
    \ char) {\n            if vowels.contains(String(char)) {\n                let\
    \ newIndex = alphabet.index(index, offsetBy: 2)\n                encodedMessage.append(alphabet[newIndex])\n\
    \            } else {\n                encodedMessage.append(alphabet[index])\n\
    \            }\n        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpkm96ju6a/tmpkm96ju6a.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3073f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3070edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3070ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3070ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkm96ju6a                        0x0000561f7ee97937 <unavailable> + 6455

    5    libc.so.6                          0x00002ba3075e2460 __libc_start_main +
    245

    6    tmpkm96ju6a                        0x0000561f7ee97489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1659824432
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encodedMessage = \"\"\n    for\
    \ char in message.characters {\n        if char.isVowel {\n            encodedMessage.append(char.next.next)\n\
    \        } else {\n            encodedMessage.append(char.swapCase)\n        }\n\
    \    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpkff63j1q.swift:14:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpkff63j1q.swift:15:17:\
    \ error: value of type 'Character' has no member 'isVowel'\n        if char.isVowel\
    \ {\n           ~~~~ ^~~~~~~\n/tmp/tmpkff63j1q.swift:16:40: error: value of type\
    \ 'Character' has no member 'next'\n            encodedMessage.append(char.next.next)\n\
    \                                  ~~~~ ^~~~\n/tmp/tmpkff63j1q.swift:18:40: error:\
    \ value of type 'Character' has no member 'swapCase'\n            encodedMessage.append(char.swapCase)\n\
    \                                  ~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels: Set<Character> = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character] = [\"a\", \"b\",\
    \ \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var encodedMessage = \"\"\n    for char in message {\n  \
    \      if vowels.contains(char) {\n            let index = alphabet.firstIndex(of:\
    \ char)!\n            let newIndex = (index + 2) % alphabet.count\n          \
    \  encodedMessage.append(alphabet[newIndex])\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpzci5bgxa/tmpzci5bgxa.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8aec84fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8aec546b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8aec546988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8aec5457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzci5bgxa                        0x000056032daf9907 <unavailable> + 6407

    5    libc.so.6                          0x00002b8aeca3b460 __libc_start_main +
    245

    6    tmpzci5bgxa                        0x000056032daf9549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message.lowercased()\
    \ {\n        if vowels.contains(char) {\n            let index = letters.index(of:\
    \ char)!\n            let newIndex = letters.index(index, offsetBy: 2)\n     \
    \       encoded.append(letters[newIndex])\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp96nwwedh/tmp96nwwedh.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e55be0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e558d7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e558d7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e558d67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp96nwwedh                        0x0000558f85905867 <unavailable> + 6247

    5    libc.so.6                          0x00002b9e55dcc460 __libc_start_main +
    245

    6    tmp96nwwedh                        0x0000558f859053b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpuxy54hfc/tmpuxy54hfc.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b38da61cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b38da313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b38da313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38da3127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuxy54hfc                        0x000055bc3bde7307 <unavailable> + 4871

    5    libc.so.6                          0x00002b38da808460 __libc_start_main +
    245

    6    tmpuxy54hfc                        0x000055bc3bde6f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encodedMessage = \"\"\n    let\
    \ vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet:\
    \ [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    for letter in message {\n   \
    \     if vowels.contains(letter) {\n            if let index = alphabet.firstIndex(of:\
    \ letter) {\n                encodedMessage.append(alphabet[index + 2])\n    \
    \        }\n        } else {\n            encodedMessage.append(letter)\n    \
    \    }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpvt2vfruu/tmpvt2vfruu.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad163c94c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad16398bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad16398b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad16398a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvt2vfruu                        0x0000555fb887e797 <unavailable> + 6039

    5    libc.so.6                          0x00002ad163e80460 __libc_start_main +
    245

    6    tmpvt2vfruu                        0x0000555fb887e3d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824432
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encodedMessage = \"\"\n    let\
    \ vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for\
    \ char in message.lowercased() {\n        if alphabet.contains(char) {\n     \
    \       if vowels.contains(char) {\n                let index = alphabet.index(of:\
    \ char)!\n                let newIndex = alphabet.index(index, offsetBy: 2)\n\
    \                encodedMessage.append(alphabet[newIndex])\n            } else\
    \ {\n                encodedMessage.append(char)\n            }\n        }\n \
    \   }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmphwar0qo9/tmphwar0qo9.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f28a70c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f28767b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f28767988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f287667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphwar0qo9                        0x00005567bbb88867 <unavailable> + 6247

    5    libc.so.6                          0x00002b7f28c5c460 __libc_start_main +
    245

    6    tmphwar0qo9                        0x00005567bbb883b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659824432
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpuxy54hfc/tmpuxy54hfc.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b38da61cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b38da313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b38da313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38da3127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuxy54hfc                        0x000055bc3bde7307 <unavailable> + 4871

    5    libc.so.6                          0x00002b38da808460 __libc_start_main +
    245

    6    tmpuxy54hfc                        0x000055bc3bde6f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encodedMessage = \"\"\n    for\
    \ character in message.characters {\n        if character.isVowel() {\n      \
    \      encodedMessage.append(character.next().next())\n        } else {\n    \
    \        encodedMessage.append(character.swapCase())\n        }\n    }\n    return\
    \ encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp8y17wt9n.swift:14:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    for character in message.characters {\n           \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp8y17wt9n.swift:15:22: error: value of type 'Character' has no member\
    \ 'isVowel'\n        if character.isVowel() {\n           ~~~~~~~~~ ^~~~~~~\n\
    /tmp/tmp8y17wt9n.swift:16:45: error: value of type 'Character' has no member 'next'\n\
    \            encodedMessage.append(character.next().next())\n                \
    \                  ~~~~~~~~~ ^~~~\n/tmp/tmp8y17wt9n.swift:18:45: error: value\
    \ of type 'Character' has no member 'swapCase'\n            encodedMessage.append(character.swapCase())\n\
    \                                  ~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824431
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encodedMessage = \"\"\n    for\
    \ char in message.characters {\n        if char.isVowel() {\n            encodedMessage.append(char.next().next())\n\
    \        } else {\n            encodedMessage.append(char.swapCase())\n      \
    \  }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp6ej_wwhn.swift:14:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp6ej_wwhn.swift:15:17:\
    \ error: value of type 'Character' has no member 'isVowel'\n        if char.isVowel()\
    \ {\n           ~~~~ ^~~~~~~\n/tmp/tmp6ej_wwhn.swift:16:40: error: value of type\
    \ 'Character' has no member 'next'\n            encodedMessage.append(char.next().next())\n\
    \                                  ~~~~ ^~~~\n/tmp/tmp6ej_wwhn.swift:18:40: error:\
    \ value of type 'Character' has no member 'swapCase'\n            encodedMessage.append(char.swapCase())\n\
    \                                  ~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    // TODO: Implement this function\n\
    \    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpt4xnwud1/tmpt4xnwud1.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae53f458c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae53f14fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae53f14f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae53f14e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt4xnwud1                        0x000055dd38464307 <unavailable> + 4871

    5    libc.so.6                          0x00002ae53f644460 __libc_start_main +
    245

    6    tmpt4xnwud1                        0x000055dd38463f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpuxy54hfc/tmpuxy54hfc.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b38da61cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b38da313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b38da313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38da3127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuxy54hfc                        0x000055bc3bde7307 <unavailable> + 4871

    5    libc.so.6                          0x00002b38da808460 __libc_start_main +
    245

    6    tmpuxy54hfc                        0x000055bc3bde6f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char\
    \ in message.lowercased() {\n        if vowels.contains(char) {\n            let\
    \ index = letters.index(letters.startIndex, offsetBy: letters.distance(from: letters.startIndex,\
    \ to: letters.index(of: char)!))\n            encodedMessage.append(letters[letters.index(index,\
    \ offsetBy: 2)])\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpd4ml9xgp/tmpd4ml9xgp.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7ad806ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7ad7d65b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7ad7d65988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7ad7d647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd4ml9xgp                        0x0000564d11ad7927 <unavailable> + 6439

    5    libc.so.6                          0x00002b7ad825a460 __libc_start_main +
    245

    6    tmpd4ml9xgp                        0x0000564d11ad7479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1659824432
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encodedMessage = \"\"\n    for\
    \ char in message.characters {\n        if char.isVowel() {\n            encodedMessage.append(char.next().next())\n\
    \        } else {\n            encodedMessage.append(char.swapCase())\n      \
    \  }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp6ej_wwhn.swift:14:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp6ej_wwhn.swift:15:17:\
    \ error: value of type 'Character' has no member 'isVowel'\n        if char.isVowel()\
    \ {\n           ~~~~ ^~~~~~~\n/tmp/tmp6ej_wwhn.swift:16:40: error: value of type\
    \ 'Character' has no member 'next'\n            encodedMessage.append(char.next().next())\n\
    \                                  ~~~~ ^~~~\n/tmp/tmp6ej_wwhn.swift:18:40: error:\
    \ value of type 'Character' has no member 'swapCase'\n            encodedMessage.append(char.swapCase())\n\
    \                                  ~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824430
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let vowels2\
    \ = \"cdfghjklmnpqrstvwxyz\"\n    let vowels3 = \"bdfhjlnprtvxz\"\n    let vowels4\
    \ = \"aeiou\"\n    let vowels5 = \"bdfhjlnprtvxz\"\n    let vowels6 = \"cdfghjklmnpqrstvwxyz\"\
    \n    let vowels7 = \"aeiou\"\n    let vowels8 = \"cdfghjklmnpqrstvwxyz\"\n  \
    \  let vowels9 = \"bdfhjlnprtvxz\"\n    let vowels10 = \"aeiou\"\n    let vowels11\
    \ = \"bdfhjlnprtvxz\"\n    let vowels12 = \"cdfghjklmnpqrstvwxyz\"\n    let vowels13\
    \ = \"aeiou\"\n    let vowels14 = \"cdfghjklmnpqrstvwxyz\"\n    let vowels15 =\
    \ \"bdfhjlnprtvxz\"\n    let vowels16 = \"aeiou\"\n    let vowels17 = \"bdfhjlnprtvxz\"\
    \n    let vowels18 = \"cdfghjklmnpqrstvwxyz\"\n    let vowels19 = \"aeiou\"\n\
    \    let vowels20 = \"cdfghjklmnpqrstvwxyz\"\n    let vowels21 = \"bdfhjlnprtvxz\"\
    \n    let vowels22 = \"aeiou\"\n    let vowels23 = \"bdfhjlnprtvxz\"\n    let\
    \ vowels24 = \"cdfghjklmnpqrstvwxyz\"\n    let vowels25 = \"aeiou\"\n    let vowels26\
    \ = \"cdfghjklmnpqrstvwxyz\"\n    let vowels27 = \"bdfhjlnprtvxz\"\n    let vowels28\
    \ = \"aeiou\"\n    let vowels29 = \"bdfhjlnprtvxz\"\n    let vowels30\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpyrsdeb5u.swift:42:9: error: type annotation missing in pattern\n\
    \    let vowels30\n        ^\n"
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encodedMessage = \"\"\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for char in message.lowercased() {\n        if vowels.contains(String(char))\
    \ {\n            let index = alphabet.index(of: char)\n            let newIndex\
    \ = alphabet.index(index!, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpp12v9fo2/tmpp12v9fo2.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e6a4c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e6a1bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e6a1bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e6a1ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp12v9fo2                        0x00005571b5cb49c7 <unavailable> + 6599

    5    libc.so.6                          0x00002b3e6a6b0460 __libc_start_main +
    245

    6    tmpp12v9fo2                        0x00005571b5cb4519 <unavailable> + 5401

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char\
    \ in message.lowercased() {\n        if vowels.contains(char) {\n            let\
    \ index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.distance(from:\
    \ alphabet.startIndex, to: alphabet.index(of: char)!))\n            encodedMessage.append(alphabet[alphabet.index(index,\
    \ offsetBy: 2)])\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmphc22cdl_/tmphc22cdl_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b44d8c8fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b44d8986b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b44d8986988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b44d89857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphc22cdl_                        0x000055c1e1a51927 <unavailable> + 6439

    5    libc.so.6                          0x00002b44d8e7b460 __libc_start_main +
    245

    6    tmphc22cdl_                        0x000055c1e1a51479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encodedMessage = \"\"\n    for\
    \ char in message.characters {\n        if char.isVowel() {\n            encodedMessage.append(char.next().next())\n\
    \        } else {\n            encodedMessage.append(char.swapCase())\n      \
    \  }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp6ej_wwhn.swift:14:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp6ej_wwhn.swift:15:17:\
    \ error: value of type 'Character' has no member 'isVowel'\n        if char.isVowel()\
    \ {\n           ~~~~ ^~~~~~~\n/tmp/tmp6ej_wwhn.swift:16:40: error: value of type\
    \ 'Character' has no member 'next'\n            encodedMessage.append(char.next().next())\n\
    \                                  ~~~~ ^~~~\n/tmp/tmp6ej_wwhn.swift:18:40: error:\
    \ value of type 'Character' has no member 'swapCase'\n            encodedMessage.append(char.swapCase())\n\
    \                                  ~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message.lowercased()\
    \ {\n        if let index = letters.firstIndex(of: char) {\n            encoded.append(letters[letters.index(index,\
    \ offsetBy: 2)])\n        } else if let index = vowels.firstIndex(of: char) {\n\
    \            encoded.append(vowels[vowels.index(index, offsetBy: 2)])\n      \
    \  } else {\n            encoded.append(char)\n        }\n    }\n    return encoded\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp_2argf90/tmp_2argf90.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8815dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8812d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8812d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8812d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_2argf90                        0x000055d88fa4b647 <unavailable> + 5703

    5    libc.so.6                          0x00002ad8817ca460 __libc_start_main +
    245

    6    tmp_2argf90                        0x000055d88fa4b289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659824432
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char\
    \ in message.lowercased() {\n        if vowels.contains(char) {\n            let\
    \ index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.index(of: char)!\
    \ + 2)\n            encodedMessage.append(alphabet[index])\n        } else {\n\
    \            encodedMessage.append(char)\n        }\n    }\n    return encodedMessage\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpwcyhvwf4.swift:18:95: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n            let index = alphabet.index(alphabet.startIndex,\
    \ offsetBy: alphabet.index(of: char)! + 2)\n                                 \
    \                                                             ^\n"
  stdout: ''
  timestamp: 1659824430
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encoded = \"\"\n    for char in\
    \ message.characters {\n        if char.isVowel() {\n            encoded.append(char.next().next())\n\
    \        } else {\n            encoded.append(char.swapCase())\n        }\n  \
    \  }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpc6j6x_i8.swift:14:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpc6j6x_i8.swift:15:17:\
    \ error: value of type 'Character' has no member 'isVowel'\n        if char.isVowel()\
    \ {\n           ~~~~ ^~~~~~~\n/tmp/tmpc6j6x_i8.swift:16:33: error: value of type\
    \ 'Character' has no member 'next'\n            encoded.append(char.next().next())\n\
    \                           ~~~~ ^~~~\n/tmp/tmpc6j6x_i8.swift:18:33: error: value\
    \ of type 'Character' has no member 'swapCase'\n            encoded.append(char.swapCase())\n\
    \                           ~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    // TODO: Implement me!\n    return\
    \ \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpu8106cl4/tmpu8106cl4.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbb5a2ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbb5725b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbb5725988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbb57247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu8106cl4                        0x000055c18f63e307 <unavailable> + 4871

    5    libc.so.6                          0x00002abbb5c1a460 __libc_start_main +
    245

    6    tmpu8106cl4                        0x000055c18f63df49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824432
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let vowels2\
    \ = \"cdfghjklmnpqrstvwxyz\"\n    let vowels3 = \"bdfhjlnprtvxz\"\n    let vowels4\
    \ = \"aeiou\"\n    let vowels5 = \"bcdfghjklmnpqrstvwxyz\"\n    var encoded =\
    \ \"\"\n    for char in message.characters {\n        if vowels.containsString(String(char).lowercaseString)\
    \ {\n            let index = vowels.characters.indexOf(char.lowercase)\n     \
    \       encoded.append(vowels2[index!])\n        } else if vowels3.containsString(String(char).lowercaseString)\
    \ {\n            let index = vowels3.characters.indexOf(char.lowercase)\n    \
    \        encoded.append(vowels4[index!])\n        } else if vowels5.containsString(String(char).lowercaseString)\
    \ {\n            let index = vowels5.characters.indexOf(char.lowercase)\n    \
    \        encoded.append(vowels5[index!])\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp7mw3cadf.swift:19:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp7mw3cadf.swift:20:19:\
    \ error: value of type 'String' has no member 'containsString'\n        if vowels.containsString(String(char).lowercaseString)\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmp7mw3cadf.swift:20:47: error: value\
    \ of type 'String' has no member 'lowercaseString'\n        if vowels.containsString(String(char).lowercaseString)\
    \ {\n                                 ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp7mw3cadf.swift:21:43:\
    \ error: value of type 'String' has no member 'indexOf'\n            let index\
    \ = vowels.characters.indexOf(char.lowercase)\n                        ~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~\n/tmp/tmp7mw3cadf.swift:21:56: error: value of type 'Character' has\
    \ no member 'lowercase'\n            let index = vowels.characters.indexOf(char.lowercase)\n\
    \                                                  ~~~~ ^~~~~~~~~\n/tmp/tmp7mw3cadf.swift:23:27:\
    \ error: value of type 'String' has no member 'containsString'\n        } else\
    \ if vowels3.containsString(String(char).lowercaseString) {\n                \
    \  ~~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmp7mw3cadf.swift:23:55: error: value of type\
    \ 'String' has no member 'lowercaseString'\n        } else if vowels3.containsString(String(char).lowercaseString)\
    \ {\n                                         ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp7mw3cadf.swift:24:44:\
    \ error: value of type 'String' has no member 'indexOf'\n            let index\
    \ = vowels3.characters.indexOf(char.lowercase)\n                        ~~~~~~~~~~~~~~~~~~\
    \ ^~~~~~~\n/tmp/tmp7mw3cadf.swift:24:57: error: value of type 'Character' has\
    \ no member 'lowercase'\n            let index = vowels3.characters.indexOf(char.lowercase)\n\
    \                                                   ~~~~ ^~~~~~~~~\n/tmp/tmp7mw3cadf.swift:26:27:\
    \ error: value of type 'String' has"
  stdout: ''
  timestamp: 1659824432
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encodedMessage = \"\"\n    for\
    \ letter in message.characters {\n        if let encodedLetter = encodeLetter(letter)\
    \ {\n            encodedMessage.append(encodedLetter)\n        }\n    }\n    return\
    \ encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmplzncv8p_.swift:14:27: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in message.characters {\n              \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmplzncv8p_.swift:15:32: error: cannot find 'encodeLetter' in scope\n   \
    \     if let encodedLetter = encodeLetter(letter) {\n                        \
    \       ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824432
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let vowels_shifted\
    \ = \"cgkq\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    let letters_shifted\
    \ = \"cdefghijklmnopqrstuvwxyzab\"\n    var encoded = \"\"\n    for char in message.lowercased()\
    \ {\n        if vowels.contains(char) {\n            encoded.append(vowels_shifted[vowels.index(of:\
    \ char)!])\n        } else if letters.contains(char) {\n            encoded.append(letters_shifted[letters.index(of:\
    \ char)!])\n        } else {\n            encoded.append(char)\n        }\n  \
    \  }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpbmgaa1mf/tmpbmgaa1mf.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa83284c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa82f7bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa82f7b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa82f7a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbmgaa1mf                        0x000055bb14fd7717 <unavailable> + 5911

    5    libc.so.6                          0x00002baa83470460 __libc_start_main +
    245

    6    tmpbmgaa1mf                        0x000055bb14fd7359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659824432
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for character\
    \ in message.lowercased() {\n        if vowels.contains(character) {\n       \
    \     let index = letters.index(of: character)!\n            let newIndex = letters.index(index,\
    \ offsetBy: 2)\n            encodedMessage.append(letters[newIndex])\n       \
    \ } else {\n            encodedMessage.append(character)\n        }\n    }\n \
    \   return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmppltfhih9/tmppltfhih9.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b828aaf4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b828a7ebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b828a7eb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b828a7ea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppltfhih9                        0x000055fe695e9867 <unavailable> + 6247

    5    libc.so.6                          0x00002b828ace0460 __libc_start_main +
    245

    6    tmppltfhih9                        0x000055fe695e93b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659824432
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    return message.characters.map {\n \
    \       switch $0 {\n        case \"a\":\n            return \"c\"\n        case\
    \ \"e\":\n            return \"g\"\n        case \"i\":\n            return \"\
    k\"\n        case \"o\":\n            return \"q\"\n        case \"u\":\n    \
    \        return \"y\"\n        case \"A\":\n            return \"C\"\n       \
    \ case \"E\":\n            return \"G\"\n        case \"I\":\n            return\
    \ \"K\"\n        case \"O\":\n            return \"Q\"\n        case \"U\":\n\
    \            return \"Y\"\n        default:\n            return String($0).uppercased()\
    \ == String($0) ? String($0).lowercased() : String($0).uppercased()\n        }\n\
    \    }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpvs347gc2.swift:13:20: error: 'characters' is unavailable: Please\
    \ use String directly\n    return message.characters.map {\n                 \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encoded = \"\"\n    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for char\
    \ in message.lowercased() {\n        if vowels.contains(char) {\n            let\
    \ index = alphabet.index(of: char)!\n            let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n            encoded.append(alphabet[newIndex])\n        } else\
    \ {\n            encoded.append(char)\n        }\n    }\n    return encoded\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpl7h082m8/tmpl7h082m8.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b86b4fc1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b86b4cb8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b86b4cb8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b86b4cb77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl7h082m8                        0x000056388a656867 <unavailable> + 6247

    5    libc.so.6                          0x00002b86b51ad460 __libc_start_main +
    245

    6    tmpl7h082m8                        0x000056388a6563b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659824432
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"]\n    let alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"\
    , \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var encodedMessage\
    \ = \"\"\n    for letter in message.lowercased() {\n        if vowels.contains(String(letter))\
    \ {\n            let index = alphabet.index(of: String(letter))!\n           \
    \ let newIndex = index + 2\n            encodedMessage += alphabet[newIndex]\n\
    \        } else {\n            encodedMessage += String(letter)\n        }\n \
    \   }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpw_xg1w6a/tmpw_xg1w6a.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b58badb5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b58baaacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b58baaac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b58baaab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw_xg1w6a                        0x000055e2af45c927 <unavailable> + 6439

    5    libc.so.6                          0x00002b58bafa1460 __libc_start_main +
    245

    6    tmpw_xg1w6a                        0x000055e2af45c479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1659824432
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encoded = \"\"\n    for char in\
    \ message.characters {\n        if char.isVowel() {\n            encoded.append(char.nextVowel())\n\
    \        } else if char.isUpperCase() {\n            encoded.append(char.lowercased())\n\
    \        } else {\n            encoded.append(char.uppercased())\n        }\n\
    \    }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpgpbsuy9i.swift:14:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpgpbsuy9i.swift:15:17:\
    \ error: value of type 'Character' has no member 'isVowel'\n        if char.isVowel()\
    \ {\n           ~~~~ ^~~~~~~\n/tmp/tmpgpbsuy9i.swift:16:33: error: value of type\
    \ 'Character' has no member 'nextVowel'\n            encoded.append(char.nextVowel())\n\
    \                           ~~~~ ^~~~~~~~~\n/tmp/tmpgpbsuy9i.swift:17:24: error:\
    \ value of type 'Character' has no member 'isUpperCase'\n        } else if char.isUpperCase()\
    \ {\n                  ~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824432
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    let alphabetUpper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    var encodedMessage = \"\"\n    for character in message.characters {\n \
    \       if vowels.containsString(String(character)) {\n            if let index\
    \ = alphabet.characters.indexOf(character) {\n                let nextIndex =\
    \ alphabet.startIndex.distanceTo(index) + 2\n                encodedMessage.append(alphabet[alphabet.startIndex.advancedBy(nextIndex\
    \ % alphabet.characters.count)])\n            } else if let index = alphabetUpper.characters.indexOf(character)\
    \ {\n                let nextIndex = alphabetUpper.startIndex.distanceTo(index)\
    \ + 2\n                encodedMessage.append(alphabetUpper[alphabetUpper.startIndex.advancedBy(nextIndex\
    \ % alphabetUpper.characters.count)])\n            }\n        } else {\n     \
    \       encodedMessage.append(character)\n        }\n    }\n    return encodedMessage\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp7sqtvpz4.swift:17:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    for character in message.characters {\n           \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp7sqtvpz4.swift:18:19: error: value of type 'String' has no member\
    \ 'containsString'\n        if vowels.containsString(String(character)) {\n  \
    \         ~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmp7sqtvpz4.swift:19:48: error: value of\
    \ type 'String' has no member 'indexOf'\n            if let index = alphabet.characters.indexOf(character)\
    \ {\n                           ~~~~~~~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmp7sqtvpz4.swift:20:53:\
    \ error: value of type 'String.Index' has no member 'distanceTo'\n           \
    \     let nextIndex = alphabet.startIndex.distanceTo(index) + 2\n            \
    \                    ~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp7sqtvpz4.swift:21:68:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n           \
    \     encodedMessage.append(alphabet[alphabet.startIndex.advancedBy(nextIndex\
    \ % alphabet.characters.count)])\n                                           \
    \    ~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp7sqtvpz4.swift:22:60: error: value\
    \ of type 'String' has no member 'indexOf'\n            } else if let index =\
    \ alphabetUpper.characters.indexOf(character) {\n                            \
    \      ~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmp7sqtvpz4.swift:23:58: error:\
    \ value of type 'String.Index' has no member 'distanceTo'\n                let\
    \ nextIndex = alphabetUpper.startIndex.distanceTo(index) + 2\n               \
    \                 ~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp7sqtvpz4.swift:24:78:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n           \
    \     encodedMessage.append(alphabetUpper[alphabetUpper.startIndex.advancedBy(nextIndex\
    \ % alphabetUpper.characters.count)])\n                                      \
    \              ~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824432
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message.lowercased() {\n        if vowels.contains(String(char))\
    \ {\n            let index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.distance(from:\
    \ alphabet.startIndex, to: alphabet.index(of: char)!) + 2)\n            encodedMessage.append(alphabet[index])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpxmdzvrj7/tmpxmdzvrj7.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b226278ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2262481b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2262481988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22624807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxmdzvrj7                        0x00005632da7c9a87 <unavailable> + 6791

    5    libc.so.6                          0x00002b2262976460 __libc_start_main +
    245

    6    tmpxmdzvrj7                        0x00005632da7c95d9 <unavailable> + 5593

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let vowels2\
    \ = \"cdfghjklmnpqrstvwxyz\"\n    let vowels3 = \"bdfhjlnprtvxz\"\n    let vowels4\
    \ = \"aeiou\"\n    let vowels5 = \"aeiou\"\n    let vowels6 = \"aeiou\"\n    let\
    \ vowels7 = \"aeiou\"\n    let vowels8 = \"aeiou\"\n    let vowels9 = \"aeiou\"\
    \n    let vowels10 = \"aeiou\"\n    let vowels11 = \"aeiou\"\n    let vowels12\
    \ = \"aeiou\"\n    let vowels13 = \"aeiou\"\n    let vowels14 = \"aeiou\"\n  \
    \  let vowels15 = \"aeiou\"\n    let vowels16 = \"aeiou\"\n    let vowels17 =\
    \ \"aeiou\"\n    let vowels18 = \"aeiou\"\n    let vowels19 = \"aeiou\"\n    let\
    \ vowels20 = \"aeiou\"\n    let vowels21 = \"aeiou\"\n    let vowels22 = \"aeiou\"\
    \n    let vowels23 = \"aeiou\"\n    let vowels24 = \"aeiou\"\n    let vowels25\
    \ = \"aeiou\"\n    let vowels26 = \"aeiou\"\n    let vowels27 = \"aeiou\"\n  \
    \  let vowels28 = \"aeiou\"\n    let vowels29 = \"aeiou\"\n    let vowels30 =\
    \ \"aeiou\"\n    let vowels31 = \"aeiou\"\n    let vowels32 = \"aeiou\"\n    let\
    \ vowels33 = \"aeiou\"\n    let vowels34 = \"aeiou\"\n    let vowels35 = \"aeiou\"\
    \n    let vowels36 = \"aeiou\"\n    let vowels37 = \"aeiou\"\n    let vowels38\
    \ = \"aeiou\"\n    let vowels39 = \"aeiou\"\n    let vowels40 = \"aeiou\"\n  \
    \  let vowels41 = \"aeiou\"\n    let vow\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpbz2a33kr.swift:54:9: error: type annotation missing in pattern\n\
    \    let vow\n        ^\n"
  stdout: ''
  timestamp: 1659824432
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpuxy54hfc/tmpuxy54hfc.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b38da61cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b38da313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b38da313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38da3127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuxy54hfc                        0x000055bc3bde7307 <unavailable> + 4871

    5    libc.so.6                          0x00002b38da808460 __libc_start_main +
    245

    6    tmpuxy54hfc                        0x000055bc3bde6f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char\
    \ in message.lowercased() {\n        if vowels.contains(char) {\n            let\
    \ index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.index(of: char)!\
    \ + 2)\n            encodedMessage.append(alphabet[index])\n        } else {\n\
    \            encodedMessage.append(char)\n        }\n    }\n    return encodedMessage\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpwcyhvwf4.swift:18:95: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n            let index = alphabet.index(alphabet.startIndex,\
    \ offsetBy: alphabet.index(of: char)! + 2)\n                                 \
    \                                                             ^\n"
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message.lowercased()\
    \ {\n        if let index = alphabet.index(of: char) {\n            let newIndex\
    \ = alphabet.index(index, offsetBy: 2)\n            encoded.append(alphabet[newIndex])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpodijfm_e/tmpodijfm_e.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3e8080c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3e7d77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3e7d77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3e7d767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpodijfm_e                        0x000055bb3d331647 <unavailable> + 5703

    5    libc.so.6                          0x00002ba3e826c460 __libc_start_main +
    245

    6    tmpodijfm_e                        0x000055bb3d331289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message.lowercased()\
    \ {\n        if vowels.contains(char) {\n            let index = alphabet.index(alphabet.startIndex,\
    \ offsetBy: alphabet.distance(from: alphabet.startIndex, to: alphabet.firstIndex(of:\
    \ char)!))\n            encoded.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n        } else {\n            encoded.append(char)\n        }\n    }\n\
    \    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpbu4alqko/tmpbu4alqko.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b65b0e99c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65b0b90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65b0b90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65b0b8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbu4alqko                        0x0000560cc72ce927 <unavailable> + 6439

    5    libc.so.6                          0x00002b65b1085460 __libc_start_main +
    245

    6    tmpbu4alqko                        0x0000560cc72ce479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1659824432
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpuxy54hfc/tmpuxy54hfc.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b38da61cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b38da313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b38da313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38da3127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuxy54hfc                        0x000055bc3bde7307 <unavailable> + 4871

    5    libc.so.6                          0x00002b38da808460 __libc_start_main +
    245

    6    tmpuxy54hfc                        0x000055bc3bde6f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encodedMessage = \"\"\n    for\
    \ char in message.characters {\n        if char.isLetter {\n            let letter\
    \ = String(char).uppercaseString\n            let index = letters.indexOf(letter)!\n\
    \            let encodedIndex = (index + 2) % letters.count\n            let encodedLetter\
    \ = letters[encodedIndex]\n            encodedMessage += encodedLetter\n     \
    \   } else {\n            encodedMessage += String(char)\n        }\n    }\n \
    \   return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpm8kwdesz.swift:14:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpm8kwdesz.swift:16:39:\
    \ error: value of type 'String' has no member 'uppercaseString'\n            let\
    \ letter = String(char).uppercaseString\n                         ~~~~~~~~~~~~\
    \ ^~~~~~~~~~~~~~~\n/tmp/tmpm8kwdesz.swift:17:25: error: cannot find 'letters'\
    \ in scope\n            let index = letters.indexOf(letter)!\n               \
    \         ^~~~~~~\n/tmp/tmpm8kwdesz.swift:18:46: error: cannot find 'letters'\
    \ in scope\n            let encodedIndex = (index + 2) % letters.count\n     \
    \                                        ^~~~~~~\n/tmp/tmpm8kwdesz.swift:19:33:\
    \ error: cannot find 'letters' in scope\n            let encodedLetter = letters[encodedIndex]\n\
    \                                ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824432
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encodedMessage = \"\"\n    let\
    \ vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for\
    \ char in message.lowercased() {\n        if vowels.contains(char) {\n       \
    \     let index = alphabet.index(of: char)!\n            let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n      \
    \  } else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp38w908_2/tmp38w908_2.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09a7416c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09a710db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09a710d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09a710c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp38w908_2                        0x000056006cafe867 <unavailable> + 6247

    5    libc.so.6                          0x00002b09a7602460 __libc_start_main +
    245

    6    tmp38w908_2                        0x000056006cafe3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encodedMessage = \"\"\n    for\
    \ char in message.characters {\n        if char.isVowel() {\n            encodedMessage.append(char.next().next())\n\
    \        } else {\n            encodedMessage.append(char.swapCase())\n      \
    \  }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\"\
    ) == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmp6ej_wwhn.swift:14:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp6ej_wwhn.swift:15:17:\
    \ error: value of type 'Character' has no member 'isVowel'\n        if char.isVowel()\
    \ {\n           ~~~~ ^~~~~~~\n/tmp/tmp6ej_wwhn.swift:16:40: error: value of type\
    \ 'Character' has no member 'next'\n            encodedMessage.append(char.next().next())\n\
    \                                  ~~~~ ^~~~\n/tmp/tmp6ej_wwhn.swift:18:40: error:\
    \ value of type 'Character' has no member 'swapCase'\n            encodedMessage.append(char.swapCase())\n\
    \                                  ~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824430
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for letter\
    \ in message.lowercased() {\n        if vowels.contains(letter) {\n          \
    \  encodedMessage += String(alphabet[alphabet.index(alphabet.startIndex, offsetBy:\
    \ alphabet.index(of: letter)! + 2)])\n        } else {\n            encodedMessage\
    \ += String(letter)\n        }\n    }\n    return encodedMessage\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpn7bt5ip6.swift:18:119: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n            encodedMessage += String(alphabet[alphabet.index(alphabet.startIndex,\
    \ offsetBy: alphabet.index(of: letter)! + 2)])\n                             \
    \                                                                            \
    \             ^\n"
  stdout: ''
  timestamp: 1659824432
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpuxy54hfc/tmpuxy54hfc.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b38da61cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b38da313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b38da313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38da3127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuxy54hfc                        0x000055bc3bde7307 <unavailable> + 4871

    5    libc.so.6                          0x00002b38da808460 __libc_start_main +
    245

    6    tmpuxy54hfc                        0x000055bc3bde6f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char\
    \ in message.lowercased() {\n        if vowels.contains(char) {\n            let\
    \ index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.index(of: char)!\
    \ + 2)\n            encodedMessage.append(alphabet[index])\n        } else {\n\
    \            encodedMessage.append(char)\n        }\n    }\n    return encodedMessage\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpwcyhvwf4.swift:18:95: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n            let index = alphabet.index(alphabet.startIndex,\
    \ offsetBy: alphabet.index(of: char)! + 2)\n                                 \
    \                                                             ^\n"
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message.lowercased()\
    \ {\n        if let index = alphabet.index(of: char) {\n            let nextIndex\
    \ = alphabet.index(index, offsetBy: 2)\n            encoded.append(alphabet[nextIndex])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp6q3eza65/tmp6q3eza65.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c82f33c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c82c2ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c82c2a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c82c297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6q3eza65                        0x000055bfbe3a3647 <unavailable> + 5703

    5    libc.so.6                          0x00002b3c8311f460 __libc_start_main +
    245

    6    tmp6q3eza65                        0x000055bfbe3a3289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message.lowercased() {\n        if vowels.contains(String(char))\
    \ {\n            let index = alphabet.index(of: char)\n            let nextIndex\
    \ = alphabet.index(index!, offsetBy: 2)\n            encodedMessage.append(alphabet[nextIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpmdfbatqv/tmpmdfbatqv.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e761a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e75e97b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e75e97988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e75e967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmdfbatqv                        0x000055f9348db9c7 <unavailable> + 6599

    5    libc.so.6                          0x00002b9e7638c460 __libc_start_main +
    245

    6    tmpmdfbatqv                        0x000055f9348db519 <unavailable> + 5401

    '
  stdout: ''
  timestamp: 1659824432
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encodedMessage = \"\"\n    let\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for char in message.lowercased() {\n        if vowels.contains(String(char))\
    \ {\n            let index = alphabet.index(of: char)\n            let newIndex\
    \ = alphabet.index(index!, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpp12v9fo2/tmpp12v9fo2.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3e6a4c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3e6a1bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3e6a1bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3e6a1ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp12v9fo2                        0x00005571b5cb49c7 <unavailable> + 6599

    5    libc.so.6                          0x00002b3e6a6b0460 __libc_start_main +
    245

    6    tmpp12v9fo2                        0x00005571b5cb4519 <unavailable> + 5401

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for character\
    \ in message.lowercased() {\n        if vowels.contains(character) {\n       \
    \     let index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.distance(from:\
    \ alphabet.startIndex, to: alphabet.firstIndex(of: character)!))\n           \
    \ encoded.append(alphabet[alphabet.index(index, offsetBy: 2)])\n        } else\
    \ {\n            encoded.append(character)\n        }\n    }\n    return encoded\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpaz388dla/tmpaz388dla.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbcf2a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbcef98b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbcef98988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbcef977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaz388dla                        0x0000558ff656a927 <unavailable> + 6439

    5    libc.so.6                          0x00002abbcf48d460 __libc_start_main +
    245

    6    tmpaz388dla                        0x0000558ff656a479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1659824432
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encodedMessage = \"\"\n    let\
    \ vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet:\
    \ [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    for char in message {\n     \
    \   if vowels.contains(char) {\n            if char == \"u\" {\n             \
    \   encodedMessage.append(\"a\")\n            } else {\n                let index\
    \ = alphabet.firstIndex(of: char)!\n                encodedMessage.append(alphabet[index\
    \ + 2])\n            }\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage.uppercased()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmp780fm2pg/tmp780fm2pg.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7b2d95c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7b2a8cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7b2a8c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7b2a8b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp780fm2pg                        0x000055ebcd5f6927 <unavailable> + 6439

    5    libc.so.6                          0x00002ac7b2f81460 __libc_start_main +
    245

    6    tmp780fm2pg                        0x000055ebcd5f6569 <unavailable> + 5481

    '
  stdout: ''
  timestamp: 1659824432
- exit_code: 1
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    var encoded = \"\"\n    for char in\
    \ message.characters {\n        if char.isVowel() {\n            encoded.append(char.next().next())\n\
    \        } else {\n            encoded.append(char.swapCase())\n        }\n  \
    \  }\n    return encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encode(message:\
    \ \"TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\n\
    assert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message: \"This is\
    \ a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw\
    \ WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: SyntaxError
  stderr: "/tmp/tmpc6j6x_i8.swift:14:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in message.characters {\n                \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpc6j6x_i8.swift:15:17:\
    \ error: value of type 'Character' has no member 'isVowel'\n        if char.isVowel()\
    \ {\n           ~~~~ ^~~~~~~\n/tmp/tmpc6j6x_i8.swift:16:33: error: value of type\
    \ 'Character' has no member 'next'\n            encoded.append(char.next().next())\n\
    \                           ~~~~ ^~~~\n/tmp/tmpc6j6x_i8.swift:18:33: error: value\
    \ of type 'Character' has no member 'swapCase'\n            encoded.append(char.swapCase())\n\
    \                           ~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message.lowercased()\
    \ {\n        if let index = alphabet.index(of: char) {\n            let newIndex\
    \ = alphabet.index(index, offsetBy: 2)\n            encoded.append(alphabet[newIndex])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpodijfm_e/tmpodijfm_e.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3e8080c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3e7d77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3e7d77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3e7d767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpodijfm_e                        0x000055bb3d331647 <unavailable> + 5703

    5    libc.so.6                          0x00002ba3e826c460 __libc_start_main +
    245

    6    tmpodijfm_e                        0x000055bb3d331289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message:\
    \ \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\n\
    assert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message:\
    \ \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpuxy54hfc/tmpuxy54hfc.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b38da61cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b38da313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b38da313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38da3127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuxy54hfc                        0x000055bc3bde7307 <unavailable> + 4871

    5    libc.so.6                          0x00002b38da808460 __libc_start_main +
    245

    6    tmpuxy54hfc                        0x000055bc3bde6f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824430
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = [\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message.lowercased() {\n        if vowels.contains(String(char))\
    \ {\n            let index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.distance(from:\
    \ alphabet.startIndex, to: alphabet.index(of: char)!) + 2)\n            encoded.append(alphabet[index])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encode(message: \"TEST\"\
    ) == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpi4kbxf06/tmpi4kbxf06.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af3a1264c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3a0f5bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af3a0f5b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3a0f5a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi4kbxf06                        0x000055e65458ca87 <unavailable> + 6791

    5    libc.so.6                          0x00002af3a1450460 __libc_start_main +
    245

    6    tmpi4kbxf06                        0x000055e65458c5d9 <unavailable> + 5593

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels = \"aeiou\"\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for letter\
    \ in message.lowercased() {\n        if vowels.contains(letter) {\n          \
    \  let index = letters.index(of: letter)!\n            let newIndex = letters.index(index,\
    \ offsetBy: 2)\n            encodedMessage.append(letters[newIndex])\n       \
    \ } else {\n            encodedMessage.append(letter)\n        }\n    }\n    return\
    \ encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encode(message: \"\
    TEST\") == \"tgst\")\nassert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message:\
    \ \"YES\") == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS\
    \ KS C MGSSCGG\")\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"\
    k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmpbnwqul15/tmpbnwqul15.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbb2a4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbb2742b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbb2742988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbb27417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbnwqul15                        0x000055e8de276867 <unavailable> + 6247

    5    libc.so.6                          0x00002adbb2c37460 __libc_start_main +
    245

    6    tmpbnwqul15                        0x000055e8de2763b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1659824431
- exit_code: -4
  program: "\n/// Write a function that takes a message, and encodes in such a \n\
    /// way that it swaps case of all letters, replaces all vowels in \n/// the message\
    \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
    \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
    /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc\
    \ encode(message: String) -> String {\n    let vowels: [Character] = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"]\n    var encodedMessage = \"\"\n    for char in message\
    \ {\n        if vowels.contains(char) {\n            encodedMessage.append(vowels[(vowels.firstIndex(of:\
    \ char)! + 2) % vowels.count])\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encode(message: \"TEST\") == \"tgst\")\nassert(encode(message: \"\
    Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\") == \"ygs\")\nassert(encode(message:\
    \ \"This is a message\") == \"tHKS KS C MGSSCGG\")\nassert(encode(message: \"\
    I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\")"
  status: Exception
  stderr: 'tmplircnbhk/tmplircnbhk.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b27a7e8fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b27a7b86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b27a7b86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b27a7b857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplircnbhk                        0x000055f2d4414877 <unavailable> + 6263

    5    libc.so.6                          0x00002b27a807b460 __libc_start_main +
    245

    6    tmplircnbhk                        0x000055f2d44144b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824432
