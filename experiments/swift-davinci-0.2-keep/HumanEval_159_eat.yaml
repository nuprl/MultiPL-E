name: HumanEval_159_eat
language: swift
prompt: "\n/// You're a hungry rabbit, and you already have eaten a certain number\
  \ of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n\
  /// you should return an array of [ total number of eaten carrots after your meals,\n\
  /// the number of carrots left after your meals ]\n/// if there are not enough remaining\
  \ carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n\
  /// * eat(5, 6, 10) -> [11, 4]\n/// * eat(4, 8, 9) -> [12, 1]\n/// * eat(1, 10,\
  \ 10) -> [11, 0]\n/// * eat(2, 11, 5) -> [7, 0]\n/// Variables:\n/// @number : integer\n\
  /// the number of carrots that you have eaten.\n/// @need : integer\n/// the number\
  \ of carrots that you need to eat.\n/// @remaining : integer\n/// the number of\
  \ remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n\
  /// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number:\
  \ Int, need: Int, remaining: Int) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(eat(number: 5, need: 6, remaining: 10) ==\
  \ [11, 4])\nassert(eat(number: 4, need: 8, remaining: 9) == [12, 1])\nassert(eat(number:\
  \ 1, need: 10, remaining: 10) == [11, 0])\nassert(eat(number: 2, need: 11, remaining:\
  \ 5) == [7, 0])\nassert(eat(number: 4, need: 5, remaining: 7) == [9, 2])\nassert(eat(number:\
  \ 4, need: 5, remaining: 1) == [5, 0])"
completions: ["    let total = number + remaining\n    let eaten = total > need ?\
    \ need : total\n    return [eaten, total - eaten]", "    let total = number +\
    \ min(need, remaining)\n    let left = max(0, remaining - need)\n    return [total,\
    \ left]", "    let total = number + remaining\n    let eaten = total > need ?\
    \ need : total\n    return [eaten, total - eaten]", "    let total = number +\
    \ remaining\n    let eaten = total >= need ? need : total\n    return [eaten,\
    \ total - eaten]", "    let total = number + need\n    let left = total - remaining\n\
    \    return left > 0 ? [total, 0] : [total, remaining - total]", "    let eaten\
    \ = number + min(need, remaining)\n    let left = max(0, remaining - need)\n \
    \   return [eaten, left]", "    let total = number + need\n    return total >\
    \ remaining ? [remaining, 0] : [total, remaining - total]", "    let total = number\
    \ + need\n    let left = total - remaining\n    return left > 0 ? [total, 0] :\
    \ [total, remaining - total]", "    let total = number + min(need, remaining)\n\
    \    let left = max(0, remaining - need)\n    return [total, left]", "    let\
    \ total = number + remaining\n    if total >= need {\n        return [need, total\
    \ - need]\n    } else {\n        return [total, 0]\n    }", "    let total = number\
    \ + min(need, remaining)\n    let left = max(0, remaining - need)\n    return\
    \ [total, left]", '    return [min(number + remaining, need), max(0, number +
    remaining - need)]', "    let total = number + remaining\n    let eaten = total\
    \ > need ? need : total\n    return [eaten, total - eaten]", "    if number +\
    \ remaining >= need {\n        return [need, number + remaining - need]\n    }\
    \ else {\n        return [number + remaining, 0]\n    }", "    let total = number\
    \ + remaining\n    if total < need {\n        return [total, 0]\n    }\n    return\
    \ [need, total - need]", "    let total = number + remaining\n    let eaten =\
    \ total < need ? total : need\n    return [eaten, total - eaten]", "    let total\
    \ = number + remaining\n    let eaten = total < need ? total : need\n    return\
    \ [eaten, total - eaten]", "    var result = [Int]()\n    var total = number +\
    \ remaining\n    if total >= need {\n        result.append(need)\n        result.append(total\
    \ - need)\n    } else {\n        result.append(total)\n        result.append(0)\n\
    \    }\n    return result", "    let eaten = number + min(need, remaining)\n \
    \   let left = max(0, remaining - need)\n    return [eaten, left]", "    let total\
    \ = number + need\n    let left = total > remaining ? 0 : remaining - total\n\
    \    return [total, left]"]
stop_tokens:
- "\n}"
