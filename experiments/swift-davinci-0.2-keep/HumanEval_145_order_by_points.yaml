name: HumanEval_145_order_by_points
language: swift
prompt: "\n/// Write a function which sorts the given list of integers\n/// in ascending\
  \ order according to the sum of their digits.\n/// Note: if there are several items\
  \ with similar sum of their digits,\n/// order them based on their index in original\
  \ list.\n/// For example:\n/// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
  \ -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc order_by_points(nums:\
  \ [Int]) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12])\
  \ == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145,\
  \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
  \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
  \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3])\
  \ == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3,\
  \ 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
  \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
completions: ["    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }", "    return nums.sorted { (a, b) -> Bool in\n \
    \       let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted {\n        let\
    \ sum1 = $0.digits.reduce(0, +)\n        let sum2 = $1.digits.reduce(0, +)\n \
    \       return sum1 == sum2 ? $0 < $1 : sum1 < sum2\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum == bSum ? a < b : aSum < bSum\n\
    \    }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }", "    return nums.sorted(by: {\n        let sum1 = sum_of_digits(num: $0)\n\
    \        let sum2 = sum_of_digits(num: $1)\n        if sum1 == sum2 {\n      \
    \      return nums.index(of: $0)! < nums.index(of: $1)!\n        }\n        return\
    \ sum1 < sum2\n    })", "    return nums.sorted { (a, b) -> Bool in\n        let\
    \ aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0, +)\n   \
    \     return aSum < bSum\n    }", "    return nums.sorted { (a, b) -> Bool in\n\
    \        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted(by: { (a, b)\
    \ -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum == bSum ? a < b : aSum < bSum\n    })", "    return\
    \ nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n\
    \        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ? a < b\
    \ : aSum < bSum\n    }", "    return nums.sorted(by: {\n        let a = $0.digits.reduce(0,\
    \ +)\n        let b = $1.digits.reduce(0, +)\n        return a == b ? $0 < $1\
    \ : a < b\n    })", "    return nums.sorted { (num1, num2) -> Bool in\n      \
    \  let sum1 = num1.digits.reduce(0, +)\n        let sum2 = num2.digits.reduce(0,\
    \ +)\n        return sum1 < sum2\n    }", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum == bSum ? a < b : aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum < bSum\n    }", "    var result\
    \ = [Int]()\n    var dict = [Int: Int]()\n    for (index, num) in nums.enumerated()\
    \ {\n        let sum = num.digits.reduce(0, +)\n        dict[sum] = num\n    }\n\
    \    let sortedKeys = dict.keys.sorted()\n    for key in sortedKeys {\n      \
    \  result.append(dict[key]!)\n    }\n    return result"]
stop_tokens:
- "\n}"
