name: HumanEval_145_order_by_points
language: swift
prompt: "\n/// Write a function which sorts the given list of integers\n/// in ascending\
  \ order according to the sum of their digits.\n/// Note: if there are several items\
  \ with similar sum of their digits,\n/// order them based on their index in original\
  \ list.\n/// For example:\n/// >>> order_by_points([1, 11, -1, -11, -12]) == [-1,\
  \ -11, 1, -12, 11]\n/// >>> order_by_points([]) == []\nfunc order_by_points(nums:\
  \ [Int]) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12])\
  \ == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145,\
  \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
  \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
  \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3])\
  \ == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3,\
  \ 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
  \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
completions: ["    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }", "    return nums.sorted { (a, b) -> Bool in\n \
    \       let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted {\n        let\
    \ sum1 = $0.digits.reduce(0, +)\n        let sum2 = $1.digits.reduce(0, +)\n \
    \       return sum1 == sum2 ? $0 < $1 : sum1 < sum2\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum == bSum ? a < b : aSum < bSum\n\
    \    }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }", "    return nums.sorted(by: {\n        let sum1 = sum_of_digits(num: $0)\n\
    \        let sum2 = sum_of_digits(num: $1)\n        if sum1 == sum2 {\n      \
    \      return nums.index(of: $0)! < nums.index(of: $1)!\n        }\n        return\
    \ sum1 < sum2\n    })", "    return nums.sorted { (a, b) -> Bool in\n        let\
    \ aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0, +)\n   \
    \     return aSum < bSum\n    }", "    return nums.sorted { (a, b) -> Bool in\n\
    \        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted(by: { (a, b)\
    \ -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum == bSum ? a < b : aSum < bSum\n    })", "    return\
    \ nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n\
    \        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ? a < b\
    \ : aSum < bSum\n    }", "    return nums.sorted(by: {\n        let a = $0.digits.reduce(0,\
    \ +)\n        let b = $1.digits.reduce(0, +)\n        return a == b ? $0 < $1\
    \ : a < b\n    })", "    return nums.sorted { (num1, num2) -> Bool in\n      \
    \  let sum1 = num1.digits.reduce(0, +)\n        let sum2 = num2.digits.reduce(0,\
    \ +)\n        return sum1 < sum2\n    }", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum == bSum ? a < b : aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum < bSum\n    }", "    var result\
    \ = [Int]()\n    var dict = [Int: Int]()\n    for (index, num) in nums.enumerated()\
    \ {\n        let sum = num.digits.reduce(0, +)\n        dict[sum] = num\n    }\n\
    \    let sortedKeys = dict.keys.sorted()\n    for key in sortedKeys {\n      \
    \  result.append(dict[key]!)\n    }\n    return result", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = String(a).reduce(0) { $0 + Int(String($1))!\
    \ }\n        let bSum = String(b).reduce(0) { $0 + Int(String($1))! }\n      \
    \  return aSum < bSum\n    }", "    return nums.sorted {\n        let sum1 = sum_of_digits(n:\
    \ $0)\n        let sum2 = sum_of_digits(n: $1)\n        if sum1 == sum2 {\n  \
    \          return nums.index(of: $0)! < nums.index(of: $1)!\n        }\n     \
    \   return sum1 < sum2\n    }", "    return nums.sorted { (a, b) -> Bool in\n\
    \        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum == bSum ? a < b : aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum == bSum ? a < b : aSum < bSum\n\
    \    }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = sumOfDigits(a)\n\
    \        let bSum = sumOfDigits(b)\n        if aSum == bSum {\n            return\
    \ a < b\n        }\n        return aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let sumA = a.digits.reduce(0, +)\n        let sumB\
    \ = b.digits.reduce(0, +)\n        return sumA == sumB ? a < b : sumA < sumB\n\
    \    }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }", "    return nums.sorted { (a, b) -> Bool in\n \
    \       let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted(by: {\n    \
    \    let a = $0.digits.reduce(0, +)\n        let b = $1.digits.reduce(0, +)\n\
    \        return a == b ? $0 < $1 : a < b\n    })", "    return nums.sorted { (a,\
    \ b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum =\
    \ b.digits.reduce(0, +)\n        return aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum < bSum\n    }", "    var nums =\
    \ nums\n    for i in 0..<nums.count {\n        for j in i+1..<nums.count {\n \
    \           if sum_of_digits(nums[i]) > sum_of_digits(nums[j]) {\n           \
    \     nums.swapAt(i, j)\n            }\n        }\n    }\n    return nums", " \
    \   return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum ||\
    \ (aSum == bSum && a < b)\n    }", "    return nums.sorted { (a, b) -> Bool in\n\
    \        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum == bSum ? a < b : aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = sum_of_digits(a)\n        let bSum =\
    \ sum_of_digits(b)\n        if aSum == bSum {\n            return nums.firstIndex(of:\
    \ a)! < nums.firstIndex(of: b)!\n        }\n        return aSum < bSum\n    }",
  "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }", "    return nums.sorted(by: {\n        let sum1\
    \ = $0.digits.reduce(0, +)\n        let sum2 = $1.digits.reduce(0, +)\n      \
    \  return sum1 == sum2 ? $0 < $1 : sum1 < sum2\n    })", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum == bSum ? a < b : aSum < bSum\n\
    \    }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }", "    return nums.sorted(by: {\n        let a =\
    \ abs($0)\n        let b = abs($1)\n        let aSum = a.digits.reduce(0, +)\n\
    \        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ? $0 <\
    \ $1 : aSum < bSum\n    })", "    return nums.sorted { (a, b) -> Bool in\n   \
    \     let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let aSum = sum_of_digits(a)\n        let bSum = sum_of_digits(b)\n\
    \        if aSum == bSum {\n            return a < b\n        }\n        return\
    \ aSum < bSum\n    }", "    var result = [Int]()\n    var dict = [Int: Int]()\n\
    \    for (index, num) in nums.enumerated() {\n        dict[num] = index\n    }\n\
    \    let sortedDict = dict.sorted { (a, b) -> Bool in\n        let aSum = a.key.digits.reduce(0,\
    \ +)\n        let bSum = b.key.digits.reduce(0, +)\n        return aSum == bSum\
    \ ? a.value < b.value : aSum < bSum\n    }\n    for (key, _) in sortedDict {\n\
    \        result.append(key)\n    }\n    return result", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum == bSum ? a < b : aSum < bSum\n\
    \    }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }", "    return nums.sorted {\n        let sumOfDigits = $0.digits.reduce(0,\
    \ +)\n        let sumOfDigits2 = $1.digits.reduce(0, +)\n        return sumOfDigits\
    \ == sumOfDigits2 ? $0 < $1 : sumOfDigits < sumOfDigits2\n    }", "    return\
    \ nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n\
    \        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n    }",
  "    return nums.sorted(by: {\n        let sum1 = $0.digits.reduce(0, +)\n     \
    \   let sum2 = $1.digits.reduce(0, +)\n        return sum1 < sum2\n    })", " \
    \   return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }", "    return nums.sorted { (a, b) -> Bool in\n \
    \       let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum == bSum ? a < b : aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum == bSum ? a < b : aSum < bSum\n\
    \    }", "    var dict: [Int: [Int]] = [:]\n    for (index, num) in nums.enumerated()\
    \ {\n        let sum = num.digits.reduce(0, +)\n        if dict[sum] == nil {\n\
    \            dict[sum] = [num]\n        } else {\n            dict[sum]?.append(num)\n\
    \        }\n    }\n    let sortedKeys = dict.keys.sorted()\n    var result: [Int]\
    \ = []\n    for key in sortedKeys {\n        result.append(contentsOf: dict[key]!)\n\
    \    }\n    return result", "    return nums.sorted { (a, b) -> Bool in\n    \
    \    let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0, +)\n\
    \        return aSum == bSum ? a < b : aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum == bSum ? a < b : aSum < bSum\n\
    \    }", "    return nums.sorted(by: {\n        let a = abs($0)\n        let b\
    \ = abs($1)\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum == bSum ? a < b : aSum < bSum\n    })", "    return\
    \ nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n\
    \        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ? a < b\
    \ : aSum < bSum\n    }", "    return nums.sorted { (a, b) -> Bool in\n       \
    \ let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0, +)\n\
    \        return aSum < bSum\n    }", "    return nums.sorted { (a, b) -> Bool\
    \ in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum == bSum ? a < b : aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum < bSum\n    }", "    return nums.sorted(by:\
    \ {\n        let a = $0.digits.reduce(0, +)\n        let b = $1.digits.reduce(0,\
    \ +)\n        return a < b\n    })", "    return nums.sorted { (a, b) -> Bool\
    \ in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum == bSum ? a < b : aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum < bSum\n    }", "    return nums.sorted(by:\
    \ {\n        let a = abs($0)\n        let b = abs($1)\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    })", "    return nums.sorted { (a, b) -> Bool in\n\
    \        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted {\n        let\
    \ sum1 = $0.digits.reduce(0, +)\n        let sum2 = $1.digits.reduce(0, +)\n \
    \       return sum1 == sum2 ? $0 < $1 : sum1 < sum2\n    }", "    return nums.sorted\
    \ {\n        let a = $0.digits.reduce(0, +)\n        let b = $1.digits.reduce(0,\
    \ +)\n        return a < b\n    }", "    var result = nums\n    result.sort {\
    \ (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum == bSum ? a < b : aSum < bSum\n\
    \    }\n    return result", "    return nums.sorted { (a, b) -> Bool in\n    \
    \    let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0, +)\n\
    \        return aSum == bSum ? a < b : aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = String(a).reduce(0) { $0 + Int(String($1))!\
    \ }\n        let bSum = String(b).reduce(0) { $0 + Int(String($1))! }\n      \
    \  return aSum < bSum\n    }", "    return nums.sorted { (a, b) -> Bool in\n \
    \       let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum == bSum ? a < b : aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum < bSum\n    }", "    return nums.sorted\
    \ {\n        let sum1 = $0.digits.reduce(0, +)\n        let sum2 = $1.digits.reduce(0,\
    \ +)\n        return sum1 == sum2 ? $0 < $1 : sum1 < sum2\n    }", "    var nums\
    \ = nums\n    for i in 0..<nums.count {\n        for j in 0..<nums.count - 1 {\n\
    \            if sum_of_digits(nums[j]) > sum_of_digits(nums[j + 1]) {\n      \
    \          nums.swapAt(j, j + 1)\n            }\n        }\n    }\n    return\
    \ nums", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }", "    return nums.sorted { (a, b) -> Bool in\n \
    \       let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum == bSum ? a < b : aSum < bSum\n    }", "    return nums.sorted(by:\
    \ {\n        let a = $0.digits.reduce(0, +)\n        let b = $1.digits.reduce(0,\
    \ +)\n        return a < b\n    })", "    var result = [Int]()\n    var dict =\
    \ [Int: Int]()\n    for (index, num) in nums.enumerated() {\n        let sum =\
    \ sum_of_digits(num: num)\n        dict[sum] = num\n    }\n    for key in dict.keys.sorted()\
    \ {\n        result.append(dict[key]!)\n    }\n    return result", "    return\
    \ nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n\
    \        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n    }",
  "    return nums.sorted(by: { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   })", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }", "    return nums.sorted {\n        let sum1 = $0.digits.reduce(0,\
    \ +)\n        let sum2 = $1.digits.reduce(0, +)\n        return sum1 < sum2\n\
    \    }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }", "    return nums.sorted(by: { (a, b) -> Bool in\n\
    \        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    })", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum == bSum ? a < b : aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum == bSum ? a < b : aSum < bSum\n\
    \    }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }", "    return nums.sorted { (a, b) -> Bool in\n        let sumA = a.digits.reduce(0,\
    \ +)\n        let sumB = b.digits.reduce(0, +)\n        return sumA < sumB\n \
    \   }", "    return nums.sorted(by: {\n        let a = String($0).map { Int(String($0))!\
    \ }.reduce(0, +)\n        let b = String($1).map { Int(String($0))! }.reduce(0,\
    \ +)\n        return a < b\n    })", "    return nums.sorted { (a, b) -> Bool\
    \ in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum == bSum ? a < b : aSum < bSum\n    }", "    return nums.sorted(by:\
    \ {\n        let sum1 = sum_of_digits(num: $0)\n        let sum2 = sum_of_digits(num:\
    \ $1)\n        if sum1 == sum2 {\n            return nums.index(of: $0)! < nums.index(of:\
    \ $1)!\n        }\n        return sum1 < sum2\n    })", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum == bSum ? a < b : aSum < bSum\n\
    \    }", "    var nums = nums\n    for i in 0..<nums.count {\n        for j in\
    \ 0..<nums.count - 1 {\n            if sum_of_digits(nums[j]) > sum_of_digits(nums[j\
    \ + 1]) {\n                let temp = nums[j]\n                nums[j] = nums[j\
    \ + 1]\n                nums[j + 1] = temp\n            }\n        }\n    }\n\
    \    return nums", "    return nums.sorted { (a, b) -> Bool in\n        let aSum\
    \ = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0, +)\n        return\
    \ aSum == bSum ? a < b : aSum < bSum\n    }", "    return nums.sorted { (a, b)\
    \ -> Bool in\n        let sumA = a.digits.reduce(0, +)\n        let sumB = b.digits.reduce(0,\
    \ +)\n        return sumA < sumB\n    }", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum == bSum ? a < b : aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits().reduce(0, +)\n        let\
    \ bSum = b.digits().reduce(0, +)\n        return aSum < bSum\n    }", "    return\
    \ nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n\
    \        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n    }",
  "    return nums.sorted(by: {\n        let sum1 = $0.digits.reduce(0, +)\n     \
    \   let sum2 = $1.digits.reduce(0, +)\n        return sum1 == sum2 ? $0 < $1 :\
    \ sum1 < sum2\n    })", "    return nums.sorted { (a, b) -> Bool in\n        let\
    \ aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0, +)\n   \
    \     return aSum < bSum\n    }", "    return nums.sorted { (a, b) -> Bool in\n\
    \        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum || (aSum == bSum && a < b)\n    }", "    return\
    \ nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n\
    \        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ? a < b\
    \ : aSum < bSum\n    }", "    return nums.sorted { (a, b) -> Bool in\n       \
    \ let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0, +)\n\
    \        return aSum == bSum ? a < b : aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum == bSum ? a < b : aSum < bSum\n\
    \    }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }", "    return nums.sorted { (a, b) -> Bool in\n \
    \       let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum == bSum ? a < b : aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum == bSum ? a < b : aSum < bSum\n\
    \    }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }", "    return nums.sorted(by: {\n        let a =\
    \ $0.digits().reduce(0, +)\n        let b = $1.digits().reduce(0, +)\n       \
    \ return a == b ? $0 < $1 : a < b\n    })", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum == bSum ? a < b : aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum == bSum ? a < b : aSum < bSum\n\
    \    }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = String(a).map\
    \ { Int(String($0))! }.reduce(0, +)\n        let bSum = String(b).map { Int(String($0))!\
    \ }.reduce(0, +)\n        return aSum < bSum\n    }", "    return nums.sorted(by:\
    \ { (a, b) -> Bool in\n        let aSum = sum_of_digits(num: a)\n        let bSum\
    \ = sum_of_digits(num: b)\n        return aSum < bSum\n    })", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum == bSum ? a < b : aSum < bSum\n\
    \    }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }", "    return nums.sorted { (a, b) -> Bool in\n \
    \       let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted(by: {\n    \
    \    let sum1 = sum_of_digits(n: $0)\n        let sum2 = sum_of_digits(n: $1)\n\
    \        if sum1 == sum2 {\n            return nums.index(of: $0)! < nums.index(of:\
    \ $1)!\n        }\n        return sum1 < sum2\n    })", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum == bSum ? a < b : aSum < bSum\n\
    \    }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum ||\
    \ (aSum == bSum && a < b)\n    }", "    return nums.sorted { (lhs, rhs) -> Bool\
    \ in\n        let lhsSum = lhs.digits.reduce(0, +)\n        let rhsSum = rhs.digits.reduce(0,\
    \ +)\n        return lhsSum < rhsSum\n    }", "    var nums = nums\n    nums.sort\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum < bSum\n    }\n    return nums",
  "    return nums.sorted { (n1, n2) -> Bool in\n        let s1 = String(n1).reduce(0)\
    \ { (result, c) -> Int in\n            return result + Int(String(c))!\n     \
    \   }\n        let s2 = String(n2).reduce(0) { (result, c) -> Int in\n       \
    \     return result + Int(String(c))!\n        }\n        return s1 < s2\n   \
    \ }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }", "    return nums.sorted(by: {\n        let a = $0.digits.reduce(0, +)\n\
    \        let b = $1.digits.reduce(0, +)\n        return a == b ? $0 < $1 : a <\
    \ b\n    })", "    return nums.sorted(by: { (a, b) -> Bool in\n        let aSum\
    \ = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0, +)\n        return\
    \ aSum < bSum\n    })", "    return nums.sorted {\n        let sum1 = $0.digits.reduce(0,\
    \ +)\n        let sum2 = $1.digits.reduce(0, +)\n        return sum1 == sum2 ?\
    \ $0 < $1 : sum1 < sum2\n    }", "    return nums.sorted { (a, b) -> Bool in\n\
    \        let aSum = String(a).reduce(0) { $0 + Int(String($1))! }\n        let\
    \ bSum = String(b).reduce(0) { $0 + Int(String($1))! }\n        return aSum <\
    \ bSum\n    }", "    return nums.sorted(by: { (a, b) -> Bool in\n        let aSum\
    \ = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0, +)\n        return\
    \ aSum < bSum\n    })", "    return nums.sorted { (a, b) -> Bool in\n        let\
    \ aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0, +)\n   \
    \     return aSum < bSum\n    }", "    return nums.sorted { (a, b) -> Bool in\n\
    \        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum == bSum ? a < b : aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum < bSum\n    }", "    return nums.sorted(by:\
    \ {\n        let sum1 = $0.digits.reduce(0, +)\n        let sum2 = $1.digits.reduce(0,\
    \ +)\n        return sum1 < sum2\n    })", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let aSum = a.digits().reduce(0, +)\n        let bSum = b.digits().reduce(0,\
    \ +)\n        return aSum == bSum ? a < b : aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum == bSum ? a < b : aSum < bSum\n\
    \    }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }", "    return nums.sorted { (lhs, rhs) -> Bool in\n        let lhsSum =\
    \ lhs.digits.reduce(0, +)\n        let rhsSum = rhs.digits.reduce(0, +)\n    \
    \    return lhsSum < rhsSum\n    }", "    return nums.sorted { (a, b) -> Bool\
    \ in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    var nums = nums\n    nums.sort\
    \ { (lhs, rhs) -> Bool in\n        let lhsSum = lhs.digits.reduce(0, +)\n    \
    \    let rhsSum = rhs.digits.reduce(0, +)\n        return lhsSum == rhsSum ? lhs\
    \ < rhs : lhsSum < rhsSum\n    }\n    return nums", "    return nums.sorted {\
    \ (a, b) -> Bool in\n        let aSum = String(a).map { Int(String($0))! }.reduce(0,\
    \ +)\n        let bSum = String(b).map { Int(String($0))! }.reduce(0, +)\n   \
    \     return aSum < bSum\n    }", "    var result = [Int]()\n    var dict = [Int:\
    \ Int]()\n    for i in 0..<nums.count {\n        dict[nums[i]] = sum_of_digits(nums[i])\n\
    \    }\n    let sortedDict = dict.sorted(by: {$0.value < $1.value})\n    for (key,\
    \ _) in sortedDict {\n        result.append(key)\n    }\n    return result", " \
    \   return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }", "    return nums.sorted {\n        let sum1 = $0.digits.reduce(0, +)\n\
    \        let sum2 = $1.digits.reduce(0, +)\n        return sum1 == sum2 ? $0 <\
    \ $1 : sum1 < sum2\n    }", "    return nums.sorted { (a, b) -> Bool in\n    \
    \    let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0, +)\n\
    \        return aSum < bSum || (aSum == bSum && a < b)\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum == bSum ? a < b : aSum < bSum\n\
    \    }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum == bSum ?\
    \ a < b : aSum < bSum\n    }", "    return nums.sorted { (a, b) -> Bool in\n \
    \       let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum == bSum ? a < b : aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum < bSum\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum == bSum ? a < b : aSum < bSum\n\
    \    }", "    return nums.sorted(by: {\n        let sum1 = sum_of_digits(num:\
    \ $0)\n        let sum2 = sum_of_digits(num: $1)\n        if sum1 == sum2 {\n\
    \            return nums.index(of: $0)! < nums.index(of: $1)!\n        }\n   \
    \     return sum1 < sum2\n    })", "    return nums.sorted { (a, b) -> Bool in\n\
    \        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum\n    }", "    return nums.sorted { (a, b) ->\
    \ Bool in\n        let aSum = String(a).reduce(0) { $0 + Int(String($1))! }\n\
    \        let bSum = String(b).reduce(0) { $0 + Int(String($1))! }\n        return\
    \ aSum < bSum\n    }", "    return nums.sorted { (a, b) -> Bool in\n        let\
    \ aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0, +)\n   \
    \     return aSum < bSum\n    }", "    var nums = nums\n    nums.sort { (a, b)\
    \ -> Bool in\n        let aSum = sumDigits(a)\n        let bSum = sumDigits(b)\n\
    \        if aSum == bSum {\n            return a < b\n        }\n        return\
    \ aSum < bSum\n    }\n    return nums", "    return nums.sorted { (a, b) -> Bool\
    \ in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum < bSum || (aSum == bSum && a < b)\n    }", "    return\
    \ nums.sorted {\n        let a = $0.digits.reduce(0, +)\n        let b = $1.digits.reduce(0,\
    \ +)\n        return a == b ? $0 < $1 : a < b\n    }", "    return nums.sorted\
    \ { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0, +)\n        let bSum\
    \ = b.digits.reduce(0, +)\n        return aSum == bSum ? a < b : aSum < bSum\n\
    \    }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }", "    return nums.sorted { (a, b) -> Bool in\n        let aSum = a.digits.reduce(0,\
    \ +)\n        let bSum = b.digits.reduce(0, +)\n        return aSum < bSum\n \
    \   }", "    return nums.sorted {\n        let a = $0.digits.reduce(0, +)\n  \
    \      let b = $1.digits.reduce(0, +)\n        return a == b ? $0 < $1 : a < b\n\
    \    }", "    return nums.sorted { (lhs, rhs) -> Bool in\n        let lhsSum =\
    \ lhs.digits.reduce(0, +)\n        let rhsSum = rhs.digits.reduce(0, +)\n    \
    \    return lhsSum < rhsSum\n    }", "    return nums.sorted { (a, b) -> Bool\
    \ in\n        let aSum = a.digits.reduce(0, +)\n        let bSum = b.digits.reduce(0,\
    \ +)\n        return aSum == bSum ? a < b : aSum < bSum\n    }"]
stop_tokens:
- "\n}"
