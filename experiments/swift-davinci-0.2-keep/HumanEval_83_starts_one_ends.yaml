name: HumanEval_83_starts_one_ends
language: swift
prompt: "\n/// Given a positive integer n, return the count of the numbers of n-digit\n\
  /// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int) ->\
  \ Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(starts_one_ends(n: 1) == 1)\nassert(starts_one_ends(n:\
  \ 2) == 18)\nassert(starts_one_ends(n: 3) == 180)\nassert(starts_one_ends(n: 4)\
  \ == 1800)\nassert(starts_one_ends(n: 5) == 18000)"
completions: ["    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n       \
    \ return 4\n    }\n    var dp = [Int](repeating: 0, count: n + 1)\n    dp[1] =\
    \ 2\n    dp[2] = 4\n    for i in 3...n {\n        dp[i] = dp[i - 1] + dp[i - 2]\n\
    \    }\n    return dp[n]", '    return 0', "    var count = 0\n    for i in 1...n\
    \ {\n        count += starts_one_ends(n: i, start: true)\n        count += starts_one_ends(n:\
    \ i, start: false)\n    }\n    return count", "    if n == 1 {\n        return\
    \ 2\n    }\n    var count = 1\n    for _ in 1..<n {\n        count *= 9\n    }\n\
    \    return count * 2", "    var count = 0\n    for i in 1...n {\n        count\
    \ += starts_one_ends(n: i)\n    }\n    return count", "    if n == 1 {\n     \
    \   return 2\n    }\n    if n == 2 {\n        return 4\n    }\n    var count =\
    \ 4\n    for _ in 3...n {\n        count *= 5\n    }\n    return count", "   \
    \ if n == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 4\n  \
    \  }\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2)", "    if n ==\
    \ 1 {\n        return 2\n    }\n    if n == 2 {\n        return 4\n    }\n   \
    \ return starts_one_ends(n - 1) + starts_one_ends(n - 2)", "    if n == 1 {\n\
    \        return 2\n    }\n    if n == 2 {\n        return 4\n    }\n    return\
    \ starts_one_ends(n - 1) + starts_one_ends(n - 2)", "    if n == 1 {\n       \
    \ return 2\n    }\n    return (10 - 2) * Int(pow(Double(9), Double(n - 1))) +\
    \ starts_one_ends(n - 1)", "    if n == 1 {\n        return 1\n    }\n    if n\
    \ == 2 {\n        return 10\n    }\n    return 9 * Int(pow(Double(10), Double(n\
    \ - 2)))", "    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n      \
    \  return 4\n    }\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2)",
  "    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 4\n \
    \   }\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2)", "    if n\
    \ == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 4\n    }\n\
    \    var dp = [Int](repeating: 0, count: n + 1)\n    dp[1] = 2\n    dp[2] = 4\n\
    \    for i in 3...n {\n        dp[i] = dp[i - 1] + dp[i - 2]\n    }\n    return\
    \ dp[n]", "    var count = 0\n    for i in 1...n {\n        count += starts_one_ends(n:\
    \ i)\n    }\n    return count", "    if n == 1 {\n        return 2\n    }\n  \
    \  if n == 2 {\n        return 4\n    }\n    return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2)", "    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n        return\
    \ 4\n    }\n    if n == 3 {\n        return 7\n    }\n    return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2)", "    if n == 1 {\n        return 1\n    }\n\
    \    if n == 2 {\n        return 10\n    }\n    var count = 10\n    for _ in 2..<n\
    \ {\n        count *= 9\n    }\n    return count * 2", "    if n == 1 {\n    \
    \    return 2\n    }\n    return starts_one_ends(n - 1) + 9 * count_numbers(n\
    \ - 1)", "    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return\
    \ 10\n    }\n    if n == 3 {\n        return 100\n    }\n    var count = 0\n \
    \   for i in 1...n {\n        count += starts_one_ends(n: i - 1) * starts_one_ends(n:\
    \ n - i)\n    }\n    return count"]
stop_tokens:
- "\n}"
