language: swift
name: HumanEval_130_tri
results:
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n   \
    \     } else if i == 1 {\n            result.append(3)\n        } else if i ==\
    \ 2 {\n            result.append(2)\n        } else if i % 2 == 0 {\n        \
    \    result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp5ttlqbx8/tmp5ttlqbx8.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26f688fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26f6586b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26f6586988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26f65857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ttlqbx8                        0x00005636ff4ee61a <unavailable> + 5658

    5    libc.so.6                          0x00002b26f6a7b460 __libc_start_main +
    245

    6    tmp5ttlqbx8                        0x00005636ff4ee259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n        return\
    \ [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    } else {\n   \
    \     for i in 3...n {\n            if i % 2 == 0 {\n                result.append(1\
    \ + i / 2)\n            } else {\n                result.append(result[i - 1]\
    \ + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpjmxt489x/tmpjmxt489x.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0df5fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0df2f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0df2f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0df2f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjmxt489x                        0x00005603f5c0e5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ad0df7e8460 __libc_start_main +
    245

    6    tmpjmxt489x                        0x00005603f5c0e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    guard n > 2 else { return Array(result[0...n]) }\n    for i in 3...n\
    \ {\n        result.append(i % 2 == 0 ? 1 + i / 2 : result[i - 1] + result[i -\
    \ 2] + result[i + 1])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b14cc3dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14cc0d3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b14cc0d3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b14cc0d313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b14cc0d2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b14cbed2e83 <unavailable> + 188035

    6    tmp76olnrml                        0x0000563cd0b9a66a <unavailable> + 9834

    7    tmp76olnrml                        0x0000563cd0b996db <unavailable> + 5851

    8    libc.so.6                          0x00002b14cc5c8460 __libc_start_main +
    245

    9    tmp76olnrml                        0x0000563cd0b993f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n   \
    \     } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad4e2511c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad4e2208561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad4e2208286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad4e220813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad4e2207bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad4e2007e83 <unavailable> + 188035

    6    tmpknmcj1g8                        0x000055697e163843 <unavailable> + 10307

    7    tmpknmcj1g8                        0x000055697e1626db <unavailable> + 5851

    8    libc.so.6                          0x00002ad4e26fd460 __libc_start_main +
    245

    9    tmpknmcj1g8                        0x000055697e1623f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n        return\
    \ [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    } else {\n   \
    \     for i in 3...n {\n            if i % 2 == 0 {\n                result.append(1\
    \ + i / 2)\n            } else {\n                result.append(result[i - 1]\
    \ + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpjmxt489x/tmpjmxt489x.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0df5fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0df2f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0df2f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0df2f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjmxt489x                        0x00005603f5c0e5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ad0df7e8460 __libc_start_main +
    245

    6    tmpjmxt489x                        0x00005603f5c0e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n == 0 {\n    \
    \    return [1]\n    }\n    if n == 1 {\n        return [1, 3]\n    }\n    if\
    \ n == 2 {\n        return [1, 3, 2]\n    }\n    var result = [1, 3, 2]\n    for\
    \ i in 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac93caa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac93c79f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac93c79f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac93c79f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac93c79ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac93c59ee83 <unavailable> + 188035

    6    tmp3lb1aewe                        0x000055ca977164ee <unavailable> + 9454

    7    tmp3lb1aewe                        0x000055ca977154eb <unavailable> + 5355

    8    libc.so.6                          0x00002ac93cc94460 __libc_start_main +
    245

    9    tmp3lb1aewe                        0x000055ca97715209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var arr = [1, 3, 2]\n\
    \    if n == 0 {\n        return []\n    }\n    if n == 1 {\n        return [1]\n\
    \    }\n    if n == 2 {\n        return [1, 3]\n    }\n    if n == 3 {\n     \
    \   return [1, 3, 2]\n    }\n    for i in 3...n {\n        if i % 2 == 0 {\n \
    \           arr.append(1 + i / 2)\n        } else {\n            arr.append(arr[i\
    \ - 1] + arr[i - 2] + arr[i - 3])\n        }\n    }\n    return arr\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp7lv5e4fj/tmp7lv5e4fj.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83c5271c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83c4f68b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83c4f68988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83c4f677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7lv5e4fj                        0x000055e029d3d5ca <unavailable> + 5578

    5    libc.so.6                          0x00002b83c545d460 __libc_start_main +
    245

    6    tmp7lv5e4fj                        0x000055e029d3d209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 0 {\n        return result\n    }\n    result.append(1)\n    if n\
    \ == 1 {\n        return result\n    }\n    result.append(3)\n    if n == 2 {\n\
    \        return result\n    }\n    result.append(2)\n    if n == 3 {\n       \
    \ return result\n    }\n    for i in 4...n {\n        if i % 2 == 0 {\n      \
    \      result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpqk09jyg9/tmpqk09jyg9.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b63091dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6308ed2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6308ed2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6308ed17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqk09jyg9                        0x000055c0d68bd61a <unavailable> + 5658

    5    libc.so.6                          0x00002b63093c7460 __libc_start_main +
    245

    6    tmpqk09jyg9                        0x000055c0d68bd259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    guard n > 0 else {\
    \ return [] }\n    var result = [1, 3, 2]\n    for i in 3...n {\n        result.append(i\
    \ % 2 == 0 ? 1 + i / 2 : result[i - 1] + result[i - 2] + result[i + 1])\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fa5465c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fa515c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5fa515c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5fa515c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5fa515bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b5fa4f5be83 <unavailable> + 188035

    6    tmplopt261l                        0x000055fc8225f418 <unavailable> + 9240

    7    tmplopt261l                        0x000055fc8225e4eb <unavailable> + 5355

    8    libc.so.6                          0x00002b5fa5651460 __libc_start_main +
    245

    9    tmplopt261l                        0x000055fc8225e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n   \
    \     } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad4e2511c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad4e2208561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad4e2208286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad4e220813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad4e2207bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad4e2007e83 <unavailable> + 188035

    6    tmpknmcj1g8                        0x000055697e163843 <unavailable> + 10307

    7    tmpknmcj1g8                        0x000055697e1626db <unavailable> + 5851

    8    libc.so.6                          0x00002ad4e26fd460 __libc_start_main +
    245

    9    tmpknmcj1g8                        0x000055697e1623f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    guard n > 2 else { return Array(result[0...n]) }\n    for i in 3...n\
    \ {\n        result.append(i % 2 == 0 ? 1 + i / 2 : result[i - 1] + result[i -\
    \ 2] + result[i + 1])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b14cc3dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14cc0d3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b14cc0d3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b14cc0d313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b14cc0d2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b14cbed2e83 <unavailable> + 188035

    6    tmp76olnrml                        0x0000563cd0b9a66a <unavailable> + 9834

    7    tmp76olnrml                        0x0000563cd0b996db <unavailable> + 5851

    8    libc.so.6                          0x00002b14cc5c8460 __libc_start_main +
    245

    9    tmp76olnrml                        0x0000563cd0b993f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result: [Int]\
    \ = [1, 3, 2]\n    if n <= 2 {\n        return result\n    }\n    for i in 3...n\
    \ {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n        }\
    \ else {\n            result.append(result[i - 1] + result[i - 2] + result[i +\
    \ 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f0cec9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f0cbc0561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b1f0cbc0286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b1f0cbc013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1f0cbbfbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b1f0c9bfe83 <unavailable> + 188035

    6    tmpep929nfh                        0x00005602dde38475 <unavailable> + 9333

    7    tmpep929nfh                        0x00005602dde374eb <unavailable> + 5355

    8    libc.so.6                          0x00002b1f0d0b5460 __libc_start_main +
    245

    9    tmpep929nfh                        0x00005602dde37209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    for i in 3...n {\n        if i % 2 == 0 {\n            result.append(1\
    \ + i / 2)\n        } else {\n            result.append(result[i - 1] + result[i\
    \ - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002acb878cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb875c4561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002acb875c4286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002acb875c413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002acb875c3bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002acb873c3e83 <unavailable> + 188035

    6    tmpffijthvc                        0x0000557cf0d34419 <unavailable> + 9241

    7    tmpffijthvc                        0x0000557cf0d334eb <unavailable> + 5355

    8    libc.so.6                          0x00002acb87ab9460 __libc_start_main +
    245

    9    tmpffijthvc                        0x0000557cf0d33209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        let a = result[i - 1]\n        let b = result[i - 2]\n    \
    \    let c = result[i - 3]\n        result.append(a + b + c)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp3p4idvkr/tmp3p4idvkr.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba437559c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba437250b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba437250988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba43724f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3p4idvkr                        0x00005633483ca7ba <unavailable> + 6074

    5    libc.so.6                          0x00002ba437745460 __libc_start_main +
    245

    6    tmp3p4idvkr                        0x00005633483ca3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 0 {\n        return result\n    }\n    result.append(1)\n    if n\
    \ == 1 {\n        return result\n    }\n    result.append(3)\n    if n == 2 {\n\
    \        return result\n    }\n    result.append(2)\n    if n == 3 {\n       \
    \ return result\n    }\n    for i in 3...n {\n        if i % 2 == 0 {\n      \
    \      result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpboipzj3a/tmpboipzj3a.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af47b19ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af47ae95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af47ae95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af47ae947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpboipzj3a                        0x0000558bfafa861a <unavailable> + 5658

    5    libc.so.6                          0x00002af47b38a460 __libc_start_main +
    245

    6    tmpboipzj3a                        0x0000558bfafa8259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n <= 2 {\n        return result\n    }\n    for i in 3...n {\n  \
    \      if i % 2 == 0 {\n            result.append(1 + i / 2)\n        } else {\n\
    \            result.append(result[i - 1] + result[i - 2] + result[i + 1])\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0ca15adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0ca12a4561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0ca12a4286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0ca12a413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0ca12a3bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0ca10a3e83 <unavailable> + 188035

    6    tmpzzu1gm2i                        0x000055f086b3f475 <unavailable> + 9333

    7    tmpzzu1gm2i                        0x000055f086b3e4eb <unavailable> + 5355

    8    libc.so.6                          0x00002b0ca1799460 __libc_start_main +
    245

    9    tmpzzu1gm2i                        0x000055f086b3e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    for i in 3...n {\n        result.append(result[i - 1] + result[i - 2]\
    \ + result[i - 3])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpk9p5f_t8/tmpk9p5f_t8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b81debbfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81de8b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81de8b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81de8b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk9p5f_t8                        0x00005577494d15ca <unavailable> + 5578

    5    libc.so.6                          0x00002b81dedab460 __libc_start_main +
    245

    6    tmpk9p5f_t8                        0x00005577494d1209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n < 3 {\n        return result[0...n]\n    }\n    for i in 3...n\
    \ {\n        result.append(result[i - 1] + result[i - 2] + result[i - 3])\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp0219_11p.swift:20:22: error: no 'subscript' candidates produce\
    \ the expected contextual result type '[Int]'\n        return result[0...n]\n\
    \                     ^\nSwift.Collection:2:23: note: 'subscript(_:)' produces\
    \ 'ArraySlice<Int>', not the expected contextual result type '[Int]'\n    @inlinable\
    \ public subscript<R>(r: R) -> Self.SubSequence where R : RangeExpression, Self.Index\
    \ == R.Bound { get }\n                      ^\nSwift.MutableCollection:2:23: note:\
    \ 'subscript(_:)' produces '@lvalue ArraySlice<Int>', not the expected contextual\
    \ result type '[Int]'\n    @inlinable public subscript<R>(r: R) -> Self.SubSequence\
    \ where R : RangeExpression, Self.Index == R.Bound { get set }\n             \
    \         ^\n"
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n        return\
    \ [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    } else {\n   \
    \     for i in 3...n {\n            if i % 2 == 0 {\n                result.append(1\
    \ + i / 2)\n            } else {\n                result.append(result[i - 1]\
    \ + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpjmxt489x/tmpjmxt489x.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0df5fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0df2f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0df2f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0df2f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjmxt489x                        0x00005603f5c0e5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ad0df7e8460 __libc_start_main +
    245

    6    tmpjmxt489x                        0x00005603f5c0e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n        return\
    \ [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    } else {\n   \
    \     for i in 3...n {\n            if i % 2 == 0 {\n                result.append(1\
    \ + i / 2)\n            } else {\n                result.append(result[i - 1]\
    \ + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpjmxt489x/tmpjmxt489x.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0df5fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0df2f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0df2f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0df2f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjmxt489x                        0x00005603f5c0e5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ad0df7e8460 __libc_start_main +
    245

    6    tmpjmxt489x                        0x00005603f5c0e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n <= 2 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        result.append(result[i - 1] + result[i - 2] + result[i - 3])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp3bqb5hse/tmp3bqb5hse.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6619e93c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6619b8ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6619b8a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6619b897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3bqb5hse                        0x000055a95c6a47ba <unavailable> + 6074

    5    libc.so.6                          0x00002b661a07f460 __libc_start_main +
    245

    6    tmp3bqb5hse                        0x000055a95c6a43f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n <= 2 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n   \
    \     } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b03ec057c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b03ebd4e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b03ebd4e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b03ebd4e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b03ebd4dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b03ebb4de83 <unavailable> + 188035

    6    tmpdw4bxeyh                        0x000055838f94184f <unavailable> + 10319

    7    tmpdw4bxeyh                        0x000055838f9406db <unavailable> + 5851

    8    libc.so.6                          0x00002b03ec243460 __libc_start_main +
    245

    9    tmpdw4bxeyh                        0x000055838f9403f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n <= 2 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n   \
    \     } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b03ec057c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b03ebd4e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b03ebd4e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b03ebd4e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b03ebd4dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b03ebb4de83 <unavailable> + 188035

    6    tmpdw4bxeyh                        0x000055838f94184f <unavailable> + 10319

    7    tmpdw4bxeyh                        0x000055838f9406db <unavailable> + 5851

    8    libc.so.6                          0x00002b03ec243460 __libc_start_main +
    245

    9    tmpdw4bxeyh                        0x000055838f9403f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        result.append(i % 2 == 0 ? 1 + i / 2 : result[i - 1] + result[i\
    \ - 2] + result[i - 3])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpqd34r70b/tmpqd34r70b.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b658eea2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b658eb99b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b658eb99988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b658eb987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqd34r70b                        0x000055961cf6b7ba <unavailable> + 6074

    5    libc.so.6                          0x00002b658f08e460 __libc_start_main +
    245

    6    tmpqd34r70b                        0x000055961cf6b3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        result.append(result[i - 1] + result[i - 2] + result[i - 3])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpq3zjmc0l/tmpq3zjmc0l.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b543a483c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b543a17ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b543a17a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b543a1797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq3zjmc0l                        0x00005617c840d7ba <unavailable> + 6074

    5    libc.so.6                          0x00002b543a66f460 __libc_start_main +
    245

    6    tmpq3zjmc0l                        0x00005617c840d3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n        return\
    \ [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    } else {\n   \
    \     for i in 3...n {\n            if i % 2 == 0 {\n                result.append(1\
    \ + i / 2)\n            } else {\n                result.append(result[i - 1]\
    \ + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpjmxt489x/tmpjmxt489x.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0df5fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0df2f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0df2f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0df2f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjmxt489x                        0x00005603f5c0e5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ad0df7e8460 __libc_start_main +
    245

    6    tmpjmxt489x                        0x00005603f5c0e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n        return\
    \ [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    } else {\n   \
    \     for i in 3...n {\n            if i % 2 == 0 {\n                result.append(1\
    \ + i / 2)\n            } else {\n                result.append(result[i - 1]\
    \ + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpjmxt489x/tmpjmxt489x.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0df5fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0df2f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0df2f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0df2f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjmxt489x                        0x00005603f5c0e5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ad0df7e8460 __libc_start_main +
    245

    6    tmpjmxt489x                        0x00005603f5c0e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    for i in 0...n {\n        result.append(tri(n: i))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpupnmkjhu.swift:20:16: error: no exact matches in call to instance\
    \ method 'append'\n        result.append(tri(n: i))\n               ^\nSwift.Array:7:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(contentsOf:)')\n\
    \    @inlinable public mutating func append<S>(contentsOf newElements: __owned\
    \ S) where Element == S.Element, S : Sequence\n                              \
    \      ^\nSwift.RangeReplaceableCollection:5:37: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(contentsOf:)')\n    @inlinable public mutating func\
    \ append<S>(contentsOf newElements: __owned S) where S : Sequence, Self.Element\
    \ == S.Element\n                                    ^\n"
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n <= 2 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        result.append(result[i - 1] + result[i - 2] + result[i - 3])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp3bqb5hse/tmp3bqb5hse.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6619e93c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6619b8ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6619b8a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6619b897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3bqb5hse                        0x000055a95c6a47ba <unavailable> + 6074

    5    libc.so.6                          0x00002b661a07f460 __libc_start_main +
    245

    6    tmp3bqb5hse                        0x000055a95c6a43f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n == 0 {\n        return []\n    }\n    if n == 1 {\n        return\
    \ [1]\n    }\n    if n == 2 {\n        return [1, 3]\n    }\n    if n == 3 {\n\
    \        return [1, 3, 2]\n    }\n    for i in 4...n {\n        if i % 2 == 0\
    \ {\n            result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 4])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpvus5yz7_/tmpvus5yz7_.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9d0cdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9d09d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9d09d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9d09d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvus5yz7_                        0x00005565adeb15ca <unavailable> + 5578

    5    libc.so.6                          0x00002ab9d0ec8460 __libc_start_main +
    245

    6    tmpvus5yz7_                        0x00005565adeb1209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        result.append(result[i - 1] + result[i - 2] + result[i - 3])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpq3zjmc0l/tmpq3zjmc0l.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b543a483c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b543a17ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b543a17a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b543a1797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq3zjmc0l                        0x00005617c840d7ba <unavailable> + 6074

    5    libc.so.6                          0x00002b543a66f460 __libc_start_main +
    245

    6    tmpq3zjmc0l                        0x00005617c840d3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    for i in 0...n {\n        switch i {\n        case 0:\n            result.append(1)\n\
    \        case 1:\n            result.append(3)\n        case 2:\n            result.append(2)\n\
    \        default:\n            let last = result[i - 1]\n            let secondLast\
    \ = result[i - 2]\n            let thirdLast = result[i - 3]\n            result.append(last\
    \ + secondLast + thirdLast)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpu7seog_l/tmpu7seog_l.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b075ee03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b075eafab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b075eafa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b075eaf97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu7seog_l                        0x0000559e82ee561a <unavailable> + 5658

    5    libc.so.6                          0x00002b075efef460 __libc_start_main +
    245

    6    tmpu7seog_l                        0x0000559e82ee5259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n == 0 {\n        return []\n    }\n    if n == 1 {\n        return\
    \ [1]\n    }\n    if n == 2 {\n        return [1, 3]\n    }\n    if n == 3 {\n\
    \        return [1, 3, 2]\n    }\n    for i in 3...n {\n        if i % 2 == 0\
    \ {\n            result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpjx5f0e5y/tmpjx5f0e5y.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b91b8fdfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b91b8cd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b91b8cd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b91b8cd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjx5f0e5y                        0x000055e5c4f325ca <unavailable> + 5578

    5    libc.so.6                          0x00002b91b91cb460 __libc_start_main +
    245

    6    tmpjx5f0e5y                        0x000055e5c4f32209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n        return\
    \ [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    } else {\n   \
    \     for i in 3...n {\n            if i % 2 == 0 {\n                result.append(1\
    \ + i / 2)\n            } else {\n                result.append(result[i - 1]\
    \ + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpjmxt489x/tmpjmxt489x.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0df5fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0df2f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0df2f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0df2f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjmxt489x                        0x00005603f5c0e5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ad0df7e8460 __libc_start_main +
    245

    6    tmpjmxt489x                        0x00005603f5c0e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n        return\
    \ [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    } else {\n   \
    \     for i in 3...n {\n            if i % 2 == 0 {\n                result.append(1\
    \ + i / 2)\n            } else {\n                result.append(result[i - 1]\
    \ + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpjmxt489x/tmpjmxt489x.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0df5fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0df2f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0df2f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0df2f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjmxt489x                        0x00005603f5c0e5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ad0df7e8460 __libc_start_main +
    245

    6    tmpjmxt489x                        0x00005603f5c0e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n <= 2 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        let next = result[i - 1] + result[i - 2] + result[i - 3]\n\
    \        result.append(next)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpzysuhfvu/tmpzysuhfvu.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002affc4a7dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002affc4774b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002affc4774988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002affc47737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzysuhfvu                        0x00005615312b27ba <unavailable> + 6074

    5    libc.so.6                          0x00002affc4c69460 __libc_start_main +
    245

    6    tmpzysuhfvu                        0x00005615312b23f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    guard n > 0 else {\
    \ return [] }\n    var result = [1, 3, 2]\n    for i in 3...n {\n        let a\
    \ = result[i - 1]\n        let b = result[i - 2]\n        let c = result[i - 3]\n\
    \        if i % 2 == 0 {\n            result.append(1 + i / 2)\n        } else\
    \ {\n            result.append(a + b + c)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpcmjqhr44/tmpcmjqhr44.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af7f1e3fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af7f1b36b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af7f1b36988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af7f1b357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcmjqhr44                        0x000056186ad7a5ca <unavailable> + 5578

    5    libc.so.6                          0x00002af7f202b460 __libc_start_main +
    245

    6    tmpcmjqhr44                        0x000056186ad7a209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n        return\
    \ [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    } else {\n   \
    \     for i in 3...n {\n            if i % 2 == 0 {\n                result.append(1\
    \ + i / 2)\n            } else {\n                result.append(result[i - 1]\
    \ + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpjmxt489x/tmpjmxt489x.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0df5fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0df2f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0df2f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0df2f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjmxt489x                        0x00005603f5c0e5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ad0df7e8460 __libc_start_main +
    245

    6    tmpjmxt489x                        0x00005603f5c0e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    guard n > 2 else { return Array(result[0...n]) }\n    for i in 3...n\
    \ {\n        result.append(i % 2 == 0 ? 1 + i / 2 : result[i - 1] + result[i -\
    \ 2] + result[i + 1])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b14cc3dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14cc0d3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b14cc0d3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b14cc0d313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b14cc0d2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b14cbed2e83 <unavailable> + 188035

    6    tmp76olnrml                        0x0000563cd0b9a66a <unavailable> + 9834

    7    tmp76olnrml                        0x0000563cd0b996db <unavailable> + 5851

    8    libc.so.6                          0x00002b14cc5c8460 __libc_start_main +
    245

    9    tmp76olnrml                        0x0000563cd0b993f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    guard n > 2 else {\n        return Array(result[0...n])\n    }\n   \
    \ for i in 3...n {\n        result.append(i % 2 == 0 ? 1 + i / 2 : result[i -\
    \ 1] + result[i - 2] + result[i - 3])\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpjo04dj5o/tmpjo04dj5o.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafc1456c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafc114db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafc114d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafc114c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjo04dj5o                        0x00005630154437ba <unavailable> + 6074

    5    libc.so.6                          0x00002aafc1642460 __libc_start_main +
    245

    6    tmpjo04dj5o                        0x00005630154433f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n == 0 {\n        return []\n    }\n    if n == 1 {\n        return\
    \ [1]\n    }\n    if n == 2 {\n        return [1, 3]\n    }\n    if n == 3 {\n\
    \        return [1, 3, 2]\n    }\n    for i in 4...n {\n        if i % 2 == 0\
    \ {\n            result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 4])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpvus5yz7_/tmpvus5yz7_.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9d0cdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9d09d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9d09d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9d09d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvus5yz7_                        0x00005565adeb15ca <unavailable> + 5578

    5    libc.so.6                          0x00002ab9d0ec8460 __libc_start_main +
    245

    6    tmpvus5yz7_                        0x00005565adeb1209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    for i in 0...n {\n        result.append(tri(n: i))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpupnmkjhu.swift:20:16: error: no exact matches in call to instance\
    \ method 'append'\n        result.append(tri(n: i))\n               ^\nSwift.Array:7:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(contentsOf:)')\n\
    \    @inlinable public mutating func append<S>(contentsOf newElements: __owned\
    \ S) where Element == S.Element, S : Sequence\n                              \
    \      ^\nSwift.RangeReplaceableCollection:5:37: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(contentsOf:)')\n    @inlinable public mutating func\
    \ append<S>(contentsOf newElements: __owned S) where S : Sequence, Self.Element\
    \ == S.Element\n                                    ^\n"
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n == 0 {\n    \
    \    return [1]\n    }\n    if n == 1 {\n        return [1, 3]\n    }\n    if\
    \ n == 2 {\n        return [1, 3, 2]\n    }\n    var result = [1, 3, 2]\n    for\
    \ i in 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac93caa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac93c79f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac93c79f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac93c79f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac93c79ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac93c59ee83 <unavailable> + 188035

    6    tmp3lb1aewe                        0x000055ca977164ee <unavailable> + 9454

    7    tmp3lb1aewe                        0x000055ca977154eb <unavailable> + 5355

    8    libc.so.6                          0x00002ac93cc94460 __libc_start_main +
    245

    9    tmp3lb1aewe                        0x000055ca97715209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n        return\
    \ [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    } else {\n   \
    \     for i in 3...n {\n            if i % 2 == 0 {\n                result.append(1\
    \ + i / 2)\n            } else {\n                result.append(result[i - 1]\
    \ + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpjmxt489x/tmpjmxt489x.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0df5fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0df2f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0df2f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0df2f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjmxt489x                        0x00005603f5c0e5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ad0df7e8460 __libc_start_main +
    245

    6    tmpjmxt489x                        0x00005603f5c0e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n == 0 {\n    \
    \    return [1]\n    }\n    if n == 1 {\n        return [1, 3]\n    }\n    if\
    \ n == 2 {\n        return [1, 3, 2]\n    }\n    var result = [1, 3, 2]\n    for\
    \ i in 3...n {\n        let last = result[i - 1]\n        let last2 = result[i\
    \ - 2]\n        let last3 = result[i - 3]\n        if i % 2 == 0 {\n         \
    \   result.append(1 + i / 2)\n        } else {\n            result.append(last\
    \ + last2 + last3)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpj9jm11bp/tmpj9jm11bp.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3c2909c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3c2600b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3c2600988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3c25ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj9jm11bp                        0x0000560c6dd7e5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ba3c2af5460 __libc_start_main +
    245

    6    tmpj9jm11bp                        0x0000560c6dd7e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n   \
    \     } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad4e2511c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad4e2208561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad4e2208286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad4e220813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad4e2207bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad4e2007e83 <unavailable> + 188035

    6    tmpknmcj1g8                        0x000055697e163843 <unavailable> + 10307

    7    tmpknmcj1g8                        0x000055697e1626db <unavailable> + 5851

    8    libc.so.6                          0x00002ad4e26fd460 __libc_start_main +
    245

    9    tmpknmcj1g8                        0x000055697e1623f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n == 0 {\n    \
    \    return [1]\n    }\n    if n == 1 {\n        return [1, 3]\n    }\n    if\
    \ n == 2 {\n        return [1, 3, 2]\n    }\n    var result = [1, 3, 2]\n    for\
    \ i in 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac93caa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac93c79f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac93c79f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac93c79f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac93c79ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac93c59ee83 <unavailable> + 188035

    6    tmp3lb1aewe                        0x000055ca977164ee <unavailable> + 9454

    7    tmp3lb1aewe                        0x000055ca977154eb <unavailable> + 5355

    8    libc.so.6                          0x00002ac93cc94460 __libc_start_main +
    245

    9    tmp3lb1aewe                        0x000055ca97715209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n   \
    \     } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad4e2511c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad4e2208561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad4e2208286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad4e220813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad4e2207bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad4e2007e83 <unavailable> + 188035

    6    tmpknmcj1g8                        0x000055697e163843 <unavailable> + 10307

    7    tmpknmcj1g8                        0x000055697e1626db <unavailable> + 5851

    8    libc.so.6                          0x00002ad4e26fd460 __libc_start_main +
    245

    9    tmpknmcj1g8                        0x000055697e1623f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n == 0 {\n        return []\n    }\n    if n == 1 {\n        return\
    \ [1]\n    }\n    if n == 2 {\n        return [1, 3]\n    }\n    if n == 3 {\n\
    \        return [1, 3, 2]\n    }\n    for i in 4...n {\n        if i % 2 == 0\
    \ {\n            result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 4])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpvus5yz7_/tmpvus5yz7_.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9d0cdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9d09d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9d09d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9d09d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvus5yz7_                        0x00005565adeb15ca <unavailable> + 5578

    5    libc.so.6                          0x00002ab9d0ec8460 __libc_start_main +
    245

    6    tmpvus5yz7_                        0x00005565adeb1209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n        return\
    \ [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    } else {\n   \
    \     for i in 3...n {\n            if i % 2 == 0 {\n                result.append(1\
    \ + i / 2)\n            } else {\n                result.append(result[i - 1]\
    \ + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpjmxt489x/tmpjmxt489x.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0df5fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0df2f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0df2f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0df2f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjmxt489x                        0x00005603f5c0e5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ad0df7e8460 __libc_start_main +
    245

    6    tmpjmxt489x                        0x00005603f5c0e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n   \
    \     } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad4e2511c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad4e2208561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad4e2208286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad4e220813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad4e2207bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad4e2007e83 <unavailable> + 188035

    6    tmpknmcj1g8                        0x000055697e163843 <unavailable> + 10307

    7    tmpknmcj1g8                        0x000055697e1626db <unavailable> + 5851

    8    libc.so.6                          0x00002ad4e26fd460 __libc_start_main +
    245

    9    tmpknmcj1g8                        0x000055697e1623f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n == 0 {\n        return []\n    }\n    if n == 1 {\n        return\
    \ [1]\n    }\n    if n == 2 {\n        return [1, 3]\n    }\n    if n == 3 {\n\
    \        return [1, 3, 2]\n    }\n    for i in 4...n {\n        if i % 2 == 0\
    \ {\n            result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 4])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpvus5yz7_/tmpvus5yz7_.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9d0cdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9d09d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9d09d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9d09d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvus5yz7_                        0x00005565adeb15ca <unavailable> + 5578

    5    libc.so.6                          0x00002ab9d0ec8460 __libc_start_main +
    245

    6    tmpvus5yz7_                        0x00005565adeb1209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n   \
    \     } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad4e2511c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad4e2208561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad4e2208286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad4e220813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad4e2207bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad4e2007e83 <unavailable> + 188035

    6    tmpknmcj1g8                        0x000055697e163843 <unavailable> + 10307

    7    tmpknmcj1g8                        0x000055697e1626db <unavailable> + 5851

    8    libc.so.6                          0x00002ad4e26fd460 __libc_start_main +
    245

    9    tmpknmcj1g8                        0x000055697e1623f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n <= 2 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n   \
    \     } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b03ec057c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b03ebd4e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b03ebd4e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b03ebd4e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b03ebd4dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b03ebb4de83 <unavailable> + 188035

    6    tmpdw4bxeyh                        0x000055838f94184f <unavailable> + 10319

    7    tmpdw4bxeyh                        0x000055838f9406db <unavailable> + 5851

    8    libc.so.6                          0x00002b03ec243460 __libc_start_main +
    245

    9    tmpdw4bxeyh                        0x000055838f9403f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n        return\
    \ [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    } else {\n   \
    \     for i in 3...n {\n            result.append(i % 2 == 0 ? 1 + i / 2 : result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpe30cvpfo/tmpe30cvpfo.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae7ce784c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae7ce47bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae7ce47b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae7ce47a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe30cvpfo                        0x00005642aeb735ca <unavailable> + 5578

    5    libc.so.6                          0x00002ae7ce970460 __libc_start_main +
    245

    6    tmpe30cvpfo                        0x00005642aeb73209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    for i in 3...n {\n        result.append(i % 2 == 0 ? 1 + i / 2 : result[i\
    \ - 1] + result[i - 2] + result[i + 1])\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b76e7031c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76e6d28561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b76e6d28286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b76e6d2813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b76e6d27bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b76e6b27e83 <unavailable> + 188035

    6    tmp7rp2rxpg                        0x000055e402ade40d <unavailable> + 9229

    7    tmp7rp2rxpg                        0x000055e402add4eb <unavailable> + 5355

    8    libc.so.6                          0x00002b76e721d460 __libc_start_main +
    245

    9    tmp7rp2rxpg                        0x000055e402add209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n        return\
    \ [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    } else {\n   \
    \     for i in 3...n {\n            if i % 2 == 0 {\n                result.append(1\
    \ + i / 2)\n            } else {\n                result.append(result[i - 1]\
    \ + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpjmxt489x/tmpjmxt489x.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0df5fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0df2f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0df2f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0df2f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjmxt489x                        0x00005603f5c0e5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ad0df7e8460 __libc_start_main +
    245

    6    tmpjmxt489x                        0x00005603f5c0e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n   \
    \     } else if i == 1 {\n            result.append(3)\n        } else if i ==\
    \ 2 {\n            result.append(2)\n        } else if i % 2 == 0 {\n        \
    \    result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp5ttlqbx8/tmp5ttlqbx8.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26f688fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26f6586b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26f6586988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26f65857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ttlqbx8                        0x00005636ff4ee61a <unavailable> + 5658

    5    libc.so.6                          0x00002b26f6a7b460 __libc_start_main +
    245

    6    tmp5ttlqbx8                        0x00005636ff4ee259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        result.append(result[i - 1] + result[i - 2] + result[i - 3])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpq3zjmc0l/tmpq3zjmc0l.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b543a483c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b543a17ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b543a17a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b543a1797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq3zjmc0l                        0x00005617c840d7ba <unavailable> + 6074

    5    libc.so.6                          0x00002b543a66f460 __libc_start_main +
    245

    6    tmpq3zjmc0l                        0x00005617c840d3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n        return\
    \ [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    } else {\n   \
    \     for i in 3...n {\n            if i % 2 == 0 {\n                result.append(1\
    \ + i / 2)\n            } else {\n                result.append(result[i - 1]\
    \ + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpjmxt489x/tmpjmxt489x.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0df5fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0df2f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0df2f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0df2f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjmxt489x                        0x00005603f5c0e5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ad0df7e8460 __libc_start_main +
    245

    6    tmpjmxt489x                        0x00005603f5c0e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n == 0 {\n    \
    \    return [0]\n    }\n    if n == 1 {\n        return [1, 3]\n    }\n    if\
    \ n == 2 {\n        return [1, 3, 2]\n    }\n    var result = [1, 3, 2]\n    for\
    \ i in 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c80b2bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c80822561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b9c80822286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b9c8082213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b9c80821bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b9c80621e83 <unavailable> + 188035

    6    tmp5ql9vxlf                        0x00005603a50cd4ee <unavailable> + 9454

    7    tmp5ql9vxlf                        0x00005603a50cc4eb <unavailable> + 5355

    8    libc.so.6                          0x00002b9c80d17460 __libc_start_main +
    245

    9    tmp5ql9vxlf                        0x00005603a50cc209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n        return\
    \ [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    } else {\n   \
    \     for _ in 3...n {\n            let last = result.last!\n            let secondLast\
    \ = result[result.count - 2]\n            let thirdLast = result[result.count\
    \ - 3]\n            if last % 2 == 0 {\n                result.append(1 + last\
    \ / 2)\n            } else {\n                result.append(thirdLast + secondLast\
    \ + last)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmp7prs5wq9/tmp7prs5wq9.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1396b16c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b139680db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b139680d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b139680c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7prs5wq9                        0x000056470ee106ba <unavailable> + 5818

    5    libc.so.6                          0x00002b1396d02460 __libc_start_main +
    245

    6    tmp7prs5wq9                        0x000056470ee102f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n   \
    \     } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad4e2511c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad4e2208561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad4e2208286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad4e220813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad4e2207bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad4e2007e83 <unavailable> + 188035

    6    tmpknmcj1g8                        0x000055697e163843 <unavailable> + 10307

    7    tmpknmcj1g8                        0x000055697e1626db <unavailable> + 5851

    8    libc.so.6                          0x00002ad4e26fd460 __libc_start_main +
    245

    9    tmpknmcj1g8                        0x000055697e1623f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        result.append(result[i - 1] + result[i - 2] + result[i - 3])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpq3zjmc0l/tmpq3zjmc0l.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b543a483c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b543a17ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b543a17a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b543a1797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq3zjmc0l                        0x00005617c840d7ba <unavailable> + 6074

    5    libc.so.6                          0x00002b543a66f460 __libc_start_main +
    245

    6    tmpq3zjmc0l                        0x00005617c840d3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    for i in 3...n {\n        if i % 2 == 0 {\n            result.append(1\
    \ + i / 2)\n        } else {\n            result.append(result[i - 1] + result[i\
    \ - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002acb878cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb875c4561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002acb875c4286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002acb875c413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002acb875c3bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002acb873c3e83 <unavailable> + 188035

    6    tmpffijthvc                        0x0000557cf0d34419 <unavailable> + 9241

    7    tmpffijthvc                        0x0000557cf0d334eb <unavailable> + 5355

    8    libc.so.6                          0x00002acb87ab9460 __libc_start_main +
    245

    9    tmpffijthvc                        0x0000557cf0d33209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        result.append(result[i - 1] + result[i - 2] + result[i - 3])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpq3zjmc0l/tmpq3zjmc0l.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b543a483c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b543a17ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b543a17a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b543a1797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq3zjmc0l                        0x00005617c840d7ba <unavailable> + 6074

    5    libc.so.6                          0x00002b543a66f460 __libc_start_main +
    245

    6    tmpq3zjmc0l                        0x00005617c840d3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n == 0 {\n        return []\n    }\n    if n == 1 {\n        return\
    \ [1]\n    }\n    if n == 2 {\n        return [1, 3]\n    }\n    if n == 3 {\n\
    \        return [1, 3, 2]\n    }\n    for i in 4...n {\n        if i % 2 == 0\
    \ {\n            result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 4])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpvus5yz7_/tmpvus5yz7_.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9d0cdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9d09d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9d09d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9d09d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvus5yz7_                        0x00005565adeb15ca <unavailable> + 5578

    5    libc.so.6                          0x00002ab9d0ec8460 __libc_start_main +
    245

    6    tmpvus5yz7_                        0x00005565adeb1209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n < 3 {\n        return Array(result[0..<n + 1])\n    }\n    for\
    \ i in 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002afec146cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afec1163561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afec1163286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afec116313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afec1162bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002afec0f62e83 <unavailable> + 188035

    6    tmprikb7l71                        0x000055a42e429715 <unavailable> + 10005

    7    tmprikb7l71                        0x000055a42e42863b <unavailable> + 5691

    8    libc.so.6                          0x00002afec1658460 __libc_start_main +
    245

    9    tmprikb7l71                        0x000055a42e428359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        result.append(result[i - 1] + result[i - 2] + result[i - 3])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpq3zjmc0l/tmpq3zjmc0l.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b543a483c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b543a17ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b543a17a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b543a1797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq3zjmc0l                        0x00005617c840d7ba <unavailable> + 6074

    5    libc.so.6                          0x00002b543a66f460 __libc_start_main +
    245

    6    tmpq3zjmc0l                        0x00005617c840d3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    for i in 0...n {\n        switch i {\n        case 0:\n            result.append(1)\n\
    \        case 1:\n            result.append(3)\n        case 2:\n            result.append(2)\n\
    \        default:\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ - 3])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'tmpa8gxtg4i/tmpa8gxtg4i.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4ae4fdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4ae1f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4ae1f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4ae1f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa8gxtg4i                        0x000055651f66161a <unavailable> + 5658

    5    libc.so.6                          0x00002af4ae6e9460 __libc_start_main +
    245

    6    tmpa8gxtg4i                        0x000055651f661259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n == 0 {\n    \
    \    return [1]\n    }\n    if n == 1 {\n        return [1, 3]\n    }\n    if\
    \ n == 2 {\n        return [1, 3, 2]\n    }\n    var result = [1, 3, 2]\n    for\
    \ i in 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac93caa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac93c79f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac93c79f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac93c79f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac93c79ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac93c59ee83 <unavailable> + 188035

    6    tmp3lb1aewe                        0x000055ca977164ee <unavailable> + 9454

    7    tmp3lb1aewe                        0x000055ca977154eb <unavailable> + 5355

    8    libc.so.6                          0x00002ac93cc94460 __libc_start_main +
    245

    9    tmp3lb1aewe                        0x000055ca97715209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n   \
    \     } else if i == 1 {\n            result.append(3)\n        } else if i ==\
    \ 2 {\n            result.append(2)\n        } else if i % 2 == 0 {\n        \
    \    result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp5ttlqbx8/tmp5ttlqbx8.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26f688fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26f6586b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26f6586988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26f65857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ttlqbx8                        0x00005636ff4ee61a <unavailable> + 5658

    5    libc.so.6                          0x00002b26f6a7b460 __libc_start_main +
    245

    6    tmp5ttlqbx8                        0x00005636ff4ee259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    guard n > 2 else { return result }\n    for i in 3...n {\n        if\
    \ i % 2 == 0 {\n            result.append(1 + i / 2)\n        } else {\n     \
    \       result.append(result[i - 1] + result[i - 2] + result[i + 1])\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(tri(n:\
    \ 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5)\
    \ == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b93b83d5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93b80cc561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b93b80cc286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b93b80cc13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b93b80cbbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b93b7ecbe83 <unavailable> + 188035

    6    tmprmyzvp78                        0x000055647c971454 <unavailable> + 9300

    7    tmprmyzvp78                        0x000055647c9704eb <unavailable> + 5355

    8    libc.so.6                          0x00002b93b85c1460 __libc_start_main +
    245

    9    tmprmyzvp78                        0x000055647c970209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n        return\
    \ [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    } else {\n   \
    \     for i in 3...n {\n            if i % 2 == 0 {\n                result.append(1\
    \ + i / 2)\n            } else {\n                result.append(result[i - 1]\
    \ + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpjmxt489x/tmpjmxt489x.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0df5fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0df2f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0df2f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0df2f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjmxt489x                        0x00005603f5c0e5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ad0df7e8460 __libc_start_main +
    245

    6    tmpjmxt489x                        0x00005603f5c0e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    for i in 3...n {\n        if i % 2 == 0 {\n            result.append(1\
    \ + i / 2)\n        } else {\n            result.append(result[i - 1] + result[i\
    \ - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002acb878cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb875c4561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002acb875c4286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002acb875c413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002acb875c3bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002acb873c3e83 <unavailable> + 188035

    6    tmpffijthvc                        0x0000557cf0d34419 <unavailable> + 9241

    7    tmpffijthvc                        0x0000557cf0d334eb <unavailable> + 5355

    8    libc.so.6                          0x00002acb87ab9460 __libc_start_main +
    245

    9    tmpffijthvc                        0x0000557cf0d33209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n == 0 {\n    \
    \    return [1]\n    }\n    if n == 1 {\n        return [1, 3]\n    }\n    if\
    \ n == 2 {\n        return [1, 3, 2]\n    }\n    var result = [1, 3, 2]\n    for\
    \ i in 3...n {\n        let last = result[i - 1]\n        let secondLast = result[i\
    \ - 2]\n        let thirdLast = result[i - 3]\n        if i % 2 == 0 {\n     \
    \       result.append(1 + i / 2)\n        } else {\n            result.append(last\
    \ + secondLast + thirdLast)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpmuh_5hnc/tmpmuh_5hnc.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6a81dd7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6a81aceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6a81ace988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6a81acd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmuh_5hnc                        0x00005617c73ef5ca <unavailable> + 5578

    5    libc.so.6                          0x00002b6a81fc3460 __libc_start_main +
    245

    6    tmpmuh_5hnc                        0x00005617c73ef209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 0 {\n        return result\n    }\n    result.append(1)\n    if n\
    \ == 1 {\n        return result\n    }\n    result.append(3)\n    if n == 2 {\n\
    \        return result\n    }\n    result.append(2)\n    if n == 3 {\n       \
    \ return result\n    }\n    for i in 3...n {\n        if i % 2 == 0 {\n      \
    \      result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpboipzj3a/tmpboipzj3a.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af47b19ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af47ae95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af47ae95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af47ae947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpboipzj3a                        0x0000558bfafa861a <unavailable> + 5658

    5    libc.so.6                          0x00002af47b38a460 __libc_start_main +
    245

    6    tmpboipzj3a                        0x0000558bfafa8259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n        return\
    \ [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    } else {\n   \
    \     for i in 3...n {\n            if i % 2 == 0 {\n                result.append(1\
    \ + i / 2)\n            } else {\n                result.append(result[i - 1]\
    \ + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpjmxt489x/tmpjmxt489x.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0df5fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0df2f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0df2f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0df2f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjmxt489x                        0x00005603f5c0e5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ad0df7e8460 __libc_start_main +
    245

    6    tmpjmxt489x                        0x00005603f5c0e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var tri = [1, 3, 2]\n\
    \    if n < 3 {\n        return tri[0...n]\n    }\n    for i in 3...n {\n    \
    \    tri.append(tri[i - 1] + tri[i - 2] + tri[i - 3])\n    }\n    return tri\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmptgv1_5kb.swift:20:19: error: no 'subscript' candidates produce\
    \ the expected contextual result type '[Int]'\n        return tri[0...n]\n   \
    \               ^\nSwift.Collection:2:23: note: 'subscript(_:)' produces 'ArraySlice<Int>',\
    \ not the expected contextual result type '[Int]'\n    @inlinable public subscript<R>(r:\
    \ R) -> Self.SubSequence where R : RangeExpression, Self.Index == R.Bound { get\
    \ }\n                      ^\nSwift.MutableCollection:2:23: note: 'subscript(_:)'\
    \ produces '@lvalue ArraySlice<Int>', not the expected contextual result type\
    \ '[Int]'\n    @inlinable public subscript<R>(r: R) -> Self.SubSequence where\
    \ R : RangeExpression, Self.Index == R.Bound { get set }\n                   \
    \   ^\n"
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n        return\
    \ [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    } else {\n   \
    \     for i in 3...n {\n            if i % 2 == 0 {\n                result.append(1\
    \ + i / 2)\n            } else {\n                result.append(result[i - 1]\
    \ + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpjmxt489x/tmpjmxt489x.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0df5fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0df2f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0df2f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0df2f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjmxt489x                        0x00005603f5c0e5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ad0df7e8460 __libc_start_main +
    245

    6    tmpjmxt489x                        0x00005603f5c0e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n <= 2 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        let val = result[i - 1] + result[i - 2] + result[i - 3]\n \
    \       result.append(val)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpf30il8sk/tmpf30il8sk.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac23dc1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac23ab8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac23ab8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac23ab77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf30il8sk                        0x000055f37d4757ba <unavailable> + 6074

    5    libc.so.6                          0x00002aac23fad460 __libc_start_main +
    245

    6    tmpf30il8sk                        0x000055f37d4753f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n        return\
    \ [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    } else {\n   \
    \     for i in 3...n {\n            if i % 2 == 0 {\n                result.append(1\
    \ + i / 2)\n            } else {\n                result.append(result[i - 1]\
    \ + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpjmxt489x/tmpjmxt489x.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0df5fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0df2f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0df2f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0df2f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjmxt489x                        0x00005603f5c0e5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ad0df7e8460 __libc_start_main +
    245

    6    tmpjmxt489x                        0x00005603f5c0e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n        return\
    \ [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    } else {\n   \
    \     for i in 3...n {\n            if i % 2 == 0 {\n                result.append(1\
    \ + i / 2)\n            } else {\n                result.append(result[i - 1]\
    \ + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpjmxt489x/tmpjmxt489x.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0df5fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0df2f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0df2f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0df2f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjmxt489x                        0x00005603f5c0e5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ad0df7e8460 __libc_start_main +
    245

    6    tmpjmxt489x                        0x00005603f5c0e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 0 {\n        return result\n    }\n    result.append(1)\n    if n\
    \ == 1 {\n        return result\n    }\n    result.append(3)\n    if n == 2 {\n\
    \        return result\n    }\n    result.append(2)\n    if n == 3 {\n       \
    \ return result\n    }\n    for i in 3...n {\n        if i % 2 == 0 {\n      \
    \      result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpboipzj3a/tmpboipzj3a.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af47b19ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af47ae95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af47ae95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af47ae947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpboipzj3a                        0x0000558bfafa861a <unavailable> + 5658

    5    libc.so.6                          0x00002af47b38a460 __libc_start_main +
    245

    6    tmpboipzj3a                        0x0000558bfafa8259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n   \
    \     } else if i == 1 {\n            result.append(3)\n        } else if i ==\
    \ 2 {\n            result.append(2)\n        } else if i % 2 == 0 {\n        \
    \    result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp5ttlqbx8/tmp5ttlqbx8.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26f688fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26f6586b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26f6586988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26f65857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ttlqbx8                        0x00005636ff4ee61a <unavailable> + 5658

    5    libc.so.6                          0x00002b26f6a7b460 __libc_start_main +
    245

    6    tmp5ttlqbx8                        0x00005636ff4ee259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        result.append(i % 2 == 0 ? 1 + i / 2 : result[i - 1] + result[i\
    \ - 2] + result[i - 3])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpqd34r70b/tmpqd34r70b.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b658eea2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b658eb99b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b658eb99988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b658eb987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqd34r70b                        0x000055961cf6b7ba <unavailable> + 6074

    5    libc.so.6                          0x00002b658f08e460 __libc_start_main +
    245

    6    tmpqd34r70b                        0x000055961cf6b3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n <= 2 {\n        return result\n    }\n    for i in 3...n {\n  \
    \      if i % 2 == 0 {\n            result.append(1 + i / 2)\n        } else {\n\
    \            result.append(result[i - 1] + result[i - 2] + result[i + 1])\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0ca15adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0ca12a4561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0ca12a4286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0ca12a413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0ca12a3bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0ca10a3e83 <unavailable> + 188035

    6    tmpzzu1gm2i                        0x000055f086b3f475 <unavailable> + 9333

    7    tmpzzu1gm2i                        0x000055f086b3e4eb <unavailable> + 5355

    8    libc.so.6                          0x00002b0ca1799460 __libc_start_main +
    245

    9    tmpzzu1gm2i                        0x000055f086b3e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n   \
    \     } else if i == 1 {\n            result.append(3)\n        } else if i ==\
    \ 2 {\n            result.append(2)\n        } else if i % 2 == 0 {\n        \
    \    result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp5ttlqbx8/tmp5ttlqbx8.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26f688fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26f6586b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26f6586988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26f65857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ttlqbx8                        0x00005636ff4ee61a <unavailable> + 5658

    5    libc.so.6                          0x00002b26f6a7b460 __libc_start_main +
    245

    6    tmp5ttlqbx8                        0x00005636ff4ee259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n        return\
    \ [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    } else {\n   \
    \     for i in 3...n {\n            if i % 2 == 0 {\n                result.append(1\
    \ + i / 2)\n            } else {\n                result.append(result[i - 1]\
    \ + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpjmxt489x/tmpjmxt489x.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0df5fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0df2f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0df2f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0df2f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjmxt489x                        0x00005603f5c0e5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ad0df7e8460 __libc_start_main +
    245

    6    tmpjmxt489x                        0x00005603f5c0e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    for i in 3...n {\n        if i % 2 == 0 {\n            result.append(1\
    \ + i / 2)\n        } else {\n            result.append(result[i - 1] + result[i\
    \ - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002acb878cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb875c4561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002acb875c4286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002acb875c413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002acb875c3bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002acb873c3e83 <unavailable> + 188035

    6    tmpffijthvc                        0x0000557cf0d34419 <unavailable> + 9241

    7    tmpffijthvc                        0x0000557cf0d334eb <unavailable> + 5355

    8    libc.so.6                          0x00002acb87ab9460 __libc_start_main +
    245

    9    tmpffijthvc                        0x0000557cf0d33209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n   \
    \     } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad4e2511c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad4e2208561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad4e2208286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad4e220813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad4e2207bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad4e2007e83 <unavailable> + 188035

    6    tmpknmcj1g8                        0x000055697e163843 <unavailable> + 10307

    7    tmpknmcj1g8                        0x000055697e1626db <unavailable> + 5851

    8    libc.so.6                          0x00002ad4e26fd460 __libc_start_main +
    245

    9    tmpknmcj1g8                        0x000055697e1623f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    for i in 0...n {\n        result.append(tri(n: i))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpupnmkjhu.swift:20:16: error: no exact matches in call to instance\
    \ method 'append'\n        result.append(tri(n: i))\n               ^\nSwift.Array:7:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(contentsOf:)')\n\
    \    @inlinable public mutating func append<S>(contentsOf newElements: __owned\
    \ S) where Element == S.Element, S : Sequence\n                              \
    \      ^\nSwift.RangeReplaceableCollection:5:37: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(contentsOf:)')\n    @inlinable public mutating func\
    \ append<S>(contentsOf newElements: __owned S) where S : Sequence, Self.Element\
    \ == S.Element\n                                    ^\n"
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n == 0 {\n    \
    \    return [1]\n    }\n    if n == 1 {\n        return [1, 3]\n    }\n    if\
    \ n == 2 {\n        return [1, 3, 2]\n    }\n    var result = [1, 3, 2]\n    for\
    \ i in 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac93caa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac93c79f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac93c79f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac93c79f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac93c79ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac93c59ee83 <unavailable> + 188035

    6    tmp3lb1aewe                        0x000055ca977164ee <unavailable> + 9454

    7    tmp3lb1aewe                        0x000055ca977154eb <unavailable> + 5355

    8    libc.so.6                          0x00002ac93cc94460 __libc_start_main +
    245

    9    tmp3lb1aewe                        0x000055ca97715209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n   \
    \     } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad4e2511c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad4e2208561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad4e2208286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad4e220813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad4e2207bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad4e2007e83 <unavailable> + 188035

    6    tmpknmcj1g8                        0x000055697e163843 <unavailable> + 10307

    7    tmpknmcj1g8                        0x000055697e1626db <unavailable> + 5851

    8    libc.so.6                          0x00002ad4e26fd460 __libc_start_main +
    245

    9    tmpknmcj1g8                        0x000055697e1623f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n <= 2 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n   \
    \     } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b03ec057c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b03ebd4e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b03ebd4e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b03ebd4e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b03ebd4dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b03ebb4de83 <unavailable> + 188035

    6    tmpdw4bxeyh                        0x000055838f94184f <unavailable> + 10319

    7    tmpdw4bxeyh                        0x000055838f9406db <unavailable> + 5851

    8    libc.so.6                          0x00002b03ec243460 __libc_start_main +
    245

    9    tmpdw4bxeyh                        0x000055838f9403f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n <= 2 {\n        return result\n    }\n    for i in 3...n {\n  \
    \      if i % 2 == 0 {\n            result.append(1 + i / 2)\n        } else {\n\
    \            result.append(result[i - 1] + result[i - 2] + result[i + 1])\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0ca15adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0ca12a4561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0ca12a4286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0ca12a413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0ca12a3bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0ca10a3e83 <unavailable> + 188035

    6    tmpzzu1gm2i                        0x000055f086b3f475 <unavailable> + 9333

    7    tmpzzu1gm2i                        0x000055f086b3e4eb <unavailable> + 5355

    8    libc.so.6                          0x00002b0ca1799460 __libc_start_main +
    245

    9    tmpzzu1gm2i                        0x000055f086b3e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n   \
    \     } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad4e2511c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad4e2208561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad4e2208286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad4e220813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad4e2207bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad4e2007e83 <unavailable> + 188035

    6    tmpknmcj1g8                        0x000055697e163843 <unavailable> + 10307

    7    tmpknmcj1g8                        0x000055697e1626db <unavailable> + 5851

    8    libc.so.6                          0x00002ad4e26fd460 __libc_start_main +
    245

    9    tmpknmcj1g8                        0x000055697e1623f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n <= 2 {\n        return result\n    }\n    for i in 3...n {\n  \
    \      if i % 2 == 0 {\n            result.append(1 + i / 2)\n        } else {\n\
    \            result.append(result[i - 1] + result[i - 2] + result[i + 1])\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0ca15adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0ca12a4561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0ca12a4286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0ca12a413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0ca12a3bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0ca10a3e83 <unavailable> + 188035

    6    tmpzzu1gm2i                        0x000055f086b3f475 <unavailable> + 9333

    7    tmpzzu1gm2i                        0x000055f086b3e4eb <unavailable> + 5355

    8    libc.so.6                          0x00002b0ca1799460 __libc_start_main +
    245

    9    tmpzzu1gm2i                        0x000055f086b3e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 0 {\n        return result\n    }\n    result.append(1)\n    if n\
    \ == 1 {\n        return result\n    }\n    result.append(3)\n    if n == 2 {\n\
    \        return result\n    }\n    result.append(2)\n    if n == 3 {\n       \
    \ return result\n    }\n    for i in 3...n {\n        if i % 2 == 0 {\n      \
    \      result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpboipzj3a/tmpboipzj3a.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af47b19ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af47ae95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af47ae95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af47ae947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpboipzj3a                        0x0000558bfafa861a <unavailable> + 5658

    5    libc.so.6                          0x00002af47b38a460 __libc_start_main +
    245

    6    tmpboipzj3a                        0x0000558bfafa8259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n < 3 {\n        return Array(result[0..<n + 1])\n    }\n    for\
    \ i in 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002afec146cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afec1163561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002afec1163286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002afec116313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002afec1162bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002afec0f62e83 <unavailable> + 188035

    6    tmprikb7l71                        0x000055a42e429715 <unavailable> + 10005

    7    tmprikb7l71                        0x000055a42e42863b <unavailable> + 5691

    8    libc.so.6                          0x00002afec1658460 __libc_start_main +
    245

    9    tmprikb7l71                        0x000055a42e428359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return [1, 3, 2, 8]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpx4fem35k/tmpx4fem35k.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1642db8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1642aafb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1642aaf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1642aae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx4fem35k                        0x000055d9f0e9947f <unavailable> + 5247

    5    libc.so.6                          0x00002b1642fa4460 __libc_start_main +
    245

    6    tmpx4fem35k                        0x000055d9f0e98fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n <= 2 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        result.append(result[i - 1] + result[i - 2] + result[i - 3])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp3bqb5hse/tmp3bqb5hse.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6619e93c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6619b8ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6619b8a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6619b897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3bqb5hse                        0x000055a95c6a47ba <unavailable> + 6074

    5    libc.so.6                          0x00002b661a07f460 __libc_start_main +
    245

    6    tmp3bqb5hse                        0x000055a95c6a43f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var tribonacci = [1,\
    \ 3, 2]\n    if n == 0 {\n        return []\n    } else if n == 1 {\n        return\
    \ [1]\n    } else if n == 2 {\n        return [1, 3]\n    } else if n == 3 {\n\
    \        return tribonacci\n    } else {\n        for i in 4...n {\n         \
    \   if i % 2 == 0 {\n                tribonacci.append(1 + i / 2)\n          \
    \  } else {\n                tribonacci.append(tribonacci[i - 2] + tribonacci[i\
    \ - 3] + tribonacci[i - 1])\n            }\n        }\n    }\n    return tribonacci\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpg7yrgwly/tmpg7yrgwly.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeaddea9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeaddba0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeaddba0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeaddb9f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg7yrgwly                        0x0000556d30bd75ca <unavailable> + 5578

    5    libc.so.6                          0x00002aeade095460 __libc_start_main +
    245

    6    tmpg7yrgwly                        0x0000556d30bd7209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    for i in 3...n {\n        if i % 2 == 0 {\n            result.append(1\
    \ + i / 2)\n        } else {\n            result.append(result[i - 1] + result[i\
    \ - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002acb878cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb875c4561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002acb875c4286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002acb875c413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002acb875c3bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002acb873c3e83 <unavailable> + 188035

    6    tmpffijthvc                        0x0000557cf0d34419 <unavailable> + 9241

    7    tmpffijthvc                        0x0000557cf0d334eb <unavailable> + 5355

    8    libc.so.6                          0x00002acb87ab9460 __libc_start_main +
    245

    9    tmpffijthvc                        0x0000557cf0d33209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n <= 2 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n   \
    \     } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b03ec057c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b03ebd4e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b03ebd4e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b03ebd4e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b03ebd4dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b03ebb4de83 <unavailable> + 188035

    6    tmpdw4bxeyh                        0x000055838f94184f <unavailable> + 10319

    7    tmpdw4bxeyh                        0x000055838f9406db <unavailable> + 5851

    8    libc.so.6                          0x00002b03ec243460 __libc_start_main +
    245

    9    tmpdw4bxeyh                        0x000055838f9403f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n        return\
    \ [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    } else {\n   \
    \     for i in 3...n {\n            if i % 2 == 0 {\n                result.append(1\
    \ + i / 2)\n            } else {\n                result.append(result[i - 1]\
    \ + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpjmxt489x/tmpjmxt489x.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0df5fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0df2f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0df2f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0df2f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjmxt489x                        0x00005603f5c0e5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ad0df7e8460 __libc_start_main +
    245

    6    tmpjmxt489x                        0x00005603f5c0e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n        return\
    \ [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    } else {\n   \
    \     for i in 3...n {\n            if i % 2 == 0 {\n                result.append(1\
    \ + i / 2)\n            } else {\n                result.append(result[i - 1]\
    \ + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpjmxt489x/tmpjmxt489x.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0df5fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0df2f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0df2f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0df2f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjmxt489x                        0x00005603f5c0e5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ad0df7e8460 __libc_start_main +
    245

    6    tmpjmxt489x                        0x00005603f5c0e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n   \
    \     } else if i == 1 {\n            result.append(3)\n        } else if i ==\
    \ 2 {\n            result.append(2)\n        } else if i % 2 == 0 {\n        \
    \    result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp5ttlqbx8/tmp5ttlqbx8.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26f688fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26f6586b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26f6586988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26f65857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ttlqbx8                        0x00005636ff4ee61a <unavailable> + 5658

    5    libc.so.6                          0x00002b26f6a7b460 __libc_start_main +
    245

    6    tmp5ttlqbx8                        0x00005636ff4ee259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n        return\
    \ [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    } else {\n   \
    \     for i in 3...n {\n            if i % 2 == 0 {\n                result.append(1\
    \ + i / 2)\n            } else {\n                result.append(result[i - 1]\
    \ + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpjmxt489x/tmpjmxt489x.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0df5fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0df2f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0df2f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0df2f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjmxt489x                        0x00005603f5c0e5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ad0df7e8460 __libc_start_main +
    245

    6    tmpjmxt489x                        0x00005603f5c0e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n   \
    \     } else if i == 1 {\n            result.append(3)\n        } else if i ==\
    \ 2 {\n            result.append(2)\n        } else if i % 2 == 0 {\n        \
    \    result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp5ttlqbx8/tmp5ttlqbx8.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26f688fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26f6586b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26f6586988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26f65857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ttlqbx8                        0x00005636ff4ee61a <unavailable> + 5658

    5    libc.so.6                          0x00002b26f6a7b460 __libc_start_main +
    245

    6    tmp5ttlqbx8                        0x00005636ff4ee259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    guard n > 2 else { return result }\n    for i in 3...n {\n        result.append(i\
    \ % 2 == 0 ? 1 + i / 2 : result[i - 1] + result[i - 2] + result[i + 1])\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b44a1511c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b44a1208561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b44a1208286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b44a120813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b44a1207bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b44a1007e83 <unavailable> + 188035

    6    tmpyih0jsqr                        0x000055eb5dbeb444 <unavailable> + 9284

    7    tmpyih0jsqr                        0x000055eb5dbea4eb <unavailable> + 5355

    8    libc.so.6                          0x00002b44a16fd460 __libc_start_main +
    245

    9    tmpyih0jsqr                        0x000055eb5dbea209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n == 0 {\n        return []\n    }\n    if n == 1 {\n        return\
    \ [1]\n    }\n    if n == 2 {\n        return [1, 3]\n    }\n    if n == 3 {\n\
    \        return [1, 3, 2]\n    }\n    for i in 4...n {\n        if i % 2 == 0\
    \ {\n            result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 4])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpvus5yz7_/tmpvus5yz7_.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9d0cdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9d09d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9d09d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9d09d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvus5yz7_                        0x00005565adeb15ca <unavailable> + 5578

    5    libc.so.6                          0x00002ab9d0ec8460 __libc_start_main +
    245

    6    tmpvus5yz7_                        0x00005565adeb1209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    return [Int](0...n).map\
    \ { tri(n: $0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp0ta0ftf5.swift:18:31: error: cannot convert value of type '[Int]'\
    \ to closure result type 'Int'\n    return [Int](0...n).map { tri(n: $0) }\n \
    \                             ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n        return\
    \ [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    } else {\n   \
    \     for i in 3...n {\n            if i % 2 == 0 {\n                result.append(1\
    \ + i / 2)\n            } else {\n                result.append(result[i - 1]\
    \ + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpjmxt489x/tmpjmxt489x.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0df5fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0df2f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0df2f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0df2f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjmxt489x                        0x00005603f5c0e5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ad0df7e8460 __libc_start_main +
    245

    6    tmpjmxt489x                        0x00005603f5c0e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        let last = result[i - 1]\n        let secondLast = result[i\
    \ - 2]\n        let thirdLast = result[i - 3]\n        result.append(i % 2 ==\
    \ 0 ? 1 + i / 2 : last + secondLast + thirdLast)\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpdphroppp/tmpdphroppp.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39b800bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39b7d02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39b7d02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39b7d017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdphroppp                        0x00005593d26197ba <unavailable> + 6074

    5    libc.so.6                          0x00002b39b81f7460 __libc_start_main +
    245

    6    tmpdphroppp                        0x00005593d26193f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n == 0 {\n    \
    \    return [1]\n    }\n    if n == 1 {\n        return [1, 3]\n    }\n    if\
    \ n == 2 {\n        return [1, 3, 2]\n    }\n    var result = [1, 3, 2]\n    for\
    \ i in 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac93caa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac93c79f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac93c79f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac93c79f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac93c79ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac93c59ee83 <unavailable> + 188035

    6    tmp3lb1aewe                        0x000055ca977164ee <unavailable> + 9454

    7    tmp3lb1aewe                        0x000055ca977154eb <unavailable> + 5355

    8    libc.so.6                          0x00002ac93cc94460 __libc_start_main +
    245

    9    tmp3lb1aewe                        0x000055ca97715209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n   \
    \     } else if i == 1 {\n            result.append(3)\n        } else if i ==\
    \ 2 {\n            result.append(2)\n        } else if i % 2 == 0 {\n        \
    \    result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp5ttlqbx8/tmp5ttlqbx8.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26f688fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26f6586b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26f6586988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26f65857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ttlqbx8                        0x00005636ff4ee61a <unavailable> + 5658

    5    libc.so.6                          0x00002b26f6a7b460 __libc_start_main +
    245

    6    tmp5ttlqbx8                        0x00005636ff4ee259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        result.append(result[i - 1] + result[i - 2] + result[i - 3])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpq3zjmc0l/tmpq3zjmc0l.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b543a483c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b543a17ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b543a17a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b543a1797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq3zjmc0l                        0x00005617c840d7ba <unavailable> + 6074

    5    libc.so.6                          0x00002b543a66f460 __libc_start_main +
    245

    6    tmpq3zjmc0l                        0x00005617c840d3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        result.append(result[i - 1] + result[i - 2] + result[i - 3])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpq3zjmc0l/tmpq3zjmc0l.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b543a483c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b543a17ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b543a17a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b543a1797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq3zjmc0l                        0x00005617c840d7ba <unavailable> + 6074

    5    libc.so.6                          0x00002b543a66f460 __libc_start_main +
    245

    6    tmpq3zjmc0l                        0x00005617c840d3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n == 0 {\n        return []\n    }\n    if n == 1 {\n        return\
    \ [1]\n    }\n    if n == 2 {\n        return [1, 3]\n    }\n    if n == 3 {\n\
    \        return [1, 3, 2]\n    }\n    for i in 4...n {\n        if i % 2 == 0\
    \ {\n            result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 4])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpvus5yz7_/tmpvus5yz7_.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9d0cdcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9d09d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9d09d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9d09d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvus5yz7_                        0x00005565adeb15ca <unavailable> + 5578

    5    libc.so.6                          0x00002ab9d0ec8460 __libc_start_main +
    245

    6    tmpvus5yz7_                        0x00005565adeb1209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n        return\
    \ [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    } else {\n   \
    \     for i in 3...n {\n            if i % 2 == 0 {\n                result.append(1\
    \ + i / 2)\n            } else {\n                result.append(result[i - 1]\
    \ + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpjmxt489x/tmpjmxt489x.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0df5fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0df2f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0df2f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0df2f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjmxt489x                        0x00005603f5c0e5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ad0df7e8460 __libc_start_main +
    245

    6    tmpjmxt489x                        0x00005603f5c0e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n <= 2 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        result.append(result[i - 1] + result[i - 2] + result[i - 3])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp3bqb5hse/tmp3bqb5hse.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6619e93c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6619b8ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6619b8a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6619b897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3bqb5hse                        0x000055a95c6a47ba <unavailable> + 6074

    5    libc.so.6                          0x00002b661a07f460 __libc_start_main +
    245

    6    tmp3bqb5hse                        0x000055a95c6a43f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n == 0 {\n    \
    \    return [1]\n    }\n    if n == 1 {\n        return [1, 3]\n    }\n    if\
    \ n == 2 {\n        return [1, 3, 2]\n    }\n    var result = [1, 3, 2]\n    for\
    \ i in 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac93caa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac93c79f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac93c79f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac93c79f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac93c79ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac93c59ee83 <unavailable> + 188035

    6    tmp3lb1aewe                        0x000055ca977164ee <unavailable> + 9454

    7    tmp3lb1aewe                        0x000055ca977154eb <unavailable> + 5355

    8    libc.so.6                          0x00002ac93cc94460 __libc_start_main +
    245

    9    tmp3lb1aewe                        0x000055ca97715209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    for i in 0...n {\n        result.append(tri(n: i))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: SyntaxError
  stderr: "/tmp/tmpupnmkjhu.swift:20:16: error: no exact matches in call to instance\
    \ method 'append'\n        result.append(tri(n: i))\n               ^\nSwift.Array:7:37:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(contentsOf:)')\n\
    \    @inlinable public mutating func append<S>(contentsOf newElements: __owned\
    \ S) where Element == S.Element, S : Sequence\n                              \
    \      ^\nSwift.RangeReplaceableCollection:5:37: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(contentsOf:)')\n    @inlinable public mutating func\
    \ append<S>(contentsOf newElements: __owned S) where S : Sequence, Self.Element\
    \ == S.Element\n                                    ^\n"
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n        return\
    \ [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    } else {\n   \
    \     for i in 3...n {\n            if i % 2 == 0 {\n                result.append(1\
    \ + i / 2)\n            } else {\n                result.append(result[i - 1]\
    \ + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpjmxt489x/tmpjmxt489x.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0df5fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0df2f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0df2f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0df2f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjmxt489x                        0x00005603f5c0e5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ad0df7e8460 __libc_start_main +
    245

    6    tmpjmxt489x                        0x00005603f5c0e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n        return\
    \ [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    } else {\n   \
    \     for i in 3...n {\n            if i % 2 == 0 {\n                result.append(1\
    \ + i / 2)\n            } else {\n                result.append(result[i - 1]\
    \ + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpjmxt489x/tmpjmxt489x.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0df5fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0df2f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0df2f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0df2f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjmxt489x                        0x00005603f5c0e5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ad0df7e8460 __libc_start_main +
    245

    6    tmpjmxt489x                        0x00005603f5c0e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n == 0 {\n    \
    \    return [1]\n    }\n    if n == 1 {\n        return [1, 3]\n    }\n    if\
    \ n == 2 {\n        return [1, 3, 2]\n    }\n    var result = [1, 3, 2]\n    for\
    \ i in 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac93caa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac93c79f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac93c79f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac93c79f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac93c79ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac93c59ee83 <unavailable> + 188035

    6    tmp3lb1aewe                        0x000055ca977164ee <unavailable> + 9454

    7    tmp3lb1aewe                        0x000055ca977154eb <unavailable> + 5355

    8    libc.so.6                          0x00002ac93cc94460 __libc_start_main +
    245

    9    tmp3lb1aewe                        0x000055ca97715209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    guard n > 2 else { return Array(result[0...n]) }\n    for i in 3...n\
    \ {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n        }\
    \ else {\n            result.append(result[i - 1] + result[i - 2] + result[i +\
    \ 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf59bc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf598bf561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aaf598bf286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aaf598bf13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aaf598bebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002aaf596bee83 <unavailable> + 188035

    6    tmplt16zwfz                        0x000055c19595e67a <unavailable> + 9850

    7    tmplt16zwfz                        0x000055c19595d6db <unavailable> + 5851

    8    libc.so.6                          0x00002aaf59db4460 __libc_start_main +
    245

    9    tmplt16zwfz                        0x000055c19595d3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        result.append(result[i - 1] + result[i - 2] + result[i - 3])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpq3zjmc0l/tmpq3zjmc0l.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b543a483c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b543a17ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b543a17a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b543a1797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq3zjmc0l                        0x00005617c840d7ba <unavailable> + 6074

    5    libc.so.6                          0x00002b543a66f460 __libc_start_main +
    245

    6    tmpq3zjmc0l                        0x00005617c840d3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n <= 2 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n   \
    \     } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b03ec057c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b03ebd4e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b03ebd4e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b03ebd4e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b03ebd4dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b03ebb4de83 <unavailable> + 188035

    6    tmpdw4bxeyh                        0x000055838f94184f <unavailable> + 10319

    7    tmpdw4bxeyh                        0x000055838f9406db <unavailable> + 5851

    8    libc.so.6                          0x00002b03ec243460 __libc_start_main +
    245

    9    tmpdw4bxeyh                        0x000055838f9403f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        result.append(result[i - 1] + result[i - 2] + result[i - 3])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpq3zjmc0l/tmpq3zjmc0l.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b543a483c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b543a17ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b543a17a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b543a1797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq3zjmc0l                        0x00005617c840d7ba <unavailable> + 6074

    5    libc.so.6                          0x00002b543a66f460 __libc_start_main +
    245

    6    tmpq3zjmc0l                        0x00005617c840d3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        result.append(result[i - 1] + result[i - 2] + result[i - 3])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpq3zjmc0l/tmpq3zjmc0l.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b543a483c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b543a17ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b543a17a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b543a1797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq3zjmc0l                        0x00005617c840d7ba <unavailable> + 6074

    5    libc.so.6                          0x00002b543a66f460 __libc_start_main +
    245

    6    tmpq3zjmc0l                        0x00005617c840d3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        result.append(result[i - 1] + result[i - 2] + result[i - 3])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpq3zjmc0l/tmpq3zjmc0l.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b543a483c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b543a17ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b543a17a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b543a1797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq3zjmc0l                        0x00005617c840d7ba <unavailable> + 6074

    5    libc.so.6                          0x00002b543a66f460 __libc_start_main +
    245

    6    tmpq3zjmc0l                        0x00005617c840d3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n   \
    \     } else if i == 1 {\n            result.append(3)\n        } else if i ==\
    \ 2 {\n            result.append(2)\n        } else if i % 2 == 0 {\n        \
    \    result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp5ttlqbx8/tmp5ttlqbx8.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26f688fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26f6586b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26f6586988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26f65857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ttlqbx8                        0x00005636ff4ee61a <unavailable> + 5658

    5    libc.so.6                          0x00002b26f6a7b460 __libc_start_main +
    245

    6    tmp5ttlqbx8                        0x00005636ff4ee259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n        return\
    \ [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    } else {\n   \
    \     for i in 3...n {\n            if i % 2 == 0 {\n                result.append(1\
    \ + i / 2)\n            } else {\n                result.append(result[i - 1]\
    \ + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpjmxt489x/tmpjmxt489x.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0df5fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0df2f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0df2f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0df2f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjmxt489x                        0x00005603f5c0e5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ad0df7e8460 __libc_start_main +
    245

    6    tmpjmxt489x                        0x00005603f5c0e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n <= 2 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n   \
    \     } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b03ec057c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b03ebd4e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b03ebd4e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b03ebd4e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b03ebd4dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b03ebb4de83 <unavailable> + 188035

    6    tmpdw4bxeyh                        0x000055838f94184f <unavailable> + 10319

    7    tmpdw4bxeyh                        0x000055838f9406db <unavailable> + 5851

    8    libc.so.6                          0x00002b03ec243460 __libc_start_main +
    245

    9    tmpdw4bxeyh                        0x000055838f9403f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n == 0 {\n    \
    \    return [1]\n    } else if n == 1 {\n        return [1, 3]\n    } else if\
    \ n == 2 {\n        return [1, 3, 2]\n    } else {\n        var result = [1, 3,\
    \ 2]\n        for i in 3...n {\n            if i % 2 == 0 {\n                result.append(1\
    \ + i / 2)\n            } else {\n                result.append(result[i - 1]\
    \ + result[i - 2] + result[i + 1])\n            }\n        }\n        return result\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3, 2,\
    \ 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8,\
    \ 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\
    assert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n:\
    \ 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b11384dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11381d3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b11381d3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b11381d313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b11381d2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b1137fd2e83 <unavailable> + 188035

    6    tmpy7l6wi1r                        0x0000562e178a54ee <unavailable> + 9454

    7    tmpy7l6wi1r                        0x0000562e178a44eb <unavailable> + 5355

    8    libc.so.6                          0x00002b11386c8460 __libc_start_main +
    245

    9    tmpy7l6wi1r                        0x0000562e178a4209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    for i in 3...n {\n        result.append(i % 2 == 0 ? 1 + i / 2 : result[i\
    \ - 1] + result[i - 2] + result[i + 1])\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b76e7031c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76e6d28561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b76e6d28286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b76e6d2813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b76e6d27bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b76e6b27e83 <unavailable> + 188035

    6    tmp7rp2rxpg                        0x000055e402ade40d <unavailable> + 9229

    7    tmp7rp2rxpg                        0x000055e402add4eb <unavailable> + 5355

    8    libc.so.6                          0x00002b76e721d460 __libc_start_main +
    245

    9    tmp7rp2rxpg                        0x000055e402add209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        result.append(result[i - 1] + result[i - 2] + result[i - 3])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpq3zjmc0l/tmpq3zjmc0l.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b543a483c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b543a17ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b543a17a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b543a1797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq3zjmc0l                        0x00005617c840d7ba <unavailable> + 6074

    5    libc.so.6                          0x00002b543a66f460 __libc_start_main +
    245

    6    tmpq3zjmc0l                        0x00005617c840d3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n <= 2 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n   \
    \     } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b03ec057c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b03ebd4e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b03ebd4e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b03ebd4e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b03ebd4dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b03ebb4de83 <unavailable> + 188035

    6    tmpdw4bxeyh                        0x000055838f94184f <unavailable> + 10319

    7    tmpdw4bxeyh                        0x000055838f9406db <unavailable> + 5851

    8    libc.so.6                          0x00002b03ec243460 __libc_start_main +
    245

    9    tmpdw4bxeyh                        0x000055838f9403f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n        return\
    \ [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    } else {\n   \
    \     for i in 3...n {\n            if i % 2 == 0 {\n                result.append(1\
    \ + i / 2)\n            } else {\n                result.append(result[i - 1]\
    \ + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpjmxt489x/tmpjmxt489x.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0df5fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0df2f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0df2f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0df2f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjmxt489x                        0x00005603f5c0e5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ad0df7e8460 __libc_start_main +
    245

    6    tmpjmxt489x                        0x00005603f5c0e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n   \
    \     } else if i == 1 {\n            result.append(3)\n        } else if i ==\
    \ 2 {\n            result.append(2)\n        } else if i % 2 == 0 {\n        \
    \    result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp5ttlqbx8/tmp5ttlqbx8.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26f688fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26f6586b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26f6586988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26f65857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ttlqbx8                        0x00005636ff4ee61a <unavailable> + 5658

    5    libc.so.6                          0x00002b26f6a7b460 __libc_start_main +
    245

    6    tmp5ttlqbx8                        0x00005636ff4ee259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n   \
    \     } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad4e2511c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad4e2208561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad4e2208286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad4e220813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad4e2207bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad4e2007e83 <unavailable> + 188035

    6    tmpknmcj1g8                        0x000055697e163843 <unavailable> + 10307

    7    tmpknmcj1g8                        0x000055697e1626db <unavailable> + 5851

    8    libc.so.6                          0x00002ad4e26fd460 __libc_start_main +
    245

    9    tmpknmcj1g8                        0x000055697e1623f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n        return\
    \ [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    } else {\n   \
    \     for i in 3...n {\n            if i % 2 == 0 {\n                result.append(1\
    \ + i / 2)\n            } else {\n                result.append(result[i - 1]\
    \ + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpjmxt489x/tmpjmxt489x.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0df5fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0df2f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0df2f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0df2f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjmxt489x                        0x00005603f5c0e5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ad0df7e8460 __libc_start_main +
    245

    6    tmpjmxt489x                        0x00005603f5c0e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n        return\
    \ [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    } else {\n   \
    \     for i in 3...n {\n            if i % 2 == 0 {\n                result.append(1\
    \ + i / 2)\n            } else {\n                result.append(result[i - 1]\
    \ + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpjmxt489x/tmpjmxt489x.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0df5fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0df2f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0df2f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0df2f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjmxt489x                        0x00005603f5c0e5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ad0df7e8460 __libc_start_main +
    245

    6    tmpjmxt489x                        0x00005603f5c0e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var arr = [1, 3, 2]\n\
    \    if n < 3 {\n        return Array(arr[0...n])\n    }\n    for i in 3...n {\n\
    \        arr.append(arr[i - 1] + arr[i - 2] + arr[i - 3])\n    }\n    return arr\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp11ohvv8g/tmp11ohvv8g.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2c6933c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad2c662ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad2c662a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad2c66297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp11ohvv8g                        0x000055e6dff7b7ba <unavailable> + 6074

    5    libc.so.6                          0x00002ad2c6b1f460 __libc_start_main +
    245

    6    tmp11ohvv8g                        0x000055e6dff7b3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 0 {\n        return result\n    }\n    result.append(1)\n    if n\
    \ == 1 {\n        return result\n    }\n    result.append(3)\n    if n == 2 {\n\
    \        return result\n    }\n    result.append(2)\n    if n == 3 {\n       \
    \ return result\n    }\n    for i in 3...n {\n        if i % 2 == 0 {\n      \
    \      result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpboipzj3a/tmpboipzj3a.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af47b19ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af47ae95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af47ae95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af47ae947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpboipzj3a                        0x0000558bfafa861a <unavailable> + 5658

    5    libc.so.6                          0x00002af47b38a460 __libc_start_main +
    245

    6    tmpboipzj3a                        0x0000558bfafa8259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n        return\
    \ [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    } else {\n   \
    \     for i in 3...n {\n            if i % 2 == 0 {\n                result.append(1\
    \ + i / 2)\n            } else {\n                result.append(result[i - 1]\
    \ + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpjmxt489x/tmpjmxt489x.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0df5fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0df2f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0df2f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0df2f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjmxt489x                        0x00005603f5c0e5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ad0df7e8460 __libc_start_main +
    245

    6    tmpjmxt489x                        0x00005603f5c0e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n        return\
    \ [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    } else {\n   \
    \     for i in 3...n {\n            if i % 2 == 0 {\n                result.append(1\
    \ + i / 2)\n            } else {\n                result.append(result[i - 1]\
    \ + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpjmxt489x/tmpjmxt489x.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0df5fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0df2f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0df2f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0df2f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjmxt489x                        0x00005603f5c0e5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ad0df7e8460 __libc_start_main +
    245

    6    tmpjmxt489x                        0x00005603f5c0e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n   \
    \     } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad4e2511c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad4e2208561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad4e2208286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad4e220813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad4e2207bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad4e2007e83 <unavailable> + 188035

    6    tmpknmcj1g8                        0x000055697e163843 <unavailable> + 10307

    7    tmpknmcj1g8                        0x000055697e1626db <unavailable> + 5851

    8    libc.so.6                          0x00002ad4e26fd460 __libc_start_main +
    245

    9    tmpknmcj1g8                        0x000055697e1623f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    for i in 3...n {\n        if i % 2 == 0 {\n            result.append(1\
    \ + i / 2)\n        } else {\n            result.append(result[i - 1] + result[i\
    \ - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002acb878cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb875c4561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002acb875c4286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002acb875c413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002acb875c3bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002acb873c3e83 <unavailable> + 188035

    6    tmpffijthvc                        0x0000557cf0d34419 <unavailable> + 9241

    7    tmpffijthvc                        0x0000557cf0d334eb <unavailable> + 5355

    8    libc.so.6                          0x00002acb87ab9460 __libc_start_main +
    245

    9    tmpffijthvc                        0x0000557cf0d33209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        result.append(result[i - 1] + result[i - 2] + result[i - 3])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpq3zjmc0l/tmpq3zjmc0l.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b543a483c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b543a17ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b543a17a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b543a1797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq3zjmc0l                        0x00005617c840d7ba <unavailable> + 6074

    5    libc.so.6                          0x00002b543a66f460 __libc_start_main +
    245

    6    tmpq3zjmc0l                        0x00005617c840d3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n <= 2 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n   \
    \     } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b03ec057c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b03ebd4e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b03ebd4e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b03ebd4e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b03ebd4dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b03ebb4de83 <unavailable> + 188035

    6    tmpdw4bxeyh                        0x000055838f94184f <unavailable> + 10319

    7    tmpdw4bxeyh                        0x000055838f9406db <unavailable> + 5851

    8    libc.so.6                          0x00002b03ec243460 __libc_start_main +
    245

    9    tmpdw4bxeyh                        0x000055838f9403f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        let a = result[i - 1]\n        let b = result[i - 2]\n    \
    \    let c = result[i - 3]\n        if i % 2 == 0 {\n            result.append(1\
    \ + i / 2)\n        } else {\n            result.append(a + b + c)\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmphfghv6mg/tmphfghv6mg.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2a4b299c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a4af90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2a4af90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2a4af8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphfghv6mg                        0x0000558211c817ba <unavailable> + 6074

    5    libc.so.6                          0x00002b2a4b485460 __libc_start_main +
    245

    6    tmphfghv6mg                        0x0000558211c813f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        result.append(i % 2 == 0 ? 1 + i / 2 : result[i - 1] + result[i\
    \ - 2] + result[i - 3])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpqd34r70b/tmpqd34r70b.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b658eea2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b658eb99b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b658eb99988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b658eb987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqd34r70b                        0x000055961cf6b7ba <unavailable> + 6074

    5    libc.so.6                          0x00002b658f08e460 __libc_start_main +
    245

    6    tmpqd34r70b                        0x000055961cf6b3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n        return\
    \ [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    } else {\n   \
    \     for i in 3...n {\n            if i % 2 == 0 {\n                result.append(1\
    \ + i / 2)\n            } else {\n                result.append(result[i - 1]\
    \ + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpjmxt489x/tmpjmxt489x.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0df5fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0df2f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0df2f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0df2f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjmxt489x                        0x00005603f5c0e5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ad0df7e8460 __libc_start_main +
    245

    6    tmpjmxt489x                        0x00005603f5c0e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n   \
    \     } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad4e2511c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad4e2208561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad4e2208286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad4e220813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad4e2207bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad4e2007e83 <unavailable> + 188035

    6    tmpknmcj1g8                        0x000055697e163843 <unavailable> + 10307

    7    tmpknmcj1g8                        0x000055697e1626db <unavailable> + 5851

    8    libc.so.6                          0x00002ad4e26fd460 __libc_start_main +
    245

    9    tmpknmcj1g8                        0x000055697e1623f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    guard n > 0 else {\
    \ return [] }\n    var result = [1, 3, 2]\n    for i in 3...n {\n        result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp4cbe3jwa/tmp4cbe3jwa.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b29095c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b28d8cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b28d8c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b28d8b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4cbe3jwa                        0x000055964d4625ca <unavailable> + 5578

    5    libc.so.6                          0x00002b7b29281460 __libc_start_main +
    245

    6    tmp4cbe3jwa                        0x000055964d462209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        result.append(result[i - 1] + result[i - 2] + result[i - 3])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpq3zjmc0l/tmpq3zjmc0l.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b543a483c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b543a17ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b543a17a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b543a1797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq3zjmc0l                        0x00005617c840d7ba <unavailable> + 6074

    5    libc.so.6                          0x00002b543a66f460 __libc_start_main +
    245

    6    tmpq3zjmc0l                        0x00005617c840d3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n   \
    \     } else if i == 1 {\n            result.append(3)\n        } else if i ==\
    \ 2 {\n            result.append(2)\n        } else if i % 2 == 0 {\n        \
    \    result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp5ttlqbx8/tmp5ttlqbx8.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26f688fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26f6586b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26f6586988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26f65857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ttlqbx8                        0x00005636ff4ee61a <unavailable> + 5658

    5    libc.so.6                          0x00002b26f6a7b460 __libc_start_main +
    245

    6    tmp5ttlqbx8                        0x00005636ff4ee259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n == 0 {\n    \
    \    return [1]\n    }\n    if n == 1 {\n        return [1, 3]\n    }\n    if\
    \ n == 2 {\n        return [1, 3, 2]\n    }\n    var result = [1, 3, 2]\n    for\
    \ i in 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac93caa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac93c79f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac93c79f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac93c79f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac93c79ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac93c59ee83 <unavailable> + 188035

    6    tmp3lb1aewe                        0x000055ca977164ee <unavailable> + 9454

    7    tmp3lb1aewe                        0x000055ca977154eb <unavailable> + 5355

    8    libc.so.6                          0x00002ac93cc94460 __libc_start_main +
    245

    9    tmp3lb1aewe                        0x000055ca97715209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n   \
    \     } else if i == 1 {\n            result.append(3)\n        } else if i ==\
    \ 2 {\n            result.append(2)\n        } else if i % 2 == 0 {\n        \
    \    result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp5ttlqbx8/tmp5ttlqbx8.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26f688fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26f6586b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26f6586988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26f65857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ttlqbx8                        0x00005636ff4ee61a <unavailable> + 5658

    5    libc.so.6                          0x00002b26f6a7b460 __libc_start_main +
    245

    6    tmp5ttlqbx8                        0x00005636ff4ee259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    let result = [1, 3,\
    \ 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n    var tri\
    \ = result\n    for i in 3...n {\n        tri.append(tri[i - 1] + tri[i - 2] +\
    \ tri[i - 3])\n    }\n    return tri\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpicxlbz9p/tmpicxlbz9p.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b51444c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b5113bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b5113b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b5113a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpicxlbz9p                        0x000055638408d7ba <unavailable> + 6074

    5    libc.so.6                          0x00002b8b51630460 __libc_start_main +
    245

    6    tmpicxlbz9p                        0x000055638408d3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        let next = result[i - 1] + result[i - 2] + result[i - 3]\n\
    \        result.append(next)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpks2u4zgm/tmpks2u4zgm.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b474b7e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b474b4d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b474b4d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b474b4d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpks2u4zgm                        0x00005581b47827ba <unavailable> + 6074

    5    libc.so.6                          0x00002b474b9cd460 __libc_start_main +
    245

    6    tmpks2u4zgm                        0x00005581b47823f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n        return\
    \ [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    } else {\n   \
    \     for i in 3...n {\n            if i % 2 == 0 {\n                result.append(1\
    \ + i / 2)\n            } else {\n                result.append(result[i - 1]\
    \ + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpjmxt489x/tmpjmxt489x.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0df5fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0df2f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0df2f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0df2f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjmxt489x                        0x00005603f5c0e5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ad0df7e8460 __libc_start_main +
    245

    6    tmpjmxt489x                        0x00005603f5c0e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        let value = result[i - 1] + result[i - 2] + result[i - 3]\n\
    \        result.append(value)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmp4p9x9uv0/tmp4p9x9uv0.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c0916ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c08e65b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c08e65988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c08e647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4p9x9uv0                        0x000055b9278617ba <unavailable> + 6074

    5    libc.so.6                          0x00002b2c0935a460 __libc_start_main +
    245

    6    tmp4p9x9uv0                        0x000055b9278613f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n   \
    \     } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad4e2511c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad4e2208561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad4e2208286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad4e220813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad4e2207bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad4e2007e83 <unavailable> + 188035

    6    tmpknmcj1g8                        0x000055697e163843 <unavailable> + 10307

    7    tmpknmcj1g8                        0x000055697e1626db <unavailable> + 5851

    8    libc.so.6                          0x00002ad4e26fd460 __libc_start_main +
    245

    9    tmpknmcj1g8                        0x000055697e1623f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        result.append(result[i - 1] + result[i - 2] + result[i - 3])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpq3zjmc0l/tmpq3zjmc0l.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b543a483c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b543a17ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b543a17a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b543a1797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq3zjmc0l                        0x00005617c840d7ba <unavailable> + 6074

    5    libc.so.6                          0x00002b543a66f460 __libc_start_main +
    245

    6    tmpq3zjmc0l                        0x00005617c840d3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n <= 2 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        let sum = result[i - 1] + result[i - 2] + result[i - 3]\n \
    \       result.append(sum)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpl81mbujd/tmpl81mbujd.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b07469e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b07466dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b07466da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b07466d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl81mbujd                        0x000055e6eb71a7ba <unavailable> + 6074

    5    libc.so.6                          0x00002b0746bcf460 __libc_start_main +
    245

    6    tmpl81mbujd                        0x000055e6eb71a3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824683
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n <= 2 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n   \
    \     } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b03ec057c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b03ebd4e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b03ebd4e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b03ebd4e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b03ebd4dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b03ebb4de83 <unavailable> + 188035

    6    tmpdw4bxeyh                        0x000055838f94184f <unavailable> + 10319

    7    tmpdw4bxeyh                        0x000055838f9406db <unavailable> + 5851

    8    libc.so.6                          0x00002b03ec243460 __libc_start_main +
    245

    9    tmpdw4bxeyh                        0x000055838f9403f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n == 0 {\n        return []\n    }\n    if n == 1 {\n        return\
    \ [1]\n    }\n    if n == 2 {\n        return [1, 3]\n    }\n    if n == 3 {\n\
    \        return [1, 3, 2]\n    }\n    for i in 3...n {\n        if i % 2 == 0\
    \ {\n            result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpjx5f0e5y/tmpjx5f0e5y.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b91b8fdfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b91b8cd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b91b8cd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b91b8cd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjx5f0e5y                        0x000055e5c4f325ca <unavailable> + 5578

    5    libc.so.6                          0x00002b91b91cb460 __libc_start_main +
    245

    6    tmpjx5f0e5y                        0x000055e5c4f32209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n <= 2 {\n        return result\n    }\n    for i in 3...n {\n  \
    \      if i % 2 == 0 {\n            result.append(1 + i / 2)\n        } else {\n\
    \            result.append(result[i - 1] + result[i - 2] + result[i + 1])\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n:\
    \ 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b0ca15adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0ca12a4561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0ca12a4286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0ca12a413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0ca12a3bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0ca10a3e83 <unavailable> + 188035

    6    tmpzzu1gm2i                        0x000055f086b3f475 <unavailable> + 9333

    7    tmpzzu1gm2i                        0x000055f086b3e4eb <unavailable> + 5355

    8    libc.so.6                          0x00002b0ca1799460 __libc_start_main +
    245

    9    tmpzzu1gm2i                        0x000055f086b3e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n        return\
    \ [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    } else {\n   \
    \     for i in 3...n {\n            if i % 2 == 0 {\n                result.append(1\
    \ + i / 2)\n            } else {\n                result.append(result[i - 1]\
    \ + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpjmxt489x/tmpjmxt489x.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0df5fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0df2f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0df2f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0df2f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjmxt489x                        0x00005603f5c0e5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ad0df7e8460 __libc_start_main +
    245

    6    tmpjmxt489x                        0x00005603f5c0e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: 1
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n <= 2 {\n        return result[0...n]\n    }\n    for i in 3...n\
    \ {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n        }\
    \ else {\n            result.append(result[i - 1] + result[i - 2] + result[i +\
    \ 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: SyntaxError
  stderr: "/tmp/tmpzas5j54i.swift:20:22: error: no 'subscript' candidates produce\
    \ the expected contextual result type '[Int]'\n        return result[0...n]\n\
    \                     ^\nSwift.Collection:2:23: note: 'subscript(_:)' produces\
    \ 'ArraySlice<Int>', not the expected contextual result type '[Int]'\n    @inlinable\
    \ public subscript<R>(r: R) -> Self.SubSequence where R : RangeExpression, Self.Index\
    \ == R.Bound { get }\n                      ^\nSwift.MutableCollection:2:23: note:\
    \ 'subscript(_:)' produces '@lvalue ArraySlice<Int>', not the expected contextual\
    \ result type '[Int]'\n    @inlinable public subscript<R>(r: R) -> Self.SubSequence\
    \ where R : RangeExpression, Self.Index == R.Bound { get set }\n             \
    \         ^\n"
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result: [Int]\
    \ = [1, 3, 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n \
    \       return [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    }\
    \ else {\n        for i in 3...n {\n            if i % 2 == 0 {\n            \
    \    result.append(1 + i / 2)\n            } else {\n                result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp98fqwme2/tmp98fqwme2.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ab4812c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ab4509b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ab4509988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ab45087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp98fqwme2                        0x000056188deae5ca <unavailable> + 5578

    5    libc.so.6                          0x00002b9ab49fe460 __libc_start_main +
    245

    6    tmp98fqwme2                        0x000056188deae209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824683
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n <= 2 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n   \
    \     } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b03ec057c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b03ebd4e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b03ebd4e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b03ebd4e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b03ebd4dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b03ebb4de83 <unavailable> + 188035

    6    tmpdw4bxeyh                        0x000055838f94184f <unavailable> + 10319

    7    tmpdw4bxeyh                        0x000055838f9406db <unavailable> + 5851

    8    libc.so.6                          0x00002b03ec243460 __libc_start_main +
    245

    9    tmpdw4bxeyh                        0x000055838f9403f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    if n == 0 {\n    \
    \    return [1]\n    }\n    if n == 1 {\n        return [1, 3]\n    }\n    if\
    \ n == 2 {\n        return [1, 3, 2]\n    }\n    var result = [1, 3, 2]\n    for\
    \ i in 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n\
    \        } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac93caa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac93c79f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac93c79f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac93c79f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac93c79ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac93c59ee83 <unavailable> + 188035

    6    tmp3lb1aewe                        0x000055ca977164ee <unavailable> + 9454

    7    tmp3lb1aewe                        0x000055ca977154eb <unavailable> + 5355

    8    libc.so.6                          0x00002ac93cc94460 __libc_start_main +
    245

    9    tmp3lb1aewe                        0x000055ca97715209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n   \
    \     } else if i == 1 {\n            result.append(3)\n        } else if i ==\
    \ 2 {\n            result.append(2)\n        } else if i % 2 == 0 {\n        \
    \    result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp5ttlqbx8/tmp5ttlqbx8.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26f688fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26f6586b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26f6586988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26f65857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ttlqbx8                        0x00005636ff4ee61a <unavailable> + 5658

    5    libc.so.6                          0x00002b26f6a7b460 __libc_start_main +
    245

    6    tmp5ttlqbx8                        0x00005636ff4ee259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n        return\
    \ [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    } else {\n   \
    \     for i in 3...n {\n            if i % 2 == 0 {\n                result.append(1\
    \ + i / 2)\n            } else {\n                result.append(result[i - 1]\
    \ + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpjmxt489x/tmpjmxt489x.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0df5fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0df2f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0df2f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0df2f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjmxt489x                        0x00005603f5c0e5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ad0df7e8460 __libc_start_main +
    245

    6    tmpjmxt489x                        0x00005603f5c0e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n        return\
    \ [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    } else {\n   \
    \     for i in 3...n {\n            if i % 2 == 0 {\n                result.append(1\
    \ + i / 2)\n            } else {\n                result.append(result[i - 1]\
    \ + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpjmxt489x/tmpjmxt489x.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0df5fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0df2f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0df2f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0df2f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjmxt489x                        0x00005603f5c0e5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ad0df7e8460 __libc_start_main +
    245

    6    tmpjmxt489x                        0x00005603f5c0e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n <= 2 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        let last = result[i - 1]\n        let last2 = result[i - 2]\n\
    \        let last3 = result[i - 3]\n        result.append(last + last2 + last3)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp8yp1ns8q/tmp8yp1ns8q.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d7cdb8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d7caafb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d7caaf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d7caae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8yp1ns8q                        0x0000558dbb5457ba <unavailable> + 6074

    5    libc.so.6                          0x00002b4d7cfa4460 __libc_start_main +
    245

    6    tmp8yp1ns8q                        0x0000558dbb5453f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824683
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n   \
    \     } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad4e2511c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad4e2208561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad4e2208286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad4e220813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad4e2207bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad4e2007e83 <unavailable> + 188035

    6    tmpknmcj1g8                        0x000055697e163843 <unavailable> + 10307

    7    tmpknmcj1g8                        0x000055697e1626db <unavailable> + 5851

    8    libc.so.6                          0x00002ad4e26fd460 __libc_start_main +
    245

    9    tmpknmcj1g8                        0x000055697e1623f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i / 2)\n   \
    \     } else {\n            result.append(result[i - 1] + result[i - 2] + result[i\
    \ + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\n\
    assert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3,\
    \ 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1,\
    \ 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad4e2511c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad4e2208561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad4e2208286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad4e220813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad4e2207bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad4e2007e83 <unavailable> + 188035

    6    tmpknmcj1g8                        0x000055697e163843 <unavailable> + 10307

    7    tmpknmcj1g8                        0x000055697e1626db <unavailable> + 5851

    8    libc.so.6                          0x00002ad4e26fd460 __libc_start_main +
    245

    9    tmpknmcj1g8                        0x000055697e1623f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n        return\
    \ [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    } else {\n   \
    \     for i in 3...n {\n            if i % 2 == 0 {\n                result.append(1\
    \ + i / 2)\n            } else {\n                result.append(result[i - 1]\
    \ + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpjmxt489x/tmpjmxt489x.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0df5fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0df2f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0df2f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0df2f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjmxt489x                        0x00005603f5c0e5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ad0df7e8460 __libc_start_main +
    245

    6    tmpjmxt489x                        0x00005603f5c0e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    if n == 0 {\n        return result\n    }\n    result.append(1)\n    if n\
    \ == 1 {\n        return result\n    }\n    result.append(3)\n    if n == 2 {\n\
    \        return result\n    }\n    result.append(2)\n    for i in 3...n {\n  \
    \      result.append(result[i - 1] + result[i - 2] + result[i - 3])\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmplc5ntgdd/tmplc5ntgdd.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cbcffcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cbccf3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cbccf3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cbccf27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplc5ntgdd                        0x0000561513d5e61a <unavailable> + 5658

    5    libc.so.6                          0x00002b6cbd1e8460 __libc_start_main +
    245

    6    tmplc5ntgdd                        0x0000561513d5e259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824683
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result: [Int]\
    \ = []\n    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n\
    \        } else if i == 1 {\n            result.append(3)\n        } else if i\
    \ == 2 {\n            result.append(2)\n        } else if i % 2 == 0 {\n     \
    \       result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmptcbvyq4h/tmptcbvyq4h.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acbeef6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acbeec61b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acbeec61988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acbeec607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptcbvyq4h                        0x0000558431ac45ca <unavailable> + 5578

    5    libc.so.6                          0x00002acbef156460 __libc_start_main +
    245

    6    tmptcbvyq4h                        0x0000558431ac4209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824683
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n        return\
    \ [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    } else {\n   \
    \     for _ in 3...n {\n            let last = result.last!\n            let secondLast\
    \ = result[result.count - 2]\n            let thirdLast = result[result.count\
    \ - 3]\n            if last % 2 == 0 {\n                result.append(1 + last\
    \ / 2)\n            } else {\n                result.append(thirdLast + secondLast\
    \ + last)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmp7prs5wq9/tmp7prs5wq9.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1396b16c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b139680db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b139680d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b139680c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7prs5wq9                        0x000056470ee106ba <unavailable> + 5818

    5    libc.so.6                          0x00002b1396d02460 __libc_start_main +
    245

    6    tmp7prs5wq9                        0x000056470ee102f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    for i in 3...n {\n        if i % 2 == 0 {\n            result.append(1\
    \ + i / 2)\n        } else {\n            result.append(result[i - 1] + result[i\
    \ - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002acb878cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb875c4561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002acb875c4286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002acb875c413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002acb875c3bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002acb873c3e83 <unavailable> + 188035

    6    tmpffijthvc                        0x0000557cf0d34419 <unavailable> + 9241

    7    tmpffijthvc                        0x0000557cf0d334eb <unavailable> + 5355

    8    libc.so.6                          0x00002acb87ab9460 __libc_start_main +
    245

    9    tmpffijthvc                        0x0000557cf0d33209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        result.append(result[i - 1] + result[i - 2] + result[i - 3])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpq3zjmc0l/tmpq3zjmc0l.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b543a483c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b543a17ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b543a17a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b543a1797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq3zjmc0l                        0x00005617c840d7ba <unavailable> + 6074

    5    libc.so.6                          0x00002b543a66f460 __libc_start_main +
    245

    6    tmpq3zjmc0l                        0x00005617c840d3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        result.append(result[i - 1] + result[i - 2] + result[i - 3])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(tri(n: 3)\
    \ == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) ==\
    \ [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n:\
    \ 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n:\
    \ 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11])\nassert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpq3zjmc0l/tmpq3zjmc0l.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b543a483c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b543a17ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b543a17a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b543a1797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq3zjmc0l                        0x00005617c840d7ba <unavailable> + 6074

    5    libc.so.6                          0x00002b543a66f460 __libc_start_main +
    245

    6    tmpq3zjmc0l                        0x00005617c840d3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result: [Int]\
    \ = [1, 3, 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n  \
    \  for i in 3...n {\n        if i % 2 == 0 {\n            result.append(1 + i\
    \ / 2)\n        } else {\n            result.append(result[i - 1] + result[i -\
    \ 2] + result[i + 1])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3,\
    \ 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1,\
    \ 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b90fd237c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b90fcf2e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b90fcf2e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b90fcf2e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b90fcf2dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b90fcd2de83 <unavailable> + 188035

    6    tmpqfvqumx_                        0x000055b01af9e843 <unavailable> + 10307

    7    tmpqfvqumx_                        0x000055b01af9d6db <unavailable> + 5851

    8    libc.so.6                          0x00002b90fd423460 __libc_start_main +
    245

    9    tmpqfvqumx_                        0x000055b01af9d3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824683
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n   \
    \     } else if i == 1 {\n            result.append(3)\n        } else if i ==\
    \ 2 {\n            result.append(2)\n        } else if i % 2 == 0 {\n        \
    \    result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp5ttlqbx8/tmp5ttlqbx8.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26f688fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26f6586b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26f6586988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26f65857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ttlqbx8                        0x00005636ff4ee61a <unavailable> + 5658

    5    libc.so.6                          0x00002b26f6a7b460 __libc_start_main +
    245

    6    tmp5ttlqbx8                        0x00005636ff4ee259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n == 0 {\n        return []\n    }\n    if n == 1 {\n        return\
    \ [1]\n    }\n    if n == 2 {\n        return [1, 3]\n    }\n    if n == 3 {\n\
    \        return [1, 3, 2]\n    }\n    for i in 3...n {\n        if i % 2 == 0\
    \ {\n            result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpjx5f0e5y/tmpjx5f0e5y.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b91b8fdfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b91b8cd6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b91b8cd6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b91b8cd57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjx5f0e5y                        0x000055e5c4f325ca <unavailable> + 5578

    5    libc.so.6                          0x00002b91b91cb460 __libc_start_main +
    245

    6    tmpjx5f0e5y                        0x000055e5c4f32209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n < 3 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        result.append(i % 2 == 0 ? 1 + i / 2 : result[i - 1] + result[i\
    \ - 2] + result[i - 3])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmpqd34r70b/tmpqd34r70b.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b658eea2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b658eb99b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b658eb99988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b658eb987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqd34r70b                        0x000055961cf6b7ba <unavailable> + 6074

    5    libc.so.6                          0x00002b658f08e460 __libc_start_main +
    245

    6    tmpqd34r70b                        0x000055961cf6b3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n == 0 {\n        return [1]\n    } else if n == 1 {\n        return\
    \ [1, 3]\n    } else if n == 2 {\n        return [1, 3, 2]\n    } else {\n   \
    \     for i in 3...n {\n            if i % 2 == 0 {\n                result.append(1\
    \ + i / 2)\n            } else {\n                result.append(result[i - 1]\
    \ + result[i - 2] + result[i - 3])\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpjmxt489x/tmpjmxt489x.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0df5fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0df2f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0df2f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0df2f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjmxt489x                        0x00005603f5c0e5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ad0df7e8460 __libc_start_main +
    245

    6    tmpjmxt489x                        0x00005603f5c0e209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [Int]()\n\
    \    for i in 0...n {\n        if i == 0 {\n            result.append(1)\n   \
    \     } else if i == 1 {\n            result.append(3)\n        } else if i ==\
    \ 2 {\n            result.append(2)\n        } else if i % 2 == 0 {\n        \
    \    result.append(1 + i / 2)\n        } else {\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmp5ttlqbx8/tmp5ttlqbx8.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26f688fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26f6586b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26f6586988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26f65857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ttlqbx8                        0x00005636ff4ee61a <unavailable> + 5658

    5    libc.so.6                          0x00002b26f6a7b460 __libc_start_main +
    245

    6    tmp5ttlqbx8                        0x00005636ff4ee259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    guard n > 2 else { return result }\n    for i in 3...n {\n        result.append(i\
    \ % 2 == 0 ? 1 + i / 2 : result[i - 1] + result[i - 2] + result[i + 1])\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b44a1511c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b44a1208561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b44a1208286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b44a120813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b44a1207bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b44a1007e83 <unavailable> + 188035

    6    tmpyih0jsqr                        0x000055eb5dbeb444 <unavailable> + 9284

    7    tmpyih0jsqr                        0x000055eb5dbea4eb <unavailable> + 5355

    8    libc.so.6                          0x00002b44a16fd460 __libc_start_main +
    245

    9    tmpyih0jsqr                        0x000055eb5dbea209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824682
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result: [Int]\
    \ = [1, 3, 2]\n    if n == 0 {\n        return []\n    } else if n == 1 {\n  \
    \      return [1]\n    } else if n == 2 {\n        return [1, 3]\n    } else if\
    \ n == 3 {\n        return [1, 3, 2]\n    } else {\n        for i in 4...n {\n\
    \            if i % 2 == 0 {\n                result.append(1 + i / 2)\n     \
    \       } else {\n                result.append(result[i - 1] + result[i - 2]\
    \ + result[i - 4])\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) ==\
    \ [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    assert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\n\
    assert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmpunk00nbh/tmpunk00nbh.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac60da26c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac60d71db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac60d71d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac60d71c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpunk00nbh                        0x000055949d40f5ca <unavailable> + 5578

    5    libc.so.6                          0x00002ac60dc12460 __libc_start_main +
    245

    6    tmpunk00nbh                        0x000055949d40f209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659824683
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n == 0 {\n        return []\n    }\n    if n == 1 {\n        return\
    \ [1]\n    }\n    if n == 2 {\n        return [1, 3]\n    }\n    if n == 3 {\n\
    \        return [1, 3, 2]\n    }\n    for _ in 4...n {\n        result.append(result[result.count\
    \ - 1] + result[result.count - 2] + result[result.count - 3])\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(tri(n: 3) == [1, 3,\
    \ 2, 8])\nassert(tri(n: 4) == [1, 3, 2, 8, 3])\nassert(tri(n: 5) == [1, 3, 2,\
    \ 8, 3, 15])\nassert(tri(n: 6) == [1, 3, 2, 8, 3, 15, 4])\nassert(tri(n: 7) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n: 8) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\nassert(tri(n: 20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    assert(tri(n: 0) == [1])\nassert(tri(n: 1) == [1, 3])"
  status: Exception
  stderr: 'tmppknk3ke6/tmppknk3ke6.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af89b415c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af89b10cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af89b10c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af89b10b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppknk3ke6                        0x0000560a35e9361a <unavailable> + 5658

    5    libc.so.6                          0x00002af89b601460 __libc_start_main +
    245

    6    tmppknk3ke6                        0x0000560a35e93259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1659824683
- exit_code: -4
  program: "\n/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1)\
    \ = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2)\
    \ = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3\
    \ = 8 \n/// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n\
    /// tri(3) = [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var result = [1, 3,\
    \ 2]\n    if n <= 2 {\n        return Array(result[0...n])\n    }\n    for i in\
    \ 3...n {\n        result.append(i % 2 == 0 ? 1 + i / 2 : result[i - 1] + result[i\
    \ - 2] + result[i - 3])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(tri(n: 3) == [1, 3, 2, 8])\nassert(tri(n: 4) == [1, 3, 2,\
    \ 8, 3])\nassert(tri(n: 5) == [1, 3, 2, 8, 3, 15])\nassert(tri(n: 6) == [1, 3,\
    \ 2, 8, 3, 15, 4])\nassert(tri(n: 7) == [1, 3, 2, 8, 3, 15, 4, 24])\nassert(tri(n:\
    \ 8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\nassert(tri(n: 9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\nassert(tri(n: 20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11])\nassert(tri(n: 0) == [1])\nassert(tri(n:\
    \ 1) == [1, 3])"
  status: Exception
  stderr: 'tmp992cjlnb/tmp992cjlnb.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ae141cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ae1113b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1ae1113988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1ae11127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp992cjlnb                        0x0000557c618297ba <unavailable> + 6074

    5    libc.so.6                          0x00002b1ae1608460 __libc_start_main +
    245

    6    tmp992cjlnb                        0x0000557c618293f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824683
