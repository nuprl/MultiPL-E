language: swift
name: HumanEval_108_count_nums
results:
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({$0.digits.reduce(0, combine: +) > 0}).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp5nufilo3.swift:10:27: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({$0.digits.reduce(0, combine: +) > 0}).count\n\
    \                       ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for i in arr {\n        if i < 0 {\n      \
    \      if i % 10 != 0 {\n                count += 1\n            }\n        }\
    \ else {\n            if i % 10 != 0 {\n                count += 1\n         \
    \   }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpq5p9eplk/tmpq5p9eplk.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f499a59bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f499a292b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f499a292988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f499a2917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq5p9eplk                        0x00005646d383b5a0 <unavailable> + 5536

    5    libc.so.6                          0x00007f4999d88460 __libc_start_main +
    245

    6    tmpq5p9eplk                        0x00005646d383b169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659817649
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        if sum_digits(num)\
    \ > 0 {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpgm6suv7a.swift:12:12: error: cannot find 'sum_digits' in scope\n\
    \        if sum_digits(num) > 0 {\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({$0.sum_digits() > 0}).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp492iirdo.swift:10:27: error: value of type 'Int' has no member\
    \ 'sum_digits'\n    return arr.filter({$0.sum_digits() > 0}).count\n         \
    \              ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        if num < 0 {\n  \
    \          if num % 10 != 0 {\n                count += 1\n            }\n   \
    \     } else {\n            if num % 10 != 0 {\n                count += 1\n \
    \           }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpxmjuha70/tmpxmjuha70.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007fb0915adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007fb0912a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007fb0912a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007fb0912a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxmjuha70                        0x000055f8d95825a0 <unavailable> + 5536

    5    libc.so.6                          0x00007fb090d9a460 __libc_start_main +
    245

    6    tmpxmjuha70                        0x000055f8d9582169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659817649
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({ $0 != 0 && $0.digits.reduce(0, +) > 0 }).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpqk2aey8h.swift:10:39: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0 != 0 && $0.digits.reduce(0, +) > 0 }).count\n\
    \                                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817649
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({$0.digits.reduce(0, combine: +) > 0}).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp5nufilo3.swift:10:27: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({$0.digits.reduce(0, combine: +) > 0}).count\n\
    \                       ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({$0.digits().reduce(0, +) > 0}).count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpoxree5ub.swift:10:27: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({$0.digits().reduce(0, +) > 0}).count\n    \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817649
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({$0 != 0}).filter({abs($0) % 10 != 0}).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp5e7zrzqw/tmp5e7zrzqw.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f3569998c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f356968fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f356968f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f356968e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5e7zrzqw                        0x00005638d1e78640 <unavailable> + 5696

    5    libc.so.6                          0x00007f3569185460 __libc_start_main +
    245

    6    tmp5e7zrzqw                        0x00005638d1e78209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659817649
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({ $0.digits.reduce(0, combine: +) > 0 }).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp0cyo99jo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0.digits.reduce(0, combine: +) > 0 }).count\n\
    \                        ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817649
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter{\n        var sum = 0\n        var num = $0\n\
    \        while num != 0 {\n            sum += abs(num % 10)\n            num /=\
    \ 10\n        }\n        return sum > 0\n    }.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpqqql2v6b/tmpqqql2v6b.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f81da48ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f81da185b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f81da185988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f81da1847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqqql2v6b                        0x000055999cabc640 <unavailable> + 5696

    5    libc.so.6                          0x00007f81d9c7b460 __libc_start_main +
    245

    6    tmpqqql2v6b                        0x000055999cabc209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659817650
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({ $0 != 0 }).reduce(0, { $0 + abs($1) }).description.characters.map({\
    \ Int(String($0))! }).reduce(0, +)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpfhdtndxk.swift:10:76: error: 'characters' is unavailable: Please\
    \ use String directly\n    return arr.filter({ $0 != 0 }).reduce(0, { $0 + abs($1)\
    \ }).description.characters.map({ Int(String($0))! }).reduce(0, +)\n         \
    \                                                                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659817650
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        if num < 0 {\n  \
    \          if num % 10 < 0 {\n                count += 1\n            }\n    \
    \    } else {\n            if num % 10 > 0 {\n                count += 1\n   \
    \         }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpv0h_cisj/tmpv0h_cisj.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f1aacc40c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f1aac937b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f1aac937988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f1aac9367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv0h_cisj                        0x000055aebf7035a0 <unavailable> + 5536

    5    libc.so.6                          0x00007f1aac42d460 __libc_start_main +
    245

    6    tmpv0h_cisj                        0x000055aebf703169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659817650
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for i in arr {\n        var sum = 0\n     \
    \   var num = i\n        if num < 0 {\n            num = -num\n        }\n   \
    \     while num > 0 {\n            sum += num % 10\n            num /= 10\n  \
    \      }\n        if sum > 0 {\n            count += 1\n        }\n    }\n   \
    \ return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpyc2111k9/tmpyc2111k9.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f1e45d7fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f1e45a76b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f1e45a76988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f1e45a757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyc2111k9                        0x0000564596a515a0 <unavailable> + 5536

    5    libc.so.6                          0x00007f1e4556c460 __libc_start_main +
    245

    6    tmpyc2111k9                        0x0000564596a51169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659817650
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.sum_of_digits() > 0 }.count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp6q5kk9nl.swift:10:28: error: value of type 'Int' has no member\
    \ 'sum_of_digits'\n    return arr.filter { $0.sum_of_digits() > 0 }.count\n  \
    \                      ~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659817650
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({ $0 != 0 }).filter({ abs($0) % 10 != 0 }).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmplf1ed_r1/tmplf1ed_r1.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f4ce425dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f4ce3f54b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f4ce3f54988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f4ce3f537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplf1ed_r1                        0x000055f5b39c6640 <unavailable> + 5696

    5    libc.so.6                          0x00007f4ce3a4a460 __libc_start_main +
    245

    6    tmplf1ed_r1                        0x000055f5b39c6209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659817651
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({ $0.digits.reduce(0, combine: +) > 0 }).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp0cyo99jo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0.digits.reduce(0, combine: +) > 0 }).count\n\
    \                        ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817649
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({ $0.digits.reduce(0, combine: +) > 0 }).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp0cyo99jo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0.digits.reduce(0, combine: +) > 0 }).count\n\
    \                        ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817649
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        if num < 0 {\n  \
    \          if num % 10 != 0 {\n                count += 1\n            }\n   \
    \     } else {\n            if num % 10 != 0 {\n                count += 1\n \
    \           }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpxmjuha70/tmpxmjuha70.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007fb0915adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007fb0912a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007fb0912a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007fb0912a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxmjuha70                        0x000055f8d95825a0 <unavailable> + 5536

    5    libc.so.6                          0x00007fb090d9a460 __libc_start_main +
    245

    6    tmpxmjuha70                        0x000055f8d9582169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659817649
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.sum_digits() > 0 }.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmphj6mkcqo.swift:10:28: error: value of type 'Int' has no member\
    \ 'sum_digits'\n    return arr.filter { $0.sum_digits() > 0 }.count\n        \
    \                ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659817651
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({ (num) -> Bool in\n        return num.digits.reduce(0,\
    \ +) > 0\n    }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp2yvr0lzv.swift:11:20: error: value of type 'Int' has no member\
    \ 'digits'\n        return num.digits.reduce(0, +) > 0\n               ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817651
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for i in arr {\n        if i < 0 {\n      \
    \      if i % 10 != 0 {\n                count += 1\n            }\n        }\
    \ else {\n            if i % 10 != 0 {\n                count += 1\n         \
    \   }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpq5p9eplk/tmpq5p9eplk.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f499a59bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f499a292b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f499a292988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f499a2917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq5p9eplk                        0x00005646d383b5a0 <unavailable> + 5536

    5    libc.so.6                          0x00007f4999d88460 __libc_start_main +
    245

    6    tmpq5p9eplk                        0x00005646d383b169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659817649
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        if sum_digits(num)\
    \ > 0 {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpgm6suv7a.swift:12:12: error: cannot find 'sum_digits' in scope\n\
    \        if sum_digits(num) > 0 {\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({$0.digits.reduce(0, combine: +) > 0}).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp5nufilo3.swift:10:27: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({$0.digits.reduce(0, combine: +) > 0}).count\n\
    \                       ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({ $0 != 0 }).filter({ $0.sum_digits() > 0 }).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp6qv6kitx.swift:10:48: error: value of type 'Int' has no member\
    \ 'sum_digits'\n    return arr.filter({ $0 != 0 }).filter({ $0.sum_digits() >\
    \ 0 }).count\n                                            ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659817651
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for i in arr {\n        if i < 0 {\n      \
    \      if i % 10 < 0 {\n                count += 1\n            }\n        } else\
    \ {\n            if i % 10 > 0 {\n                count += 1\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpq1hvdd5k/tmpq1hvdd5k.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f7cb461ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f7cb4311b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f7cb4311988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f7cb43107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq1hvdd5k                        0x00005646b0c385a0 <unavailable> + 5536

    5    libc.so.6                          0x00007f7cb3e07460 __libc_start_main +
    245

    6    tmpq1hvdd5k                        0x00005646b0c38169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659817651
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({ $0 != 0 }).filter({ $0 < 0 ? $0.digits.reduce(0,\
    \ combine: +) < 0 : $0.digits.reduce(0, combine: +) > 0 }).count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpbdlpcmw4.swift:10:57: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0 != 0 }).filter({ $0 < 0 ? $0.digits.reduce(0,\
    \ combine: +) < 0 : $0.digits.reduce(0, combine: +) > 0 }).count\n           \
    \                                          ~~ ^~~~~~\n/tmp/tmpbdlpcmw4.swift:10:95:\
    \ error: value of type 'Int' has no member 'digits'\n    return arr.filter({ $0\
    \ != 0 }).filter({ $0 < 0 ? $0.digits.reduce(0, combine: +) < 0 : $0.digits.reduce(0,\
    \ combine: +) > 0 }).count\n                                                 \
    \                                          ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817652
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { (n) -> Bool in\n        return sum_digits(n)\
    \ > 0\n    }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmptbucaat7.swift:11:16: error: cannot find 'sum_digits' in scope\n\
    \        return sum_digits(n) > 0\n               ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659817651
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.sum_digits() > 0 }.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmphj6mkcqo.swift:10:28: error: value of type 'Int' has no member\
    \ 'sum_digits'\n    return arr.filter { $0.sum_digits() > 0 }.count\n        \
    \                ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659817651
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({$0.digits.reduce(0, combine: +) > 0}).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp5nufilo3.swift:10:27: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({$0.digits.reduce(0, combine: +) > 0}).count\n\
    \                       ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { num in\n        var sum = 0\n        var num\
    \ = num\n        if num < 0 {\n            num = -num\n        }\n        while\
    \ num > 0 {\n            sum += num % 10\n            num /= 10\n        }\n \
    \       return sum > 0\n    }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpszj3790u/tmpszj3790u.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f3d76a60c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f3d76757b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f3d76757988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f3d767567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpszj3790u                        0x000055e5a3727560 <unavailable> + 5472

    5    libc.so.6                          0x00007f3d7624d460 __libc_start_main +
    245

    6    tmpszj3790u                        0x000055e5a3727129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659817652
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({$0.digits.reduce(0, combine: +) > 0}).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp5nufilo3.swift:10:27: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({$0.digits.reduce(0, combine: +) > 0}).count\n\
    \                       ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({$0.digits.reduce(0, combine: +) > 0}).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp5nufilo3.swift:10:27: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({$0.digits.reduce(0, combine: +) > 0}).count\n\
    \                       ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({ $0.digits.reduce(0, combine: +) > 0 }).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp0cyo99jo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0.digits.reduce(0, combine: +) > 0 }).count\n\
    \                        ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817649
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.sum_of_digits > 0 }.count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmppfizqhoy.swift:10:28: error: value of type 'Int' has no member\
    \ 'sum_of_digits'\n    return arr.filter { $0.sum_of_digits > 0 }.count\n    \
    \                    ~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659817652
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        var sum = 0\n   \
    \     var n = num\n        if n < 0 {\n            n = -n\n        }\n       \
    \ while n > 0 {\n            sum += n % 10\n            n /= 10\n        }\n \
    \       if sum > 0 {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp7m8hf86q/tmp7m8hf86q.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ffba59b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ffba56a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ffba56a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ffba56a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7m8hf86q                        0x000055684c38c5a0 <unavailable> + 5536

    5    libc.so.6                          0x00007ffba519f460 __libc_start_main +
    245

    6    tmp7m8hf86q                        0x000055684c38c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659817652
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { (num) -> Bool in\n        return num.digits.reduce(0,\
    \ +) > 0\n    }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp3lxpu1b2.swift:11:20: error: value of type 'Int' has no member\
    \ 'digits'\n        return num.digits.reduce(0, +) > 0\n               ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817652
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        if num < 0 {\n  \
    \          count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpeav1_t6a/tmpeav1_t6a.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007fedd62adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007fedd5fa4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007fedd5fa4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007fedd5fa37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeav1_t6a                        0x0000559f78df9510 <unavailable> + 5392

    5    libc.so.6                          0x00007fedd5a9a460 __libc_start_main +
    245

    6    tmpeav1_t6a                        0x0000559f78df90d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659817653
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({ $0.sum_digits() > 0 }).count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpuu34mqcn.swift:10:28: error: value of type 'Int' has no member\
    \ 'sum_digits'\n    return arr.filter({ $0.sum_digits() > 0 }).count\n       \
    \                 ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659817653
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter {\n        $0 != 0 && $0.digits.reduce(0, combine:\
    \ +) > 0\n    }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpf_zjcczy.swift:11:23: error: value of type 'Int' has no member\
    \ 'digits'\n        $0 != 0 && $0.digits.reduce(0, combine: +) > 0\n         \
    \          ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817653
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({\n        var sum = 0\n        var n = $0\n\
    \        if n < 0 {\n            n = -n\n        }\n        while n > 0 {\n  \
    \          sum += n % 10\n            n /= 10\n        }\n        return sum >\
    \ 0\n    }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp457j4m7o/tmp457j4m7o.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007fad6894fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007fad68646b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007fad68646988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007fad686457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp457j4m7o                        0x000055f5ab614560 <unavailable> + 5472

    5    libc.so.6                          0x00007fad6813c460 __libc_start_main +
    245

    6    tmp457j4m7o                        0x000055f5ab614129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659817653
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({ $0.digits.reduce(0, +) > 0 }).count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprcpl4fsu.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0.digits.reduce(0, +) > 0 }).count\n    \
    \                    ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817653
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        var sum = 0\n   \
    \     var num = num\n        if num < 0 {\n            num = -num\n        }\n\
    \        while num > 0 {\n            sum += num % 10\n            num /= 10\n\
    \        }\n        if sum > 0 {\n            count += 1\n        }\n    }\n \
    \   return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpiiz2j85d/tmpiiz2j85d.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007fc314388c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007fc31407fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007fc31407f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007fc31407e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiiz2j85d                        0x0000555a55e695a0 <unavailable> + 5536

    5    libc.so.6                          0x00007fc313b75460 __libc_start_main +
    245

    6    tmpiiz2j85d                        0x0000555a55e69169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659817654
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for i in arr {\n        if i < 0 {\n      \
    \      if i % 10 != 0 {\n                count += 1\n            }\n        }\
    \ else {\n            if i % 10 != 0 {\n                count += 1\n         \
    \   }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpq5p9eplk/tmpq5p9eplk.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f499a59bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f499a292b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f499a292988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f499a2917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq5p9eplk                        0x00005646d383b5a0 <unavailable> + 5536

    5    libc.so.6                          0x00007f4999d88460 __libc_start_main +
    245

    6    tmpq5p9eplk                        0x00005646d383b169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659817649
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter {\n        $0.digits.reduce(0, +) > 0\n    }.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp2b2gx2_m.swift:11:12: error: value of type 'Int' has no member\
    \ 'digits'\n        $0.digits.reduce(0, +) > 0\n        ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817654
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0 > 0 }.count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpr2y2ewn7/tmpr2y2ewn7.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f6653426c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f665311db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f665311d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f665311c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr2y2ewn7                        0x0000563b2671587a <unavailable> + 6266

    5    libc.so.6                          0x00007f6652c13460 __libc_start_main +
    245

    6    tmpr2y2ewn7                        0x0000563b26715089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1659817654
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({ $0.digits.reduce(0, combine: +) > 0 }).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp0cyo99jo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0.digits.reduce(0, combine: +) > 0 }).count\n\
    \                        ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817649
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({ $0 != 0 }).filter({ $0 < 0 ? $0.digits.reduce(0,\
    \ combine: +) < 0 : $0.digits.reduce(0, combine: +) > 0 }).count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpbdlpcmw4.swift:10:57: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0 != 0 }).filter({ $0 < 0 ? $0.digits.reduce(0,\
    \ combine: +) < 0 : $0.digits.reduce(0, combine: +) > 0 }).count\n           \
    \                                          ~~ ^~~~~~\n/tmp/tmpbdlpcmw4.swift:10:95:\
    \ error: value of type 'Int' has no member 'digits'\n    return arr.filter({ $0\
    \ != 0 }).filter({ $0 < 0 ? $0.digits.reduce(0, combine: +) < 0 : $0.digits.reduce(0,\
    \ combine: +) > 0 }).count\n                                                 \
    \                                          ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817652
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.signedDigits().reduce(0, +) > 0 }.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_uc1wbwb.swift:10:28: error: value of type 'Int' has no member\
    \ 'signedDigits'\n    return arr.filter { $0.signedDigits().reduce(0, +) > 0 }.count\n\
    \                        ~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659817654
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({ $0 < 0 ? $0.digits.reduce(0, +) < 0 : $0.digits.reduce(0,\
    \ +) > 0 }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpjij4n0r4.swift:10:37: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0 < 0 ? $0.digits.reduce(0, +) < 0 : $0.digits.reduce(0,\
    \ +) > 0 }).count\n                                 ~~ ^~~~~~\n/tmp/tmpjij4n0r4.swift:10:66:\
    \ error: value of type 'Int' has no member 'digits'\n    return arr.filter({ $0\
    \ < 0 ? $0.digits.reduce(0, +) < 0 : $0.digits.reduce(0, +) > 0 }).count\n   \
    \                                                           ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817654
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({$0.digits.reduce(0, combine: +) > 0}).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp5nufilo3.swift:10:27: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({$0.digits.reduce(0, combine: +) > 0}).count\n\
    \                       ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({ $0 != 0 && $0.digits.reduce(0, combine: +)\
    \ > 0 }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpgfxv4ywg.swift:10:39: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0 != 0 && $0.digits.reduce(0, combine: +)\
    \ > 0 }).count\n                                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817654
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for i in arr {\n        if i < 0 {\n      \
    \      if i % 10 != 0 {\n                count += 1\n            }\n        }\
    \ else {\n            if i % 10 != 0 {\n                count += 1\n         \
    \   }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpq5p9eplk/tmpq5p9eplk.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f499a59bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f499a292b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f499a292988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f499a2917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq5p9eplk                        0x00005646d383b5a0 <unavailable> + 5536

    5    libc.so.6                          0x00007f4999d88460 __libc_start_main +
    245

    6    tmpq5p9eplk                        0x00005646d383b169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659817649
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({ $0.digits.reduce(0, +) > 0 }).count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprcpl4fsu.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0.digits.reduce(0, +) > 0 }).count\n    \
    \                    ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817653
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.reduce(0) { (acc, num) in\n        return acc + (sum_digits(num:\
    \ num) > 0 ? 1 : 0)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpi6ms_hie.swift:11:23: error: cannot find 'sum_digits' in scope\n\
    \        return acc + (sum_digits(num: num) > 0 ? 1 : 0)\n                   \
    \   ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659817655
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({ $0.digits.reduce(0, combine: +) > 0 }).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp0cyo99jo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0.digits.reduce(0, combine: +) > 0 }).count\n\
    \                        ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817649
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({$0.sum_digits() > 0}).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp492iirdo.swift:10:27: error: value of type 'Int' has no member\
    \ 'sum_digits'\n    return arr.filter({$0.sum_digits() > 0}).count\n         \
    \              ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({ $0.digits.reduce(0, combine: +) > 0 }).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp0cyo99jo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0.digits.reduce(0, combine: +) > 0 }).count\n\
    \                        ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817649
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmppx98kcbz/tmppx98kcbz.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f4cdebb5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f4cde8acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f4cde8ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f4cde8ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppx98kcbz                        0x000055ed9871f485 <unavailable> + 5253

    5    libc.so.6                          0x00007f4cde3a2460 __libc_start_main +
    245

    6    tmppx98kcbz                        0x000055ed9871ef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659817655
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        if sum_digits(num)\
    \ > 0 {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpgm6suv7a.swift:12:12: error: cannot find 'sum_digits' in scope\n\
    \        if sum_digits(num) > 0 {\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({ (num) -> Bool in\n        return num.digits.reduce(0,\
    \ combine: +) > 0\n    }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpol2m5d86.swift:11:20: error: value of type 'Int' has no member\
    \ 'digits'\n        return num.digits.reduce(0, combine: +) > 0\n            \
    \   ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817655
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({ $0 != 0 }).filter({ $0.digits.reduce(0, combine:\
    \ +) > 0 }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpdi76zqws.swift:10:48: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0 != 0 }).filter({ $0.digits.reduce(0, combine:\
    \ +) > 0 }).count\n                                            ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817655
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        if sum_digits(num)\
    \ > 0 {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpgm6suv7a.swift:12:12: error: cannot find 'sum_digits' in scope\n\
    \        if sum_digits(num) > 0 {\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.reduce(0) {\n        $0 + ($1 > 0 ? 1 : 0)\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpiy7vdtdx/tmpiy7vdtdx.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007fc9c2409c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007fc9c2100b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007fc9c2100988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007fc9c20ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiy7vdtdx                        0x0000563fd7bef7da <unavailable> + 6106

    5    libc.so.6                          0x00007fc9c1bf6460 __libc_start_main +
    245

    6    tmpiy7vdtdx                        0x0000563fd7beefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659817655
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({$0 != 0}).filter({abs($0) < 10}).count\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmppg8eir3c/tmppg8eir3c.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007fc09e6b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007fc09e3a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007fc09e3a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007fc09e3a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppg8eir3c                        0x0000561b0b7c65b0 <unavailable> + 5552

    5    libc.so.6                          0x00007fc09de9d460 __libc_start_main +
    245

    6    tmppg8eir3c                        0x0000561b0b7c6179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1659817656
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        if sum_digits(num)\
    \ > 0 {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpgm6suv7a.swift:12:12: error: cannot find 'sum_digits' in scope\n\
    \        if sum_digits(num) > 0 {\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        if sum_digits(num)\
    \ > 0 {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpgm6suv7a.swift:12:12: error: cannot find 'sum_digits' in scope\n\
    \        if sum_digits(num) > 0 {\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({$0.sum_digits() > 0}).count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp492iirdo.swift:10:27: error: value of type 'Int' has no member\
    \ 'sum_digits'\n    return arr.filter({$0.sum_digits() > 0}).count\n         \
    \              ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0 != 0 }.filter { $0.digits.reduce(0, +)\
    \ > 0 }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpr308cpgq.swift:10:47: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0 != 0 }.filter { $0.digits.reduce(0, +)\
    \ > 0 }.count\n                                           ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817656
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.reduce(0) {\n        $0 + ($1.digits.reduce(0, combine:\
    \ +) > 0 ? 1 : 0)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp_puss8p2.swift:11:18: error: value of type 'Int' has no member\
    \ 'digits'\n        $0 + ($1.digits.reduce(0, combine: +) > 0 ? 1 : 0)\n     \
    \         ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817680
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for i in arr {\n        if i < 0 {\n      \
    \      count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpewatt0m0/tmpewatt0m0.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007fcfb0d5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007fcfb0a54b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007fcfb0a54988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007fcfb0a537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpewatt0m0                        0x000056463634c510 <unavailable> + 5392

    5    libc.so.6                          0x00007fcfb054a460 __libc_start_main +
    245

    6    tmpewatt0m0                        0x000056463634c0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659817656
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { (num) -> Bool in\n        return num.digits.reduce(0,\
    \ +) > 0\n    }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp3lxpu1b2.swift:11:20: error: value of type 'Int' has no member\
    \ 'digits'\n        return num.digits.reduce(0, +) > 0\n               ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817652
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        if sum_digits(num)\
    \ > 0 {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpgm6suv7a.swift:12:12: error: cannot find 'sum_digits' in scope\n\
    \        if sum_digits(num) > 0 {\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.sum_digits() > 0 }.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmphj6mkcqo.swift:10:28: error: value of type 'Int' has no member\
    \ 'sum_digits'\n    return arr.filter { $0.sum_digits() > 0 }.count\n        \
    \                ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659817651
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({$0.digits.reduce(0, combine: +) > 0}).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp5nufilo3.swift:10:27: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({$0.digits.reduce(0, combine: +) > 0}).count\n\
    \                       ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({ $0 != 0 }).filter({ $0 < 0 ? $0 % 10 != 0\
    \ : $0 % 10 != -10 }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpyghldeab/tmpyghldeab.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007fbdd6cffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007fbdd69f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007fbdd69f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007fbdd69f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyghldeab                        0x000055e92c81e560 <unavailable> + 5472

    5    libc.so.6                          0x00007fbdd64ec460 __libc_start_main +
    245

    6    tmpyghldeab                        0x000055e92c81e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659817657
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({\n        var sum = 0\n        var num = $0\n\
    \        while num != 0 {\n            sum += num % 10\n            num /= 10\n\
    \        }\n        return sum > 0\n    }).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpt4e62h53/tmpt4e62h53.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007fc6c3289c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007fc6c2f80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007fc6c2f80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007fc6c2f7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt4e62h53                        0x0000563305b1691a <unavailable> + 6426

    5    libc.so.6                          0x00007fc6c2a76460 __libc_start_main +
    245

    6    tmpt4e62h53                        0x0000563305b16129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659817657
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.sum_digits() > 0 }.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmphj6mkcqo.swift:10:28: error: value of type 'Int' has no member\
    \ 'sum_digits'\n    return arr.filter { $0.sum_digits() > 0 }.count\n        \
    \                ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659817651
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({ $0.digits.reduce(0, +) > 0 }).count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmprcpl4fsu.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0.digits.reduce(0, +) > 0 }).count\n    \
    \                    ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817653
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { (x) -> Bool in\n        return x.digits.reduce(0,\
    \ combine: +) > 0\n    }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmph8wmw28g.swift:11:18: error: value of type 'Int' has no member\
    \ 'digits'\n        return x.digits.reduce(0, combine: +) > 0\n              \
    \ ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817657
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({$0.digits.reduce(0, combine: +) > 0}).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp5nufilo3.swift:10:27: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({$0.digits.reduce(0, combine: +) > 0}).count\n\
    \                       ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for i in arr {\n        if i < 0 {\n      \
    \      if i % 10 < 0 {\n                count += 1\n            }\n        } else\
    \ {\n            if i % 10 > 0 {\n                count += 1\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpq1hvdd5k/tmpq1hvdd5k.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f7cb461ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f7cb4311b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f7cb4311988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f7cb43107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq1hvdd5k                        0x00005646b0c385a0 <unavailable> + 5536

    5    libc.so.6                          0x00007f7cb3e07460 __libc_start_main +
    245

    6    tmpq1hvdd5k                        0x00005646b0c38169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659817651
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, combine: +) > 0 }.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpuxwno89p.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, combine: +) > 0 }.count\n\
    \                        ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817658
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, combine: +) > 0 }.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpuxwno89p.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, combine: +) > 0 }.count\n\
    \                        ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817658
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0 != 0 }.reduce(0) { $0 + ($1 > 0 ? $1 :\
    \ -$1) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as\
    \ [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpnws5gvdp/tmpnws5gvdp.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007fab4c272c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007fab4bf69b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007fab4bf69988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007fab4bf687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnws5gvdp                        0x000055b1480294e0 <unavailable> + 5344

    5    libc.so.6                          0x00007fab4ba5f460 __libc_start_main +
    245

    6    tmpnws5gvdp                        0x000055b1480290a9 <unavailable> + 4265

    '
  stdout: ''
  timestamp: 1659817658
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for i in arr {\n        if i > 0 {\n      \
    \      count += 1\n        } else if i < 0 {\n            count += 1\n       \
    \ }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmpan_xraze/tmpan_xraze.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f5760a7ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f5760771b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f5760771988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f57607707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpan_xraze                        0x000055cd5e1a3510 <unavailable> + 5392

    5    libc.so.6                          0x00007f5760267460 __libc_start_main +
    245

    6    tmpan_xraze                        0x000055cd5e1a30d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1659817659
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        if num < 0 {\n  \
    \          if num % 10 < 0 {\n                count += 1\n            }\n    \
    \    } else {\n            if num % 10 > 0 {\n                count += 1\n   \
    \         }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpv0h_cisj/tmpv0h_cisj.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f1aacc40c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f1aac937b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f1aac937988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f1aac9367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv0h_cisj                        0x000055aebf7035a0 <unavailable> + 5536

    5    libc.so.6                          0x00007f1aac42d460 __libc_start_main +
    245

    6    tmpv0h_cisj                        0x000055aebf703169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659817650
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({$0.digits.reduce(0, +) > 0}).count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpa_6ntdhg.swift:10:27: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({$0.digits.reduce(0, +) > 0}).count\n      \
    \                 ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817659
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({$0.digits.reduce(0, +) > 0}).count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpa_6ntdhg.swift:10:27: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({$0.digits.reduce(0, +) > 0}).count\n      \
    \                 ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817659
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({$0.digits.reduce(0, combine: +) > 0}).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp5nufilo3.swift:10:27: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({$0.digits.reduce(0, combine: +) > 0}).count\n\
    \                       ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { (n) -> Bool in\n        var n = n\n      \
    \  var sum = 0\n        while n != 0 {\n            sum += abs(n % 10)\n     \
    \       n /= 10\n        }\n        return sum > 0\n    }.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpuvyhxlr7/tmpuvyhxlr7.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007fdece09ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007fdecdd91b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007fdecdd91988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007fdecdd907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuvyhxlr7                        0x000055d9bdd8c640 <unavailable> + 5696

    5    libc.so.6                          0x00007fdecd887460 __libc_start_main +
    245

    6    tmpuvyhxlr7                        0x000055d9bdd8c209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659817659
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.reduce(0) { (acc, num) in\n        let sum = abs(num).digits.reduce(0,\
    \ +)\n        return sum > 0 ? acc + 1 : acc\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp80_01t56.swift:11:28: error: value of type 'Int' has no member\
    \ 'digits'\n        let sum = abs(num).digits.reduce(0, +)\n                 \
    \ ~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817660
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({ $0 != 0 }).filter({ $0.digits.reduce(0, combine:\
    \ +) > 0 }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpdi76zqws.swift:10:48: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0 != 0 }).filter({ $0.digits.reduce(0, combine:\
    \ +) > 0 }).count\n                                            ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817655
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        var sum = 0\n   \
    \     var n = num\n        if n < 0 {\n            n = -n\n        }\n       \
    \ while n > 0 {\n            sum += n % 10\n            n /= 10\n        }\n \
    \       if sum > 0 {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp7m8hf86q/tmp7m8hf86q.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007ffba59b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007ffba56a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007ffba56a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007ffba56a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7m8hf86q                        0x000055684c38c5a0 <unavailable> + 5536

    5    libc.so.6                          0x00007ffba519f460 __libc_start_main +
    245

    6    tmp7m8hf86q                        0x000055684c38c169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659817652
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for i in arr {\n        if i < 0 {\n      \
    \      if i % 10 != 0 {\n                count += 1\n            }\n        }\
    \ else {\n            if i % 10 != 0 {\n                count += 1\n         \
    \   }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpq5p9eplk/tmpq5p9eplk.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f499a59bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f499a292b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f499a292988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f499a2917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq5p9eplk                        0x00005646d383b5a0 <unavailable> + 5536

    5    libc.so.6                          0x00007f4999d88460 __libc_start_main +
    245

    6    tmpq5p9eplk                        0x00005646d383b169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659817649
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({ $0.digits.reduce(0, combine: +) > 0 }).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp0cyo99jo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0.digits.reduce(0, combine: +) > 0 }).count\n\
    \                        ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817649
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({$0.digits.reduce(0, combine: +) > 0}).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp5nufilo3.swift:10:27: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({$0.digits.reduce(0, combine: +) > 0}).count\n\
    \                       ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({ (num) -> Bool in\n        var sum = 0\n  \
    \      var num = num\n        if num < 0 {\n            num = -num\n        }\n\
    \        while num > 0 {\n            sum += num % 10\n            num /= 10\n\
    \        }\n        return sum > 0\n    }).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpcls21gbj/tmpcls21gbj.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f6e6ae2cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f6e6ab23b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f6e6ab23988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f6e6ab227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcls21gbj                        0x000055d82a950560 <unavailable> + 5472

    5    libc.so.6                          0x00007f6e6a619460 __libc_start_main +
    245

    6    tmpcls21gbj                        0x000055d82a950129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659817660
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmppx98kcbz/tmppx98kcbz.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f4cdebb5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f4cde8acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f4cde8ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f4cde8ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppx98kcbz                        0x000055ed9871f485 <unavailable> + 5253

    5    libc.so.6                          0x00007f4cde3a2460 __libc_start_main +
    245

    6    tmppx98kcbz                        0x000055ed9871ef69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659817655
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter {\n        $0.digits.reduce(0, +) > 0\n    }.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp2b2gx2_m.swift:11:12: error: value of type 'Int' has no member\
    \ 'digits'\n        $0.digits.reduce(0, +) > 0\n        ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817654
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter {\n        var sum = 0\n        var n = $0\n\
    \        if n < 0 {\n            n = -n\n        }\n        while n > 0 {\n  \
    \          sum += n % 10\n            n /= 10\n        }\n        return sum >\
    \ 0\n    }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmprhw7d81c/tmprhw7d81c.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f71a4eb4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f71a4babb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f71a4bab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f71a4baa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprhw7d81c                        0x000055fdd70d4560 <unavailable> + 5472

    5    libc.so.6                          0x00007f71a46a1460 __libc_start_main +
    245

    6    tmprhw7d81c                        0x000055fdd70d4129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659817661
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        if sum_digits(num)\
    \ > 0 {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpgm6suv7a.swift:12:12: error: cannot find 'sum_digits' in scope\n\
    \        if sum_digits(num) > 0 {\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for i in arr {\n        if i < 0 {\n      \
    \      if i % 10 < 0 {\n                count += 1\n            }\n        } else\
    \ {\n            if i % 10 > 0 {\n                count += 1\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpq1hvdd5k/tmpq1hvdd5k.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f7cb461ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f7cb4311b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f7cb4311988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f7cb43107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq1hvdd5k                        0x00005646b0c385a0 <unavailable> + 5536

    5    libc.so.6                          0x00007f7cb3e07460 __libc_start_main +
    245

    6    tmpq1hvdd5k                        0x00005646b0c38169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659817651
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({\n        var sum = 0\n        var num = $0\n\
    \        while num != 0 {\n            sum += abs(num % 10)\n            num /=\
    \ 10\n        }\n        return sum > 0\n    }).count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpzyachcff/tmpzyachcff.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f8ee8b73c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f8ee886ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f8ee886a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f8ee88697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzyachcff                        0x00005647dea2d640 <unavailable> + 5696

    5    libc.so.6                          0x00007f8ee8360460 __libc_start_main +
    245

    6    tmpzyachcff                        0x00005647dea2d209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659817661
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({$0.digits.reduce(0, combine: +) > 0}).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp5nufilo3.swift:10:27: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({$0.digits.reduce(0, combine: +) > 0}).count\n\
    \                       ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({$0.digits.reduce(0, combine: +) > 0}).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp5nufilo3.swift:10:27: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({$0.digits.reduce(0, combine: +) > 0}).count\n\
    \                       ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({ $0 != 0 && $0.digits.reduce(0, combine: +)\
    \ > 0 }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpgfxv4ywg.swift:10:39: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0 != 0 && $0.digits.reduce(0, combine: +)\
    \ > 0 }).count\n                                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817654
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({ $0.digits.reduce(0, combine: +) > 0 }).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp0cyo99jo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0.digits.reduce(0, combine: +) > 0 }).count\n\
    \                        ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817649
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        if num < 0 {\n  \
    \          if num % 10 < 0 {\n                count += 1\n            }\n    \
    \    } else {\n            if num % 10 > 0 {\n                count += 1\n   \
    \         }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpv0h_cisj/tmpv0h_cisj.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f1aacc40c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f1aac937b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f1aac937988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f1aac9367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv0h_cisj                        0x000055aebf7035a0 <unavailable> + 5536

    5    libc.so.6                          0x00007f1aac42d460 __libc_start_main +
    245

    6    tmpv0h_cisj                        0x000055aebf703169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659817650
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({\n        var sum = 0\n        var n = $0\n\
    \        if n < 0 {\n            n = -n\n        }\n        while n > 0 {\n  \
    \          sum += n % 10\n            n /= 10\n        }\n        return sum >\
    \ 0\n    }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: Exception
  stderr: 'tmp457j4m7o/tmp457j4m7o.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007fad6894fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007fad68646b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007fad68646988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007fad686457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp457j4m7o                        0x000055f5ab614560 <unavailable> + 5472

    5    libc.so.6                          0x00007fad6813c460 __libc_start_main +
    245

    6    tmp457j4m7o                        0x000055f5ab614129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659817653
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({ $0 != 0 }).filter({ $0.digits.reduce(0, combine:\
    \ +) > 0 }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpdi76zqws.swift:10:48: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0 != 0 }).filter({ $0.digits.reduce(0, combine:\
    \ +) > 0 }).count\n                                            ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817655
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({ $0.digits.reduce(0, combine: +) > 0 }).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp0cyo99jo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0.digits.reduce(0, combine: +) > 0 }).count\n\
    \                        ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817649
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({$0.digits.reduce(0, combine: +) > 0}).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp5nufilo3.swift:10:27: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({$0.digits.reduce(0, combine: +) > 0}).count\n\
    \                       ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for i in arr {\n        if i < 0 {\n      \
    \      if i % 10 > 0 {\n                count += 1\n            }\n        } else\
    \ {\n            if i % 10 < 0 {\n                count += 1\n            }\n\
    \        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0])\
    \ == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmp3yiqr926/tmp3yiqr926.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f96aee0fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f96aeb06b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f96aeb06988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f96aeb057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3yiqr926                        0x000056190cdaf685 <unavailable> + 5765

    5    libc.so.6                          0x00007f96ae5fc460 __libc_start_main +
    245

    6    tmp3yiqr926                        0x000056190cdaf169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659817662
- exit_code: -4
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    var count = 0\n    for num in arr {\n        if num < 0 {\n  \
    \          if num % 10 < 0 {\n                count += 1\n            }\n    \
    \    } else {\n            if num % 10 > 0 {\n                count += 1\n   \
    \         }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr: [-1,\
    \ -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: Exception
  stderr: 'tmpv0h_cisj/tmpv0h_cisj.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00007f1aacc40c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00007f1aac937b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00007f1aac937988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00007f1aac9367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv0h_cisj                        0x000055aebf7035a0 <unavailable> + 5536

    5    libc.so.6                          0x00007f1aac42d460 __libc_start_main +
    245

    6    tmpv0h_cisj                        0x000055aebf703169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659817650
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({$0.digits.reduce(0, +) > 0}).count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpa_6ntdhg.swift:10:27: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({$0.digits.reduce(0, +) > 0}).count\n      \
    \                 ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817659
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({$0.digits.reduce(0, combine: +) > 0}).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp5nufilo3.swift:10:27: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({$0.digits.reduce(0, combine: +) > 0}).count\n\
    \                       ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter {\n        $0.digits.reduce(0, +) > 0\n    }.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp2b2gx2_m.swift:11:12: error: value of type 'Int' has no member\
    \ 'digits'\n        $0.digits.reduce(0, +) > 0\n        ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817654
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({ (num) -> Bool in\n        return num.digits.reduce(0,\
    \ combine: +) > 0\n    }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(count_nums(arr:\
    \ [] as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpol2m5d86.swift:11:20: error: value of type 'Int' has no member\
    \ 'digits'\n        return num.digits.reduce(0, combine: +) > 0\n            \
    \   ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817655
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({$0.digits.reduce(0, combine: +) > 0}).count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp5nufilo3.swift:10:27: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({$0.digits.reduce(0, combine: +) > 0}).count\n\
    \                       ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.signedDigits.reduce(0, combine: +) > 0\
    \ }.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(count_nums(arr: [] as\
    \ [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpva57uz2e.swift:10:28: error: value of type 'Int' has no member\
    \ 'signedDigits'\n    return arr.filter { $0.signedDigits.reduce(0, combine: +)\
    \ > 0 }.count\n                        ~~ ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659817662
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.sum_digits() > 0 }.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmphj6mkcqo.swift:10:28: error: value of type 'Int' has no member\
    \ 'sum_digits'\n    return arr.filter { $0.sum_digits() > 0 }.count\n        \
    \                ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659817651
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter({ $0 != 0 }).filter({ $0.digits.reduce(0, combine:\
    \ +) > 0 }).count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(count_nums(arr: []\
    \ as [Int]) == 0)\nassert(count_nums(arr: [-1, -2, 0]) == 0)\nassert(count_nums(arr:\
    \ [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr: [1, 6, 9, -6, 0, 1, 5])\
    \ == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1]) == 4)\nassert(count_nums(arr:\
    \ [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr: [0, 1]) == 1)\nassert(count_nums(arr:\
    \ [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmpdi76zqws.swift:10:48: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter({ $0 != 0 }).filter({ $0.digits.reduce(0, combine:\
    \ +) > 0 }).count\n                                            ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817655
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
- exit_code: 1
  program: "\n/// Write a function count_nums which takes an array of integers and\
    \ returns\n/// the number of elements which has a sum of digits > 0.\n/// If a\
    \ number is negative, then its first signed digit will be negative:\n/// e.g.\
    \ -123 has signed digits -1, 2, and 3.\n/// >>> count_nums([]) == 0\n/// >>> count_nums([-1,\
    \ 11, -11]) == 1\n/// >>> count_nums([1, 1, 2]) == 3\nfunc count_nums(arr: [Int])\
    \ -> Int {\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(count_nums(arr: [] as [Int]) == 0)\nassert(count_nums(arr:\
    \ [-1, -2, 0]) == 0)\nassert(count_nums(arr: [1, 1, 2, -2, 3, 4, 5]) == 6)\nassert(count_nums(arr:\
    \ [1, 6, 9, -6, 0, 1, 5]) == 5)\nassert(count_nums(arr: [1, 100, 98, -7, 1, -1])\
    \ == 4)\nassert(count_nums(arr: [12, 23, 34, -45, -56, 0]) == 5)\nassert(count_nums(arr:\
    \ [0, 1]) == 1)\nassert(count_nums(arr: [1]) == 1)"
  status: SyntaxError
  stderr: "/tmp/tmp523g2ldo.swift:10:28: error: value of type 'Int' has no member\
    \ 'digits'\n    return arr.filter { $0.digits.reduce(0, +) > 0 }.count\n     \
    \                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659817648
