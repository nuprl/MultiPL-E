language: swift
name: HumanEval_104_unique_digits
results:
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter { $0.digits.allSatisfy\
    \ { $0.isOdd } }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp4wktyt1z.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if i.description.contains(\"2\") || i.description.contains(\"\
    4\") || i.description.contains(\"6\") || i.description.contains(\"8\") {\n   \
    \         continue\n        } else {\n            result.append(i)\n        }\n\
    \    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpyfh6plih/tmpyfh6plih.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fac2efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fabfe6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8fabfe6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8fabfe57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyfh6plih                        0x000055bce13ff984 <unavailable> + 6532

    5    libc.so.6                          0x00002b8fac4db460 __libc_start_main +
    245

    6    tmpyfh6plih                        0x000055bce13ff479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter { $0.digits.allSatisfy\
    \ { $0.isOdd } }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp4wktyt1z.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter { $0.digits.allSatisfy\
    \ { $0.isOdd } }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp4wktyt1z.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n  \
    \      }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpob8k53hw.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5notrgli.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter { $0.digits.allSatisfy\
    \ { $0.isOdd } }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp4wktyt1z.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 0
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if i.description.contains(\"2\") || i.description.contains(\"\
    4\") || i.description.contains(\"6\") || i.description.contains(\"8\") || i.description.contains(\"\
    0\") {\n            continue\n        } else {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5notrgli.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for num in x {\n        if num.description.contains(\"2\") || num.description.contains(\"\
    4\") || num.description.contains(\"6\") || num.description.contains(\"8\") ||\
    \ num.description.contains(\"0\") {\n            continue\n        } else {\n\
    \            result.append(num)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpmfuygpek/tmpmfuygpek.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae7080a7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae707d9eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae707d9e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae707d9d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmfuygpek                        0x000056119f1357dc <unavailable> + 6108

    5    libc.so.6                          0x00002ae708293460 __libc_start_main +
    245

    6    tmpmfuygpek                        0x000056119f1353d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5notrgli.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n  \
    \      }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpob8k53hw.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var y: [Int] = []\n    for\
    \ i in x {\n        if i.digits.filter({ $0 % 2 == 0 }).count == 0 {\n       \
    \     y.append(i)\n        }\n    }\n    return y.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpyxcl20c1.swift:13:14: error: value of type 'Int' has no member\
    \ 'digits'\n        if i.digits.filter({ $0 % 2 == 0 }).count == 0 {\n       \
    \    ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824340
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5notrgli.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ number in x {\n        if !has_even_digit(number) {\n            result.append(number)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp_kad6zhu.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(number) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n  \
    \      }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpob8k53hw.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5notrgli.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for number in x {\n        if !has_even_digit(number) {\n            result.append(number)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmprofcs13k.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(number) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n  \
    \      }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpob8k53hw.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n  \
    \      }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpob8k53hw.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5notrgli.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5notrgli.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n  \
    \      }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpob8k53hw.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter { $0.digits.allSatisfy\
    \ { $0.isOdd } }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp4wktyt1z.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter { $0.digits.allSatisfy\
    \ { $0.isOdd } }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp4wktyt1z.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for num in x {\n        if !has_even_digit(num) {\n            result.append(num)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpppv7mn4z.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ number in x {\n        if !has_even_digit(number) {\n            result.append(number)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp_kad6zhu.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(number) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter { $0.digits.allSatisfy\
    \ { $0.isOdd } }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp4wktyt1z.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n  \
    \      }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpob8k53hw.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if !is_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpmylvc091.swift:13:13: error: cannot find 'is_even_digit' in scope\n\
    \        if !is_even_digit(i) {\n            ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5notrgli.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter { $0.digits.allSatisfy\
    \ { $0.isOdd } }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp4wktyt1z.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        var even = false\n        var num = i\n        while num >\
    \ 0 {\n            if num % 2 == 0 {\n                even = true\n          \
    \      break\n            }\n            num /= 10\n        }\n        if !even\
    \ {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpmrp2atc9/tmpmrp2atc9.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc46a95c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc4678cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc4678c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc4678b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmrp2atc9                        0x0000559b7241f67c <unavailable> + 5756

    5    libc.so.6                          0x00002adc46c81460 __libc_start_main +
    245

    6    tmpmrp2atc9                        0x0000559b7241f279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter({$0.digits().filter({$0\
    \ % 2 == 0}).count == 0}).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpnxfx1jc7.swift:11:25: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter({$0.digits().filter({$0 % 2 == 0}).count == 0}).sorted()\n\
    \                     ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n  \
    \      }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpob8k53hw.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n  \
    \      }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpob8k53hw.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter { $0.hasUniqueDigits()\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique_digits(x: [15, 33, 1422,\
    \ 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as\
    \ [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x:\
    \ [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpv28h4b3v.swift:11:26: error: value of type 'Int' has no member\
    \ 'hasUniqueDigits'\n    return x.filter { $0.hasUniqueDigits() }\n          \
    \            ~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5notrgli.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter { $0.digits.allSatisfy\
    \ { $0.isOdd } }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp4wktyt1z.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n  \
    \      }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpob8k53hw.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter {\n       \
    \ $0.description.characters.filter {\n            $0 % 2 == 0\n        }.count\
    \ == 0\n    }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp2z4_zjr4.swift:13:13: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'Int'\n            $0 % 2 == 0\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824340
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter { $0.digits.allSatisfy\
    \ { $0.isOdd } }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp4wktyt1z.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5notrgli.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5notrgli.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n  \
    \      }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpob8k53hw.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n  \
    \      }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpob8k53hw.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if i.has_unique_digits() {\n            result.append(i)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp7qhp5mx5.swift:13:14: error: value of type 'Int' has no member\
    \ 'has_unique_digits'\n        if i.has_unique_digits() {\n           ~ ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        var has_even = false\n        var num = i\n        while num\
    \ > 0 {\n            if num % 2 == 0 {\n                has_even = true\n    \
    \            break\n            }\n            num /= 10\n        }\n        if\
    \ !has_even {\n            result.append(i)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmp_ca6inxo/tmp_ca6inxo.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8d28fdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8d25f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8d25f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8d25f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_ca6inxo                        0x000055d2b5eba67c <unavailable> + 5756

    5    libc.so.6                          0x00002ae8d2ae9460 __libc_start_main +
    245

    6    tmp_ca6inxo                        0x000055d2b5eba279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ num in x {\n        if !has_even_digit(num) {\n            result.append(num)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp81tkm33f.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n  \
    \      }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpob8k53hw.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        var flag = true\n        var j = i\n        while j > 0 {\n\
    \            if j % 2 == 0 {\n                flag = false\n                break\n\
    \            }\n            j /= 10\n        }\n        if flag {\n          \
    \  result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpwzuu4hjh/tmpwzuu4hjh.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb886a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb883a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb883a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb8839f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwzuu4hjh                        0x000055a7d0dbc67c <unavailable> + 5756

    5    libc.so.6                          0x00002abb88895460 __libc_start_main +
    245

    6    tmpwzuu4hjh                        0x000055a7d0dbc279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if i.description.rangeOfCharacter(from: CharacterSet(charactersIn:\
    \ \"02468\")) == nil {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp4gkqu7kp.swift:13:49: error: cannot find 'CharacterSet' in scope\n\
    \        if i.description.rangeOfCharacter(from: CharacterSet(charactersIn: \"\
    02468\")) == nil {\n                                                ^~~~~~~~~~~~\n\
    /tmp/tmp4gkqu7kp.swift:13:26: error: value of type 'String' has no member 'rangeOfCharacter'\n\
    \        if i.description.rangeOfCharacter(from: CharacterSet(charactersIn: \"\
    02468\")) == nil {\n           ~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter { $0.digits.allSatisfy\
    \ { $0.isOdd } }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp4wktyt1z.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n  \
    \      }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpob8k53hw.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n  \
    \      }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpob8k53hw.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpezfdr38a.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n  \
    \      }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpob8k53hw.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n  \
    \      }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpob8k53hw.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n  \
    \      }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpob8k53hw.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter { $0.hasUniqueDigits()\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique_digits(x: [15, 33, 1422,\
    \ 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as\
    \ [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x:\
    \ [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpv28h4b3v.swift:11:26: error: value of type 'Int' has no member\
    \ 'hasUniqueDigits'\n    return x.filter { $0.hasUniqueDigits() }\n          \
    \            ~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 0
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if i.description.contains(\"2\") || i.description.contains(\"\
    4\") || i.description.contains(\"6\") || i.description.contains(\"8\") || i.description.contains(\"\
    0\") {\n            continue\n        } else {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824339
- exit_code: 0
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if i.description.contains(\"2\") || i.description.contains(\"\
    4\") || i.description.contains(\"6\") || i.description.contains(\"8\") || i.description.contains(\"\
    0\") {\n            continue\n        } else {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter { $0.hasUniqueDigits()\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique_digits(x: [15, 33, 1422,\
    \ 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as\
    \ [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x:\
    \ [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpv28h4b3v.swift:11:26: error: value of type 'Int' has no member\
    \ 'hasUniqueDigits'\n    return x.filter { $0.hasUniqueDigits() }\n          \
    \            ~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n  \
    \      }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpob8k53hw.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5notrgli.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n  \
    \      }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpob8k53hw.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n  \
    \      }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpob8k53hw.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter { $0.digits.allSatisfy\
    \ { $0.isOdd } }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp4wktyt1z.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5notrgli.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n  \
    \      }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpob8k53hw.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter { $0.digits.allSatisfy\
    \ { $0.isOdd } }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp4wktyt1z.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n  \
    \      }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpob8k53hw.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if i.description.contains(\"2\") || i.description.contains(\"\
    4\") || i.description.contains(\"6\") || i.description.contains(\"8\") {\n   \
    \         continue\n        } else {\n            result.append(i)\n        }\n\
    \    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpyfh6plih/tmpyfh6plih.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fac2efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fabfe6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8fabfe6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8fabfe57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyfh6plih                        0x000055bce13ff984 <unavailable> + 6532

    5    libc.so.6                          0x00002b8fac4db460 __libc_start_main +
    245

    6    tmpyfh6plih                        0x000055bce13ff479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter { $0.digits.allSatisfy\
    \ { $0.isOdd } }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp4wktyt1z.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5notrgli.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5notrgli.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5notrgli.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5notrgli.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5notrgli.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5notrgli.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5notrgli.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        var isEven = false\n        var num = i\n        while num\
    \ > 0 {\n            if num % 10 % 2 == 0 {\n                isEven = true\n \
    \               break\n            }\n            num /= 10\n        }\n     \
    \   if !isEven {\n            result.append(i)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpaehpmwxw/tmpaehpmwxw.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b326555dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3265254b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3265254988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b32652537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaehpmwxw                        0x000056251e5b667c <unavailable> + 5756

    5    libc.so.6                          0x00002b3265749460 __libc_start_main +
    245

    6    tmpaehpmwxw                        0x000056251e5b6279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for num in x {\n        if num.has_unique_digits() {\n            result.append(num)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp1oc6zci_.swift:13:16: error: value of type 'Int' has no member\
    \ 'has_unique_digits'\n        if num.has_unique_digits() {\n           ~~~ ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n  \
    \      }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpob8k53hw.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n  \
    \      }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpob8k53hw.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5notrgli.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5notrgli.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter { $0.digits.allSatisfy\
    \ { $0.isOdd } }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp4wktyt1z.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter { $0.digits.allSatisfy\
    \ { $0.isOdd } }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp4wktyt1z.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for num in x {\n        if !has_even_digit(num) {\n            result.append(num)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpppv7mn4z.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if i.has_unique_digits() {\n            result.append(i)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp7qhp5mx5.swift:13:14: error: value of type 'Int' has no member\
    \ 'has_unique_digits'\n        if i.has_unique_digits() {\n           ~ ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5notrgli.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n  \
    \      }\n    }\n    return result.sort()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpgzl8d6ye.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n/tmp/tmpgzl8d6ye.swift:17:19:\
    \ error: cannot convert return expression of type '()' to return type '[Int]'\n\
    \    return result.sort()\n           ~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n  \
    \      }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpob8k53hw.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5notrgli.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter { $0.digits.allSatisfy\
    \ { $0.isOdd } }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp4wktyt1z.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5notrgli.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if i.description.characters.filter({$0 % 2 == 0}).count ==\
    \ 0 {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp3zy__9pt.swift:13:45: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'Int'\n        if i.description.characters.filter({$0\
    \ % 2 == 0}).count == 0 {\n                                            ^\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5notrgli.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n  \
    \      }\n    }\n    return result.sort()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpgzl8d6ye.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n/tmp/tmpgzl8d6ye.swift:17:19:\
    \ error: cannot convert return expression of type '()' to return type '[Int]'\n\
    \    return result.sort()\n           ~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5notrgli.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter { $0.digits.allSatisfy\
    \ { $0.isOdd } }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp4wktyt1z.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n  \
    \      }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpob8k53hw.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5notrgli.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if i.description.filter({$0.isEven}).count == 0 {\n      \
    \      result.append(i)\n        }\n    }\n    return result.sorted()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp4e4mhs9x.swift:13:37: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isEven'\n        if i.description.filter({$0.isEven}).count\
    \ == 0 {\n                                 ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5notrgli.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 0
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        var hasEven = false\n        var num = i\n        while num\
    \ > 0 {\n            if num % 2 == 0 {\n                hasEven = true\n     \
    \           break\n            }\n            num /= 10\n        }\n        if\
    \ !hasEven {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if i.has_unique_digits() {\n            result.append(i)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp7qhp5mx5.swift:13:14: error: value of type 'Int' has no member\
    \ 'has_unique_digits'\n        if i.has_unique_digits() {\n           ~ ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n  \
    \      }\n    }\n    return result.sort()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpgzl8d6ye.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n/tmp/tmpgzl8d6ye.swift:17:19:\
    \ error: cannot convert return expression of type '()' to return type '[Int]'\n\
    \    return result.sort()\n           ~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ num in x {\n        if !has_even_digit(num) {\n            result.append(num)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp81tkm33f.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5notrgli.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ num in x {\n        if !has_even_digit(num) {\n            result.append(num)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp81tkm33f.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var y = [Int]()\n    for i\
    \ in x {\n        if !has_even_digit(i) {\n            y.append(i)\n        }\n\
    \    }\n    return y\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp8s_25hap.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if i.description.filter({$0.isEven()}).count == 0 {\n\
    \            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpja5vub6h.swift:13:37: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isEven'\n        if i.description.filter({$0.isEven()}).count\
    \ == 0 {\n                                 ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n  \
    \      }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpob8k53hw.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 0
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if i.description.contains(\"2\") || i.description.contains(\"\
    4\") || i.description.contains(\"6\") || i.description.contains(\"8\") || i.description.contains(\"\
    0\") {\n            continue\n        } else {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter { $0.digits.allSatisfy\
    \ { $0.isOdd } }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp4wktyt1z.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n  \
    \      }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpob8k53hw.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter({\n       \
    \ var n = $0\n        while n > 0 {\n            if n % 2 == 0 {\n           \
    \     return false\n            }\n            n /= 10\n        }\n        return\
    \ true\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpd54xtpop/tmpd54xtpop.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad14d50ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad14d205b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad14d205988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad14d2047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd54xtpop                        0x000055865567e52c <unavailable> + 5420

    5    libc.so.6                          0x00002ad14d6fa460 __libc_start_main +
    245

    6    tmpd54xtpop                        0x000055865567e129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n  \
    \      }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpob8k53hw.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5notrgli.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter { $0.digits.allSatisfy\
    \ { $0.isOdd } }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp4wktyt1z.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if i.hasUniqueDigits() {\n            result.append(i)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp3x9h4q_p.swift:13:14: error: value of type 'Int' has no member\
    \ 'hasUniqueDigits'\n        if i.hasUniqueDigits() {\n           ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        var isEven = false\n        var temp = i\n        while\
    \ temp > 0 {\n            if temp % 10 % 2 == 0 {\n                isEven = true\n\
    \                break\n            }\n            temp /= 10\n        }\n   \
    \     if !isEven {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmputlyg03l/tmputlyg03l.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c6c9f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c6c6e8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c6c6e8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c6c6e77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmputlyg03l                        0x000055799e52962c <unavailable> + 5676

    5    libc.so.6                          0x00002b9c6cbdd460 __libc_start_main +
    245

    6    tmputlyg03l                        0x000055799e529229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n  \
    \      }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpob8k53hw.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter { $0.digits.allSatisfy\
    \ { $0.isOdd } }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp4wktyt1z.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n  \
    \      }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpob8k53hw.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n  \
    \      }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpob8k53hw.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter { $0.digits.filter\
    \ { $0 % 2 == 0 }.isEmpty }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpmdln1mfz.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.filter { $0 % 2 == 0 }.isEmpty }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5notrgli.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter { $0.digits.allSatisfy\
    \ { $0.isOdd } }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp4wktyt1z.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ num in x {\n        if !has_even_digit(num) {\n            result.append(num)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp81tkm33f.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5notrgli.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n  \
    \      }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpob8k53hw.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n  \
    \      }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpob8k53hw.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n  \
    \      }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpob8k53hw.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5notrgli.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter {\n       \
    \ $0.description.characters.filter {\n            Int(String($0))! % 2 == 0\n\
    \        }.count == 0\n    }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp2nfoyuk0.swift:12:24: error: 'characters' is unavailable: Please\
    \ use String directly\n        $0.description.characters.filter {\n          \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        var hasEvenDigit = false\n        var num = i\n        while\
    \ num > 0 {\n            if num % 2 == 0 {\n                hasEvenDigit = true\n\
    \                break\n            }\n            num /= 10\n        }\n    \
    \    if !hasEvenDigit {\n            result.append(i)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(unique_digits(x: [15,\
    \ 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10])\
    \ == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\n\
    assert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpmq33zthv/tmpmq33zthv.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c8395bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c83652b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c83652988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c836517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmq33zthv                        0x0000556e4fb1567c <unavailable> + 5756

    5    libc.so.6                          0x00002b2c83b47460 __libc_start_main +
    245

    6    tmpmq33zthv                        0x0000556e4fb15279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5notrgli.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 0
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if i.description.contains(\"2\") || i.description.contains(\"\
    4\") || i.description.contains(\"6\") || i.description.contains(\"8\") || i.description.contains(\"\
    0\") {\n            continue\n        } else {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for num in x {\n        if !has_even_digit(num) {\n            result.append(num)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpppv7mn4z.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5notrgli.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter { $0.digits.allSatisfy\
    \ { $0.isOdd } }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp4wktyt1z.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter {\n       \
    \ $0.description.characters.filter {\n            Int(String($0))! % 2 == 0\n\
    \        }.count == 0\n    }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp2nfoyuk0.swift:12:24: error: 'characters' is unavailable: Please\
    \ use String directly\n        $0.description.characters.filter {\n          \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter { $0.digits.allSatisfy\
    \ { $0.isOdd } }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp4wktyt1z.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ num in x {\n        if !has_even_digit(num) {\n            result.append(num)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp81tkm33f.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpezfdr38a.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5notrgli.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n  \
    \      }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpob8k53hw.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n  \
    \      }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpob8k53hw.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5notrgli.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n  \
    \      }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpob8k53hw.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if i.hasUniqueDigits() {\n            result.append(i)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp3m2ahgkx.swift:13:14: error: value of type 'Int' has no member\
    \ 'hasUniqueDigits'\n        if i.hasUniqueDigits() {\n           ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ num in x {\n        if !has_even_digit(num) {\n            result.append(num)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp81tkm33f.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter { $0.digits.allSatisfy\
    \ { $0.isOdd } }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp4wktyt1z.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter { $0.digits.filter\
    \ { $0 % 2 == 0 }.isEmpty }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpmdln1mfz.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.filter { $0 % 2 == 0 }.isEmpty }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter {\n       \
    \ $0.description.filter { $0.isEven }.isEmpty\n    }.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpry3c_n0v.swift:12:36: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isEven'\n        $0.description.filter { $0.isEven\
    \ }.isEmpty\n                                ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for num in x {\n        if !has_even_digit(num) {\n            result.append(num)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpppv7mn4z.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n  \
    \      }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpob8k53hw.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5notrgli.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5notrgli.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter { $0.digits.filter\
    \ { $0 % 2 == 0 }.isEmpty }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpmdln1mfz.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.filter { $0 % 2 == 0 }.isEmpty }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5notrgli.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter { $0.hasUniqueDigits()\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique_digits(x: [15, 33, 1422,\
    \ 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as\
    \ [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x:\
    \ [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpv28h4b3v.swift:11:26: error: value of type 'Int' has no member\
    \ 'hasUniqueDigits'\n    return x.filter { $0.hasUniqueDigits() }\n          \
    \            ~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter { $0.digits.allSatisfy\
    \ { $0.isOdd } }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp4wktyt1z.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter { $0.digits.allSatisfy\
    \ { $0.isOdd } }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp4wktyt1z.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5notrgli.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n  \
    \      }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpob8k53hw.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ num in x {\n        if !has_even_digit(num) {\n            result.append(num)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp81tkm33f.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if i.hasUniqueDigits() {\n            result.append(i)\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp3m2ahgkx.swift:13:14: error: value of type 'Int' has no member\
    \ 'hasUniqueDigits'\n        if i.hasUniqueDigits() {\n           ~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5notrgli.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        var flag = true\n        var num = i\n        while num\
    \ > 0 {\n            if num % 2 == 0 {\n                flag = false\n       \
    \         break\n            }\n            num /= 10\n        }\n        if flag\
    \ {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpbj4xzyny/tmpbj4xzyny.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a61359c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a61050b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a61050988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a6104f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbj4xzyny                        0x00005631dbb6262c <unavailable> + 5676

    5    libc.so.6                          0x00002b5a61545460 __libc_start_main +
    245

    6    tmpbj4xzyny                        0x00005631dbb62229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659824340
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n  \
    \      }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpob8k53hw.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter { $0.digits.allSatisfy\
    \ { $0.isOdd } }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique_digits(x:\
    \ [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422,\
    \ 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111,\
    \ 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp4wktyt1z.swift:11:26: error: value of type 'Int' has no member\
    \ 'digits'\n    return x.filter { $0.digits.allSatisfy { $0.isOdd } }.sorted()\n\
    \                      ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5notrgli.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5notrgli.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ num in x {\n        if !has_even_digit(num) {\n            result.append(num)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp81tkm33f.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5notrgli.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n  \
    \      }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpob8k53hw.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if !is_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpmylvc091.swift:13:13: error: cannot find 'is_even_digit' in scope\n\
    \        if !is_even_digit(i) {\n            ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for num in x {\n        if !has_even_digit(num) {\n            result.append(num)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpppv7mn4z.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ num in x {\n        if !has_even_digit(num) {\n            result.append(num)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp81tkm33f.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n  \
    \      }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpob8k53hw.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5notrgli.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\n\
    assert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpzud2_29x/tmpzud2_29x.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50110f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5010deab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5010dea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5010de97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzud2_29x                        0x000055b4a8b313cc <unavailable> + 5068

    5    libc.so.6                          0x00002b50112df460 __libc_start_main +
    245

    6    tmpzud2_29x                        0x000055b4a8b30fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter { $0.hasUniqueDigits()\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique_digits(x: [15, 33, 1422,\
    \ 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as\
    \ [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x:\
    \ [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpv28h4b3v.swift:11:26: error: value of type 'Int' has no member\
    \ 'hasUniqueDigits'\n    return x.filter { $0.hasUniqueDigits() }\n          \
    \            ~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 0
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter {\n       \
    \ $0.description.filter {\n            $0.isNumber && $0.wholeNumberValue! % 2\
    \ == 0\n        }.isEmpty\n    }.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824340
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    return x.filter { $0.hasUniqueDigits()\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique_digits(x: [15, 33, 1422,\
    \ 1]) == [1, 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as\
    \ [Int])\nassert(unique_digits(x: [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x:\
    \ [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpv28h4b3v.swift:11:26: error: value of type 'Int' has no member\
    \ 'hasUniqueDigits'\n    return x.filter { $0.hasUniqueDigits() }\n          \
    \            ~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if i.description.filter({$0.isEven}).count == 0 {\n      \
    \      result.append(i)\n        }\n    }\n    return result.sorted()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15,\
    \ 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
    \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103,\
    \ 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp4e4mhs9x.swift:13:37: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'isEven'\n        if i.description.filter({$0.isEven}).count\
    \ == 0 {\n                                 ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n  \
    \      }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpob8k53hw.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n  \
    \      }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpob8k53hw.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5notrgli.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ num in x {\n        if !has_even_digit(num) {\n            result.append(num)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp81tkm33f.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ num in x {\n        if !has_even_digit(num) {\n            result.append(num)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp81tkm33f.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(num) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5notrgli.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: -4
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if i.description.contains(\"2\") || i.description.contains(\"\
    4\") || i.description.contains(\"6\") || i.description.contains(\"8\") {\n   \
    \         continue\n        } else {\n            result.append(i)\n        }\n\
    \    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: Exception
  stderr: 'tmpyfh6plih/tmpyfh6plih.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fac2efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fabfe6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8fabfe6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8fabfe57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyfh6plih                        0x000055bce13ff984 <unavailable> + 6532

    5    libc.so.6                          0x00002b8fac4db460 __libc_start_main +
    245

    6    tmpyfh6plih                        0x000055bce13ff479 <unavailable> + 5241

    '
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n  \
    \  for i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n\
    \        }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmp5notrgli.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n  \
    \      }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpob8k53hw.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
- exit_code: 1
  program: "\n/// Given a list of positive integers x. return a sorted list of all\
    \ \n/// elements that hasn't any even digit.\n/// Note: Returned list should be\
    \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits([15, 33,\
    \ 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits([152, 323, 1422, 10])\n///\
    \ []\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result = [Int]()\n    for\
    \ i in x {\n        if !has_even_digit(i) {\n            result.append(i)\n  \
    \      }\n    }\n    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1, 15, 33])\nassert(unique_digits(x:\
    \ [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x: [12345, 2033,\
    \ 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31]) == [31, 135])"
  status: SyntaxError
  stderr: "/tmp/tmpob8k53hw.swift:13:13: error: cannot find 'has_even_digit' in scope\n\
    \        if !has_even_digit(i) {\n            ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824339
