name: HumanEval_27_flip_case
language: swift
prompt: "\n/// For a given string, flip lowercase characters to uppercase and uppercase\
  \ to lowercase.\n/// >>> flip_case('Hello')\n/// 'hELLO'\nfunc flip_case(string:\
  \ String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(flip_case(string: \"\") == \"\")\nassert(flip_case(string:\
  \ \"Hello!\") == \"hELLO!\")\nassert(flip_case(string: \"These violent delights\
  \ have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")"
completions: ["    return string.characters.map {\n        if $0.isUppercase {\n \
    \           return $0.lowercase\n        } else {\n            return $0.uppercase\n\
    \        }\n    }.reduce(\"\", combine: +)", "    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercase\n        } else\
    \ {\n            return $0.uppercase\n        }\n    }.reduce(\"\", combine: +)",
  "    return string.characters.map {\n        if $0.isUppercase {\n            return\
    \ $0.lowercase\n        } else {\n            return $0.uppercase\n        }\n\
    \    }.reduce(\"\", combine: +)", "    return string.characters.map {\n      \
    \  if $0.isUppercase {\n            return $0.lowercase\n        } else {\n  \
    \          return $0.uppercase\n        }\n    }.reduce(\"\", combine: +)", " \
    \   return string.characters.map {\n        if $0.isUppercase {\n            return\
    \ $0.lowercase\n        } else {\n            return $0.uppercase\n        }\n\
    \    }.reduce(\"\", combine: { $0 + String($1) })", "    return string.characters.map\
    \ { char in\n        if char.isUppercase {\n            return char.lowercase\n\
    \        } else {\n            return char.uppercase\n        }\n    }.reduce(\"\
    \", combine: +)", "    return string.characters.map {\n        if $0.isUppercase\
    \ {\n            return $0.lowercase\n        } else {\n            return $0.uppercase\n\
    \        }\n    }.reduce(\"\", combine: +)", "    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercase\n        } else\
    \ {\n            return $0.uppercase\n        }\n    }.reduce(\"\", combine: +)",
  "    return string.characters.map {\n        if $0.isUppercase {\n            return\
    \ $0.lowercase\n        } else {\n            return $0.uppercase\n        }\n\
    \    }.reduce(\"\", combine: +)", "    return string.characters.map {\n      \
    \  if $0.isLowercase {\n            return Character($0.uppercaseString)\n   \
    \     } else {\n            return Character($0.lowercaseString)\n        }\n\
    \    }.reduce(\"\", combine: +)", "    return string.characters.map {\n      \
    \  if $0.isUppercase {\n            return $0.lowercase\n        } else {\n  \
    \          return $0.uppercase\n        }\n    }.reduce(\"\", combine: +)", " \
    \   return string.characters.map {\n        if $0.isUppercase {\n            return\
    \ $0.lowercase\n        } else {\n            return $0.uppercase\n        }\n\
    \    }.reduce(\"\", combine: +)", "    return string.characters.map {\n      \
    \  if $0.isUppercase {\n            return $0.lowercase\n        } else {\n  \
    \          return $0.uppercase\n        }\n    }.reduce(\"\", combine: +)", " \
    \   return string.characters.map {\n        if $0.isUppercase {\n            return\
    \ $0.lowercase\n        } else {\n            return $0.uppercase\n        }\n\
    \    }.reduce(\"\", combine: +)", "    return String(string.characters.map {\n\
    \        if $0.isLowercase {\n            return $0.uppercase\n        } else\
    \ {\n            return $0.lowercase\n        }\n    })", "    return string.characters.map\
    \ {\n        if $0.isUppercase {\n            return $0.lowercase\n        } else\
    \ {\n            return $0.uppercase\n        }\n    }.reduce(\"\", combine: +)",
  "    return string.map {\n        if $0.isUppercase {\n            return $0.lowercased()\n\
    \        } else {\n            return $0.uppercased()\n        }\n    }", "  \
    \  return string.characters.map {\n        if $0.isUppercase {\n            return\
    \ $0.lowercase\n        } else {\n            return $0.uppercase\n        }\n\
    \    }.reduce(\"\", combine: +)", "    return string.characters.map {\n      \
    \  if $0.isUppercase {\n            return $0.lowercase\n        } else {\n  \
    \          return $0.uppercase\n        }\n    }.reduce(\"\", combine: +)", " \
    \   return string.characters.map {\n        if $0.isUppercase {\n            return\
    \ $0.lowercase\n        } else {\n            return $0.uppercase\n        }\n\
    \    }.reduce(\"\", combine: +)"]
stop_tokens:
- "\n}"
