name: HumanEval_76_is_simple_power
language: swift
prompt: "\n/// Your task is to write a function that returns true if a number x is\
  \ a simple\n/// power of n and false in other cases.\n/// x is a simple power of\
  \ n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
  \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) => false\n\
  /// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\nfunc is_simple_power(x:\
  \ Int, n: Int) -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\n\
  assert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x: 4,\
  \ n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
  \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
  \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
  \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
completions: ['    return x == n * n', "    if x == 1 {\n        return true\n   \
    \ }\n    var i = 1\n    while pow(Double(n), Double(i)) <= Double(x) {\n     \
    \   if pow(Double(n), Double(i)) == Double(x) {\n            return true\n   \
    \     }\n        i += 1\n    }\n    return false", '    return x == pow(n, Int(log(Double(x))
    / log(Double(n))))', '    return x == Int(pow(Double(n), Double(log(Double(x))
    / log(Double(n)))))', "    if x == 1 {\n        return true\n    }\n    if n ==\
    \ 1 {\n        return false\n    }\n    var i = 2\n    while i <= x {\n      \
    \  if i == x {\n            return true\n        }\n        i *= n\n    }\n  \
    \  return false", '    return x == Int(pow(Double(n), Double(Int(log(Double(x))
    / log(Double(n))))))', '    return x == Int(pow(Double(n), Double(log(Double(x))
    / log(Double(n)))))', '    return x == 1 ? true : x % n == 0 ? is_simple_power(x:
    x / n, n: n) : false', '    return x == n * n', '    return x == pow(Double(n),
    Double(Int(log(Double(x)) / log(Double(n)))))', "    if x == 1 {\n        return\
    \ true\n    }\n    if n == 1 {\n        return false\n    }\n    var i = 1\n \
    \   while i < x {\n        i *= n\n    }\n    return i == x", '    return x ==
    Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))', "    if x\
    \ == 1 {\n        return true\n    }\n    var i = 1\n    while i <= x {\n    \
    \    if i == x {\n            return true\n        }\n        i *= n\n    }\n\
    \    return false", '    return x == Int(pow(Double(n), Double(x).log(Double(n))))',
  '    return x == n * n', '    return x == pow(Double(n), Double(log(Double(x)) /
    log(Double(n))))', "    if x == 1 {\n        return true\n    }\n    var x = x\n\
    \    var n = n\n    while x % n == 0 {\n        x /= n\n    }\n    return x ==\
    \ 1", "    if x == 1 {\n        return true\n    }\n    var i = 2\n    while i\
    \ <= x {\n        if i == x {\n            return true\n        }\n        i *=\
    \ n\n    }\n    return false", "    if x == 1 {\n        return true\n    }\n\
    \    if n == 1 {\n        return false\n    }\n    var i = 2\n    while i < x\
    \ {\n        if i == x {\n            return true\n        }\n        i *= n\n\
    \    }\n    return false", "    if x == 1 {\n        return true\n    }\n    var\
    \ result = n\n    while result < x {\n        result *= n\n    }\n    return result\
    \ == x"]
stop_tokens:
- "\n}"
