name: HumanEval_76_is_simple_power
language: swift
prompt: "\n/// Your task is to write a function that returns true if a number x is\
  \ a simple\n/// power of n and false in other cases.\n/// x is a simple power of\
  \ n if n**int=x\n/// For example:\n/// is_simple_power(1, 4) => true\n/// is_simple_power(2,\
  \ 2) => true\n/// is_simple_power(8, 2) => true\n/// is_simple_power(3, 2) => false\n\
  /// is_simple_power(3, 1) => false\n/// is_simple_power(5, 3) => false\nfunc is_simple_power(x:\
  \ Int, n: Int) -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(is_simple_power(x: 16, n: 2) == true)\n\
  assert(is_simple_power(x: 143214, n: 16) == false)\nassert(is_simple_power(x: 4,\
  \ n: 2) == true)\nassert(is_simple_power(x: 9, n: 3) == true)\nassert(is_simple_power(x:\
  \ 16, n: 4) == true)\nassert(is_simple_power(x: 24, n: 2) == false)\nassert(is_simple_power(x:\
  \ 128, n: 4) == false)\nassert(is_simple_power(x: 12, n: 6) == false)\nassert(is_simple_power(x:\
  \ 1, n: 1) == true)\nassert(is_simple_power(x: 1, n: 12) == true)"
completions: ['    return x == n * n', "    if x == 1 {\n        return true\n   \
    \ }\n    var i = 1\n    while pow(Double(n), Double(i)) <= Double(x) {\n     \
    \   if pow(Double(n), Double(i)) == Double(x) {\n            return true\n   \
    \     }\n        i += 1\n    }\n    return false", '    return x == pow(n, Int(log(Double(x))
    / log(Double(n))))', '    return x == Int(pow(Double(n), Double(log(Double(x))
    / log(Double(n)))))', "    if x == 1 {\n        return true\n    }\n    if n ==\
    \ 1 {\n        return false\n    }\n    var i = 2\n    while i <= x {\n      \
    \  if i == x {\n            return true\n        }\n        i *= n\n    }\n  \
    \  return false", '    return x == Int(pow(Double(n), Double(Int(log(Double(x))
    / log(Double(n))))))', '    return x == Int(pow(Double(n), Double(log(Double(x))
    / log(Double(n)))))', '    return x == 1 ? true : x % n == 0 ? is_simple_power(x:
    x / n, n: n) : false', '    return x == n * n', '    return x == pow(Double(n),
    Double(Int(log(Double(x)) / log(Double(n)))))', "    if x == 1 {\n        return\
    \ true\n    }\n    if n == 1 {\n        return false\n    }\n    var i = 1\n \
    \   while i < x {\n        i *= n\n    }\n    return i == x", '    return x ==
    Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))', "    if x\
    \ == 1 {\n        return true\n    }\n    var i = 1\n    while i <= x {\n    \
    \    if i == x {\n            return true\n        }\n        i *= n\n    }\n\
    \    return false", '    return x == Int(pow(Double(n), Double(x).log(Double(n))))',
  '    return x == n * n', '    return x == pow(Double(n), Double(log(Double(x)) /
    log(Double(n))))', "    if x == 1 {\n        return true\n    }\n    var x = x\n\
    \    var n = n\n    while x % n == 0 {\n        x /= n\n    }\n    return x ==\
    \ 1", "    if x == 1 {\n        return true\n    }\n    var i = 2\n    while i\
    \ <= x {\n        if i == x {\n            return true\n        }\n        i *=\
    \ n\n    }\n    return false", "    if x == 1 {\n        return true\n    }\n\
    \    if n == 1 {\n        return false\n    }\n    var i = 2\n    while i < x\
    \ {\n        if i == x {\n            return true\n        }\n        i *= n\n\
    \    }\n    return false", "    if x == 1 {\n        return true\n    }\n    var\
    \ result = n\n    while result < x {\n        result *= n\n    }\n    return result\
    \ == x", "    guard x > 0 && n > 0 else { return false }\n    if x == 1 { return\
    \ true }\n    var x = x\n    while x % n == 0 {\n        x /= n\n    }\n    return\
    \ x == 1", '    return x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))',
  "    if x == 1 {\n        return true\n    }\n    var result = n\n    while result\
    \ < x {\n        result *= n\n    }\n    return result == x", "    if x == 1 {\n\
    \        return true\n    }\n    var result = n\n    while result < x {\n    \
    \    result *= n\n    }\n    return result == x", '    return x == pow(n, Int(log(Double(x))
    / log(Double(n))))', "    if x == 1 {\n        return true\n    }\n    var result\
    \ = n\n    while result < x {\n        result *= n\n    }\n    return result ==\
    \ x", '    return x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))',
  '    return x == 1 ? true : x % n == 0 ? is_simple_power(x: x / n, n: n) : false',
  "    if n == 1 {\n        return x == 1\n    }\n    var result = 1\n    var i =\
    \ 1\n    while result <= x {\n        result = n * n\n        i += 1\n    }\n\
    \    return result == x", "    if x == 1 {\n        return true\n    }\n    if\
    \ n == 1 {\n        return false\n    }\n    var result = 1\n    for _ in 1...x\
    \ {\n        result *= n\n        if result == x {\n            return true\n\
    \        }\n    }\n    return false", '    return x == 1 ? true : x % n == 0 ?
    is_simple_power(x: x / n, n: n) : false', '    return x == n * n', '    return
    x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))', "   \
    \ guard x > 0 && n > 0 else { return false }\n    var x = x\n    var n = n\n \
    \   while x % n == 0 {\n        x /= n\n    }\n    return x == 1", '    return
    x == Int(pow(Double(n), Double(log(Double(x)) / log(Double(n)))))', "    if x\
    \ == 1 {\n        return true\n    }\n    var i = 2\n    while i < x {\n     \
    \   if i == x {\n            return true\n        }\n        i *= n\n    }\n \
    \   return false", '    return x == Int(pow(Double(n), Double(log(Double(x)) /
    log(Double(n)))))', "    if n == 1 {\n        return x == 1\n    }\n    var result\
    \ = 1\n    for _ in 1...x {\n        result *= n\n        if result == x {\n \
    \           return true\n        }\n    }\n    return false", '    return x ==
    pow(Double(n), Double(Int(log(Double(x)) / log(Double(n)))))', "    if x == 1\
    \ {\n        return true\n    }\n    var result = n\n    while result < x {\n\
    \        result *= n\n    }\n    return result == x", "    if x == 1 {\n     \
    \   return true\n    }\n    var i = 2\n    while i < x {\n        if Int(pow(Double(n),\
    \ Double(i))) == x {\n            return true\n        }\n        i += 1\n   \
    \ }\n    return false", "    var result = false\n    if x == 1 {\n        result\
    \ = true\n    } else if x == n {\n        result = true\n    } else if x % n ==\
    \ 0 {\n        result = is_simple_power(x: x / n, n: n)\n    }\n    return result",
  "    if x == 1 {\n        return true\n    }\n    var i = 1\n    while i < x {\n\
    \        i *= n\n        if i == x {\n            return true\n        }\n   \
    \ }\n    return false", "    if x == 1 {\n        return true\n    }\n    var\
    \ i = 1\n    while i < x {\n        i *= n\n        if i == x {\n            return\
    \ true\n        }\n    }\n    return false", '    return pow(Double(n), Double(Int(log(Double(x))
    / log(Double(n))))) == Double(x)', "    if x == 1 {\n        return true\n   \
    \ }\n    var result = n\n    while result < x {\n        result *= n\n    }\n\
    \    return result == x", '    return x == pow(Double(n), Double(x).log(Double(n)))',
  "    if x == 1 {\n        return true\n    }\n    var result = n\n    while result\
    \ < x {\n        result *= n\n    }\n    return result == x", "    if x < 1 ||\
    \ n < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n\
    \    }\n    var num = n\n    while num < x {\n        num *= n\n    }\n    return\
    \ num == x", "    if x == 1 {\n        return true\n    }\n    var result = n\n\
    \    while result < x {\n        result *= n\n    }\n    return result == x",
  '    return x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))',
  '    return x == Int(pow(Double(n), Double(log(Double(x)) / log(Double(n)))))',
  "    if x == 1 {\n        return true\n    }\n    var result = n\n    while result\
    \ < x {\n        result *= n\n    }\n    return result == x", "    if x == 1 {\n\
    \        return true\n    }\n    var i = 1\n    while pow(Double(n), Double(i))\
    \ <= Double(x) {\n        if pow(Double(n), Double(i)) == Double(x) {\n      \
    \      return true\n        }\n        i += 1\n    }\n    return false", '    return
    x == n * n', "    if x == 1 {\n        return true\n    }\n    var x = x\n   \
    \ var n = n\n    while x % n == 0 {\n        x /= n\n    }\n    return x == 1",
  "    if x == 1 {\n        return true\n    }\n    if n == 1 {\n        return false\n\
    \    }\n    var x = x\n    var n = n\n    while x % n == 0 {\n        x /= n\n\
    \    }\n    return x == 1", '    return x == n * n', '    return pow(Double(n),
    Double(Int(log(Double(x)) / log(Double(n))))) == Double(x)', '    return x ==
    Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))', "    if x\
    \ == 1 {\n        return true\n    }\n    var result = n\n    while result < x\
    \ {\n        result *= n\n    }\n    return result == x", '    return x == n *
    n', '    return x == Int(pow(Double(n), Double(log(Double(x)) / log(Double(n)))))',
  "    guard x > 0 && n > 0 else { return false }\n    var x = x\n    var n = n\n\
    \    while x % n == 0 {\n        x /= n\n    }\n    return x == 1", '    return
    x == pow(Double(n), Double(Int(log(Double(x)) / log(Double(n)))))', "    if x\
    \ == 1 {\n        return true\n    }\n    var result = n\n    while result < x\
    \ {\n        result *= n\n    }\n    return result == x", '    return x == Int(pow(Double(n),
    Double(x).log(Double(n))))', '    return pow(Double(n), Double(x).log(Double(n)))
    == Double(x)', "    if x == 1 {\n        return true\n    }\n    var result =\
    \ n\n    while result < x {\n        result *= n\n    }\n    return result ==\
    \ x", "    guard x > 0 && n > 0 else { return false }\n    if x == 1 { return\
    \ true }\n    var result = 1\n    for _ in 1...x {\n        result *= n\n    \
    \    if result == x { return true }\n    }\n    return false", '    return x ==
    Int(pow(Double(n), Double(log(Double(x)) / log(Double(n)))))', "    if x == 1\
    \ {\n        return true\n    }\n    if n == 1 {\n        return false\n    }\n\
    \    var i = 1\n    while i < x {\n        i *= n\n    }\n    return i == x",
  "    if x == 1 {\n        return true\n    }\n    var x = x\n    var n = n\n   \
    \ while x % n == 0 {\n        x /= n\n    }\n    return x == 1", "    if x ==\
    \ 1 {\n        return true\n    }\n    var i = 1\n    while i < x {\n        i\
    \ *= n\n        if i == x {\n            return true\n        }\n    }\n    return\
    \ false", "    if x == 1 {\n        return true\n    }\n    var i = 2\n    while\
    \ i < x {\n        if i == x {\n            return true\n        }\n        i\
    \ *= n\n    }\n    return false", '    return x == Int(pow(Double(n), Double(log(Double(x))
    / log(Double(n)))))', '    return x == n * n', '    return x == pow(Double(n),
    Double(x).log(Double(n)))', '    return x == pow(n, Int(log(Double(x)) / log(Double(n))))',
  '    return x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))',
  '    return x == Int(pow(Double(n), Double(log(Double(x)) / log(Double(n)))))',
  '    return pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))) == Double(x)',
  "    if x == 1 {\n        return true\n    }\n    var x = x\n    var n = n\n   \
    \ while x > 1 {\n        if x % n != 0 {\n            return false\n        }\n\
    \        x /= n\n    }\n    return true", '    return x == Int(pow(Double(n),
    Double(log(Double(x)) / log(Double(n)))))', '    return x == pow(Double(n), Double(Int(log(Double(x))
    / log(Double(n)))))', "    if x == 1 {\n        return true\n    }\n    var result\
    \ = n\n    while result < x {\n        result *= n\n    }\n    return result ==\
    \ x", '    return x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))',
  "    if x == 1 {\n        return true\n    }\n    var power = n\n    while power\
    \ < x {\n        power *= n\n    }\n    return power == x", '    return x == Int(pow(Double(n),
    Double(log(Double(x)) / log(Double(n)))))', '    return x == pow(Double(n), Double(Int(log(Double(x))
    / log(Double(n)))))', "    if x == 1 {\n        return true\n    }\n    var i\
    \ = 1\n    while i < x {\n        i *= n\n        if i == x {\n            return\
    \ true\n        }\n    }\n    return false", "    if x == 1 {\n        return\
    \ true\n    }\n    var i = 2\n    while i < x {\n        if i == x {\n       \
    \     return true\n        }\n        i *= n\n    }\n    return false", '    return
    x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))', '    return
    x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))', "   \
    \ guard x > 0 && n > 0 else { return false }\n    let result = pow(Double(n),\
    \ Double(x))\n    return result == Double(x)", "    if x == 1 {\n        return\
    \ true\n    }\n    var result = n\n    while result < x {\n        result *= n\n\
    \    }\n    return result == x", "    if x == 1 {\n        return true\n    }\n\
    \    var i = 2\n    while i < x {\n        if i == x {\n            return true\n\
    \        }\n        i *= n\n    }\n    return false", "    if n == 1 {\n     \
    \   return x == 1\n    }\n    var power = n\n    while power < x {\n        power\
    \ *= n\n    }\n    return power == x", '    return x == pow(n, Int(log(Double(x))
    / log(Double(n))))', "    if x == 1 {\n        return true\n    }\n    var x =\
    \ x\n    var n = n\n    while x % n == 0 {\n        x /= n\n    }\n    return\
    \ x == 1", "    if x == 1 {\n        return true\n    }\n    var result = 1\n\
    \    for _ in 1...x {\n        result *= n\n        if result == x {\n       \
    \     return true\n        }\n    }\n    return false", '    return x == Int(pow(Double(n),
    Double(Int(log(Double(x)) / log(Double(n))))))', "    if x == 1 {\n        return\
    \ true\n    }\n    var x = x\n    var n = n\n    while x % n == 0 {\n        x\
    \ /= n\n    }\n    return x == 1", '    return x == Int(pow(Double(n), Double(Int(log(Double(x))
    / log(Double(n))))))', "    var x = x\n    var n = n\n    if x == 1 {\n      \
    \  return true\n    }\n    while x % n == 0 {\n        x /= n\n    }\n    return\
    \ x == 1", "    guard x > 0 && n > 0 else { return false }\n    let log = logb(Double(x),\
    \ Double(n))\n    return log == floor(log)", "    if x == 1 {\n        return\
    \ true\n    }\n    if n == 1 {\n        return false\n    }\n    var result =\
    \ n\n    while result < x {\n        result *= n\n    }\n    return result ==\
    \ x", "    if x == 1 {\n        return true\n    }\n    if n == 1 {\n        return\
    \ false\n    }\n    var i = 1\n    while pow(Double(n), Double(i)) <= Double(x)\
    \ {\n        if pow(Double(n), Double(i)) == Double(x) {\n            return true\n\
    \        }\n        i += 1\n    }\n    return false", '    return x == n * n',
  '    return x == Int(pow(Double(n), Double(log(Double(x)) / log(Double(n)))))',
  "    if x == 1 {\n        return true\n    }\n    var result = n\n    while result\
    \ < x {\n        result *= n\n    }\n    return result == x", "    if x == 1 {\n\
    \        return true\n    }\n    var result = 1\n    var i = 1\n    while result\
    \ <= x {\n        result = Int(pow(Double(n), Double(i)))\n        if result ==\
    \ x {\n            return true\n        }\n        i += 1\n    }\n    return false",
  '    return x == 1 ? true : x % n == 0 ? is_simple_power(x: x / n, n: n) : false',
  '    return x == Int(pow(Double(n), Double(log(Double(x)) / log(Double(n)))))',
  "    if x == 1 {\n        return true\n    }\n    var x = x\n    var n = n\n   \
    \ while x % n == 0 {\n        x /= n\n    }\n    return x == 1", '    return x
    == pow(Double(n), Double(Int(log(Double(x)) / log(Double(n)))))', "    if x ==\
    \ 1 {\n        return true\n    }\n    var result = n\n    while result < x {\n\
    \        result *= n\n    }\n    return result == x", "    if x == 1 {\n     \
    \   return true\n    }\n    var power = n\n    while power < x {\n        power\
    \ *= n\n    }\n    return power == x", '    return x % n == 0 && x / n % n ==
    0', "    if x == 1 {\n        return true\n    }\n    var result = n\n    while\
    \ result < x {\n        result *= n\n    }\n    return result == x", "    if x\
    \ == 1 {\n        return true\n    }\n    var result = n\n    while result < x\
    \ {\n        result *= n\n    }\n    return result == x", "    if x == 1 {\n \
    \       return true\n    }\n    var i = 1\n    while pow(Double(n), Double(i))\
    \ <= Double(x) {\n        if pow(Double(n), Double(i)) == Double(x) {\n      \
    \      return true\n        }\n        i += 1\n    }\n    return false", '    return
    pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))) == Double(x)', '    return
    x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))', "   \
    \ if x == 1 {\n        return true\n    }\n    var a = x\n    var b = n\n    while\
    \ a % b == 0 {\n        a /= b\n        if a == 1 {\n            return true\n\
    \        }\n    }\n    return false", "    if x == 1 {\n        return true\n\
    \    }\n    var i = 1\n    while i < x {\n        i *= n\n        if i == x {\n\
    \            return true\n        }\n    }\n    return false", "    if n == 1\
    \ {\n        return x == 1\n    }\n    var i = 0\n    var result = 1\n    while\
    \ result < x {\n        result = n * n\n        i += 1\n    }\n    return result\
    \ == x", '    return x == Int(pow(Double(n), Double(log(Double(x)) / log(Double(n)))))',
  '    return x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))',
  '    return x == Int(pow(Double(n), Double(log(Double(x)) / log(Double(n)))))',
  "    guard x > 0, n > 0 else { return false }\n    var x = x\n    var n = n\n  \
    \  while x % n == 0 {\n        x /= n\n    }\n    return x == 1", '    return
    x == n * n', "    if x == 1 {\n        return true\n    }\n    var i = 1\n   \
    \ while i < x {\n        i *= n\n        if i == x {\n            return true\n\
    \        }\n    }\n    return false", '    return x == pow(Double(n), Double(x).log(Double(n)))',
  '    return x == Int(pow(Double(n), Double(log(Double(x)) / log(Double(n)))))',
  "    if x == 1 {\n        return true\n    }\n    var result = n\n    while result\
    \ < x {\n        result *= n\n    }\n    return result == x", '    return x ==
    Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))', '    return
    x == Int(pow(Double(n), Double(log(Double(x)) / log(Double(n)))))', "    if x\
    \ == 1 {\n        return true\n    }\n    var result = n\n    while result < x\
    \ {\n        result *= n\n    }\n    return result == x", '    return x == n *
    n', '    return x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))',
  "    if x == 1 {\n        return true\n    }\n    if n == 1 {\n        return false\n\
    \    }\n    var result = n\n    while result < x {\n        result *= n\n    }\n\
    \    return result == x", "    if x == 1 {\n        return true\n    }\n    var\
    \ i = 2\n    while i < x {\n        if i == x {\n            return true\n   \
    \     }\n        i *= n\n    }\n    return false", "    if x == 1 {\n        return\
    \ true\n    }\n    var i = 1\n    while i <= x {\n        if i == x {\n      \
    \      return true\n        }\n        i *= n\n    }\n    return false", '    return
    x == pow(Double(n), Double(Int(log(Double(x)) / log(Double(n)))))', "    if x\
    \ == 1 {\n        return true\n    }\n    var i = 1\n    while pow(Double(n),\
    \ Double(i)) <= Double(x) {\n        if pow(Double(n), Double(i)) == Double(x)\
    \ {\n            return true\n        }\n        i += 1\n    }\n    return false",
  '    return x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))',
  '    return x == pow(Double(n), Double(x).log(Double(n)))', '    return x == Int(pow(Double(n),
    Double(Int(log(Double(x)) / log(Double(n))))))', "    if n == 1 {\n        return\
    \ x == 1\n    }\n    if x == 1 {\n        return false\n    }\n    var power =\
    \ n\n    while power < x {\n        power *= n\n    }\n    return power == x",
  "    if x == 1 {\n        return true\n    }\n    var result = n\n    while result\
    \ < x {\n        result *= n\n    }\n    return result == x", '    return x ==
    pow(Double(n), Double(Int(log(Double(x)) / log(Double(n)))))', "    if x == 1\
    \ {\n        return true\n    }\n    var i = 1\n    while pow(Double(n), Double(i))\
    \ <= Double(x) {\n        if pow(Double(n), Double(i)) == Double(x) {\n      \
    \      return true\n        }\n        i += 1\n    }\n    return false", '    return
    x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))', "   \
    \ if x == 1 {\n        return true\n    }\n    var power = n\n    while power\
    \ < x {\n        power *= n\n    }\n    return power == x", '    return x == n
    * n', '    return x == 1 ? true : x % n == 0 ? is_simple_power(x: x / n, n: n)
    : false', '    return (x == 1) || (x == n) || (x % n == 0 && is_simple_power(x:
    x / n, n: n))', "    if x == 1 {\n        return true\n    }\n    var i = 1\n\
    \    while pow(Double(n), Double(i)) <= Double(x) {\n        if pow(Double(n),\
    \ Double(i)) == Double(x) {\n            return true\n        }\n        i +=\
    \ 1\n    }\n    return false", "    if x == 1 {\n        return true\n    }\n\
    \    var i = 1\n    while i <= x {\n        if i == x {\n            return true\n\
    \        }\n        i *= n\n    }\n    return false", '    return x == Int(pow(Double(n),
    Double(Int(log(Double(x)) / log(Double(n))))))', "    if x == 1 {\n        return\
    \ true\n    }\n    var i = 1\n    while i < x {\n        i *= n\n        if i\
    \ == x {\n            return true\n        }\n    }\n    return false", "    if\
    \ x == 1 {\n        return true\n    }\n    var i = 1\n    while pow(Double(n),\
    \ Double(i)) <= Double(x) {\n        if pow(Double(n), Double(i)) == Double(x)\
    \ {\n            return true\n        }\n        i += 1\n    }\n    return false",
  '    return x == Int(pow(Double(n), Double(log(Double(x)) / log(Double(n)))))',
  '    return x == Int(pow(Double(n), Double(log(Double(x)) / log(Double(n)))))',
  "    if x == 1 {\n        return true\n    }\n    var result = n\n    while result\
    \ < x {\n        result *= n\n    }\n    return result == x", '    return x ==
    n * n', "    if x == 1 {\n        return true\n    }\n    var power = n\n    while\
    \ power < x {\n        power *= n\n    }\n    return power == x", '    return
    x == 1 ? true : x % n == 0 ? is_simple_power(x: x / n, n: n) : false', '    return
    x == n * n', '    return x == Int(pow(Double(n), Double(log(Double(x)) / log(Double(n)))))',
  '    return x == n * n', "    if x == 1 {\n        return true\n    }\n    if n\
    \ == 1 {\n        return false\n    }\n    var result = n\n    while result <\
    \ x {\n        result *= n\n    }\n    return result == x", "    if x == 1 {\n\
    \        return true\n    }\n    var result = n\n    while result < x {\n    \
    \    result *= n\n    }\n    return result == x", '    return x == Int(pow(Double(n),
    Double(Int(log(Double(x)) / log(Double(n))))))', "    if x == 1 {\n        return\
    \ true\n    }\n    var result = n\n    while result < x {\n        result *= n\n\
    \    }\n    return result == x", "    if x == 1 {\n        return true\n    }\n\
    \    var num = x\n    while num % n == 0 {\n        num /= n\n    }\n    return\
    \ num == 1", '    return x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))',
  '    return x == pow(n, Int(log(Double(x)) / log(Double(n))))', '    return x ==
    pow(Double(n), Double(Int(log(Double(x)) / log(Double(n)))))', "    if x == 1\
    \ {\n        return true\n    }\n    var result = n\n    while result < x {\n\
    \        result *= n\n    }\n    return result == x", '    return x == Int(pow(Double(n),
    Double(Int(log(Double(x)) / log(Double(n))))))', '    return x == pow(n, Int(log(Double(x))
    / log(Double(n))))', '    return (x == 1 && n == 1) || (x > 1 && n > 1 && x %
    n == 0 && x / n == n)', '    return x == pow(Double(n), Double(Int(log(Double(x))
    / log(Double(n)))))', '    return x == pow(Double(n), Double(x).log(Double(n)))',
  "    guard x > 0, n > 0 else { return false }\n    var result = 1\n    var i = 1\n\
    \    while result < x {\n        result = n * n\n        i += 1\n    }\n    return\
    \ result == x", "    if x == 1 {\n        return true\n    }\n    var result =\
    \ n\n    while result < x {\n        result *= n\n    }\n    return result ==\
    \ x", '    return x == Int(pow(Double(n), Double(Int(log(Double(x)) / log(Double(n))))))',
  "    if x == 1 {\n        return true\n    }\n    var result = n\n    while result\
    \ < x {\n        result *= n\n    }\n    return result == x", "    if x == 1 {\n\
    \        return true\n    }\n    if n == 1 {\n        return false\n    }\n  \
    \  var result = n\n    while result < x {\n        result *= n\n    }\n    return\
    \ result == x", '    return x == 1 ? true : x % n == 0 ? is_simple_power(x: x
    / n, n: n) : false', '    return x == n * n', '    return x == 1 ? true : x %
    n == 0 ? is_simple_power(x: x / n, n: n) : false', "    var result = false\n \
    \   if x == 1 {\n        result = true\n    } else if x == n {\n        result\
    \ = true\n    } else if x % n == 0 {\n        result = is_simple_power(x: x /\
    \ n, n: n)\n    }\n    return result", "    if x == 1 {\n        return true\n\
    \    }\n    var result = n\n    while result < x {\n        result *= n\n    }\n\
    \    return result == x", '    return x == pow(Double(n), Double(x).log(Double(n)))',
  "    if x == 1 {\n        return true\n    }\n    var power = 1\n    while power\
    \ < x {\n        power *= n\n    }\n    return power == x", "    guard x > 0,\
    \ n > 0 else { return false }\n    var num = x\n    while num % n == 0 {\n   \
    \     num /= n\n    }\n    return num == 1", '    return x == Int(pow(Double(n),
    Double(Int(log(Double(x)) / log(Double(n))))))']
stop_tokens:
- "\n}"
