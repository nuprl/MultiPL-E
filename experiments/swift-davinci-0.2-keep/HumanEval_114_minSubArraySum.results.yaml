language: swift
name: HumanEval_114_minSubArraySum
results:
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var currentSum = 0\n    for num in nums\
    \ {\n        currentSum += num\n        if currentSum < minSum {\n           \
    \ minSum = currentSum\n        }\n        if currentSum > 0 {\n            currentSum\
    \ = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for i in 0..<nums.count\
    \ {\n        sum += nums[i]\n        minSum = min(minSum, sum)\n        if sum\
    \ > 0 {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var currentSum = 0\n    for num in nums\
    \ {\n        currentSum += num\n        if currentSum < minSum {\n           \
    \ minSum = currentSum\n        }\n        if currentSum > 0 {\n            currentSum\
    \ = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var currentSum = 0\n    for num in nums\
    \ {\n        currentSum += num\n        if currentSum < minSum {\n           \
    \ minSum = currentSum\n        }\n        if currentSum > 0 {\n            currentSum\
    \ = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var currentSum = 0\n    for num in nums\
    \ {\n        currentSum += num\n        if currentSum < minSum {\n           \
    \ minSum = currentSum\n        }\n        if currentSum > 0 {\n            currentSum\
    \ = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var currentSum = 0\n    for num in nums\
    \ {\n        currentSum += num\n        if currentSum < minSum {\n           \
    \ minSum = currentSum\n        }\n        if currentSum > 0 {\n            currentSum\
    \ = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var currentSum = 0\n    for num in nums\
    \ {\n        currentSum += num\n        if currentSum < minSum {\n           \
    \ minSum = currentSum\n        }\n        if currentSum > 0 {\n            currentSum\
    \ = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    guard nums.count > 0 else { return 0 }\n    var minSum = nums[0]\n\
    \    var sum = 0\n    for num in nums {\n        sum += num\n        minSum =\
    \ min(minSum, sum)\n        if sum > 0 {\n            sum = 0\n        }\n   \
    \ }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var currentSum = 0\n    for num in nums\
    \ {\n        currentSum += num\n        if currentSum < minSum {\n           \
    \ minSum = currentSum\n        }\n        if currentSum > 0 {\n            currentSum\
    \ = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var currentSum = 0\n    for num in nums\
    \ {\n        currentSum += num\n        if currentSum < minSum {\n           \
    \ minSum = currentSum\n        }\n        if currentSum > 0 {\n            currentSum\
    \ = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var currentSum = 0\n    for num in nums\
    \ {\n        currentSum += num\n        if currentSum < minSum {\n           \
    \ minSum = currentSum\n        }\n        if currentSum > 0 {\n            currentSum\
    \ = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var currentSum = 0\n    for num in nums\
    \ {\n        currentSum += num\n        if currentSum < minSum {\n           \
    \ minSum = currentSum\n        }\n        if currentSum > 0 {\n            currentSum\
    \ = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    guard nums.count > 0 else { return 0 }\n    var minSum = Int.max\n\
    \    var sum = 0\n    for num in nums {\n        sum += num\n        minSum =\
    \ min(minSum, sum)\n        if sum > 0 {\n            sum = 0\n        }\n   \
    \ }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    guard nums.count > 0 else { return 0 }\n    var minSum = Int.max\n\
    \    var sum = 0\n    for num in nums {\n        sum += num\n        minSum =\
    \ min(minSum, sum)\n        if sum > 0 {\n            sum = 0\n        }\n   \
    \ }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums:\
    \ [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\n\
    assert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums:\
    \ [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums: [0,\
    \ 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) ==\
    \ -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var currentSum = 0\n    for num in nums\
    \ {\n        currentSum += num\n        if currentSum < minSum {\n           \
    \ minSum = currentSum\n        }\n        if currentSum > 0 {\n            currentSum\
    \ = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var currentSum = 0\n    for num in nums\
    \ {\n        currentSum += num\n        if currentSum < minSum {\n           \
    \ minSum = currentSum\n        }\n        if currentSum > 0 {\n            currentSum\
    \ = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var currentSum = 0\n    for num in nums\
    \ {\n        currentSum += num\n        if currentSum < minSum {\n           \
    \ minSum = currentSum\n        }\n        if currentSum > 0 {\n            currentSum\
    \ = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var currentSum = 0\n    for num in nums\
    \ {\n        currentSum += num\n        if currentSum < minSum {\n           \
    \ minSum = currentSum\n        }\n        if currentSum > 0 {\n            currentSum\
    \ = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var currentSum = 0\n    for num in nums\
    \ {\n        currentSum += num\n        if currentSum < minSum {\n           \
    \ minSum = currentSum\n        }\n        if currentSum > 0 {\n            currentSum\
    \ = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var currentSum = 0\n    for num in nums\
    \ {\n        currentSum += num\n        if currentSum < minSum {\n           \
    \ minSum = currentSum\n        }\n        if currentSum > 0 {\n            currentSum\
    \ = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var currentSum = 0\n    for num in nums\
    \ {\n        currentSum += num\n        if currentSum < minSum {\n           \
    \ minSum = currentSum\n        }\n        if currentSum > 0 {\n            currentSum\
    \ = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    guard nums.count > 0 else { return 0 }\n    var minSum = nums[0]\n\
    \    var sum = nums[0]\n    for i in 1..<nums.count {\n        sum = min(nums[i],\
    \ sum + nums[i])\n        minSum = min(minSum, sum)\n    }\n    return minSum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var currentSum = 0\n    for num in nums\
    \ {\n        currentSum += num\n        if currentSum < minSum {\n           \
    \ minSum = currentSum\n        }\n        if currentSum > 0 {\n            currentSum\
    \ = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var min = Int.max\n    var sum = 0\n    for i in 0..<nums.count\
    \ {\n        sum += nums[i]\n        if sum < min {\n            min = sum\n \
    \       }\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    return\
    \ min\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(minSubArraySum(nums: [2,\
    \ 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var currentSum = 0\n    for num in nums\
    \ {\n        currentSum += num\n        if currentSum < minSum {\n           \
    \ minSum = currentSum\n        }\n        if currentSum > 0 {\n            currentSum\
    \ = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var currentSum = 0\n    for num in nums\
    \ {\n        currentSum += num\n        if currentSum < minSum {\n           \
    \ minSum = currentSum\n        }\n        if currentSum > 0 {\n            currentSum\
    \ = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: -4
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    var start = 0\n   \
    \ for i in 0..<nums.count {\n        sum += nums[i]\n        while sum >= 0 {\n\
    \            minSum = min(minSum, sum)\n            sum -= nums[start]\n     \
    \       start += 1\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002abaee8b8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abaee5af561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abaee5af286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abaee5af13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abaee5aebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002abaee3aee83 <unavailable> + 188035

    6    tmpxvlwoejw                        0x000055acfdca21a0 <unavailable> + 8608

    7    tmpxvlwoejw                        0x000055acfdca156c <unavailable> + 5484

    8    libc.so.6                          0x00002abaeeaa4460 __libc_start_main +
    245

    9    tmpxvlwoejw                        0x000055acfdca1239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var currentSum = 0\n    for num in nums\
    \ {\n        currentSum += num\n        if currentSum < minSum {\n           \
    \ minSum = currentSum\n        }\n        if currentSum > 0 {\n            currentSum\
    \ = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var currentSum = 0\n    for num in nums\
    \ {\n        currentSum += num\n        if currentSum < minSum {\n           \
    \ minSum = currentSum\n        }\n        if currentSum > 0 {\n            currentSum\
    \ = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var currentSum = 0\n    for num in nums\
    \ {\n        currentSum += num\n        if currentSum < minSum {\n           \
    \ minSum = currentSum\n        }\n        if currentSum > 0 {\n            currentSum\
    \ = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var currentSum = 0\n    for num in nums\
    \ {\n        currentSum += num\n        if currentSum < minSum {\n           \
    \ minSum = currentSum\n        }\n        if currentSum > 0 {\n            currentSum\
    \ = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var currentSum = 0\n    for num in nums\
    \ {\n        currentSum += num\n        if currentSum < minSum {\n           \
    \ minSum = currentSum\n        }\n        if currentSum > 0 {\n            currentSum\
    \ = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var currentSum = 0\n    for num in nums\
    \ {\n        currentSum += num\n        if currentSum < minSum {\n           \
    \ minSum = currentSum\n        }\n        if currentSum > 0 {\n            currentSum\
    \ = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var currentSum = 0\n    for num in nums\
    \ {\n        currentSum += num\n        if currentSum < minSum {\n           \
    \ minSum = currentSum\n        }\n        if currentSum > 0 {\n            currentSum\
    \ = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var currentSum = 0\n    for num in nums\
    \ {\n        currentSum += num\n        if currentSum < minSum {\n           \
    \ minSum = currentSum\n        }\n        if currentSum > 0 {\n            currentSum\
    \ = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var currentSum = 0\n    for num in nums\
    \ {\n        currentSum += num\n        if currentSum < minSum {\n           \
    \ minSum = currentSum\n        }\n        if currentSum > 0 {\n            currentSum\
    \ = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for i in 0..<nums.count\
    \ {\n        sum += nums[i]\n        minSum = min(minSum, sum)\n        if sum\
    \ > 0 {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var currentSum = 0\n    for num in nums\
    \ {\n        currentSum += num\n        if currentSum < minSum {\n           \
    \ minSum = currentSum\n        }\n        if currentSum > 0 {\n            currentSum\
    \ = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var currentSum = 0\n    for num in nums\
    \ {\n        currentSum += num\n        if currentSum < minSum {\n           \
    \ minSum = currentSum\n        }\n        if currentSum > 0 {\n            currentSum\
    \ = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var currentSum = 0\n    for num in nums\
    \ {\n        currentSum += num\n        if currentSum < minSum {\n           \
    \ minSum = currentSum\n        }\n        if currentSum > 0 {\n            currentSum\
    \ = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var currentSum = 0\n    for num in nums\
    \ {\n        currentSum += num\n        if currentSum < minSum {\n           \
    \ minSum = currentSum\n        }\n        if currentSum > 0 {\n            currentSum\
    \ = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for i in 0..<nums.count\
    \ {\n        sum += nums[i]\n        minSum = min(minSum, sum)\n        if sum\
    \ > 0 {\n            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\n\
    assert(minSubArraySum(nums: [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3, 2, -10]) == -14)\nassert(minSubArraySum(nums: [-9999999999999999])\
    \ == -9999999999999999)\nassert(minSubArraySum(nums: [0, 10, 20, 1000000]) ==\
    \ 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums: [10, 11, 13,\
    \ 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1, 0, -2]) == -33)\n\
    assert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums: [7]) ==\
    \ 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var currentSum = 0\n    for num in nums\
    \ {\n        currentSum += num\n        if currentSum < minSum {\n           \
    \ minSum = currentSum\n        }\n        if currentSum > 0 {\n            currentSum\
    \ = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var currentSum = 0\n    for num in nums\
    \ {\n        currentSum += num\n        if currentSum < minSum {\n           \
    \ minSum = currentSum\n        }\n        if currentSum > 0 {\n            currentSum\
    \ = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
- exit_code: 0
  program: "\n/// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n/// of nums.\n/// Example\n/// minSubArraySum([2, 3, 4, 1, 2, 4])\
    \ == 1\n/// minSubArraySum([-1, -2, -3]) == -6\nfunc minSubArraySum(nums: [Int])\
    \ -> Int {\n    var minSum = Int.max\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        minSum = min(minSum, sum)\n        if sum > 0 {\n\
    \            sum = 0\n        }\n    }\n    return minSum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(minSubArraySum(nums: [2, 3, 4, 1, 2, 4]) == 1)\nassert(minSubArraySum(nums:\
    \ [-1, -2, -3]) == -6)\nassert(minSubArraySum(nums: [-1, -2, -3, 2, -10]) == -14)\n\
    assert(minSubArraySum(nums: [-9999999999999999]) == -9999999999999999)\nassert(minSubArraySum(nums:\
    \ [0, 10, 20, 1000000]) == 0)\nassert(minSubArraySum(nums: [-1, -2, -3, 10, -5])\
    \ == -6)\nassert(minSubArraySum(nums: [100, -1, -2, -3, 10, -5]) == -6)\nassert(minSubArraySum(nums:\
    \ [10, 11, 13, 8, 3, 4]) == 3)\nassert(minSubArraySum(nums: [100, -33, 32, -1,\
    \ 0, -2]) == -33)\nassert(minSubArraySum(nums: [-10]) == -10)\nassert(minSubArraySum(nums:\
    \ [7]) == 7)\nassert(minSubArraySum(nums: [1, -1]) == -1)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013980
