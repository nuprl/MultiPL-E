name: HumanEval_10_make_palindrome
language: swift
prompt: "\n/// Find the shortest palindrome that begins with a supplied string.\n\
  /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
  \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
  \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome('')\n\
  /// ''\n/// >>> make_palindrome('cat')\n/// 'catac'\n/// >>> make_palindrome('cata')\n\
  /// 'catac'\nfunc make_palindrome(string: String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(make_palindrome(string: \"\") == \"\")\n\
  assert(make_palindrome(string: \"x\") == \"x\")\nassert(make_palindrome(string:\
  \ \"xyz\") == \"xyzyx\")\nassert(make_palindrome(string: \"xyx\") == \"xyx\")\n\
  assert(make_palindrome(string: \"jerry\") == \"jerryrrej\")"
completions: ["    let reversed = String(string.characters.reverse())\n    let longest_common_suffix\
    \ = longest_common_substring(string, reversed)\n    let prefix = string.substringToIndex(string.startIndex.advancedBy(string.characters.count\
    \ - longest_common_suffix.characters.count))\n    return string + String(prefix.characters.reverse())",
  "    let string_length = string.characters.count\n    if string_length == 0 {\n\
    \        return \"\"\n    }\n    let string_chars = Array(string.characters)\n\
    \    let string_chars_reversed = Array(string.characters.reversed())\n    var\
    \ longest_palindrome_length = 0\n    var longest_palindrome_start = 0\n    for\
    \ i in 0..<string_length {\n        var j = 0\n        while i - j >= 0 && i +\
    \ j < string_length && string_chars[i - j] == string_chars[i + j] {\n        \
    \    j += 1\n        }\n        if j > longest_palindrome_length {\n         \
    \   longest_palindrome_length = j\n            longest_palindrome_start = i -\
    \ j + 1\n        }\n    }\n    for i in 0..<string_length - 1 {\n        var j\
    \ = 0\n        while i - j >= 0 && i + 1 + j < string_length && string_chars[i\
    \ - j] == string_chars[i + 1 + j] {\n            j += 1\n        }\n        if\
    \ j > longest_palindrome_length {\n            longest_palindrome_length = j\n\
    \            longest_palindrome_start = i - j + 1\n        }\n    }\n    let prefix_start\
    \ = longest_palindrome_start + longest_palindrome_length\n    let prefix_end =\
    \ string_length\n    let prefix_length = prefix_end - prefix_start\n    let prefix_chars\
    \ = string_chars[prefix_start..<prefix_end]\n    let prefix_chars_reversed = string_chars_reversed[prefix_start..<prefix_end]\n\
    \    return string + String(prefix_chars_reversed)", "    let string_length =\
    \ string.characters.count\n    if string_length == 0 {\n        return \"\"\n\
    \    }\n    let string_chars = Array(string.characters)\n    var palindrome_suffix_length\
    \ = 0\n    for i in 0..<string_length {\n        if is_palindrome(string_chars,\
    \ start: i, end: string_length - 1) {\n            palindrome_suffix_length =\
    \ string_length - i\n            break\n        }\n    }\n    let palindrome_prefix_length\
    \ = string_length - palindrome_suffix_length\n    var palindrome_chars = string_chars\n\
    \    for i in 0..<palindrome_prefix_length {\n        palindrome_chars.append(string_chars[palindrome_prefix_length\
    \ - i - 1])\n    }\n    return String(palindrome_chars)", "    let string = string.characters.map\
    \ { String($0) }\n    let string_length = string.count\n    if string_length ==\
    \ 0 {\n        return \"\"\n    }\n    var longest_palindrome_suffix = [String]()\n\
    \    for i in 0..<string_length {\n        var palindrome_suffix = [String]()\n\
    \        for j in 0..<string_length {\n            if i + j < string_length {\n\
    \                palindrome_suffix.append(string[i + j])\n            }\n    \
    \    }\n        if is_palindrome(palindrome_suffix) {\n            if palindrome_suffix.count\
    \ > longest_palindrome_suffix.count {\n                longest_palindrome_suffix\
    \ = palindrome_suffix\n            }\n        }\n    }\n    var prefix = [String]()\n\
    \    for i in 0..<string_length - longest_palindrome_suffix.count {\n        prefix.append(string[i])\n\
    \    }\n    return prefix.joined(separator: \"\") + longest_palindrome_suffix.joined(separator:\
    \ \"\") + prefix.reversed().joined(separator: \"\")", "    let string_length =\
    \ string.characters.count\n    if string_length == 0 {\n        return \"\"\n\
    \    }\n    let string_chars = Array(string.characters)\n    var i = string_length\
    \ - 1\n    while i >= 0 {\n        if is_palindrome(string_chars, start: 0, end:\
    \ i) {\n            break\n        }\n        i -= 1\n    }\n    var prefix =\
    \ string.substring(to: string.index(string.startIndex, offsetBy: i + 1))\n   \
    \ prefix = String(prefix.characters.reversed())\n    return string + prefix",
  "    let string_length = string.characters.count\n    if string_length == 0 {\n\
    \        return \"\"\n    }\n    let string_array = Array(string.characters)\n\
    \    var longest_palindrome_length = 0\n    var longest_palindrome_start = 0\n\
    \    for i in 0..<string_length {\n        let palindrome_length = palindrome_length_at_index(string_array,\
    \ index: i)\n        if palindrome_length > longest_palindrome_length {\n    \
    \        longest_palindrome_length = palindrome_length\n            longest_palindrome_start\
    \ = i\n        }\n    }\n    let prefix_start = longest_palindrome_start - longest_palindrome_length\
    \ + 1\n    let prefix_end = longest_palindrome_start\n    let prefix = string_array[prefix_start...prefix_end]\n\
    \    let prefix_reversed = prefix.reverse()\n    let palindrome = string + String(prefix_reversed)\n\
    \    return palindrome", "    let string_length = string.characters.count\n  \
    \  if string_length == 0 {\n        return \"\"\n    }\n    if string_length ==\
    \ 1 {\n        return string\n    }\n    let string_chars = Array(string.characters)\n\
    \    var longest_palindrome_length = 0\n    var longest_palindrome_start = 0\n\
    \    for i in 0..<string_length {\n        let palindrome_length = longest_palindrome_length_at(string_chars,\
    \ string_length: string_length, center: i)\n        if palindrome_length > longest_palindrome_length\
    \ {\n            longest_palindrome_length = palindrome_length\n            longest_palindrome_start\
    \ = i\n        }\n    }\n    let prefix_start = longest_palindrome_start - longest_palindrome_length\
    \ + 1\n    let prefix_end = longest_palindrome_start + 1\n    let prefix = String(string_chars[prefix_start..<prefix_end])\n\
    \    let reversed_prefix = String(prefix.characters.reverse())\n    return string\
    \ + reversed_prefix", "    let string_length = string.characters.count\n    if\
    \ string_length == 0 {\n        return \"\"\n    }\n    let string_chars = Array(string.characters)\n\
    \    var longest_palindrome_length = 0\n    var longest_palindrome_start = 0\n\
    \    for i in 0..<string_length {\n        var j = 0\n        while i - j >= 0\
    \ && i + j < string_length && string_chars[i - j] == string_chars[i + j] {\n \
    \           j += 1\n        }\n        if j > longest_palindrome_length {\n  \
    \          longest_palindrome_length = j\n            longest_palindrome_start\
    \ = i - j + 1\n        }\n    }\n    var result = string\n    for i in 0..<string_length\
    \ - longest_palindrome_length {\n        result.append(string_chars[string_length\
    \ - 1 - i])\n    }\n    return result", "    if string.isEmpty {\n        return\
    \ string\n    }\n    let string_length = string.characters.count\n    let string_array\
    \ = Array(string.characters)\n    var max_palindrome_length = 0\n    var max_palindrome_index\
    \ = 0\n    for i in 0..<string_length {\n        let palindrome_length = get_palindrome_length(string_array,\
    \ i)\n        if palindrome_length > max_palindrome_length {\n            max_palindrome_length\
    \ = palindrome_length\n            max_palindrome_index = i\n        }\n    }\n\
    \    let prefix_length = string_length - max_palindrome_length\n    let prefix\
    \ = string_array[0..<prefix_length]\n    let prefix_reversed = prefix.reverse()\n\
    \    return string + String(prefix_reversed)", "    let string = string.characters\n\
    \    let string_length = string.count\n    if string_length == 0 {\n        return\
    \ \"\"\n    }\n    var palindrome_suffix_length = 0\n    for i in 0..<string_length\
    \ {\n        if is_palindrome(string, start: i, end: string_length - 1) {\n  \
    \          palindrome_suffix_length = string_length - i\n            break\n \
    \       }\n    }\n    var result = string\n    for i in 0..<string_length - palindrome_suffix_length\
    \ {\n        result.append(string[string_length - 1 - i])\n    }\n    return String(result)",
  "    let string_length = string.characters.count\n    if string_length == 0 {\n\
    \        return \"\"\n    }\n    var longest_palindrome_length = 0\n    var longest_palindrome_start\
    \ = 0\n    for i in 0..<string_length {\n        let palindrome_length = palindrome_length_at_index(string:\
    \ string, index: i)\n        if palindrome_length > longest_palindrome_length\
    \ {\n            longest_palindrome_length = palindrome_length\n            longest_palindrome_start\
    \ = i\n        }\n    }\n    let prefix_start = longest_palindrome_start - longest_palindrome_length\
    \ + 1\n    let prefix_end = longest_palindrome_start + 1\n    let prefix = string[string.index(string.startIndex,\
    \ offsetBy: prefix_start)..<string.index(string.startIndex, offsetBy: prefix_end)]\n\
    \    let prefix_reversed = String(prefix.characters.reversed())\n    return string\
    \ + prefix_reversed", "    let string_length = string.characters.count\n    if\
    \ string_length == 0 {\n        return \"\"\n    }\n    var string_array = Array(string.characters)\n\
    \    var palindrome_suffix = Array(repeating: 0, count: string_length)\n    var\
    \ center = 0\n    var right = 0\n    for i in 0..<string_length {\n        let\
    \ mirror = 2 * center - i\n        if right > i {\n            palindrome_suffix[i]\
    \ = min(right - i, palindrome_suffix[mirror])\n        }\n        while i + palindrome_suffix[i]\
    \ + 1 < string_length && i - palindrome_suffix[i] - 1 >= 0 && string_array[i +\
    \ palindrome_suffix[i] + 1] == string_array[i - palindrome_suffix[i] - 1] {\n\
    \            palindrome_suffix[i] += 1\n        }\n        if i + palindrome_suffix[i]\
    \ > right {\n            center = i\n            right = i + palindrome_suffix[i]\n\
    \        }\n    }\n    let max_suffix_length = palindrome_suffix.max()!\n    let\
    \ prefix = string_array[0..<string_length - max_suffix_length]\n    let prefix_reversed\
    \ = prefix.reversed()\n    return String(string_array) + String(prefix_reversed)",
  "    let string_length = string.characters.count\n    if string_length == 0 {\n\
    \        return \"\"\n    }\n    let string_chars = Array(string.characters)\n\
    \    var longest_palindrome_length = 0\n    var longest_palindrome_start = 0\n\
    \    for i in 0..<string_length {\n        // Check for odd palindromes.\n   \
    \     var j = 0\n        while i - j >= 0 && i + j < string_length && string_chars[i\
    \ - j] == string_chars[i + j] {\n            j += 1\n        }\n        if j >\
    \ longest_palindrome_length {\n            longest_palindrome_length = j\n   \
    \         longest_palindrome_start = i - j + 1\n        }\n        // Check for\
    \ even palindromes.\n        j = 0\n        while i - j >= 0 && i + j + 1 < string_length\
    \ && string_chars[i - j] == string_chars[i + j + 1] {\n            j += 1\n  \
    \      }\n        if j > longest_palindrome_length {\n            longest_palindrome_length\
    \ = j\n            longest_palindrome_start = i - j + 1\n        }\n    }\n  \
    \  let prefix = String(string_chars[0..<longest_palindrome_start])\n    let reversed_prefix\
    \ = String(prefix.characters.reverse())\n    return string + reversed_prefix",
  "    let string_length = string.characters.count\n    if string_length == 0 {\n\
    \        return \"\"\n    }\n    let string_array = Array(string.characters)\n\
    \    var palindrome_suffix_length = 0\n    for i in 0..<string_length {\n    \
    \    if is_palindrome(string_array, start: i, end: string_length - 1) {\n    \
    \        palindrome_suffix_length = string_length - i\n            break\n   \
    \     }\n    }\n    var result = string\n    for i in 0..<string_length - palindrome_suffix_length\
    \ {\n        result.append(string_array[string_length - i - 1])\n    }\n    return\
    \ result", "    let length = string.characters.count\n    if length == 0 {\n \
    \       return \"\"\n    }\n    let suffix = longest_palindromic_suffix(string:\
    \ string)\n    let prefix = String(string.characters.prefix(length - suffix.characters.count))\n\
    \    return prefix + String(suffix.characters.reversed()) + suffix", "    let\
    \ reversed = String(string.characters.reverse())\n    let palindrome = string\
    \ + reversed\n    let lps = longest_palindromic_substring(palindrome)\n    let\
    \ prefix = String(string.characters.dropLast(lps.characters.count))\n    return\
    \ prefix + string", "    let string_length = string.characters.count\n    if string_length\
    \ <= 1 {\n        return string\n    }\n    let string_chars = Array(string.characters)\n\
    \    var palindrome_length = 0\n    for i in 0..<string_length {\n        let\
    \ j = string_length - i - 1\n        if string_chars[i] == string_chars[j] {\n\
    \            palindrome_length += 1\n        } else {\n            break\n   \
    \     }\n    }\n    let prefix = string.substringToIndex(string.startIndex.advancedBy(string_length\
    \ - palindrome_length))\n    return string + String(prefix.characters.reverse())",
  "    let string = string.lowercaseString\n    let string_length = string.characters.count\n\
    \    if string_length == 0 {\n        return \"\"\n    }\n    let string_array\
    \ = Array(string.characters)\n    var longest_palindrome_length = 0\n    var longest_palindrome_start\
    \ = 0\n    for i in 0..<string_length {\n        let palindrome_length = palindrome_length_at_index(string_array,\
    \ i)\n        if palindrome_length > longest_palindrome_length {\n           \
    \ longest_palindrome_length = palindrome_length\n            longest_palindrome_start\
    \ = i\n        }\n    }\n    let prefix_length = string_length - longest_palindrome_length\n\
    \    let prefix = string.substringToIndex(string.startIndex.advancedBy(prefix_length))\n\
    \    let reversed_prefix = String(prefix.characters.reverse())\n    return string\
    \ + reversed_prefix", "    if string.isEmpty {\n        return string\n    }\n\
    \    let string_length = string.count\n    let string_chars = Array(string)\n\
    \    var longest_palindrome_length = 0\n    var longest_palindrome_start = 0\n\
    \    for i in 0..<string_length {\n        let palindrome_length = longest_palindrome_length_at_index(string_chars:\
    \ string_chars, string_length: string_length, index: i)\n        if palindrome_length\
    \ > longest_palindrome_length {\n            longest_palindrome_length = palindrome_length\n\
    \            longest_palindrome_start = i\n        }\n    }\n    let palindrome_end\
    \ = longest_palindrome_start + longest_palindrome_length\n    let prefix = String(string_chars[0..<longest_palindrome_start])\n\
    \    let suffix = String(string_chars[palindrome_end..<string_length])\n    return\
    \ prefix + suffix + String(suffix.reversed())", "    let length = string.characters.count\n\
    \    if length == 0 {\n        return \"\"\n    }\n    let reversed = string.characters.reverse()\n\
    \    let reversed_string = String(reversed)\n    let lcs = longest_common_subsequence(string,\
    \ reversed_string)\n    let lcs_length = lcs.characters.count\n    if lcs_length\
    \ == length {\n        return string\n    }\n    let prefix = string.substringToIndex(string.startIndex.advancedBy(length\
    \ - lcs_length))\n    let reversed_prefix = prefix.characters.reverse()\n    let\
    \ reversed_prefix_string = String(reversed_prefix)\n    return string + reversed_prefix_string",
  "    let string_length = string.characters.count\n    if string_length == 0 {\n\
    \        return \"\"\n    }\n    let string_chars = Array(string.characters)\n\
    \    var longest_palindrome_length = 0\n    var longest_palindrome_start = 0\n\
    \    for i in 0..<string_length {\n        var palindrome_length = 0\n       \
    \ var palindrome_start = i\n        for j in 0..<i {\n            if string_chars[i\
    \ - j] == string_chars[i + j] {\n                palindrome_length += 1\n    \
    \            palindrome_start -= 1\n            } else {\n                break\n\
    \            }\n        }\n        if palindrome_length > longest_palindrome_length\
    \ {\n            longest_palindrome_length = palindrome_length\n            longest_palindrome_start\
    \ = palindrome_start\n        }\n    }\n    var result = string\n    for i in\
    \ 0..<string_length - longest_palindrome_length {\n        result.append(string_chars[longest_palindrome_start\
    \ - i])\n    }\n    return result", "    let string_length = string.characters.count\n\
    \    if string_length == 0 {\n        return \"\"\n    }\n    let string_characters\
    \ = Array(string.characters)\n    var palindrome_suffix_length = 0\n    for i\
    \ in 0..<string_length {\n        if is_palindrome(string: string_characters,\
    \ start: i, end: string_length - 1) {\n            palindrome_suffix_length =\
    \ string_length - i\n            break\n        }\n    }\n    var palindrome_prefix\
    \ = \"\"\n    for i in 0..<string_length - palindrome_suffix_length {\n      \
    \  palindrome_prefix.append(string_characters[i])\n    }\n    return string +\
    \ String(palindrome_prefix.characters.reversed())", "    if string.isEmpty {\n\
    \        return string\n    }\n    let string_length = string.characters.count\n\
    \    let string_characters = Array(string.characters)\n    let reversed_string\
    \ = String(string_characters.reverse())\n    let string_suffix = reversed_string.substringToIndex(string.startIndex.advancedBy(string_length\
    \ - 1))\n    let string_prefix = reversed_string.substringFromIndex(string.startIndex.advancedBy(string_length\
    \ - 1))\n    let longest_palindrome_suffix = longest_palindrome_suffix_of(string)\n\
    \    return string + string_suffix.substringFromIndex(longest_palindrome_suffix.startIndex)\
    \ + string_prefix", "    let s = Array(string)\n    let n = s.count\n    var i\
    \ = n\n    while i > 0 {\n        if is_palindrome(s[0..<i]) {\n            break\n\
    \        }\n        i -= 1\n    }\n    let prefix = s[0..<i]\n    let suffix =\
    \ s[i..<n]\n    return prefix + suffix.reversed()", "    let n = string.characters.count\n\
    \    if n == 0 {\n        return \"\"\n    }\n    let s = Array(string.characters)\n\
    \    let z = z_function(string: string)\n    var i = n - 1\n    while i > 0 &&\
    \ z[i] != n - i {\n        i -= 1\n    }\n    var result = string\n    for j in\
    \ 0..<n - i {\n        result.append(s[j])\n    }\n    return result", "    let\
    \ reversed = String(string.characters.reverse())\n    let longest_common_suffix\
    \ = longest_common_substring(string, reversed)\n    let prefix = String(string.characters.prefix(string.characters.count\
    \ - longest_common_suffix.characters.count))\n    return string + String(prefix.characters.reverse())",
  "    let reversed = String(string.characters.reverse())\n    let longest_common_suffix\
    \ = longest_common_suffix_length(string, reversed)\n    let prefix = string.substringToIndex(string.startIndex.advancedBy(string.characters.count\
    \ - longest_common_suffix))\n    return string + String(prefix.characters.reverse())",
  "    let s = string.characters\n    let n = s.count\n    let s_rev = s.reverse()\n\
    \    var z = [Int](count: n, repeatedValue: 0)\n    var l = 0\n    var r = 0\n\
    \    for i in 1..<n {\n        if i <= r {\n            z[i] = min(r - i + 1,\
    \ z[i - l])\n        }\n        while i + z[i] < n && s_rev[z[i]] == s[i + z[i]]\
    \ {\n            z[i] += 1\n        }\n        if i + z[i] - 1 > r {\n       \
    \     l = i\n            r = i + z[i] - 1\n        }\n    }\n    var prefix =\
    \ String(s[0..<(n - z[n - 1])])\n    return string + prefix.characters.reverse()",
  "    let reversed = String(string.characters.reverse())\n    let longest_common_postfix\
    \ = longest_common_substring(string, reversed)\n    let prefix = String(string.characters.dropLast(longest_common_postfix.characters.count))\n\
    \    return string + String(prefix.characters.reverse())", "    let string = string.lowercaseString\n\
    \    let string_length = string.characters.count\n    if string_length == 0 {\n\
    \        return \"\"\n    }\n    let string_characters = Array(string.characters)\n\
    \    var longest_palindrome_length = 0\n    var longest_palindrome_index = 0\n\
    \    for i in 0..<string_length {\n        let palindrome_length = longest_palindrome_length_at_index(string_characters,\
    \ index: i)\n        if palindrome_length > longest_palindrome_length {\n    \
    \        longest_palindrome_length = palindrome_length\n            longest_palindrome_index\
    \ = i\n        }\n    }\n    let prefix_length = longest_palindrome_index - longest_palindrome_length\
    \ + 1\n    let prefix = string.substringToIndex(string.startIndex.advancedBy(prefix_length))\n\
    \    let reversed_prefix = String(prefix.characters.reverse())\n    return string\
    \ + reversed_prefix", "    let n = string.characters.count\n    if n == 0 {\n\
    \        return \"\"\n    }\n    let chars = Array(string.characters)\n    var\
    \ i = n - 1\n    while i >= 0 {\n        if is_palindrome(chars, start: 0, end:\
    \ i) {\n            break\n        }\n        i -= 1\n    }\n    var result =\
    \ string\n    for j in 0..<n - i - 1 {\n        result.append(chars[n - j - 1])\n\
    \    }\n    return result", "    let reversed = String(string.characters.reverse())\n\
    \    let palindrome_suffix = longest_palindrome_suffix(string)\n    let prefix\
    \ = string.substringToIndex(string.startIndex.advancedBy(string.characters.count\
    \ - palindrome_suffix.characters.count))\n    return string + reversed.substringFromIndex(reversed.startIndex.advancedBy(palindrome_suffix.characters.count))",
  "    let string_length = string.characters.count\n    if string_length == 0 {\n\
    \        return \"\"\n    }\n    if string_length == 1 {\n        return string\n\
    \    }\n    let string_characters = Array(string.characters)\n    var longest_palindrome_length\
    \ = 0\n    var longest_palindrome_start = 0\n    for i in 0..<string_length {\n\
    \        let palindrome_length = palindrome_length_at_index(string_characters,\
    \ index: i)\n        if palindrome_length > longest_palindrome_length {\n    \
    \        longest_palindrome_length = palindrome_length\n            longest_palindrome_start\
    \ = i\n        }\n    }\n    let palindrome_end = longest_palindrome_start + longest_palindrome_length\n\
    \    let prefix_start = palindrome_end - longest_palindrome_length\n    let prefix_end\
    \ = longest_palindrome_start\n    let prefix = String(string_characters[prefix_start..<prefix_end])\n\
    \    return string + String(prefix.characters.reverse())", "    let string = string.characters\n\
    \    let string_length = string.count\n    let string_length_half = string_length\
    \ / 2\n    var longest_palindrome_length = 0\n    var longest_palindrome_start\
    \ = 0\n    for i in 0..<string_length_half {\n        let palindrome_length =\
    \ palindrome_length_at_index(string, index: i)\n        if palindrome_length >\
    \ longest_palindrome_length {\n            longest_palindrome_length = palindrome_length\n\
    \            longest_palindrome_start = i\n        }\n    }\n    let prefix_start\
    \ = longest_palindrome_start - (longest_palindrome_length - 1)\n    let prefix_end\
    \ = longest_palindrome_start\n    let prefix = string[prefix_start..<prefix_end]\n\
    \    let prefix_reversed = String(prefix.reverse())\n    return String(string)\
    \ + prefix_reversed", "    let string_length = string.characters.count\n    if\
    \ string_length == 0 {\n        return \"\"\n    }\n    let string_chars = Array(string.characters)\n\
    \    let reversed_string = String(string_chars.reverse())\n    let string_suffix\
    \ = string + reversed_string\n    let string_suffix_length = string_suffix.characters.count\n\
    \    let string_suffix_chars = Array(string_suffix.characters)\n    var longest_palindrome_length\
    \ = 0\n    var longest_palindrome_index = 0\n    for i in 0..<string_suffix_length\
    \ {\n        var is_palindrome = true\n        let max_palindrome_length = min(i\
    \ + 1, string_suffix_length - i)\n        for j in 0..<max_palindrome_length {\n\
    \            if string_suffix_chars[i - j] != string_suffix_chars[i + j] {\n \
    \               is_palindrome = false\n                break\n            }\n\
    \        }\n        if is_palindrome && max_palindrome_length > longest_palindrome_length\
    \ {\n            longest_palindrome_length = max_palindrome_length\n         \
    \   longest_palindrome_index = i\n        }\n    }\n    let prefix_start = longest_palindrome_index\
    \ - longest_palindrome_length + 1\n    let prefix_end = longest_palindrome_index\
    \ + 1\n    let prefix = String(string_suffix_chars[prefix_start..<prefix_end])\n\
    \    return string + String(prefix.characters.reverse())", "    let string = string.characters\n\
    \    let string_length = string.count\n    var longest_palindrome_length = 0\n\
    \    var longest_palindrome_start = 0\n    for i in 0..<string_length {\n    \
    \    let palindrome_length = palindrome_length_at_index(string, index: i)\n  \
    \      if palindrome_length > longest_palindrome_length {\n            longest_palindrome_length\
    \ = palindrome_length\n            longest_palindrome_start = i\n        }\n \
    \   }\n    let prefix_start = longest_palindrome_start - longest_palindrome_length\
    \ + 1\n    let prefix_end = longest_palindrome_start + 1\n    let prefix = string[prefix_start..<prefix_end]\n\
    \    let reversed_prefix = String(prefix.reverse())\n    return string + reversed_prefix",
  "    let string_length = string.characters.count\n    if string_length == 0 {\n\
    \        return \"\"\n    }\n    let string_array = Array(string.characters)\n\
    \    var longest_palindrome_length = 0\n    var longest_palindrome_start = 0\n\
    \    for i in 0..<string_length {\n        let palindrome_length = palindrome_length_at_index(string_array,\
    \ index: i)\n        if palindrome_length > longest_palindrome_length {\n    \
    \        longest_palindrome_length = palindrome_length\n            longest_palindrome_start\
    \ = i\n        }\n    }\n    var result = string\n    for i in 0..<string_length\
    \ - longest_palindrome_length {\n        result.append(string_array[string_length\
    \ - i - 1])\n    }\n    return result", "    let reversed = String(string.characters.reverse())\n\
    \    let longest_suffix = longest_common_suffix(string, reversed)\n    let prefix\
    \ = string.substringToIndex(string.startIndex.advancedBy(string.characters.count\
    \ - longest_suffix.characters.count))\n    return string + String(prefix.characters.reverse())",
  "    let reversed = String(string.characters.reverse())\n    let reversed_suffix\
    \ = reversed.suffix(string.characters.count - longest_palindromic_suffix(string:\
    \ string).characters.count)\n    return string + reversed_suffix", "    let string_length\
    \ = string.characters.count\n    if string_length == 0 {\n        return \"\"\n\
    \    }\n    let string_chars = Array(string.characters)\n    let string_chars_reversed\
    \ = Array(string.characters.reversed())\n    var longest_palindrome_length = 0\n\
    \    var longest_palindrome_index = 0\n    for i in 0..<string_length {\n    \
    \    var j = 0\n        while i + j < string_length && j < string_length && string_chars[i\
    \ + j] == string_chars_reversed[j] {\n            j += 1\n        }\n        if\
    \ j > longest_palindrome_length {\n            longest_palindrome_length = j\n\
    \            longest_palindrome_index = i\n        }\n    }\n    var result =\
    \ string\n    for i in 0..<string_length - longest_palindrome_index - longest_palindrome_length\
    \ {\n        result.append(string_chars_reversed[i])\n    }\n    return result",
  "    let string = string.characters\n    let string_length = string.count\n    let\
    \ string_half_length = string_length / 2\n    var palindrome_suffix_length = 0\n\
    \    for i in 0..<string_half_length {\n        if string[i] == string[string_length\
    \ - i - 1] {\n            palindrome_suffix_length += 1\n        } else {\n  \
    \          break\n        }\n    }\n    let palindrome_prefix_length = string_length\
    \ - palindrome_suffix_length\n    let palindrome_prefix = string[0..<palindrome_prefix_length]\n\
    \    let palindrome_suffix = string[palindrome_suffix_length..<string_length]\n\
    \    let palindrome_prefix_reversed = palindrome_prefix.reversed()\n    return\
    \ String(palindrome_prefix + palindrome_suffix + palindrome_prefix_reversed)",
  "    let string_length = string.characters.count\n    if string_length == 0 {\n\
    \        return \"\"\n    }\n    let string_characters = Array(string.characters)\n\
    \    var longest_palindrome_length = 0\n    var longest_palindrome_start = 0\n\
    \    for i in 0..<string_length {\n        let palindrome_length = palindrome_length_at_index(string_characters,\
    \ index: i)\n        if palindrome_length > longest_palindrome_length {\n    \
    \        longest_palindrome_length = palindrome_length\n            longest_palindrome_start\
    \ = i\n        }\n    }\n    let prefix_start = longest_palindrome_start - longest_palindrome_length\
    \ + 1\n    let prefix_end = longest_palindrome_start + 1\n    let prefix = String(string_characters[prefix_start..<prefix_end])\n\
    \    let prefix_reversed = String(prefix.characters.reverse())\n    return string\
    \ + prefix_reversed", "    let rev = string.reverse()\n    let l = string.characters.count\n\
    \    let s = string + \"#\" + rev\n    var z = [Int](count: s.characters.count,\
    \ repeatedValue: 0)\n    var left = 0\n    var right = 0\n    for i in 1..<s.characters.count\
    \ {\n        if i > right {\n            left = right = i\n            while right\
    \ < s.characters.count && s[s.startIndex.advancedBy(right)] == s[s.startIndex.advancedBy(right\
    \ - left)] {\n                right += 1\n            }\n            z[i] = right\
    \ - left\n            right -= 1\n        } else {\n            let k = i - left\n\
    \            if z[k] < right - i + 1 {\n                z[i] = z[k]\n        \
    \    } else {\n                left = i\n                while right < s.characters.count\
    \ && s[s.startIndex.advancedBy(right)] == s[s.startIndex.advancedBy(right - left)]\
    \ {\n                    right += 1\n                }\n                z[i] =\
    \ right - left\n                right -= 1\n            }\n        }\n    }\n\
    \    return string + rev.substringFromIndex(rev.startIndex.advancedBy(l - z[s.characters.count\
    \ - 1]))", "    let string_length = string.characters.count\n    if string_length\
    \ == 0 {\n        return \"\"\n    }\n    let string_characters = Array(string.characters)\n\
    \    var longest_palindrome_length = 0\n    var longest_palindrome_index = 0\n\
    \    for i in 0..<string_length {\n        let palindrome_length = palindrome_length_at_index(string_characters,\
    \ index: i)\n        if palindrome_length > longest_palindrome_length {\n    \
    \        longest_palindrome_length = palindrome_length\n            longest_palindrome_index\
    \ = i\n        }\n    }\n    let prefix_start = longest_palindrome_index - longest_palindrome_length\
    \ + 1\n    let prefix_end = longest_palindrome_index + 1\n    let prefix = string_characters[prefix_start..<prefix_end]\n\
    \    let prefix_reversed = prefix.reverse()\n    let result = string + String(prefix_reversed)\n\
    \    return result", "    if string.isEmpty {\n        return string\n    }\n\
    \    let reversed_string = String(string.reversed())\n    let string_length =\
    \ string.count\n    let reversed_string_length = reversed_string.count\n    var\
    \ longest_palindrome_length = 0\n    var longest_palindrome_index = 0\n    var\
    \ z_function = [Int](repeating: 0, count: reversed_string_length)\n    z_function[0]\
    \ = string_length\n    var left = 0\n    var right = 0\n    for i in 1..<reversed_string_length\
    \ {\n        if i <= right {\n            z_function[i] = min(right - i + 1, z_function[i\
    \ - left])\n        }\n        while i + z_function[i] < reversed_string_length\
    \ && string[string.index(string.startIndex, offsetBy: z_function[i])] == reversed_string[reversed_string.index(reversed_string.startIndex,\
    \ offsetBy: i + z_function[i])] {\n            z_function[i] += 1\n        }\n\
    \        if i + z_function[i] - 1 > right {\n            left = i\n          \
    \  right = i + z_function[i] - 1\n        }\n        if z_function[i] > longest_palindrome_length\
    \ {\n            longest_palindrome_length = z_function[i]\n            longest_palindrome_index\
    \ = i\n        }\n    }\n    return string + String(reversed_string[reversed_string.index(reversed_string.startIndex,\
    \ offsetBy: longest_palindrome_index + longest_palindrome_length)..<reversed_string.endIndex])",
  "    let reversed = String(string.characters.reverse())\n    let longest_common_prefix\
    \ = longest_common_prefix_suffix(string, reversed)\n    let prefix = String(string.characters.prefixUpTo(string.characters.endIndex.advancedBy(-longest_common_prefix)))\n\
    \    return string + reversed.substringFromIndex(prefix.endIndex)", "    if string.isEmpty\
    \ {\n        return string\n    }\n    let string_length = string.characters.count\n\
    \    let string_characters = Array(string.characters)\n    var longest_palindrome_length\
    \ = 0\n    var longest_palindrome_index = -1\n    for i in 0..<string_length {\n\
    \        let palindrome_length = longest_palindrome_length_at_index(string_characters,\
    \ index: i)\n        if palindrome_length > longest_palindrome_length {\n    \
    \        longest_palindrome_length = palindrome_length\n            longest_palindrome_index\
    \ = i\n        }\n    }\n    let prefix_start = longest_palindrome_index - longest_palindrome_length\
    \ + 1\n    let prefix_end = longest_palindrome_index + 1\n    let prefix = String(string_characters[prefix_start..<prefix_end])\n\
    \    let prefix_reversed = String(prefix.characters.reverse())\n    return string\
    \ + prefix_reversed", "    let string_length = string.characters.count\n    if\
    \ string_length == 0 {\n        return \"\"\n    }\n    let string_array = Array(string.characters)\n\
    \    var longest_palindrome_length = 0\n    var longest_palindrome_start = 0\n\
    \    for i in 0..<string_length {\n        let palindrome_length = longest_palindrome_length_at_index(string_array,\
    \ index: i)\n        if palindrome_length > longest_palindrome_length {\n    \
    \        longest_palindrome_length = palindrome_length\n            longest_palindrome_start\
    \ = i\n        }\n    }\n    let prefix_start = longest_palindrome_start - longest_palindrome_length\
    \ + 1\n    let prefix_end = longest_palindrome_start + 1\n    let prefix = string_array[prefix_start..<prefix_end]\n\
    \    let reversed_prefix = prefix.reverse()\n    return string + String(reversed_prefix)",
  "    let string_length = string.characters.count\n    if string_length == 0 {\n\
    \        return \"\"\n    }\n    let string_characters = Array(string.characters)\n\
    \    var longest_palindrome_length = 0\n    var longest_palindrome_start = 0\n\
    \    for i in 0..<string_length {\n        let palindrome_length = palindrome_length_at_index(string_characters,\
    \ index: i)\n        if palindrome_length > longest_palindrome_length {\n    \
    \        longest_palindrome_length = palindrome_length\n            longest_palindrome_start\
    \ = i\n        }\n    }\n    let prefix_length = string_length - longest_palindrome_length\n\
    \    let prefix = string_characters[0..<prefix_length]\n    let prefix_reversed\
    \ = prefix.reverse()\n    let result = string + String(prefix_reversed)\n    return\
    \ result", "    let string = string.characters\n    let string_length = string.count\n\
    \    if string_length == 0 {\n        return \"\"\n    }\n    var longest_palindrome_length\
    \ = 0\n    var longest_palindrome_index = 0\n    for i in 0..<string_length {\n\
    \        var j = 0\n        while i - j >= 0 && i + j < string_length && string[i\
    \ - j] == string[i + j] {\n            j += 1\n        }\n        if j > longest_palindrome_length\
    \ {\n            longest_palindrome_length = j\n            longest_palindrome_index\
    \ = i\n        }\n    }\n    let palindrome_end = longest_palindrome_index + longest_palindrome_length\n\
    \    let palindrome_begin = longest_palindrome_index - longest_palindrome_length\
    \ + 1\n    let prefix = string[0..<palindrome_begin].reverse()\n    let suffix\
    \ = string[palindrome_end..<string_length]\n    return String(prefix + string\
    \ + suffix)", "    let string_length = string.characters.count\n    if string_length\
    \ == 0 {\n        return \"\"\n    }\n    let string_array = Array(string.characters)\n\
    \    var longest_palindrome_length = 0\n    var longest_palindrome_index = 0\n\
    \    for i in 0..<string_length {\n        let palindrome_length = palindrome_length_at_index(string_array,\
    \ index: i)\n        if palindrome_length > longest_palindrome_length {\n    \
    \        longest_palindrome_length = palindrome_length\n            longest_palindrome_index\
    \ = i\n        }\n    }\n    let prefix_length = string_length - longest_palindrome_length\n\
    \    let prefix = string_array[0..<prefix_length]\n    let prefix_reversed = prefix.reverse()\n\
    \    let suffix = string_array[prefix_length..<string_length]\n    return String(suffix)\
    \ + String(prefix_reversed)", "    let length = string.characters.count\n    if\
    \ length == 0 {\n        return \"\"\n    }\n    let chars = Array(string.characters)\n\
    \    let reversed = chars.reverse()\n    var i = 0\n    while i < length {\n \
    \       if chars[i] == reversed[i] {\n            i += 1\n        } else {\n \
    \           break\n        }\n    }\n    return string + String(reversed[i..<length])",
  "    let string_length = string.characters.count\n    if string_length == 0 {\n\
    \        return \"\"\n    }\n    let string_array = Array(string.characters)\n\
    \    var palindrome_length = 0\n    var palindrome_start = 0\n    for i in 0..<string_length\
    \ {\n        let length = max(\n            expand_palindrome(string_array, i,\
    \ i),\n            expand_palindrome(string_array, i, i + 1)\n        )\n    \
    \    if length > palindrome_length {\n            palindrome_length = length\n\
    \            palindrome_start = i - (length - 1) / 2\n        }\n    }\n    let\
    \ prefix = string.substringToIndex(string.startIndex.advancedBy(palindrome_start))\n\
    \    let suffix = String(prefix.characters.reverse())\n    return string + suffix",
  "    let n = string.count\n    if n == 0 {\n        return \"\"\n    }\n    let\
    \ string = Array(string)\n    var palindrome = string\n    var i = 0\n    var\
    \ j = n - 1\n    while i < j {\n        if string[i] != string[j] {\n        \
    \    break\n        }\n        i += 1\n        j -= 1\n    }\n    if i >= j {\n\
    \        return String(string)\n    }\n    let suffix = Array(string[i...])\n\
    \    let prefix = Array(string[..<i])\n    let reversed_prefix = prefix.reversed()\n\
    \    palindrome.append(contentsOf: reversed_prefix)\n    return String(palindrome)",
  "    let string = string.lowercaseString\n    let reversed = String(string.characters.reverse())\n\
    \    let length = string.characters.count\n    var i = 0\n    while i < length\
    \ {\n        if string.substringFromIndex(string.startIndex.advancedBy(i)) ==\
    \ reversed.substringToIndex(reversed.startIndex.advancedBy(length - i)) {\n  \
    \          break\n        }\n        i += 1\n    }\n    return string + reversed.substringFromIndex(reversed.startIndex.advancedBy(i))",
  "    let string_length = string.characters.count\n    let reversed_string = String(string.characters.reverse())\n\
    \    let string_with_reversed_prefix = string + reversed_string\n    let string_with_reversed_prefix_length\
    \ = string_with_reversed_prefix.characters.count\n    var longest_palindromic_suffix\
    \ = [Int](count: string_with_reversed_prefix_length, repeatedValue: 0)\n    var\
    \ current_longest_palindromic_suffix_length = 0\n    for i in 1..<string_with_reversed_prefix_length\
    \ {\n        if string_with_reversed_prefix[i] == string_with_reversed_prefix[current_longest_palindromic_suffix_length]\
    \ {\n            current_longest_palindromic_suffix_length += 1\n            longest_palindromic_suffix[i]\
    \ = current_longest_palindromic_suffix_length\n        } else {\n            if\
    \ current_longest_palindromic_suffix_length != 0 {\n                current_longest_palindromic_suffix_length\
    \ = longest_palindromic_suffix[current_longest_palindromic_suffix_length - 1]\n\
    \                i -= 1\n            }\n        }\n    }\n    return string +\
    \ reversed_string[string_length - longest_palindromic_suffix[string_with_reversed_prefix_length\
    \ - 1]..<string_length]", "    let string_length = string.characters.count\n \
    \   if string_length == 0 {\n        return \"\"\n    }\n    let string_array\
    \ = Array(string.characters)\n    var longest_palindrome_length = 0\n    var longest_palindrome_start\
    \ = 0\n    for i in 0..<string_length {\n        var j = 0\n        while i -\
    \ j >= 0 && i + j < string_length && string_array[i - j] == string_array[i + j]\
    \ {\n            j += 1\n        }\n        j -= 1\n        if 2 * j + 1 > longest_palindrome_length\
    \ {\n            longest_palindrome_length = 2 * j + 1\n            longest_palindrome_start\
    \ = i - j\n        }\n        j = 0\n        while i - j >= 0 && i + j + 1 < string_length\
    \ && string_array[i - j] == string_array[i + j + 1] {\n            j += 1\n  \
    \      }\n        j -= 1\n        if 2 * j + 2 > longest_palindrome_length {\n\
    \            longest_palindrome_length = 2 * j + 2\n            longest_palindrome_start\
    \ = i - j\n        }\n    }\n    let prefix = string.substringToIndex(string.startIndex.advancedBy(longest_palindrome_start))\n\
    \    return string + String(prefix.characters.reverse())", "    let length = string.characters.count\n\
    \    let chars = Array(string.characters)\n    var i = 0\n    var j = length -\
    \ 1\n    while i < j {\n        if chars[i] != chars[j] {\n            break\n\
    \        }\n        i += 1\n        j -= 1\n    }\n    if i >= j {\n        return\
    \ string\n    }\n    let prefix = String(chars[0..<i])\n    let suffix = String(chars[i..<length])\n\
    \    return prefix + reverse(string: suffix) + suffix", "    let string = string.characters\n\
    \    let string_len = string.count\n    if string_len == 0 {\n        return \"\
    \"\n    }\n    var i = string_len - 1\n    while i >= 0 {\n        if is_palindrome(string,\
    \ start: 0, end: i) {\n            break\n        }\n        i -= 1\n    }\n \
    \   var result = string\n    for j in 0..<string_len - i - 1 {\n        result.append(string[string_len\
    \ - j - 1])\n    }\n    return String(result)", "    let n = string.characters.count\n\
    \    if n == 0 {\n        return \"\"\n    }\n    var suffix = \"\"\n    var prefix\
    \ = \"\"\n    var i = 0\n    while i < n {\n        suffix = String(string[string.index(string.startIndex,\
    \ offsetBy: i)]) + suffix\n        prefix = prefix + String(string[string.index(string.startIndex,\
    \ offsetBy: i)])\n        if is_palindrome(string: suffix + prefix) {\n      \
    \      break\n        }\n        i += 1\n    }\n    return string + reverse(string:\
    \ prefix)", "    let string = string.characters\n    let string_length = string.count\n\
    \    let reversed_string = string.reverse()\n    var longest_palindrome_length\
    \ = 0\n    var longest_palindrome_index = 0\n    for i in 0..<string_length {\n\
    \        let string_prefix = string[0..<i]\n        let string_suffix = reversed_string[0..<i]\n\
    \        if string_prefix == string_suffix {\n            longest_palindrome_length\
    \ = i\n            longest_palindrome_index = i\n        }\n    }\n    let string_prefix\
    \ = string[0..<longest_palindrome_index]\n    let string_suffix = reversed_string[0..<longest_palindrome_index]\n\
    \    let string_prefix_reversed = string_prefix.reverse()\n    return String(string_prefix\
    \ + string_suffix + string_prefix_reversed)", "    let string_length = string.characters.count\n\
    \    if string_length == 0 {\n        return \"\"\n    }\n    let string_chars\
    \ = Array(string.characters)\n    let string_chars_reversed = Array(string.characters.reversed())\n\
    \    var longest_palindrome_suffix_length = 0\n    for i in 0..<string_length\
    \ {\n        if string_chars[i] == string_chars_reversed[string_length - 1 - i]\
    \ {\n            longest_palindrome_suffix_length += 1\n        } else {\n   \
    \         break\n        }\n    }\n    var result = string\n    for i in 0..<string_length\
    \ - longest_palindrome_suffix_length {\n        result.append(string_chars_reversed[i])\n\
    \    }\n    return result", "    if string.isEmpty {\n        return string\n\
    \    }\n    let string_length = string.characters.count\n    let string_array\
    \ = Array(string.characters)\n    var longest_palindrome_length = 0\n    var longest_palindrome_index\
    \ = 0\n    // Find the longest palindrome suffix.\n    for i in 0..<string_length\
    \ {\n        let left = i\n        let right = string_length - 1\n        var\
    \ palindrome_length = 0\n        while left < right {\n            if string_array[left]\
    \ == string_array[right] {\n                palindrome_length += 1\n         \
    \       left += 1\n                right -= 1\n            } else {\n        \
    \        break\n            }\n        }\n        if palindrome_length > longest_palindrome_length\
    \ {\n            longest_palindrome_length = palindrome_length\n            longest_palindrome_index\
    \ = i\n        }\n    }\n    // Append reverse of the prefix to the end of the\
    \ string.\n    var result = string\n    for i in 0..<string_length - longest_palindrome_length\
    \ {\n        result.append(string_array[string_length - 1 - i])\n    }\n    return\
    \ result", "    let string = string.characters\n    let string_length = string.count\n\
    \    if string_length == 0 {\n        return \"\"\n    }\n    var suffix = [Character]()\n\
    \    var prefix = [Character]()\n    var longest_palindrome_length = 0\n    for\
    \ i in 0..<string_length {\n        let suffix_length = string_length - i\n  \
    \      let prefix_length = i\n        if suffix_length <= longest_palindrome_length\
    \ {\n            break\n        }\n        if is_palindrome(string: string, start:\
    \ i, length: suffix_length) {\n            longest_palindrome_length = suffix_length\n\
    \            suffix = Array(string[i..<string_length])\n            prefix = Array(string[0..<prefix_length])\n\
    \        }\n    }\n    return String(prefix.reversed()) + String(string) + String(suffix.reversed())",
  "    let string_length = string.characters.count\n    if string_length == 0 {\n\
    \        return \"\"\n    }\n    var suffix_length = string_length\n    while\
    \ suffix_length > 0 {\n        let suffix = string.substring(from: string.index(string.startIndex,\
    \ offsetBy: string_length - suffix_length))\n        if is_palindrome(string:\
    \ suffix) {\n            break\n        }\n        suffix_length -= 1\n    }\n\
    \    let prefix = string.substring(to: string.index(string.startIndex, offsetBy:\
    \ string_length - suffix_length))\n    return string + String(prefix.characters.reversed())",
  "    let string = string.lowercaseString\n    let length = string.characters.count\n\
    \    if length == 0 {\n        return \"\"\n    }\n    var suffix = \"\"\n   \
    \ for i in 0..<length {\n        let index = string.startIndex.advancedBy(i)\n\
    \        let suffix_length = length - i\n        let suffix_end = string.endIndex.advancedBy(-i)\n\
    \        let suffix_range = index..<suffix_end\n        let suffix_string = string.substringWithRange(suffix_range)\n\
    \        if is_palindrome(suffix_string) {\n            suffix = suffix_string\n\
    \            break\n        }\n    }\n    let prefix = String(suffix.characters.reverse())\n\
    \    return string + prefix", "    let string_length = string.characters.count\n\
    \    if string_length == 0 {\n        return \"\"\n    }\n    let string_array\
    \ = Array(string.characters)\n    let reversed_string_array = Array(string.characters.reversed())\n\
    \    var longest_palindrome_length = 0\n    var longest_palindrome_index = 0\n\
    \    for i in 0..<string_length {\n        var j = 0\n        while i + j < string_length\
    \ && j < string_length && string_array[i + j] == reversed_string_array[j] {\n\
    \            j += 1\n        }\n        if j > longest_palindrome_length {\n \
    \           longest_palindrome_length = j\n            longest_palindrome_index\
    \ = i\n        }\n    }\n    var result = string\n    for i in 0..<string_length\
    \ - longest_palindrome_length {\n        result.append(reversed_string_array[i])\n\
    \    }\n    return result", "    let string_length = string.characters.count\n\
    \    if string_length == 0 {\n        return \"\"\n    }\n    if string_length\
    \ == 1 {\n        return string\n    }\n    let string_chars = Array(string.characters)\n\
    \    var suffix_length = 0\n    for i in 0..<string_length {\n        if string_chars[i]\
    \ == string_chars[string_length - 1 - i] {\n            suffix_length += 1\n \
    \       } else {\n            break\n        }\n    }\n    if suffix_length ==\
    \ string_length {\n        return string\n    }\n    var prefix = string.substringToIndex(string.startIndex.advancedBy(string_length\
    \ - suffix_length))\n    prefix = String(prefix.characters.reverse())\n    return\
    \ string + prefix", "    let length = string.characters.count\n    if length ==\
    \ 0 {\n        return \"\"\n    }\n    let string_array = Array(string.characters)\n\
    \    var i = 0\n    var j = length - 1\n    while i < j {\n        if string_array[i]\
    \ != string_array[j] {\n            break\n        }\n        i += 1\n       \
    \ j -= 1\n    }\n    if i >= j {\n        return string\n    }\n    let prefix\
    \ = string.substringToIndex(string.startIndex.advancedBy(i))\n    let suffix =\
    \ string.substringFromIndex(string.startIndex.advancedBy(i))\n    return prefix\
    \ + String(suffix.characters.reverse()) + suffix", "    let string_length = string.characters.count\n\
    \    if string_length == 0 {\n        return \"\"\n    }\n    let string_chars\
    \ = Array(string.characters)\n    var longest_palindrome_length = 0\n    var longest_palindrome_start\
    \ = 0\n    for i in 0..<string_length {\n        let palindrome_length = longest_palindrome_length_at(string_chars,\
    \ start: i)\n        if palindrome_length > longest_palindrome_length {\n    \
    \        longest_palindrome_length = palindrome_length\n            longest_palindrome_start\
    \ = i\n        }\n    }\n    let prefix_start = longest_palindrome_start + longest_palindrome_length\n\
    \    let prefix_end = string_length\n    let prefix = String(string_chars[prefix_start..<prefix_end])\n\
    \    let prefix_reversed = String(prefix.characters.reverse())\n    return string\
    \ + prefix_reversed", "    let string = string.characters\n    let string_len\
    \ = string.count\n    if string_len == 0 {\n        return \"\"\n    }\n    var\
    \ i = string_len - 1\n    while i >= 0 {\n        if is_palindrome(string, start:\
    \ 0, end: i) {\n            break\n        }\n        i -= 1\n    }\n    var prefix\
    \ = string[string.startIndex..<string.startIndex.advancedBy(i + 1)]\n    prefix\
    \ = prefix.reverse()\n    return string + prefix", "    let string_length = string.characters.count\n\
    \    if string_length == 0 {\n        return \"\"\n    }\n    let string_characters\
    \ = Array(string.characters)\n    var longest_palindrome_length = 0\n    var longest_palindrome_index\
    \ = 0\n    for i in 0..<string_length {\n        let palindrome_length = longest_palindrome_length_at_index(string_characters,\
    \ index: i)\n        if palindrome_length > longest_palindrome_length {\n    \
    \        longest_palindrome_length = palindrome_length\n            longest_palindrome_index\
    \ = i\n        }\n    }\n    let prefix_begin = longest_palindrome_index - longest_palindrome_length\
    \ + 1\n    let prefix_end = longest_palindrome_index + 1\n    let prefix = String(string_characters[prefix_begin..<prefix_end])\n\
    \    let reverse_prefix = String(prefix.characters.reverse())\n    return string\
    \ + reverse_prefix", "    let s = Array(string)\n    let n = s.count\n    var\
    \ i = 0\n    while i < n {\n        if is_palindrome(s, i, n - 1) {\n        \
    \    break\n        }\n        i += 1\n    }\n    var result = string\n    for\
    \ j in 0..<i {\n        result.append(s[i - j - 1])\n    }\n    return result",
  "    let reversed = String(string.characters.reverse())\n    let combined = string\
    \ + \"#\" + reversed\n    let lps = longest_prefix_suffix(combined)\n    let prefix\
    \ = string.substringToIndex(string.startIndex.advancedBy(lps))\n    let suffix\
    \ = String(prefix.characters.reverse())\n    return string + suffix", "    if\
    \ string.isEmpty {\n        return string\n    }\n    let suffix = longest_palindromic_suffix(string)\n\
    \    let prefix = String(string.prefix(string.count - suffix.count).reversed())\n\
    \    return string + prefix", "    let string = string.characters\n    let string_length\
    \ = string.count\n    if string_length == 0 {\n        return \"\"\n    }\n  \
    \  var longest_palindrome_length = 0\n    var longest_palindrome_index = -1\n\
    \    for i in 0..<string_length {\n        let palindrome_length = palindrome_length_at_index(string,\
    \ index: i)\n        if palindrome_length > longest_palindrome_length {\n    \
    \        longest_palindrome_length = palindrome_length\n            longest_palindrome_index\
    \ = i\n        }\n    }\n    let prefix_length = string_length - longest_palindrome_length\n\
    \    let prefix = string[string.startIndex..<string.startIndex.advancedBy(prefix_length)]\n\
    \    let reversed_prefix = String(prefix.reverse())\n    let palindrome = string\
    \ + reversed_prefix\n    return palindrome", "    let string_length = string.characters.count\n\
    \    if string_length == 0 {\n        return \"\"\n    }\n    let string_array\
    \ = Array(string.characters)\n    var suffix_length = string_length\n    while\
    \ suffix_length > 0 {\n        if is_palindrome(string_array, start: string_length\
    \ - suffix_length, end: string_length - 1) {\n            break\n        }\n \
    \       suffix_length -= 1\n    }\n    var prefix_length = string_length - suffix_length\n\
    \    var result = string\n    while prefix_length > 0 {\n        result.append(string_array[string_length\
    \ - prefix_length])\n        prefix_length -= 1\n    }\n    return result", " \
    \   let string_length = string.characters.count\n    if string_length == 0 {\n\
    \        return \"\"\n    }\n    let string_chars = Array(string.characters)\n\
    \    var longest_palindrome_length = 0\n    var longest_palindrome_start = 0\n\
    \    for i in 0..<string_length {\n        var j = 0\n        while i - j >= 0\
    \ && i + j < string_length && string_chars[i - j] == string_chars[i + j] {\n \
    \           j += 1\n        }\n        if 2 * j - 1 > longest_palindrome_length\
    \ {\n            longest_palindrome_length = 2 * j - 1\n            longest_palindrome_start\
    \ = i - j + 1\n        }\n        j = 0\n        while i - j >= 0 && i + j + 1\
    \ < string_length && string_chars[i - j] == string_chars[i + j + 1] {\n      \
    \      j += 1\n        }\n        if 2 * j > longest_palindrome_length {\n   \
    \         longest_palindrome_length = 2 * j\n            longest_palindrome_start\
    \ = i - j + 1\n        }\n    }\n    let prefix = String(string_chars[0..<longest_palindrome_start])\n\
    \    let reversed_prefix = String(prefix.characters.reverse())\n    return string\
    \ + reversed_prefix", "    if string.isEmpty {\n        return string\n    }\n\
    \    let reversed = String(string.characters.reverse())\n    let concatenated\
    \ = string + \"#\" + reversed\n    let lps = longest_prefix_suffix(string: concatenated)\n\
    \    let prefix = String(string.characters.prefix(string.characters.count - lps))\n\
    \    return string + String(prefix.characters.reverse())", "    let string_length\
    \ = string.characters.count\n    if string_length == 0 {\n        return \"\"\n\
    \    }\n    let string_chars = Array(string.characters)\n    var longest_palindrome_length\
    \ = 0\n    var longest_palindrome_index = 0\n    for i in 0..<string_length {\n\
    \        let palindrome_length = longest_palindrome_length_at_index(string_chars,\
    \ index: i)\n        if palindrome_length > longest_palindrome_length {\n    \
    \        longest_palindrome_length = palindrome_length\n            longest_palindrome_index\
    \ = i\n        }\n    }\n    let palindrome_end_index = longest_palindrome_index\
    \ + longest_palindrome_length\n    let prefix_start_index = palindrome_end_index\
    \ - longest_palindrome_length\n    let prefix_end_index = longest_palindrome_index\n\
    \    let prefix = string_chars[prefix_start_index..<prefix_end_index]\n    let\
    \ prefix_reversed = prefix.reverse()\n    let palindrome = string_chars[0..<palindrome_end_index]\
    \ + prefix_reversed\n    return String(palindrome)", "    let string_length =\
    \ string.characters.count\n    if string_length == 0 {\n        return \"\"\n\
    \    }\n    let string_array = Array(string.characters)\n    var palindrome_length\
    \ = 0\n    var palindrome_start = 0\n    for i in 0..<string_length {\n      \
    \  let palindrome_length_odd = get_palindrome_length(string_array, i, i)\n   \
    \     let palindrome_length_even = get_palindrome_length(string_array, i, i +\
    \ 1)\n        let palindrome_length_current = max(palindrome_length_odd, palindrome_length_even)\n\
    \        if palindrome_length_current > palindrome_length {\n            palindrome_length\
    \ = palindrome_length_current\n            palindrome_start = i - (palindrome_length\
    \ - 1) / 2\n        }\n    }\n    let prefix = string.substringToIndex(string.startIndex.advancedBy(palindrome_start))\n\
    \    let prefix_reversed = String(prefix.characters.reverse())\n    return string\
    \ + prefix_reversed", "    let string_length = string.characters.count\n    if\
    \ string_length == 0 {\n        return \"\"\n    }\n    var string_array = Array(string.characters)\n\
    \    var palindrome_length = 0\n    for i in 0..<string_length {\n        if is_palindrome(string_array,\
    \ start: i - palindrome_length - 1, end: i) {\n            palindrome_length +=\
    \ 2\n        } else if is_palindrome(string_array, start: i - palindrome_length,\
    \ end: i) {\n            palindrome_length += 1\n        }\n    }\n    var result\
    \ = string\n    for i in 0..<string_length - palindrome_length {\n        result.append(string_array[string_length\
    \ - i - 1])\n    }\n    return result", "    let string_length = string.characters.count\n\
    \    if string_length == 0 {\n        return \"\"\n    }\n    let string_array\
    \ = Array(string.characters)\n    var longest_palindrome_length = 0\n    var longest_palindrome_start\
    \ = 0\n    for i in 0..<string_length {\n        let palindrome_length = longest_palindrome_length_at_index(string_array,\
    \ index: i)\n        if palindrome_length > longest_palindrome_length {\n    \
    \        longest_palindrome_length = palindrome_length\n            longest_palindrome_start\
    \ = i\n        }\n    }\n    let prefix_start = longest_palindrome_start - longest_palindrome_length\
    \ + 1\n    let prefix_end = longest_palindrome_start + 1\n    let prefix = string_array[prefix_start..<prefix_end]\n\
    \    let reversed_prefix = prefix.reverse()\n    return string + String(reversed_prefix)",
  "    if string.isEmpty {\n        return string\n    }\n    let suffix = longest_palindromic_suffix(string)\n\
    \    let prefix = String(string.prefix(string.count - suffix.count).reversed())\n\
    \    return string + prefix", "    let reversed = string.characters.reverse()\n\
    \    let reversed_string = String(reversed)\n    let string_length = string.characters.count\n\
    \    let reversed_string_length = reversed_string.characters.count\n    var max_palindrome_length\
    \ = 0\n    var max_palindrome_index = 0\n    var table = Array(count: string_length,\
    \ repeatedValue: Array(count: reversed_string_length, repeatedValue: 0))\n   \
    \ for i in 0..<string_length {\n        for j in 0..<reversed_string_length {\n\
    \            if string[i] == reversed_string[j] {\n                if i == 0 ||\
    \ j == 0 {\n                    table[i][j] = 1\n                } else {\n  \
    \                  table[i][j] = table[i - 1][j - 1] + 1\n                }\n\
    \                if table[i][j] > max_palindrome_length {\n                  \
    \  max_palindrome_length = table[i][j]\n                    max_palindrome_index\
    \ = i\n                }\n            }\n        }\n    }\n    let prefix = string.substringToIndex(string.startIndex.advancedBy(max_palindrome_index\
    \ + 1))\n    let suffix = reversed_string.substringFromIndex(reversed_string.startIndex.advancedBy(max_palindrome_length))\n\
    \    return prefix + suffix", "    if string.isEmpty {\n        return string\n\
    \    }\n    let reversed = String(string.characters.reverse())\n    let concatenated\
    \ = string + reversed\n    let suffix = longest_common_substring(string: concatenated,\
    \ substring: reversed)\n    let prefix = String(string.characters.prefix(string.characters.count\
    \ - suffix.characters.count))\n    return prefix + string", "    let string_length\
    \ = string.characters.count\n    if string_length == 0 {\n        return \"\"\n\
    \    }\n    let string_array = Array(string.characters)\n    var suffix_length\
    \ = string_length\n    while suffix_length > 0 {\n        if is_palindrome(string_array,\
    \ start: string_length - suffix_length, end: string_length - 1) {\n          \
    \  break\n        }\n        suffix_length -= 1\n    }\n    var prefix_length\
    \ = string_length - suffix_length\n    var result = string\n    while prefix_length\
    \ > 0 {\n        result.append(string_array[string_length - prefix_length])\n\
    \        prefix_length -= 1\n    }\n    return result", "    if string.isEmpty\
    \ {\n        return string\n    }\n    let (suffix, _) = longest_palindrome_suffix(string)\n\
    \    let prefix = String(string.characters.prefix(string.characters.count - suffix.characters.count))\n\
    \    return string + String(prefix.characters.reverse())", "    let string_length\
    \ = string.characters.count\n    if string_length <= 1 {\n        return string\n\
    \    }\n    let string_array = Array(string.characters)\n    var max_palindrome_length\
    \ = 0\n    var max_palindrome_index = 0\n    var i = 0\n    while i < string_length\
    \ {\n        var j = 1\n        while i - j >= 0 && i + j < string_length && string_array[i\
    \ - j] == string_array[i + j] {\n            j += 1\n        }\n        if 2 *\
    \ j - 1 > max_palindrome_length {\n            max_palindrome_length = 2 * j -\
    \ 1\n            max_palindrome_index = i\n        }\n        i += 1\n    }\n\
    \    let prefix = string.substringToIndex(string.startIndex.advancedBy(max_palindrome_index\
    \ - max_palindrome_length / 2))\n    let suffix = String(prefix.characters.reverse())\n\
    \    return string + suffix", "    let string_length = string.characters.count\n\
    \    if string_length == 0 {\n        return \"\"\n    }\n    if string_length\
    \ == 1 {\n        return string\n    }\n    let string_characters = Array(string.characters)\n\
    \    var longest_palindrome_length = 0\n    var longest_palindrome_start = 0\n\
    \    for i in 0..<string_length {\n        let palindrome_length = longest_palindrome_length_from_center(string_characters,\
    \ center: i)\n        if palindrome_length > longest_palindrome_length {\n   \
    \         longest_palindrome_length = palindrome_length\n            longest_palindrome_start\
    \ = i\n        }\n    }\n    let palindrome_end = longest_palindrome_start + longest_palindrome_length\n\
    \    let prefix_start = longest_palindrome_start - (string_length - palindrome_end)\n\
    \    let prefix = string[string.index(string.startIndex, offsetBy: prefix_start)..<string.index(string.startIndex,\
    \ offsetBy: longest_palindrome_start)]\n    return string + String(prefix.characters.reversed())",
  "    let string = string.lowercaseString\n    let string_length = string.characters.count\n\
    \    if string_length == 0 {\n        return \"\"\n    }\n    if string_length\
    \ == 1 {\n        return string\n    }\n    let string_characters = Array(string.characters)\n\
    \    var longest_palindrome_length = 0\n    var longest_palindrome_start = 0\n\
    \    for i in 0..<string_length {\n        let palindrome_length = palindrome_length_at_index(string_characters,\
    \ index: i)\n        if palindrome_length > longest_palindrome_length {\n    \
    \        longest_palindrome_length = palindrome_length\n            longest_palindrome_start\
    \ = i\n        }\n    }\n    let prefix_start = longest_palindrome_start - longest_palindrome_length\
    \ + 1\n    let prefix_end = longest_palindrome_start\n    let prefix = string[string.startIndex.advancedBy(prefix_start)..<string.startIndex.advancedBy(prefix_end\
    \ + 1)]\n    let reversed_prefix = String(prefix.characters.reverse())\n    return\
    \ string + reversed_prefix", "    let string_length = string.characters.count\n\
    \    if string_length == 0 {\n        return \"\"\n    }\n    let string_array\
    \ = Array(string.characters)\n    var longest_palindrome_length = 0\n    var longest_palindrome_index\
    \ = 0\n    var i = 0\n    while i < string_length {\n        var j = 0\n     \
    \   while i - j >= 0 && i + j < string_length && string_array[i - j] == string_array[i\
    \ + j] {\n            j += 1\n        }\n        if j > longest_palindrome_length\
    \ {\n            longest_palindrome_length = j\n            longest_palindrome_index\
    \ = i\n        }\n        i += 1\n    }\n    var result = \"\"\n    for i in 0..<longest_palindrome_index\
    \ - longest_palindrome_length + 1 {\n        result.append(string_array[i])\n\
    \    }\n    for i in (longest_palindrome_index + longest_palindrome_length - 1).stride(through:\
    \ longest_palindrome_index + 1, by: -1) {\n        result.append(string_array[i])\n\
    \    }\n    return result", "    let string_length = string.characters.count\n\
    \    if string_length == 0 {\n        return \"\"\n    }\n    var string_array\
    \ = Array(string.characters)\n    var palindrome_suffix_length = 0\n    for i\
    \ in 0..<string_length {\n        if is_palindrome(string_array, start: 0, end:\
    \ string_length - i - 1) {\n            palindrome_suffix_length = string_length\
    \ - i\n            break\n        }\n    }\n    var palindrome_prefix = Array(string_array[0..<palindrome_suffix_length].reverse())\n\
    \    return String(string_array) + String(palindrome_prefix)", "    let n = string.characters.count\n\
    \    if n == 0 {\n        return \"\"\n    }\n    let s = Array(string.characters)\n\
    \    var i = 0\n    while i < n - i - 1 {\n        if s[i] != s[n - i - 1] {\n\
    \            break\n        }\n        i += 1\n    }\n    var prefix = String(s[0..<i])\n\
    \    var suffix = String(s[i..<n])\n    return prefix + suffix.characters.reversed()\
    \ + prefix.characters.reversed()", "    let n = string.characters.count\n    let\
    \ s = Array(string.characters)\n    var i = 0\n    while i < n {\n        if is_palindrome(s,\
    \ i, n - 1) {\n            break\n        }\n        i += 1\n    }\n    var prefix\
    \ = string.substringToIndex(string.startIndex.advancedBy(i))\n    prefix = String(prefix.characters.reverse())\n\
    \    return string + prefix", "    let length = string.characters.count\n    if\
    \ length == 0 {\n        return \"\"\n    }\n    let string_chars = Array(string.characters)\n\
    \    var longest_palindrome_length = 0\n    var longest_palindrome_start = 0\n\
    \    for i in 0..<length {\n        var j = 0\n        while i - j >= 0 && i +\
    \ j < length && string_chars[i - j] == string_chars[i + j] {\n            j +=\
    \ 1\n        }\n        if 2 * j - 1 > longest_palindrome_length {\n         \
    \   longest_palindrome_length = 2 * j - 1\n            longest_palindrome_start\
    \ = i - j + 1\n        }\n        j = 0\n        while i - j >= 0 && i + j + 1\
    \ < length && string_chars[i - j] == string_chars[i + j + 1] {\n            j\
    \ += 1\n        }\n        if 2 * j > longest_palindrome_length {\n          \
    \  longest_palindrome_length = 2 * j\n            longest_palindrome_start = i\
    \ - j + 1\n        }\n    }\n    let prefix = string.substringToIndex(string.startIndex.advancedBy(longest_palindrome_start))\n\
    \    let reverse_prefix = String(prefix.characters.reverse())\n    return string\
    \ + reverse_prefix", "    let n = string.characters.count\n    if n == 0 {\n \
    \       return \"\"\n    }\n    let suffix = longest_palindromic_suffix(string:\
    \ string)\n    let prefix = String(string.characters.prefix(n - suffix.characters.count).reversed())\n\
    \    return string + prefix", "    if string.isEmpty {\n        return string\n\
    \    }\n    let reversed = String(string.characters.reverse())\n    let lcs =\
    \ longest_common_substring(string, reversed)\n    let prefix = string.substringToIndex(string.startIndex.advancedBy(string.characters.count\
    \ - lcs.characters.count))\n    return string + String(prefix.characters.reverse())",
  "    let string_length = string.characters.count\n    if string_length == 0 {\n\
    \        return \"\"\n    }\n    let string_chars = Array(string.characters)\n\
    \    var palindrome_length = string_length\n    var palindrome_start = 0\n   \
    \ while palindrome_length > 0 {\n        if is_palindrome(string_chars, start:\
    \ palindrome_start, length: palindrome_length) {\n            break\n        }\n\
    \        palindrome_length -= 1\n        palindrome_start += 1\n    }\n    let\
    \ prefix_length = string_length - palindrome_length\n    let prefix_start = 0\n\
    \    let prefix_chars = Array(string.characters.prefix(prefix_length).reversed())\n\
    \    let palindrome_chars = string_chars[palindrome_start..<palindrome_start+palindrome_length]\n\
    \    return String(prefix_chars) + String(palindrome_chars)", "    let reversed\
    \ = String(string.characters.reverse())\n    let palindrome = string + reversed\n\
    \    let longest_palindrome = find_longest_palindrome(palindrome)\n    let prefix\
    \ = String(string.characters.prefix(string.characters.count - longest_palindrome.characters.count))\n\
    \    let reversed_prefix = String(prefix.characters.reverse())\n    return string\
    \ + reversed_prefix", "    let string = string.characters\n    let length = string.count\n\
    \    var i = 0\n    var j = length - 1\n    while i < j {\n        if string[i]\
    \ != string[j] {\n            break\n        }\n        i += 1\n        j -= 1\n\
    \    }\n    if i >= j {\n        return String(string)\n    }\n    let prefix\
    \ = string[0..<i]\n    let suffix = string[i..<length]\n    let reversed_prefix\
    \ = prefix.reversed()\n    return String(suffix) + String(reversed_prefix) + String(suffix)",
  "    let reversed = String(string.characters.reverse())\n    let string_length =\
    \ string.characters.count\n    let reversed_length = reversed.characters.count\n\
    \    var lps = [Int](count: reversed_length, repeatedValue: 0)\n    var i = 1\n\
    \    var j = 0\n    while i < reversed_length {\n        if reversed[reversed.startIndex.advancedBy(i)]\
    \ == reversed[reversed.startIndex.advancedBy(j)] {\n            lps[i] = j + 1\n\
    \            i += 1\n            j += 1\n        } else {\n            if j !=\
    \ 0 {\n                j = lps[j - 1]\n            } else {\n                lps[i]\
    \ = 0\n                i += 1\n            }\n        }\n    }\n    let prefix\
    \ = reversed.substringToIndex(reversed.startIndex.advancedBy(reversed_length -\
    \ lps[reversed_length - 1]))\n    return string + prefix", "    let string_length\
    \ = string.characters.count\n    if string_length == 0 {\n        return \"\"\n\
    \    }\n    let string_array = Array(string.characters)\n    var palindrome_length\
    \ = 0\n    for i in 0..<string_length {\n        if is_palindrome(string_array,\
    \ start: 0, end: string_length - i - 1) {\n            palindrome_length = string_length\
    \ - i\n            break\n        }\n    }\n    var result = string\n    for i\
    \ in 0..<string_length - palindrome_length {\n        result.append(string_array[i])\n\
    \    }\n    return result", "    let stringLength = string.characters.count\n\
    \    if stringLength == 0 {\n        return \"\"\n    }\n    var suffix = string\n\
    \    var prefix = \"\"\n    for _ in 0..<stringLength {\n        if is_palindrome(suffix)\
    \ {\n            break\n        }\n        suffix.removeAtIndex(suffix.startIndex)\n\
    \        prefix.append(string[string.endIndex.predecessor()])\n    }\n    return\
    \ string + reverse(prefix)", "    if string.isEmpty {\n        return string\n\
    \    }\n    let suffix = longest_palindromic_suffix(string)\n    let prefix =\
    \ String(string.prefix(string.count - suffix.count).reversed())\n    return string\
    \ + prefix", "    let string_length = string.characters.count\n    if string_length\
    \ == 0 {\n        return \"\"\n    }\n    let string_characters = Array(string.characters)\n\
    \    var palindrome_suffix_length = 0\n    for i in 0..<string_length {\n    \
    \    if string_characters[i] == string_characters[string_length - 1 - i] {\n \
    \           palindrome_suffix_length += 1\n        } else {\n            break\n\
    \        }\n    }\n    if palindrome_suffix_length == string_length {\n      \
    \  return string\n    }\n    let palindrome_prefix = String(string_characters[0..<(string_length\
    \ - palindrome_suffix_length)])\n    let palindrome_prefix_reversed = String(palindrome_prefix.characters.reverse())\n\
    \    return string + palindrome_prefix_reversed", "    let string_length = string.characters.count\n\
    \    let string_array = Array(string.characters)\n    var longest_palindrome_length\
    \ = 0\n    var longest_palindrome_start = 0\n    for i in 0..<string_length {\n\
    \        let palindrome_length = longest_palindrome_length_at_index(string_array,\
    \ index: i)\n        if palindrome_length > longest_palindrome_length {\n    \
    \        longest_palindrome_length = palindrome_length\n            longest_palindrome_start\
    \ = i\n        }\n    }\n    let palindrome_end = longest_palindrome_start + longest_palindrome_length\n\
    \    let prefix = string.substringToIndex(string.startIndex.advancedBy(longest_palindrome_start))\n\
    \    let reversed_prefix = String(prefix.characters.reverse())\n    let suffix\
    \ = string.substringFromIndex(string.startIndex.advancedBy(palindrome_end))\n\
    \    return string + reversed_prefix + suffix", "    let string_length = string.characters.count\n\
    \    if string_length == 0 {\n        return \"\"\n    }\n    let string_characters\
    \ = Array(string.characters)\n    var i = 0\n    while i < string_length {\n \
    \       if is_palindrome(string_characters, start: 0, end: string_length - i -\
    \ 1) {\n            break\n        }\n        i += 1\n    }\n    var result =\
    \ string\n    for j in 0..<i {\n        result.append(string_characters[j])\n\
    \    }\n    return result", "    let string_length = string.characters.count\n\
    \    if string_length == 0 {\n        return \"\"\n    }\n    let string_array\
    \ = Array(string.characters)\n    var i = string_length - 1\n    while i >= 0\
    \ {\n        if is_palindrome(string_array, start: 0, end: i) {\n            break\n\
    \        }\n        i -= 1\n    }\n    let prefix = string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1))\n    return string + String(prefix.characters.reverse())", "    let string_length\
    \ = string.characters.count\n    if string_length == 0 {\n        return \"\"\n\
    \    }\n    let string_chars = Array(string.characters)\n    var longest_palindrome_length\
    \ = 0\n    var longest_palindrome_start = 0\n    for i in 0..<string_length {\n\
    \        let palindrome_length = longest_palindrome_length_at(string_chars, i)\n\
    \        if palindrome_length > longest_palindrome_length {\n            longest_palindrome_length\
    \ = palindrome_length\n            longest_palindrome_start = i\n        }\n \
    \   }\n    let prefix_start = longest_palindrome_start - longest_palindrome_length\
    \ + 1\n    let prefix_end = longest_palindrome_start + 1\n    let prefix = string_chars[prefix_start..<prefix_end]\n\
    \    let prefix_reversed = prefix.reverse()\n    return string + String(prefix_reversed)",
  "    let string_length = string.characters.count\n    if string_length == 0 {\n\
    \        return \"\"\n    }\n    let string_chars = Array(string.characters)\n\
    \    var palindrome_suffix_length = 0\n    for i in 0..<string_length {\n    \
    \    if is_palindrome(string_chars, start: 0, end: string_length - i - 1) {\n\
    \            palindrome_suffix_length = string_length - i\n            break\n\
    \        }\n    }\n    var palindrome_prefix = Array(string_chars[0..<palindrome_suffix_length])\n\
    \    palindrome_prefix.reverse()\n    return string + String(palindrome_prefix)",
  "    let string = string.characters\n    let string_length = string.count\n    if\
    \ string_length == 0 {\n        return \"\"\n    }\n    let string_length_half\
    \ = string_length / 2\n    var suffix_length = 0\n    for i in 0..<string_length_half\
    \ {\n        if string[i] == string[string_length - 1 - i] {\n            suffix_length\
    \ += 1\n        } else {\n            break\n        }\n    }\n    let prefix\
    \ = string[0..<string_length - suffix_length]\n    let prefix_reversed = String(prefix.reverse())\n\
    \    return string + prefix_reversed", "    let reversed = string.reverse()\n\
    \    let length = string.characters.count\n    let reversed_prefix = reversed.substringToIndex(reversed.startIndex.advancedBy(length))\n\
    \    let reversed_suffix = reversed.substringFromIndex(reversed.startIndex.advancedBy(length))\n\
    \    let palindrome_suffix = reversed_suffix + string\n    let palindrome_suffix_length\
    \ = palindrome_suffix.characters.count\n    var palindrome_suffix_index = palindrome_suffix.startIndex\n\
    \    var palindrome_suffix_end_index = palindrome_suffix.startIndex\n    var palindrome_suffix_length_index\
    \ = 0\n    var palindrome_suffix_length_end_index = 0\n    while palindrome_suffix_index\
    \ < palindrome_suffix.endIndex {\n        palindrome_suffix_end_index = palindrome_suffix.startIndex.advancedBy(palindrome_suffix_length\
    \ - palindrome_suffix_length_index)\n        if palindrome_suffix[palindrome_suffix_index]\
    \ == palindrome_suffix[palindrome_suffix_end_index] {\n            palindrome_suffix_length_index\
    \ += 1\n            palindrome_suffix_length_end_index += 1\n        } else {\n\
    \            palindrome_suffix_length_index = 0\n            palindrome_suffix_length_end_index\
    \ = 0\n        }\n        palindrome_suffix_index = palindrome_suffix_index.successor()\n\
    \    }\n    return reversed_prefix + palindrome_suffix.substringFromIndex(palindrome_suffix.startIndex.advancedBy(palindrome_suffix_length_end_index))",
  "    let string = Array(string)\n    let length = string.count\n    var longest_palindrome_length\
    \ = 0\n    var longest_palindrome_index = 0\n    for i in 0..<length {\n     \
    \   let palindrome_length = palindrome_length_at(string: string, index: i)\n \
    \       if palindrome_length > longest_palindrome_length {\n            longest_palindrome_length\
    \ = palindrome_length\n            longest_palindrome_index = i\n        }\n \
    \   }\n    let palindrome_end = longest_palindrome_index + longest_palindrome_length\n\
    \    let prefix = string[0..<(longest_palindrome_index - longest_palindrome_length)]\n\
    \    let suffix = string[palindrome_end..<length]\n    return String(prefix +\
    \ suffix.reversed())", "    let len = string.characters.count\n    if len == 0\
    \ {\n        return \"\"\n    }\n    let chars = Array(string.characters)\n  \
    \  var i = len - 1\n    while i >= 0 {\n        if chars[0...i] == chars[i...i].reverse()\
    \ {\n            break\n        }\n        i -= 1\n    }\n    return string +\
    \ String(chars[0...len - i - 1].reverse())", "    if string.isEmpty {\n      \
    \  return string\n    }\n    let reversed = String(string.characters.reverse())\n\
    \    let postfix = reversed.substringFromIndex(reversed.startIndex.advancedBy(string.characters.count\
    \ - longest_palindromic_suffix(string).characters.count))\n    return string +\
    \ postfix", "    if string.isEmpty {\n        return string\n    }\n    let reversed\
    \ = String(string.characters.reverse())\n    let palindrome = string + reversed\n\
    \    let suffix = longest_common_suffix(palindrome, string)\n    let prefix =\
    \ String(string.characters.prefix(string.characters.count - suffix.characters.count))\n\
    \    return prefix + string", "    if string.isEmpty {\n        return string\n\
    \    }\n    let (palindrome, _) = find_longest_palindrome(string: string)\n  \
    \  let prefix = String(string.prefix(string.count - palindrome.count))\n    return\
    \ string + String(prefix.reversed())", "    let reversed = String(string.characters.reverse())\n\
    \    let palindrome_suffix = longest_palindrome_suffix(string)\n    let prefix\
    \ = string.substringToIndex(string.endIndex.advancedBy(-palindrome_suffix.characters.count))\n\
    \    return string + reversed.substringFromIndex(prefix.endIndex)", "    let string_length\
    \ = string.characters.count\n    if string_length <= 1 {\n        return string\n\
    \    }\n    let string_chars = Array(string.characters)\n    var longest_palindrome_length\
    \ = 0\n    var longest_palindrome_start = 0\n    for i in 0..<string_length {\n\
    \        let palindrome_length = longest_palindrome_length_at(string_chars, i)\n\
    \        if palindrome_length > longest_palindrome_length {\n            longest_palindrome_length\
    \ = palindrome_length\n            longest_palindrome_start = i\n        }\n \
    \   }\n    let palindrome_end = longest_palindrome_start + longest_palindrome_length\n\
    \    let prefix_start = palindrome_end + 1\n    let prefix_end = string_length\n\
    \    let prefix = string[string.index(string.startIndex, offsetBy: prefix_start)..<string.index(string.startIndex,\
    \ offsetBy: prefix_end)]\n    let reversed_prefix = String(prefix.characters.reversed())\n\
    \    return string + reversed_prefix", "    let length = string.characters.count\n\
    \    if length == 0 {\n        return \"\"\n    }\n    let chars = Array(string.characters)\n\
    \    let reversed = chars.reverse()\n    let reversed_string = String(reversed)\n\
    \    let suffix = longest_common_suffix(string, reversed_string)\n    let prefix\
    \ = string.substringToIndex(string.startIndex.advancedBy(length - suffix.characters.count))\n\
    \    return string + reversed_string.substringFromIndex(reversed_string.startIndex.advancedBy(suffix.characters.count))",
  "    let string_length = string.characters.count\n    if string_length == 0 {\n\
    \        return \"\"\n    }\n    let string_chars = Array(string.characters)\n\
    \    var longest_palindrome_length = 0\n    var longest_palindrome_index = 0\n\
    \    for i in 0..<string_length {\n        let palindrome_length = palindrome_length_at_index(string_chars,\
    \ string_length: string_length, index: i)\n        if palindrome_length > longest_palindrome_length\
    \ {\n            longest_palindrome_length = palindrome_length\n            longest_palindrome_index\
    \ = i\n        }\n    }\n    let prefix_length = longest_palindrome_index - longest_palindrome_length\
    \ + 1\n    let prefix = String(string_chars[0..<prefix_length])\n    let reversed_prefix\
    \ = String(prefix.characters.reverse())\n    return string + reversed_prefix",
  "    if string.isEmpty {\n        return string\n    }\n    let reversed = String(string.characters.reverse())\n\
    \    let combined = string + \"#\" + reversed\n    let lps = longest_prefix_suffix(combined)\n\
    \    let prefix = string.substringToIndex(string.startIndex.advancedBy(lps))\n\
    \    let suffix = String(prefix.characters.reverse())\n    return string + suffix",
  "    let string_length = string.characters.count\n    if string_length == 0 {\n\
    \        return \"\"\n    }\n    var suffix_length = 0\n    for i in 0..<string_length\
    \ {\n        let suffix = string.substring(from: string.index(string.startIndex,\
    \ offsetBy: i))\n        if is_palindrome(string: suffix) {\n            suffix_length\
    \ = suffix.characters.count\n            break\n        }\n    }\n    let prefix\
    \ = string.substring(to: string.index(string.startIndex, offsetBy: string_length\
    \ - suffix_length))\n    return string + String(prefix.characters.reversed())",
  "    if string.isEmpty {\n        return string\n    }\n    let string_length =\
    \ string.characters.count\n    let string_array = Array(string.characters)\n \
    \   var longest_palindrome_length = 0\n    var longest_palindrome_start = 0\n\
    \    for i in 0..<string_length {\n        let palindrome_length = palindrome_length_at_position(string_array,\
    \ position: i)\n        if palindrome_length > longest_palindrome_length {\n \
    \           longest_palindrome_length = palindrome_length\n            longest_palindrome_start\
    \ = i\n        }\n    }\n    let prefix_start = longest_palindrome_start - longest_palindrome_length\
    \ + 1\n    let prefix_end = longest_palindrome_start + 1\n    let prefix = string_array[prefix_start..<prefix_end]\n\
    \    let reversed_prefix = prefix.reverse()\n    return string + String(reversed_prefix)",
  "    let reversed = String(string.characters.reverse())\n    let longest_common_suffix\
    \ = longest_common_substring(string, reversed)\n    let prefix = String(string.characters.dropLast(longest_common_suffix.characters.count))\n\
    \    return string + String(prefix.characters.reverse())", "    let string_length\
    \ = string.characters.count\n    if string_length == 0 {\n        return \"\"\n\
    \    }\n    let string_array = Array(string.characters)\n    var i = string_length\
    \ - 1\n    while i >= 0 {\n        if is_palindrome(string_array, start: 0, end:\
    \ i) {\n            break\n        }\n        i -= 1\n    }\n    var result =\
    \ string\n    for j in 0..<string_length - i - 1 {\n        result.append(string_array[string_length\
    \ - j - 1])\n    }\n    return result", "    let string = string.characters\n\
    \    let string_length = string.count\n    if string_length == 0 {\n        return\
    \ \"\"\n    }\n    var longest_palindrome_length = 0\n    var longest_palindrome_start\
    \ = 0\n    for i in 0..<string_length {\n        let palindrome_length = get_palindrome_length(string,\
    \ i)\n        if palindrome_length > longest_palindrome_length {\n           \
    \ longest_palindrome_length = palindrome_length\n            longest_palindrome_start\
    \ = i\n        }\n    }\n    let palindrome_end = longest_palindrome_start + longest_palindrome_length\n\
    \    let prefix = string[0..<longest_palindrome_start].reversed()\n    let suffix\
    \ = string[palindrome_end..<string_length]\n    return String(string[0..<palindrome_end])\
    \ + String(prefix) + String(suffix)", "    let string_length = string.characters.count\n\
    \    if string_length == 0 {\n        return \"\"\n    }\n    let string_array\
    \ = Array(string.characters)\n    let reversed_string_array = string_array.reversed()\n\
    \    var longest_palindrome_suffix_length = 0\n    for i in 0..<string_length\
    \ {\n        if string_array[i] == reversed_string_array[i] {\n            longest_palindrome_suffix_length\
    \ += 1\n        } else {\n            break\n        }\n    }\n    let prefix_to_append\
    \ = string_array[0..<(string_length - longest_palindrome_suffix_length)].reversed()\n\
    \    return string + String(prefix_to_append)", "    if string.isEmpty {\n   \
    \     return string\n    }\n    let suffix = longest_palindromic_suffix(string)\n\
    \    let prefix = String(string.prefix(string.count - suffix.count).reversed())\n\
    \    return string + prefix", "    let string_length = string.characters.count\n\
    \    if string_length == 0 {\n        return \"\"\n    }\n    let string_chars\
    \ = Array(string.characters)\n    var i = string_length - 1\n    while i >= 0\
    \ {\n        if is_palindrome(string_chars, start: 0, end: i) {\n            break\n\
    \        }\n        i -= 1\n    }\n    let prefix = string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]\n    let reversed_prefix = String(prefix.characters.reversed())\n\
    \    return string + reversed_prefix", "    let string_length = string.characters.count\n\
    \    if string_length == 0 {\n        return \"\"\n    }\n    let string_characters\
    \ = Array(string.characters)\n    var longest_palindrome_length = 0\n    var longest_palindrome_start\
    \ = 0\n    for i in 0..<string_length {\n        let palindrome_length = min(i,\
    \ string_length - i - 1)\n        var palindrome_start = i - palindrome_length\n\
    \        var palindrome_end = i + palindrome_length\n        while palindrome_start\
    \ >= 0 && palindrome_end < string_length && string_characters[palindrome_start]\
    \ == string_characters[palindrome_end] {\n            palindrome_start -= 1\n\
    \            palindrome_end += 1\n        }\n        palindrome_start += 1\n \
    \       palindrome_end -= 1\n        if palindrome_end - palindrome_start > longest_palindrome_length\
    \ {\n            longest_palindrome_length = palindrome_end - palindrome_start\n\
    \            longest_palindrome_start = palindrome_start\n        }\n    }\n \
    \   let prefix = String(string_characters[0..<longest_palindrome_start])\n   \
    \ let suffix = String(string_characters[longest_palindrome_start..<string_length])\n\
    \    return suffix + String(prefix.characters.reverse())", "    let string_length\
    \ = string.characters.count\n    if string_length == 0 {\n        return \"\"\n\
    \    }\n    var suffix_length = string_length\n    while suffix_length > 0 {\n\
    \        let suffix = string.substring(from: string.index(string.startIndex, offsetBy:\
    \ string_length - suffix_length))\n        if is_palindrome(string: suffix) {\n\
    \            let prefix = string.substring(to: string.index(string.startIndex,\
    \ offsetBy: string_length - suffix_length))\n            return string + String(prefix.characters.reversed())\n\
    \        }\n        suffix_length -= 1\n    }\n    return \"\"", "    let string_length\
    \ = string.characters.count\n    if string_length == 0 {\n        return \"\"\n\
    \    }\n    let string_chars = Array(string.characters)\n    var longest_palindrome_length\
    \ = 0\n    var longest_palindrome_start = 0\n    for i in 0..<string_length {\n\
    \        let palindrome_length = palindrome_length_at_index(string_chars, index:\
    \ i)\n        if palindrome_length > longest_palindrome_length {\n           \
    \ longest_palindrome_length = palindrome_length\n            longest_palindrome_start\
    \ = i\n        }\n    }\n    let prefix_start = longest_palindrome_start - longest_palindrome_length\
    \ + 1\n    let prefix_end = longest_palindrome_start + 1\n    let prefix = string_chars[prefix_start..<prefix_end]\n\
    \    let reversed_prefix = prefix.reverse()\n    let result = string + String(reversed_prefix)\n\
    \    return result", "    let string_length = string.characters.count\n    if\
    \ string_length == 0 {\n        return \"\"\n    }\n    let string_characters\
    \ = Array(string.characters)\n    var i = string_length - 1\n    while i >= 0\
    \ {\n        if string_characters[0...i] == string_characters[i...string_length\
    \ - 1].reverse() {\n            break\n        }\n        i -= 1\n    }\n    return\
    \ string + string_characters[0...string_length - i - 1].reverse().joinWithSeparator(\"\
    \")", "    let string_length = string.characters.count\n    if string_length ==\
    \ 0 {\n        return \"\"\n    }\n    let string_chars = Array(string.characters)\n\
    \    var longest_palindrome_length = 0\n    var longest_palindrome_index = 0\n\
    \    for i in 0..<string_length {\n        let palindrome_length = get_palindrome_length(string_chars,\
    \ i)\n        if palindrome_length > longest_palindrome_length {\n           \
    \ longest_palindrome_length = palindrome_length\n            longest_palindrome_index\
    \ = i\n        }\n    }\n    var result = string\n    for i in 0..<string_length\
    \ - longest_palindrome_length {\n        result.append(string_chars[string_length\
    \ - i - 1])\n    }\n    return result", "    let reversed = String(string.characters.reverse())\n\
    \    let longest_suffix = longest_common_suffix(string, reversed)\n    let prefix\
    \ = String(string.characters.dropLast(longest_suffix.characters.count))\n    return\
    \ string + String(prefix.characters.reverse())", "    let reversed = String(string.characters.reverse())\n\
    \    let string_length = string.characters.count\n    let reversed_length = reversed.characters.count\n\
    \    var lps = [Int](count: reversed_length, repeatedValue: 0)\n    var i = 1\n\
    \    var j = 0\n    while i < reversed_length {\n        if reversed[reversed.startIndex.advancedBy(i)]\
    \ == reversed[reversed.startIndex.advancedBy(j)] {\n            lps[i] = j + 1\n\
    \            i += 1\n            j += 1\n        } else {\n            if j !=\
    \ 0 {\n                j = lps[j - 1]\n            } else {\n                lps[i]\
    \ = 0\n                i += 1\n            }\n        }\n    }\n    return string\
    \ + reversed.substringFromIndex(reversed.startIndex.advancedBy(lps[reversed_length\
    \ - 1]))", "    let n = string.characters.count\n    if n == 0 {\n        return\
    \ \"\"\n    }\n    let string_chars = Array(string.characters)\n    let reversed_string_chars\
    \ = Array(string.characters.reversed())\n    var longest_palindrome_length = 0\n\
    \    var longest_palindrome_start = 0\n    for i in 0..<n {\n        let palindrome_length\
    \ = min(n - i, i + 1)\n        var is_palindrome = true\n        for j in 0..<palindrome_length\
    \ {\n            if string_chars[i - j] != reversed_string_chars[i + j] {\n  \
    \              is_palindrome = false\n                break\n            }\n \
    \       }\n        if is_palindrome && palindrome_length > longest_palindrome_length\
    \ {\n            longest_palindrome_length = palindrome_length\n            longest_palindrome_start\
    \ = i\n        }\n    }\n    var result = string\n    for i in 0..<n - longest_palindrome_length\
    \ {\n        result.append(reversed_string_chars[i])\n    }\n    return result",
  "    let string_length = string.characters.count\n    let string_chars = Array(string.characters)\n\
    \    var palindrome_suffix = \"\"\n    var palindrome_prefix = \"\"\n    var longest_palindrome_length\
    \ = 0\n    var longest_palindrome_index = 0\n    var palindrome_length = 0\n \
    \   var palindrome_index = 0\n    var i = 0\n    var j = 0\n    var k = 0\n  \
    \  var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n   \
    \ var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var\
    \ v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var aa\
    \ = 0\n    var ab = 0\n    var ac = 0\n    var ad = 0\n    var ae = 0\n    var\
    \ af = 0\n    var ag = 0\n    var ah = 0\n    var ai = 0\n    var aj = 0\n   \
    \ var ak = 0\n    var al = 0\n    var am = 0\n    var an = 0\n    var ao = 0\n\
    \    var ap = 0\n    var aq = 0\n    var ar = 0\n    var as = 0\n    var at =\
    \ 0\n    var au = 0\n    var av = 0\n    var aw = 0\n    var ax = 0\n    var ay\
    \ = 0\n    var az = 0\n    var ba = 0\n    var bb = 0\n    var bc = 0\n    var\
    \ bd = 0\n    var be = 0\n    var bf = 0\n    var bg = 0\n    var bh = 0\n   \
    \ var bi = 0\n    var bj = 0\n    var bk = 0\n    var bl = 0\n    var bm = 0\n\
    \    var bn = 0\n    var bo = 0\n    var bp = 0\n    var bq = 0\n    var br =\
    \ 0\n    var bs = 0\n    var bt = 0\n    var bu = 0\n    var bv = 0\n    var",
  "    let reversed = String(string.characters.reverse())\n    let (suffix, _) = longest_common_substring(string,\
    \ reversed)\n    return string + reversed.substringFromIndex(suffix.endIndex)",
  "    let length = string.characters.count\n    if length == 0 {\n        return\
    \ \"\"\n    }\n    let reversed = String(string.characters.reverse())\n    let\
    \ suffix = reversed.substringFromIndex(reversed.startIndex.advancedBy(length -\
    \ 1))\n    let prefix = reversed.substringToIndex(reversed.startIndex.advancedBy(length\
    \ - 1))\n    return string + prefix", "    if string.isEmpty {\n        return\
    \ string\n    }\n    let string_length = string.characters.count\n    let string_array\
    \ = Array(string.characters)\n    var longest_palindrome_length = 0\n    var longest_palindrome_index\
    \ = 0\n    var current_palindrome_length = 0\n    var current_palindrome_index\
    \ = 0\n    for i in 0..<string_length {\n        if is_palindrome(string_array,\
    \ start: i - current_palindrome_length - 1, end: i) {\n            current_palindrome_length\
    \ += 2\n            current_palindrome_index = i - current_palindrome_length +\
    \ 1\n        } else if is_palindrome(string_array, start: i - current_palindrome_length,\
    \ end: i) {\n            current_palindrome_length += 1\n            current_palindrome_index\
    \ = i - current_palindrome_length + 1\n        }\n        if current_palindrome_length\
    \ > longest_palindrome_length {\n            longest_palindrome_length = current_palindrome_length\n\
    \            longest_palindrome_index = current_palindrome_index\n        }\n\
    \    }\n    let prefix = string.substringToIndex(string.startIndex.advancedBy(longest_palindrome_index))\n\
    \    let suffix = string.substringFromIndex(string.startIndex.advancedBy(longest_palindrome_index\
    \ + longest_palindrome_length))\n    return prefix + String(suffix.characters.reverse())\
    \ + suffix", "    let string_length = string.count\n    if string_length == 0\
    \ {\n        return \"\"\n    }\n    let string_array = Array(string)\n    var\
    \ longest_palindrome_suffix_length = 0\n    for i in 0..<string_length {\n   \
    \     let prefix_length = string_length - i\n        if is_palindrome(string_array,\
    \ start: 0, end: prefix_length - 1) {\n            longest_palindrome_suffix_length\
    \ = prefix_length\n            break\n        }\n    }\n    let prefix_length\
    \ = string_length - longest_palindrome_suffix_length\n    let prefix = String(string_array[0..<prefix_length])\n\
    \    let suffix = String(string_array[prefix_length..<string_length])\n    return\
    \ suffix + prefix.reversed()", "    let n = string.count\n    if n == 0 {\n  \
    \      return \"\"\n    }\n    let s = Array(string)\n    var z = z_function(string:\
    \ string)\n    var i = n - 1\n    while i > 0 && z[i] != i {\n        i -= 1\n\
    \    }\n    var prefix = s[0..<i].map { String($0) }.joined()\n    prefix = String(prefix.reversed())\n\
    \    return string + prefix", "    if string.isEmpty {\n        return string\n\
    \    }\n    let suffix = longest_palindromic_suffix(string: string)\n    let prefix\
    \ = String(string.prefix(string.count - suffix.count).reversed())\n    return\
    \ string + prefix", "    if string.isEmpty {\n        return string\n    }\n \
    \   let prefix = string.prefix(string.count - 1)\n    let suffix = string.suffix(string.count\
    \ - 1)\n    if prefix == suffix.reversed() {\n        return string\n    }\n \
    \   return make_palindrome(string: prefix) + String(suffix.reversed())", "   \
    \ let string_length = string.characters.count\n    if string_length == 0 {\n \
    \       return \"\"\n    }\n    let string_array = Array(string.characters)\n\
    \    var longest_palindrome_length = 0\n    var longest_palindrome_start = 0\n\
    \    for i in 0..<string_length {\n        var j = 0\n        while i - j >= 0\
    \ && i + j < string_length && string_array[i - j] == string_array[i + j] {\n \
    \           j += 1\n        }\n        if j * 2 - 1 > longest_palindrome_length\
    \ {\n            longest_palindrome_length = j * 2 - 1\n            longest_palindrome_start\
    \ = i - j + 1\n        }\n        j = 0\n        while i - j >= 0 && i + j + 1\
    \ < string_length && string_array[i - j] == string_array[i + j + 1] {\n      \
    \      j += 1\n        }\n        if j * 2 > longest_palindrome_length {\n   \
    \         longest_palindrome_length = j * 2\n            longest_palindrome_start\
    \ = i - j + 1\n        }\n    }\n    let prefix = string.substringToIndex(string.startIndex.advancedBy(longest_palindrome_start))\n\
    \    let reversed_prefix = String(prefix.characters.reverse())\n    return string\
    \ + reversed_prefix", "    let reversed = String(string.characters.reverse())\n\
    \    let lcs = longest_common_subsequence(string, reversed)\n    let prefix =\
    \ string.substringToIndex(string.startIndex.advancedBy(string.characters.count\
    \ - lcs.characters.count))\n    return string + String(prefix.characters.reverse())",
  "    let length = string.characters.count\n    if length == 0 {\n        return\
    \ \"\"\n    }\n    var suffix = string\n    var prefix = \"\"\n    for _ in 0..<length\
    \ {\n        if is_palindrome(suffix) {\n            break\n        }\n      \
    \  suffix = suffix.substring(from: suffix.index(after: suffix.startIndex))\n \
    \       prefix = prefix.substring(to: prefix.index(before: prefix.endIndex))\n\
    \        prefix = String(string[string.index(before: string.endIndex)]) + prefix\n\
    \    }\n    return string + prefix", "    let string = string.characters\n   \
    \ let string_len = string.count\n    let string_reversed = string.reverse()\n\
    \    var longest_palindrome_len = 0\n    var longest_palindrome_end = 0\n    var\
    \ longest_palindrome_start = 0\n    var longest_palindrome_end_reversed = 0\n\
    \    var longest_palindrome_start_reversed = 0\n    var longest_palindrome_len_reversed\
    \ = 0\n    var longest_palindrome_end_reversed_reversed = 0\n    var longest_palindrome_start_reversed_reversed\
    \ = 0\n    var longest_palindrome_len_reversed_reversed = 0\n    var longest_palindrome_end_reversed_reversed_reversed\
    \ = 0\n    var longest_palindrome_start_reversed_reversed_reversed = 0\n    var\
    \ longest_palindrome_len_reversed_reversed_reversed = 0\n    var longest_palindrome_end_reversed_reversed_reversed_reversed\
    \ = 0\n    var longest_palindrome_start_reversed_reversed_reversed_reversed =\
    \ 0\n    var longest_palindrome_len_reversed_reversed_reversed_reversed = 0\n\
    \    var longest_palindrome_end_reversed_reversed_reversed_reversed_reversed =\
    \ 0\n    var longest_palindrome_start_reversed_reversed_reversed_reversed_reversed\
    \ = 0\n    var longest_palindrome_len_reversed_reversed_reversed_reversed_reversed\
    \ = 0\n    var longest_palindrome_end_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = 0\n    var longest_palindrome_start_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = 0\n    var longest_palindrome_len_re", "    let length = string.characters.count\n\
    \    if length == 0 {\n        return \"\"\n    }\n    let string_array = Array(string.characters)\n\
    \    var i = 0\n    while i < length {\n        if is_palindrome(string_array,\
    \ start: 0, end: length - i - 1) {\n            break\n        }\n        i +=\
    \ 1\n    }\n    let prefix = string_array[0..<length - i]\n    let suffix = prefix.reverse()\n\
    \    return string + String(suffix)", "    let string_length = string.characters.count\n\
    \    if string_length == 0 {\n        return \"\"\n    }\n    let string_array\
    \ = Array(string.characters)\n    var longest_palindrome_suffix_length = 0\n \
    \   for i in 0..<string_length {\n        if is_palindrome(string_array, start:\
    \ i, end: string_length - 1) {\n            longest_palindrome_suffix_length =\
    \ string_length - i\n            break\n        }\n    }\n    let prefix = string.substringToIndex(string.startIndex.advancedBy(string_length\
    \ - longest_palindrome_suffix_length))\n    let reversed_prefix = String(prefix.characters.reverse())\n\
    \    return string + reversed_prefix", "    let string_length = string.characters.count\n\
    \    if string_length == 0 {\n        return \"\"\n    }\n    let string_array\
    \ = Array(string.characters)\n    var suffix_length = 0\n    for i in 0..<string_length\
    \ {\n        if is_palindrome(string: string_array, start: i, end: string_length\
    \ - 1) {\n            suffix_length = string_length - i\n            break\n \
    \       }\n    }\n    var result = string\n    for i in 0..<string_length - suffix_length\
    \ {\n        result.append(string_array[string_length - 1 - i])\n    }\n    return\
    \ result", "    let reversed = String(string.characters.reverse())\n    let lcs\
    \ = longest_common_substring(string, reversed)\n    let prefix = string.substringToIndex(string.startIndex.advancedBy(string.characters.count\
    \ - lcs.characters.count))\n    return string + String(prefix.characters.reverse())",
  "    let string_length = string.characters.count\n    if string_length == 0 {\n\
    \        return \"\"\n    }\n    let string_chars = Array(string.characters)\n\
    \    var longest_palindrome_length = 0\n    var longest_palindrome_start = 0\n\
    \    for i in 0..<string_length {\n        let palindrome_length = palindrome_length_at_index(string_chars,\
    \ index: i)\n        if palindrome_length > longest_palindrome_length {\n    \
    \        longest_palindrome_length = palindrome_length\n            longest_palindrome_start\
    \ = i\n        }\n    }\n    let prefix_length = string_length - longest_palindrome_length\n\
    \    let prefix = string_chars[0..<prefix_length]\n    let reversed_prefix = prefix.reverse()\n\
    \    return string + String(reversed_prefix)", "    let stringLength = string.characters.count\n\
    \    if stringLength == 0 {\n        return \"\"\n    }\n    if stringLength ==\
    \ 1 {\n        return string\n    }\n    let stringChars = Array(string.characters)\n\
    \    var longestPalindromeSuffixLength = 0\n    for i in 0..<stringLength {\n\
    \        if is_palindrome(string: String(stringChars[i..<stringLength])) {\n \
    \           longestPalindromeSuffixLength = stringLength - i\n            break\n\
    \        }\n    }\n    let prefix = String(stringChars[0..<(stringLength - longestPalindromeSuffixLength)])\n\
    \    let reversePrefix = String(prefix.characters.reversed())\n    return prefix\
    \ + reversePrefix + String(stringChars[(stringLength - longestPalindromeSuffixLength)..<stringLength])",
  "    let n = string.characters.count\n    if n == 0 {\n        return \"\"\n   \
    \ }\n    let string_chars = Array(string.characters)\n    var suffix = [Int](count:\
    \ n, repeatedValue: 0)\n    var i = 0\n    var j = 1\n    while j < n {\n    \
    \    if string_chars[i] == string_chars[j] {\n            suffix[j] = i + 1\n\
    \            i += 1\n            j += 1\n        } else if i == 0 {\n        \
    \    suffix[j] = 0\n            j += 1\n        } else {\n            i = suffix[i\
    \ - 1]\n        }\n    }\n    let prefix = string_chars[0..<(n - suffix[n - 1])].reverse()\n\
    \    return string + String(prefix)", "    let string_length = string.characters.count\n\
    \    if string_length == 0 {\n        return \"\"\n    }\n    let string_chars\
    \ = Array(string.characters)\n    var palindrome_suffix_length = 0\n    for i\
    \ in 0..<string_length {\n        if is_palindrome(string_chars, start: 0, end:\
    \ string_length - i - 1) {\n            palindrome_suffix_length = string_length\
    \ - i\n            break\n        }\n    }\n    var palindrome_prefix = \"\"\n\
    \    for i in 0..<string_length - palindrome_suffix_length {\n        palindrome_prefix.append(string_chars[i])\n\
    \    }\n    return string + String(palindrome_prefix.characters.reversed())",
  "    let string_length = string.characters.count\n    if string_length == 0 {\n\
    \        return \"\"\n    }\n    let string_chars = Array(string.characters)\n\
    \    var longest_palindrome_length = 0\n    for i in 0..<string_length {\n   \
    \     if is_palindrome(string_chars, start: i, length: string_length - i) {\n\
    \            longest_palindrome_length = string_length - i\n            break\n\
    \        }\n    }\n    var result = string\n    for i in 0..<string_length - longest_palindrome_length\
    \ {\n        result.append(string_chars[i])\n    }\n    return result", "    let\
    \ string_length = string.characters.count\n    if string_length == 0 {\n     \
    \   return \"\"\n    }\n    let string_array = Array(string.characters)\n    var\
    \ longest_palindrome_length = 0\n    var longest_palindrome_start = 0\n    for\
    \ i in 0..<string_length {\n        let palindrome_length = get_palindrome_length(string_array,\
    \ start: i, length: string_length)\n        if palindrome_length > longest_palindrome_length\
    \ {\n            longest_palindrome_length = palindrome_length\n            longest_palindrome_start\
    \ = i\n        }\n    }\n    let prefix_length = string_length - longest_palindrome_length\n\
    \    let prefix = string_array[0..<prefix_length]\n    let prefix_reversed = prefix.reverse()\n\
    \    let palindrome = string_array[longest_palindrome_start..<string_length]\n\
    \    return String(prefix_reversed) + String(palindrome) + String(prefix)", " \
    \   let string_length = string.characters.count\n    if string_length == 0 {\n\
    \        return \"\"\n    }\n    var suffix = string\n    var suffix_length =\
    \ string_length\n    var prefix_length = 0\n    while suffix_length > 0 {\n  \
    \      if is_palindrome(suffix) {\n            break\n        }\n        suffix\
    \ = suffix.substringFromIndex(suffix.startIndex.advancedBy(1))\n        suffix_length\
    \ -= 1\n        prefix_length += 1\n    }\n    if suffix_length == 0 {\n     \
    \   return string\n    }\n    var prefix = string.substringToIndex(string.startIndex.advancedBy(prefix_length))\n\
    \    prefix = String(prefix.characters.reverse())\n    return string + prefix",
  "    let string_length = string.characters.count\n    if string_length == 0 {\n\
    \        return \"\"\n    }\n    let string_chars = Array(string.characters)\n\
    \    var longest_palindrome_length = 0\n    var longest_palindrome_end = 0\n \
    \   var longest_palindrome_start = 0\n    var longest_palindrome_end_index = 0\n\
    \    var longest_palindrome_start_index = 0\n    var longest_palindrome_length_index\
    \ = 0\n    var palindrome_length = 0\n    var palindrome_end = 0\n    var palindrome_start\
    \ = 0\n    var palindrome_end_index = 0\n    var palindrome_start_index = 0\n\
    \    var palindrome_length_index = 0\n    var i = 0\n    var j = 0\n    var k\
    \ = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p =\
    \ 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n\
    \    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n \
    \   var aa = 0\n    var ab = 0\n    var ac = 0\n    var ad = 0\n    var ae = 0\n\
    \    var af = 0\n    var ag = 0\n    var ah = 0\n    var ai = 0\n    var aj =\
    \ 0\n    var ak = 0\n    var al = 0\n    var am = 0\n    var an = 0\n    var ao\
    \ = 0\n    var ap = 0\n    var aq = 0\n    var ar = 0\n    var as = 0\n    var\
    \ at = 0\n    var au = 0\n    var av = 0\n    var aw = 0\n    var ax = 0\n   \
    \ var ay = 0\n    var az = 0\n    var ba = 0\n    var bb = 0\n    var bc = 0\n\
    \    var bd = 0\n    var be = 0\n    var bf = 0\n    var bg = 0\n    var bh =\
    \ 0\n", "    let string_length = string.characters.count\n    if string_length\
    \ == 0 {\n        return \"\"\n    }\n    let string_characters = Array(string.characters)\n\
    \    var longest_palindrome_length = 0\n    var longest_palindrome_start = 0\n\
    \    for i in 0..<string_length {\n        let palindrome_length = palindrome_length_at_index(string_characters,\
    \ index: i)\n        if palindrome_length > longest_palindrome_length {\n    \
    \        longest_palindrome_length = palindrome_length\n            longest_palindrome_start\
    \ = i\n        }\n    }\n    let prefix_start = longest_palindrome_start - longest_palindrome_length\
    \ + 1\n    let prefix_end = longest_palindrome_start + 1\n    let prefix = string_characters[prefix_start..<prefix_end]\n\
    \    let reversed_prefix = prefix.reverse()\n    return string + String(reversed_prefix)",
  "    let string_length = string.characters.count\n    if string_length == 0 {\n\
    \        return \"\"\n    }\n    var palindrome_length = 0\n    for i in 0..<string_length\
    \ {\n        if is_palindrome(string: string, start: i, end: string_length - 1)\
    \ {\n            palindrome_length = string_length - i\n            break\n  \
    \      }\n    }\n    let prefix = string.substring(to: string.index(string.startIndex,\
    \ offsetBy: string_length - palindrome_length))\n    let reversed_prefix = String(prefix.characters.reversed())\n\
    \    return string + reversed_prefix", "    let n = string.characters.count\n\
    \    if n == 0 {\n        return \"\"\n    }\n    let string_chars = Array(string.characters)\n\
    \    var longest_suffix_palindrome_length = 0\n    for i in 0..<n {\n        if\
    \ is_palindrome(string_chars, start: i, end: n - 1) {\n            longest_suffix_palindrome_length\
    \ = n - i\n            break\n        }\n    }\n    var prefix = string.substringToIndex(string.startIndex.advancedBy(n\
    \ - longest_suffix_palindrome_length))\n    prefix = String(prefix.characters.reverse())\n\
    \    return string + prefix", "    let reversed = String(string.characters.reverse())\n\
    \    let longest_common_suffix = longest_common_substring(string, reversed)\n\
    \    let prefix = String(string.characters.dropLast(longest_common_suffix.characters.count))\n\
    \    return string + String(prefix.characters.reverse())", "    let length = string.characters.count\n\
    \    if length == 0 {\n        return \"\"\n    }\n    let reversed = String(string.characters.reverse())\n\
    \    let suffix = reversed.substringFromIndex(reversed.startIndex.advancedBy(length\
    \ - 1))\n    let prefix = reversed.substringToIndex(reversed.startIndex.advancedBy(length\
    \ - 1))\n    let palindrome = string + suffix\n    if is_palindrome(palindrome)\
    \ {\n        return palindrome\n    }\n    return string + prefix", "    let reversed\
    \ = String(string.characters.reverse())\n    let lcs = longest_common_subsequence(string,\
    \ reversed)\n    let prefix = String(string.characters.prefix(string.characters.count\
    \ - lcs.characters.count))\n    return string + String(prefix.characters.reverse())",
  "    let string_length = string.characters.count\n    if string_length == 0 {\n\
    \        return \"\"\n    }\n    let string_array = Array(string.characters)\n\
    \    var suffix_length = 0\n    for i in 0..<string_length {\n        if is_palindrome(string_array,\
    \ start: i, end: string_length - 1) {\n            suffix_length = string_length\
    \ - i\n            break\n        }\n    }\n    var prefix_length = string_length\
    \ - suffix_length\n    var result = string\n    for i in 0..<prefix_length {\n\
    \        result.append(string_array[prefix_length - i - 1])\n    }\n    return\
    \ result", "    let reversed_string = String(string.characters.reverse())\n  \
    \  let string_length = string.characters.count\n    let reversed_string_length\
    \ = reversed_string.characters.count\n    var lps = [Int](count: string_length,\
    \ repeatedValue: 0)\n    var i = 0, j = 0\n    while i < string_length {\n   \
    \     if string[i] == reversed_string[j] {\n            lps[i] = j + 1\n     \
    \       i += 1\n            j += 1\n        } else if j == 0 {\n            lps[i]\
    \ = 0\n            i += 1\n        } else {\n            j = lps[j - 1]\n    \
    \    }\n    }\n    return string + reversed_string.substringFromIndex(reversed_string_length\
    \ - lps[string_length - 1])", "    let length = string.characters.count\n    if\
    \ length == 0 {\n        return \"\"\n    }\n    let string_array = Array(string.characters)\n\
    \    var i = length - 1\n    while i >= 0 {\n        if is_palindrome(string_array,\
    \ start: 0, end: i) {\n            break\n        }\n        i -= 1\n    }\n \
    \   var result = string\n    for j in 0..<length - i - 1 {\n        result.append(string_array[j])\n\
    \    }\n    return result", "    let string_length = string.characters.count\n\
    \    if string_length == 0 {\n        return \"\"\n    }\n    let string_chars\
    \ = Array(string.characters)\n    var longest_palindrome_length = 0\n    var longest_palindrome_end\
    \ = 0\n    var palindrome_lengths = [Int](count: string_length, repeatedValue:\
    \ 0)\n    for i in 0..<string_length {\n        // We are looking for a palindrome\
    \ of the form:\n        //     string[0:i] + string[i] + string[0:i]\n       \
    \ // We can find the length of the palindrome by looking at the palindrome\n \
    \       // of the form:\n        //     string[0:i-1] + string[i-1] + string[0:i-1]\n\
    \        // and adding 2 if the last character of the palindrome is the same as\n\
    \        // the character at index i.\n        var palindrome_length = 0\n   \
    \     if i > 0 {\n            let palindrome_length_without_last_char = palindrome_lengths[i\
    \ - 1]\n            if string_chars[i - palindrome_length_without_last_char -\
    \ 1] == string_chars[i] {\n                palindrome_length = palindrome_length_without_last_char\
    \ + 2\n            }\n        } else {\n            palindrome_length = 1\n  \
    \      }\n        palindrome_lengths[i] = palindrome_length\n        if palindrome_length\
    \ > longest_palindrome_length {\n            longest_palindrome_length = palindrome_length\n\
    \            longest_palindrome_end = i\n        }\n    }\n    let longest_palindrome_start\
    \ = longest_palindrome_end - longest_palindrome_length + 1\n    let prefix = String(string_chars[0..<longest_palindrome_start])\n\
    \    let reversed_prefix = String(prefix.characters.reverse())\n    return string\
    \ + reversed_prefix", "    let reversed = String(string.characters.reverse())\n\
    \    let longest_palindrome = longest_palindrome_suffix(string)\n    let prefix\
    \ = string.substringToIndex(string.startIndex.advancedBy(string.characters.count\
    \ - longest_palindrome.characters.count))\n    return string + reversed.substringFromIndex(reversed.startIndex.advancedBy(longest_palindrome.characters.count))",
  "    let reversed = String(string.characters.reverse())\n    let longest_common_suffix\
    \ = longest_common_substring(string, reversed)\n    let prefix = String(string.characters.dropLast(longest_common_suffix.characters.count))\n\
    \    return string + String(prefix.characters.reverse())", "    let string_length\
    \ = string.characters.count\n    if string_length == 0 {\n        return \"\"\n\
    \    }\n    let string_characters = Array(string.characters)\n    var longest_palindrome_length\
    \ = 0\n    var longest_palindrome_start = 0\n    for i in 0..<string_length {\n\
    \        let palindrome_length = palindrome_length_at_index(string_characters,\
    \ index: i)\n        if palindrome_length > longest_palindrome_length {\n    \
    \        longest_palindrome_length = palindrome_length\n            longest_palindrome_start\
    \ = i\n        }\n    }\n    let prefix_start = longest_palindrome_start - longest_palindrome_length\
    \ + 1\n    let prefix_end = longest_palindrome_start + 1\n    let prefix = String(string_characters[prefix_start..<prefix_end])\n\
    \    let reversed_prefix = String(prefix.characters.reverse())\n    return string\
    \ + reversed_prefix", "    let reversed = String(string.characters.reverse())\n\
    \    let palindrome = string + reversed\n    let lps = longest_palindromic_substring(palindrome)\n\
    \    let prefix = String(string.characters.prefix(string.characters.count - lps.characters.count))\n\
    \    return prefix + string", "    let reversed = String(string.characters.reverse())\n\
    \    let longest_common_suffix = longest_common_substring(string, reversed)\n\
    \    let prefix = string.substringToIndex(string.startIndex.advancedBy(string.characters.count\
    \ - longest_common_suffix.characters.count))\n    return string + String(prefix.characters.reverse())",
  "    let string = string.characters\n    let length = string.count\n    if length\
    \ == 0 {\n        return \"\"\n    }\n    var i = length - 1\n    while i >= 0\
    \ {\n        if is_palindrome(string, start: 0, end: i) {\n            break\n\
    \        }\n        i -= 1\n    }\n    let prefix = string[0..<i]\n    let suffix\
    \ = string[i..<length]\n    return String(prefix) + String(suffix.reversed())",
  "    if string.isEmpty {\n        return string\n    }\n    let prefix = string.prefix(string.count\
    \ - longest_palindrome_suffix(string: string).count)\n    return string + String(prefix.reversed())",
  "    let string_length = string.characters.count\n    if string_length == 0 {\n\
    \        return \"\"\n    }\n    var longest_palindrome_length = 0\n    var longest_palindrome_start\
    \ = 0\n    for i in 0..<string_length {\n        let palindrome_length = longest_palindrome_length_at(string,\
    \ start: i)\n        if palindrome_length > longest_palindrome_length {\n    \
    \        longest_palindrome_length = palindrome_length\n            longest_palindrome_start\
    \ = i\n        }\n    }\n    let prefix_start = longest_palindrome_start + longest_palindrome_length\n\
    \    let prefix_end = string_length\n    let prefix = string[string.index(string.startIndex,\
    \ offsetBy: prefix_start)..<string.index(string.startIndex, offsetBy: prefix_end)]\n\
    \    let reversed_prefix = String(prefix.characters.reversed())\n    return string\
    \ + reversed_prefix", "    let string = string.characters.map { String($0) }\n\
    \    let reversed = string.reverse()\n    let n = string.count\n    var i = 0\n\
    \    while i < n {\n        if string[i] == reversed[i] {\n            i += 1\n\
    \        } else {\n            break\n        }\n    }\n    let prefix = string[0..<i]\n\
    \    let suffix = reversed[i..<n]\n    return string.joinWithSeparator(\"\") +\
    \ suffix.joinWithSeparator(\"\")", "    let length = string.characters.count\n\
    \    if length == 0 {\n        return \"\"\n    }\n    let reversed = string.characters.reverse()\n\
    \    let reversed_string = String(reversed)\n    let suffix = longest_common_suffix(string,\
    \ reversed_string)\n    let prefix = string.substringToIndex(string.startIndex.advancedBy(length\
    \ - suffix.characters.count))\n    let reversed_prefix = prefix.characters.reverse()\n\
    \    let reversed_prefix_string = String(reversed_prefix)\n    return string +\
    \ reversed_prefix_string", "    let s = Array(string)\n    let n = s.count\n \
    \   if n == 0 {\n        return \"\"\n    }\n    var i = n - 1\n    while i >=\
    \ 0 {\n        if is_palindrome(s, 0, i) {\n            break\n        }\n   \
    \     i -= 1\n    }\n    var j = 0\n    while j < n - i - 1 {\n        s.append(s[j])\n\
    \        j += 1\n    }\n    return String(s)", "    let reversed = String(string.characters.reverse())\n\
    \    let length = string.characters.count\n    var i = 0\n    while i < length\
    \ {\n        if string.hasPrefix(reversed.substringFromIndex(reversed.startIndex.advancedBy(i)))\
    \ {\n            return string + reversed.substringFromIndex(reversed.startIndex.advancedBy(i))\n\
    \        }\n        i += 1\n    }\n    return string + reversed", "    let string\
    \ = string.lowercaseString\n    let length = string.characters.count\n    if length\
    \ == 0 {\n        return \"\"\n    }\n    var suffix = string\n    var prefix\
    \ = \"\"\n    var i = 0\n    while i < length {\n        if is_palindrome(suffix)\
    \ {\n            break\n        }\n        suffix.removeAtIndex(suffix.startIndex)\n\
    \        prefix.append(string[string.startIndex.advancedBy(i)])\n        i +=\
    \ 1\n    }\n    return string + String(prefix.characters.reverse())", "    let\
    \ string_length = string.characters.count\n    if string_length == 0 {\n     \
    \   return \"\"\n    }\n    let string_array = Array(string.characters)\n    var\
    \ longest_palindrome_length = 0\n    var longest_palindrome_start = 0\n    for\
    \ i in 0..<string_length {\n        let palindrome_length = palindrome_length_at_index(string_array,\
    \ index: i)\n        if palindrome_length > longest_palindrome_length {\n    \
    \        longest_palindrome_length = palindrome_length\n            longest_palindrome_start\
    \ = i\n        }\n    }\n    let prefix_start = longest_palindrome_start - longest_palindrome_length\
    \ + 1\n    let prefix_end = longest_palindrome_start + 1\n    let prefix = string_array[prefix_start..<prefix_end]\n\
    \    let prefix_reversed = prefix.reverse()\n    return string + String(prefix_reversed)",
  "    let string_length = string.characters.count\n    if string_length == 0 {\n\
    \        return \"\"\n    }\n    let string_characters = Array(string.characters)\n\
    \    var longest_palindrome_suffix_length = 0\n    for i in 0..<string_length\
    \ {\n        if is_palindrome(string_characters, start: i, end: string_length\
    \ - 1) {\n            longest_palindrome_suffix_length = string_length - i\n \
    \           break\n        }\n    }\n    var result = string\n    for i in 0..<string_length\
    \ - longest_palindrome_suffix_length {\n        result.append(string_characters[string_length\
    \ - 1 - i])\n    }\n    return result", "    let string_length = string.characters.count\n\
    \    if string_length == 0 {\n        return \"\"\n    }\n    let string_array\
    \ = Array(string.characters)\n    var suffix_length = 0\n    while suffix_length\
    \ < string_length {\n        if is_palindrome(string_array, start: 0, end: string_length\
    \ - suffix_length - 1) {\n            break\n        }\n        suffix_length\
    \ += 1\n    }\n    var prefix_length = 0\n    while prefix_length < string_length\
    \ - suffix_length {\n        if is_palindrome(string_array, start: prefix_length,\
    \ end: string_length - 1) {\n            break\n        }\n        prefix_length\
    \ += 1\n    }\n    var result = string\n    for i in 0..<prefix_length {\n   \
    \     result.append(string_array[prefix_length - i - 1])\n    }\n    return result",
  "    let reversed = String(string.characters.reverse())\n    let lcs = longest_common_subsequence(string,\
    \ reversed)\n    let prefix = String(string.characters.prefix(string.characters.count\
    \ - lcs.characters.count))\n    return string + String(prefix.characters.reverse())",
  "    let reversed = String(string.characters.reverse())\n    let string_length =\
    \ string.characters.count\n    let reversed_length = reversed.characters.count\n\
    \    var lps = [Int](count: reversed_length, repeatedValue: 0)\n    var i = 1\n\
    \    var j = 0\n    while i < reversed_length {\n        if reversed[reversed.startIndex.advancedBy(i)]\
    \ == reversed[reversed.startIndex.advancedBy(j)] {\n            lps[i] = j + 1\n\
    \            i += 1\n            j += 1\n        } else {\n            if j !=\
    \ 0 {\n                j = lps[j - 1]\n            } else {\n                lps[i]\
    \ = 0\n                i += 1\n            }\n        }\n    }\n    let prefix\
    \ = reversed.substringToIndex(reversed.startIndex.advancedBy(reversed_length -\
    \ lps[reversed_length - 1]))\n    return string + prefix", "    if string.isEmpty\
    \ {\n        return string\n    }\n    let reversed = String(string.characters.reverse())\n\
    \    let lcs = longest_common_substring(string, reversed)\n    let prefix = string.substringToIndex(string.startIndex.advancedBy(string.characters.count\
    \ - lcs.characters.count))\n    return string + String(prefix.characters.reverse())",
  "    let string = string.characters\n    let string_length = string.count\n    var\
    \ suffix_length = string_length\n    var prefix_length = 0\n    var palindrome_length\
    \ = 0\n    var palindrome_index = 0\n    var palindrome_suffix = \"\"\n    var\
    \ palindrome_prefix = \"\"\n    var palindrome = \"\"\n    \n    while suffix_length\
    \ > 0 {\n        if is_palindrome(string, start: 0, end: string_length - suffix_length)\
    \ {\n            palindrome_length = string_length - suffix_length\n         \
    \   palindrome_index = suffix_length\n            break\n        }\n        suffix_length\
    \ -= 1\n    }\n    \n    while prefix_length < palindrome_index {\n        palindrome_suffix\
    \ += String(string[string_length - palindrome_index + prefix_length])\n      \
    \  prefix_length += 1\n    }\n    \n    palindrome = String(string) + palindrome_suffix\n\
    \    \n    return palindrome", "    let string_length = string.characters.count\n\
    \    if string_length == 0 {\n        return \"\"\n    }\n    let string_chars\
    \ = Array(string.characters)\n    var longest_palindrome_length = 0\n    var longest_palindrome_start\
    \ = 0\n    for i in 0..<string_length {\n        let palindrome_length = get_palindrome_length(string_chars,\
    \ i)\n        if palindrome_length > longest_palindrome_length {\n           \
    \ longest_palindrome_length = palindrome_length\n            longest_palindrome_start\
    \ = i\n        }\n    }\n    let prefix_start = longest_palindrome_start - longest_palindrome_length\n\
    \    let prefix_end = longest_palindrome_start - 1\n    let prefix = String(string_chars[prefix_start...prefix_end])\n\
    \    let prefix_reversed = String(prefix.characters.reverse())\n    return string\
    \ + prefix_reversed", "    let string_length = string.characters.count\n    let\
    \ string_array = Array(string.characters)\n    var palindrome_suffix = \"\"\n\
    \    var palindrome_suffix_length = 0\n    for i in 0..<string_length {\n    \
    \    let substring = String(string_array[i..<string_length])\n        if is_palindrome(substring)\
    \ {\n            palindrome_suffix = substring\n            palindrome_suffix_length\
    \ = substring.characters.count\n            break\n        }\n    }\n    let palindrome_prefix\
    \ = String(string_array[0..<(string_length - palindrome_suffix_length)])\n   \
    \ return palindrome_prefix + String(palindrome_suffix.characters.reverse()) +\
    \ palindrome_suffix", "    let reversed = String(string.characters.reverse())\n\
    \    let longest_common_prefix = longest_common_prefix_suffix(string, reversed)\n\
    \    let prefix = String(string.characters.prefix(string.characters.count - longest_common_prefix))\n\
    \    return string + String(prefix.characters.reverse())", "    let string_length\
    \ = string.characters.count\n    if string_length == 0 {\n        return \"\"\n\
    \    }\n    let string_array = Array(string.characters)\n    var i = string_length\
    \ - 1\n    while i >= 0 {\n        if is_palindrome(string_array, start: 0, end:\
    \ i) {\n            break\n        }\n        i -= 1\n    }\n    var result =\
    \ string\n    for j in (0...i-1).reverse() {\n        result.append(string_array[j])\n\
    \    }\n    return result", "    if string.isEmpty {\n        return string\n\
    \    }\n    let reversed = String(string.characters.reverse())\n    let combined\
    \ = string + \"#\" + reversed\n    let lps = longest_prefix_suffix(combined)\n\
    \    let prefix = string.substringToIndex(string.startIndex.advancedBy(lps.count))\n\
    \    let suffix = String(prefix.characters.reverse())\n    return string + suffix",
  "    let n = string.count\n    let string = Array(string)\n    var z = [Int](repeating:\
    \ 0, count: n)\n    var l = 0\n    var r = 0\n    for i in 1..<n {\n        if\
    \ i <= r {\n            z[i] = min(r - i + 1, z[i - l])\n        }\n        while\
    \ i + z[i] < n && string[z[i]] == string[i + z[i]] {\n            z[i] += 1\n\
    \        }\n        if i + z[i] - 1 > r {\n            l = i\n            r =\
    \ i + z[i] - 1\n        }\n    }\n    var result = \"\"\n    for i in 0..<n -\
    \ z[n - 1] {\n        result += String(string[n - 1 - i])\n    }\n    for i in\
    \ 0..<n {\n        result += String(string[i])\n    }\n    return result", " \
    \   let string_length = string.characters.count\n    let string_chars = Array(string.characters)\n\
    \    var longest_palindrome_length = 0\n    var longest_palindrome_index = 0\n\
    \    var palindrome_lengths = Array(count: string_length, repeatedValue: 0)\n\
    \    for i in 0..<string_length {\n        let left = i - 1\n        let right\
    \ = i + 1\n        var length = 1\n        while left >= 0 && right < string_length\
    \ && string_chars[left] == string_chars[right] {\n            length += 2\n  \
    \          left -= 1\n            right += 1\n        }\n        palindrome_lengths[i]\
    \ = length\n        if length > longest_palindrome_length {\n            longest_palindrome_length\
    \ = length\n            longest_palindrome_index = i\n        }\n    }\n    let\
    \ palindrome_start = longest_palindrome_index - longest_palindrome_length + 1\n\
    \    let palindrome_end = longest_palindrome_index + longest_palindrome_length\n\
    \    let prefix = string.substringToIndex(string.startIndex.advancedBy(palindrome_start))\n\
    \    let suffix = string.substringFromIndex(string.startIndex.advancedBy(palindrome_end))\n\
    \    return prefix + suffix.characters.reverse().map { String($0) }.joinWithSeparator(\"\
    \")"]
stop_tokens:
- "\n}"
