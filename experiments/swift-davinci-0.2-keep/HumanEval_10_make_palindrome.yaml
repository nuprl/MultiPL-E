name: HumanEval_10_make_palindrome
language: swift
prompt: "\n/// Find the shortest palindrome that begins with a supplied string.\n\
  /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
  \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
  \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome('')\n\
  /// ''\n/// >>> make_palindrome('cat')\n/// 'catac'\n/// >>> make_palindrome('cata')\n\
  /// 'catac'\nfunc make_palindrome(string: String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(make_palindrome(string: \"\") == \"\")\n\
  assert(make_palindrome(string: \"x\") == \"x\")\nassert(make_palindrome(string:\
  \ \"xyz\") == \"xyzyx\")\nassert(make_palindrome(string: \"xyx\") == \"xyx\")\n\
  assert(make_palindrome(string: \"jerry\") == \"jerryrrej\")"
completions: ["    let reversed = String(string.characters.reverse())\n    let longest_common_suffix\
    \ = longest_common_substring(string, reversed)\n    let prefix = string.substringToIndex(string.startIndex.advancedBy(string.characters.count\
    \ - longest_common_suffix.characters.count))\n    return string + String(prefix.characters.reverse())",
  "    let string_length = string.characters.count\n    if string_length == 0 {\n\
    \        return \"\"\n    }\n    let string_chars = Array(string.characters)\n\
    \    let string_chars_reversed = Array(string.characters.reversed())\n    var\
    \ longest_palindrome_length = 0\n    var longest_palindrome_start = 0\n    for\
    \ i in 0..<string_length {\n        var j = 0\n        while i - j >= 0 && i +\
    \ j < string_length && string_chars[i - j] == string_chars[i + j] {\n        \
    \    j += 1\n        }\n        if j > longest_palindrome_length {\n         \
    \   longest_palindrome_length = j\n            longest_palindrome_start = i -\
    \ j + 1\n        }\n    }\n    for i in 0..<string_length - 1 {\n        var j\
    \ = 0\n        while i - j >= 0 && i + 1 + j < string_length && string_chars[i\
    \ - j] == string_chars[i + 1 + j] {\n            j += 1\n        }\n        if\
    \ j > longest_palindrome_length {\n            longest_palindrome_length = j\n\
    \            longest_palindrome_start = i - j + 1\n        }\n    }\n    let prefix_start\
    \ = longest_palindrome_start + longest_palindrome_length\n    let prefix_end =\
    \ string_length\n    let prefix_length = prefix_end - prefix_start\n    let prefix_chars\
    \ = string_chars[prefix_start..<prefix_end]\n    let prefix_chars_reversed = string_chars_reversed[prefix_start..<prefix_end]\n\
    \    return string + String(prefix_chars_reversed)", "    let string_length =\
    \ string.characters.count\n    if string_length == 0 {\n        return \"\"\n\
    \    }\n    let string_chars = Array(string.characters)\n    var palindrome_suffix_length\
    \ = 0\n    for i in 0..<string_length {\n        if is_palindrome(string_chars,\
    \ start: i, end: string_length - 1) {\n            palindrome_suffix_length =\
    \ string_length - i\n            break\n        }\n    }\n    let palindrome_prefix_length\
    \ = string_length - palindrome_suffix_length\n    var palindrome_chars = string_chars\n\
    \    for i in 0..<palindrome_prefix_length {\n        palindrome_chars.append(string_chars[palindrome_prefix_length\
    \ - i - 1])\n    }\n    return String(palindrome_chars)", "    let string = string.characters.map\
    \ { String($0) }\n    let string_length = string.count\n    if string_length ==\
    \ 0 {\n        return \"\"\n    }\n    var longest_palindrome_suffix = [String]()\n\
    \    for i in 0..<string_length {\n        var palindrome_suffix = [String]()\n\
    \        for j in 0..<string_length {\n            if i + j < string_length {\n\
    \                palindrome_suffix.append(string[i + j])\n            }\n    \
    \    }\n        if is_palindrome(palindrome_suffix) {\n            if palindrome_suffix.count\
    \ > longest_palindrome_suffix.count {\n                longest_palindrome_suffix\
    \ = palindrome_suffix\n            }\n        }\n    }\n    var prefix = [String]()\n\
    \    for i in 0..<string_length - longest_palindrome_suffix.count {\n        prefix.append(string[i])\n\
    \    }\n    return prefix.joined(separator: \"\") + longest_palindrome_suffix.joined(separator:\
    \ \"\") + prefix.reversed().joined(separator: \"\")", "    let string_length =\
    \ string.characters.count\n    if string_length == 0 {\n        return \"\"\n\
    \    }\n    let string_chars = Array(string.characters)\n    var i = string_length\
    \ - 1\n    while i >= 0 {\n        if is_palindrome(string_chars, start: 0, end:\
    \ i) {\n            break\n        }\n        i -= 1\n    }\n    var prefix =\
    \ string.substring(to: string.index(string.startIndex, offsetBy: i + 1))\n   \
    \ prefix = String(prefix.characters.reversed())\n    return string + prefix",
  "    let string_length = string.characters.count\n    if string_length == 0 {\n\
    \        return \"\"\n    }\n    let string_array = Array(string.characters)\n\
    \    var longest_palindrome_length = 0\n    var longest_palindrome_start = 0\n\
    \    for i in 0..<string_length {\n        let palindrome_length = palindrome_length_at_index(string_array,\
    \ index: i)\n        if palindrome_length > longest_palindrome_length {\n    \
    \        longest_palindrome_length = palindrome_length\n            longest_palindrome_start\
    \ = i\n        }\n    }\n    let prefix_start = longest_palindrome_start - longest_palindrome_length\
    \ + 1\n    let prefix_end = longest_palindrome_start\n    let prefix = string_array[prefix_start...prefix_end]\n\
    \    let prefix_reversed = prefix.reverse()\n    let palindrome = string + String(prefix_reversed)\n\
    \    return palindrome", "    let string_length = string.characters.count\n  \
    \  if string_length == 0 {\n        return \"\"\n    }\n    if string_length ==\
    \ 1 {\n        return string\n    }\n    let string_chars = Array(string.characters)\n\
    \    var longest_palindrome_length = 0\n    var longest_palindrome_start = 0\n\
    \    for i in 0..<string_length {\n        let palindrome_length = longest_palindrome_length_at(string_chars,\
    \ string_length: string_length, center: i)\n        if palindrome_length > longest_palindrome_length\
    \ {\n            longest_palindrome_length = palindrome_length\n            longest_palindrome_start\
    \ = i\n        }\n    }\n    let prefix_start = longest_palindrome_start - longest_palindrome_length\
    \ + 1\n    let prefix_end = longest_palindrome_start + 1\n    let prefix = String(string_chars[prefix_start..<prefix_end])\n\
    \    let reversed_prefix = String(prefix.characters.reverse())\n    return string\
    \ + reversed_prefix", "    let string_length = string.characters.count\n    if\
    \ string_length == 0 {\n        return \"\"\n    }\n    let string_chars = Array(string.characters)\n\
    \    var longest_palindrome_length = 0\n    var longest_palindrome_start = 0\n\
    \    for i in 0..<string_length {\n        var j = 0\n        while i - j >= 0\
    \ && i + j < string_length && string_chars[i - j] == string_chars[i + j] {\n \
    \           j += 1\n        }\n        if j > longest_palindrome_length {\n  \
    \          longest_palindrome_length = j\n            longest_palindrome_start\
    \ = i - j + 1\n        }\n    }\n    var result = string\n    for i in 0..<string_length\
    \ - longest_palindrome_length {\n        result.append(string_chars[string_length\
    \ - 1 - i])\n    }\n    return result", "    if string.isEmpty {\n        return\
    \ string\n    }\n    let string_length = string.characters.count\n    let string_array\
    \ = Array(string.characters)\n    var max_palindrome_length = 0\n    var max_palindrome_index\
    \ = 0\n    for i in 0..<string_length {\n        let palindrome_length = get_palindrome_length(string_array,\
    \ i)\n        if palindrome_length > max_palindrome_length {\n            max_palindrome_length\
    \ = palindrome_length\n            max_palindrome_index = i\n        }\n    }\n\
    \    let prefix_length = string_length - max_palindrome_length\n    let prefix\
    \ = string_array[0..<prefix_length]\n    let prefix_reversed = prefix.reverse()\n\
    \    return string + String(prefix_reversed)", "    let string = string.characters\n\
    \    let string_length = string.count\n    if string_length == 0 {\n        return\
    \ \"\"\n    }\n    var palindrome_suffix_length = 0\n    for i in 0..<string_length\
    \ {\n        if is_palindrome(string, start: i, end: string_length - 1) {\n  \
    \          palindrome_suffix_length = string_length - i\n            break\n \
    \       }\n    }\n    var result = string\n    for i in 0..<string_length - palindrome_suffix_length\
    \ {\n        result.append(string[string_length - 1 - i])\n    }\n    return String(result)",
  "    let string_length = string.characters.count\n    if string_length == 0 {\n\
    \        return \"\"\n    }\n    var longest_palindrome_length = 0\n    var longest_palindrome_start\
    \ = 0\n    for i in 0..<string_length {\n        let palindrome_length = palindrome_length_at_index(string:\
    \ string, index: i)\n        if palindrome_length > longest_palindrome_length\
    \ {\n            longest_palindrome_length = palindrome_length\n            longest_palindrome_start\
    \ = i\n        }\n    }\n    let prefix_start = longest_palindrome_start - longest_palindrome_length\
    \ + 1\n    let prefix_end = longest_palindrome_start + 1\n    let prefix = string[string.index(string.startIndex,\
    \ offsetBy: prefix_start)..<string.index(string.startIndex, offsetBy: prefix_end)]\n\
    \    let prefix_reversed = String(prefix.characters.reversed())\n    return string\
    \ + prefix_reversed", "    let string_length = string.characters.count\n    if\
    \ string_length == 0 {\n        return \"\"\n    }\n    var string_array = Array(string.characters)\n\
    \    var palindrome_suffix = Array(repeating: 0, count: string_length)\n    var\
    \ center = 0\n    var right = 0\n    for i in 0..<string_length {\n        let\
    \ mirror = 2 * center - i\n        if right > i {\n            palindrome_suffix[i]\
    \ = min(right - i, palindrome_suffix[mirror])\n        }\n        while i + palindrome_suffix[i]\
    \ + 1 < string_length && i - palindrome_suffix[i] - 1 >= 0 && string_array[i +\
    \ palindrome_suffix[i] + 1] == string_array[i - palindrome_suffix[i] - 1] {\n\
    \            palindrome_suffix[i] += 1\n        }\n        if i + palindrome_suffix[i]\
    \ > right {\n            center = i\n            right = i + palindrome_suffix[i]\n\
    \        }\n    }\n    let max_suffix_length = palindrome_suffix.max()!\n    let\
    \ prefix = string_array[0..<string_length - max_suffix_length]\n    let prefix_reversed\
    \ = prefix.reversed()\n    return String(string_array) + String(prefix_reversed)",
  "    let string_length = string.characters.count\n    if string_length == 0 {\n\
    \        return \"\"\n    }\n    let string_chars = Array(string.characters)\n\
    \    var longest_palindrome_length = 0\n    var longest_palindrome_start = 0\n\
    \    for i in 0..<string_length {\n        // Check for odd palindromes.\n   \
    \     var j = 0\n        while i - j >= 0 && i + j < string_length && string_chars[i\
    \ - j] == string_chars[i + j] {\n            j += 1\n        }\n        if j >\
    \ longest_palindrome_length {\n            longest_palindrome_length = j\n   \
    \         longest_palindrome_start = i - j + 1\n        }\n        // Check for\
    \ even palindromes.\n        j = 0\n        while i - j >= 0 && i + j + 1 < string_length\
    \ && string_chars[i - j] == string_chars[i + j + 1] {\n            j += 1\n  \
    \      }\n        if j > longest_palindrome_length {\n            longest_palindrome_length\
    \ = j\n            longest_palindrome_start = i - j + 1\n        }\n    }\n  \
    \  let prefix = String(string_chars[0..<longest_palindrome_start])\n    let reversed_prefix\
    \ = String(prefix.characters.reverse())\n    return string + reversed_prefix",
  "    let string_length = string.characters.count\n    if string_length == 0 {\n\
    \        return \"\"\n    }\n    let string_array = Array(string.characters)\n\
    \    var palindrome_suffix_length = 0\n    for i in 0..<string_length {\n    \
    \    if is_palindrome(string_array, start: i, end: string_length - 1) {\n    \
    \        palindrome_suffix_length = string_length - i\n            break\n   \
    \     }\n    }\n    var result = string\n    for i in 0..<string_length - palindrome_suffix_length\
    \ {\n        result.append(string_array[string_length - i - 1])\n    }\n    return\
    \ result", "    let length = string.characters.count\n    if length == 0 {\n \
    \       return \"\"\n    }\n    let suffix = longest_palindromic_suffix(string:\
    \ string)\n    let prefix = String(string.characters.prefix(length - suffix.characters.count))\n\
    \    return prefix + String(suffix.characters.reversed()) + suffix", "    let\
    \ reversed = String(string.characters.reverse())\n    let palindrome = string\
    \ + reversed\n    let lps = longest_palindromic_substring(palindrome)\n    let\
    \ prefix = String(string.characters.dropLast(lps.characters.count))\n    return\
    \ prefix + string", "    let string_length = string.characters.count\n    if string_length\
    \ <= 1 {\n        return string\n    }\n    let string_chars = Array(string.characters)\n\
    \    var palindrome_length = 0\n    for i in 0..<string_length {\n        let\
    \ j = string_length - i - 1\n        if string_chars[i] == string_chars[j] {\n\
    \            palindrome_length += 1\n        } else {\n            break\n   \
    \     }\n    }\n    let prefix = string.substringToIndex(string.startIndex.advancedBy(string_length\
    \ - palindrome_length))\n    return string + String(prefix.characters.reverse())",
  "    let string = string.lowercaseString\n    let string_length = string.characters.count\n\
    \    if string_length == 0 {\n        return \"\"\n    }\n    let string_array\
    \ = Array(string.characters)\n    var longest_palindrome_length = 0\n    var longest_palindrome_start\
    \ = 0\n    for i in 0..<string_length {\n        let palindrome_length = palindrome_length_at_index(string_array,\
    \ i)\n        if palindrome_length > longest_palindrome_length {\n           \
    \ longest_palindrome_length = palindrome_length\n            longest_palindrome_start\
    \ = i\n        }\n    }\n    let prefix_length = string_length - longest_palindrome_length\n\
    \    let prefix = string.substringToIndex(string.startIndex.advancedBy(prefix_length))\n\
    \    let reversed_prefix = String(prefix.characters.reverse())\n    return string\
    \ + reversed_prefix", "    if string.isEmpty {\n        return string\n    }\n\
    \    let string_length = string.count\n    let string_chars = Array(string)\n\
    \    var longest_palindrome_length = 0\n    var longest_palindrome_start = 0\n\
    \    for i in 0..<string_length {\n        let palindrome_length = longest_palindrome_length_at_index(string_chars:\
    \ string_chars, string_length: string_length, index: i)\n        if palindrome_length\
    \ > longest_palindrome_length {\n            longest_palindrome_length = palindrome_length\n\
    \            longest_palindrome_start = i\n        }\n    }\n    let palindrome_end\
    \ = longest_palindrome_start + longest_palindrome_length\n    let prefix = String(string_chars[0..<longest_palindrome_start])\n\
    \    let suffix = String(string_chars[palindrome_end..<string_length])\n    return\
    \ prefix + suffix + String(suffix.reversed())", "    let length = string.characters.count\n\
    \    if length == 0 {\n        return \"\"\n    }\n    let reversed = string.characters.reverse()\n\
    \    let reversed_string = String(reversed)\n    let lcs = longest_common_subsequence(string,\
    \ reversed_string)\n    let lcs_length = lcs.characters.count\n    if lcs_length\
    \ == length {\n        return string\n    }\n    let prefix = string.substringToIndex(string.startIndex.advancedBy(length\
    \ - lcs_length))\n    let reversed_prefix = prefix.characters.reverse()\n    let\
    \ reversed_prefix_string = String(reversed_prefix)\n    return string + reversed_prefix_string"]
stop_tokens:
- "\n}"
