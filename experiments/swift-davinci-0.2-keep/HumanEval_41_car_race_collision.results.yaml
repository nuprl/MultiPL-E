language: swift
name: HumanEval_41_car_race_collision
results:
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    var i = 0\n    var j = 0\n    while i < n && j < n {\n     \
    \   if left_to_right[i] < right_to_left[j] {\n            collisions += j\n  \
    \          i += 1\n        } else {\n            j += 1\n        }\n    }\n  \
    \  return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmprvu7mlnb/tmprvu7mlnb.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adea1e2dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adea1b24b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adea1b24988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adea1b237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprvu7mlnb                        0x000055eae2ee7455 <unavailable> + 5205

    5    libc.so.6                          0x00002adea2019460 __libc_start_main +
    245

    6    tmprvu7mlnb                        0x000055eae2ee7109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012212
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var i = 0\n    while i <\
    \ n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n  \
    \      i += 1\n    }\n    var collisions = 0\n    i = 0\n    while i < n {\n \
    \       if left_to_right[i] == right_to_left[i] {\n            collisions += 1\n\
    \        }\n        i += 1\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpnjd3n2iq/tmpnjd3n2iq.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d211c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d20ebcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d20ebc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d20ebb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnjd3n2iq                        0x000055b9535322c5 <unavailable> + 4805

    5    libc.so.6                          0x00002b6d213b1460 __libc_start_main +
    245

    6    tmpnjd3n2iq                        0x000055b953531f79 <unavailable> + 3961

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                count += 1\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpeixhzo9y/tmpeixhzo9y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b261dd57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b261da4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b261da4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b261da4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeixhzo9y                        0x00005571c4c4f455 <unavailable> + 5205

    5    libc.so.6                          0x00002b261df43460 __libc_start_main +
    245

    6    tmpeixhzo9y                        0x00005571c4c4f109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var collisions = 0\n    var left_to_right = Array(repeating:\
    \ 0, count: n)\n    var right_to_left = Array(repeating: 0, count: n)\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp855j_geu/tmp855j_geu.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d5bb32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d5b829b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d5b829988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d5b8287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp855j_geu                        0x00005599f48b5455 <unavailable> + 5205

    5    libc.so.6                          0x00002b8d5bd1e460 __libc_start_main +
    245

    6    tmp855j_geu                        0x00005599f48b5109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp8gl69j6y/tmp8gl69j6y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc680c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc67db8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc67db8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc67db77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8gl69j6y                        0x000055beeb7cb455 <unavailable> + 5205

    5    libc.so.6                          0x00002abc682ad460 __libc_start_main +
    245

    6    tmp8gl69j6y                        0x000055beeb7cb109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n-i-1)\n\
    \    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n  \
    \          if left_to_right[i] == right_to_left[j] {\n                count +=\
    \ 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpj3scq00u/tmpj3scq00u.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7bd0c52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7bd0949b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7bd0949988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7bd09487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj3scq00u                        0x00005649051c7445 <unavailable> + 5189

    5    libc.so.6                          0x00002b7bd0e3e460 __libc_start_main +
    245

    6    tmpj3scq00u                        0x00005649051c70f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collision = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collision += 1\n            }\n     \
    \   }\n    }\n    return collision\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpw2pxp_gx/tmpw2pxp_gx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1475015c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1474d0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1474d0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1474d0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2pxp_gx                        0x000055eb2e404455 <unavailable> + 5205

    5    libc.so.6                          0x00002b1475201460 __libc_start_main +
    245

    6    tmpw2pxp_gx                        0x000055eb2e404109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmps1jc4l0x/tmps1jc4l0x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7480becc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74808e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74808e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74808e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1jc4l0x                        0x000055a38fff1455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7480dd8460 __libc_start_main +
    245

    6    tmps1jc4l0x                        0x000055a38fff1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmps1jc4l0x/tmps1jc4l0x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7480becc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74808e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74808e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74808e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1jc4l0x                        0x000055a38fff1455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7480dd8460 __libc_start_main +
    245

    6    tmps1jc4l0x                        0x000055a38fff1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    var collisions = 0\n    for i in 0..<n {\n        left_to_right.append(i)\n\
    \        right_to_left.append(n - i - 1)\n    }\n    for i in 0..<n {\n      \
    \  for j in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n \
    \               collisions += 1\n            }\n        }\n    }\n    return collisions\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpq6yj_gvr/tmpq6yj_gvr.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fa22aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fa1fa5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fa1fa5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fa1fa47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq6yj_gvr                        0x000055ad036c8445 <unavailable> + 5189

    5    libc.so.6                          0x00002b6fa249a460 __libc_start_main +
    245

    6    tmpq6yj_gvr                        0x000055ad036c80f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012212
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right_cars = [Int](repeating: 0, count: n)\n\
    \    var right_to_left_cars = [Int](repeating: 0, count: n)\n    var i = 0\n \
    \   while i < n {\n        left_to_right_cars[i] = i\n        right_to_left_cars[i]\
    \ = n - i - 1\n        i += 1\n    }\n    return merge_sort_collision(left_to_right_cars,\
    \ right_to_left_cars)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmpxki9ohz1.swift:19:12: error: cannot find 'merge_sort_collision'\
    \ in scope\n    return merge_sort_collision(left_to_right_cars, right_to_left_cars)\n\
    \           ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012212
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collision = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collision += 1\n            }\n     \
    \   }\n    }\n    return collision\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpw2pxp_gx/tmpw2pxp_gx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1475015c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1474d0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1474d0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1474d0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2pxp_gx                        0x000055eb2e404455 <unavailable> + 5205

    5    libc.so.6                          0x00002b1475201460 __libc_start_main +
    245

    6    tmpw2pxp_gx                        0x000055eb2e404109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmptluchuc9/tmptluchuc9.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49eb4e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49eb1ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49eb1dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49eb1dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptluchuc9                        0x00005578d78d91b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b49eb6d2460 __libc_start_main +
    245

    6    tmptluchuc9                        0x00005578d78d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var i = 0\n    while i <\
    \ n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n  \
    \      i += 1\n    }\n    var collision = 0\n    i = 0\n    while i < n {\n  \
    \      if left_to_right[i] == right_to_left[i] {\n            collision += 1\n\
    \        }\n        i += 1\n    }\n    return collision\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp_lrnfevq/tmp_lrnfevq.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1da3895c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1da358cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1da358c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1da358b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_lrnfevq                        0x0000556772cee2c5 <unavailable> + 4805

    5    libc.so.6                          0x00002b1da3a81460 __libc_start_main +
    245

    6    tmp_lrnfevq                        0x0000556772cedf79 <unavailable> + 3961

    '
  stdout: ''
  timestamp: 1660012212
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmps1jc4l0x/tmps1jc4l0x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7480becc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74808e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74808e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74808e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1jc4l0x                        0x000055a38fff1455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7480dd8460 __libc_start_main +
    245

    6    tmps1jc4l0x                        0x000055a38fff1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmptluchuc9/tmptluchuc9.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49eb4e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49eb1ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49eb1dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49eb1dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptluchuc9                        0x00005578d78d91b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b49eb6d2460 __libc_start_main +
    245

    6    tmptluchuc9                        0x00005578d78d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    var i = 0\n    while i <\
    \ n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n  \
    \      i += 1\n    }\n    var collisions = 0\n    i = 0\n    while i < n {\n \
    \       var j = 0\n        while j < n {\n            if left_to_right[i] == right_to_left[j]\
    \ {\n                collisions += 1\n            }\n            j += 1\n    \
    \    }\n        i += 1\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpn351fouu/tmpn351fouu.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8111b76c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b811186db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b811186d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b811186c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn351fouu                        0x000055dfc22872c5 <unavailable> + 4805

    5    libc.so.6                          0x00002b8111d62460 __libc_start_main +
    245

    6    tmpn351fouu                        0x000055dfc2286f79 <unavailable> + 3961

    '
  stdout: ''
  timestamp: 1660012212
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmps1jc4l0x/tmps1jc4l0x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7480becc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74808e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74808e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74808e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1jc4l0x                        0x000055a38fff1455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7480dd8460 __libc_start_main +
    245

    6    tmps1jc4l0x                        0x000055a38fff1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n-i-1)\n\
    \    }\n    var collision = 0\n    for i in 0..<n {\n        for j in 0..<n {\n\
    \            if left_to_right[i] == right_to_left[j] {\n                collision\
    \ += 1\n            }\n        }\n    }\n    return collision\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp2jnv6my8/tmp2jnv6my8.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b44880a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4487d97b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4487d97988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4487d967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2jnv6my8                        0x00005590c16e1445 <unavailable> + 5189

    5    libc.so.6                          0x00002b448828c460 __libc_start_main +
    245

    6    tmp2jnv6my8                        0x00005590c16e10f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012212
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                count += 1\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpeixhzo9y/tmpeixhzo9y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b261dd57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b261da4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b261da4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b261da4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeixhzo9y                        0x00005571c4c4f455 <unavailable> + 5205

    5    libc.so.6                          0x00002b261df43460 __libc_start_main +
    245

    6    tmpeixhzo9y                        0x00005571c4c4f109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                count += 1\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpeixhzo9y/tmpeixhzo9y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b261dd57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b261da4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b261da4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b261da4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeixhzo9y                        0x00005571c4c4f455 <unavailable> + 5205

    5    libc.so.6                          0x00002b261df43460 __libc_start_main +
    245

    6    tmpeixhzo9y                        0x00005571c4c4f109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmps1jc4l0x/tmps1jc4l0x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7480becc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74808e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74808e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74808e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1jc4l0x                        0x000055a38fff1455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7480dd8460 __libc_start_main +
    245

    6    tmps1jc4l0x                        0x000055a38fff1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(i)\n\
    \    }\n    var count = 0\n    while left_to_right.count > 0 && right_to_left.count\
    \ > 0 {\n        if left_to_right[0] == right_to_left[0] {\n            count\
    \ += 1\n            left_to_right.remove(at: 0)\n            right_to_left.remove(at:\
    \ 0)\n        } else if left_to_right[0] < right_to_left[0] {\n            left_to_right.remove(at:\
    \ 0)\n        } else {\n            right_to_left.remove(at: 0)\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpat78vbq_/tmpat78vbq_.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8891f4ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8891c41b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8891c41988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8891c407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpat78vbq_                        0x0000562e41bb6535 <unavailable> + 5429

    5    libc.so.6                          0x00002b8892136460 __libc_start_main +
    245

    6    tmpat78vbq_                        0x0000562e41bb61e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(i)\n\
    \    }\n    var collisions = 0\n    while !left_to_right.isEmpty && !right_to_left.isEmpty\
    \ {\n        let left = left_to_right.removeFirst()\n        let right = right_to_left.removeLast()\n\
    \        if left == right {\n            collisions += 1\n        }\n    }\n \
    \   return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpt1hf36p2/tmpt1hf36p2.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9e065e8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9e062dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9e062df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9e062de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt1hf36p2                        0x0000563a1796d615 <unavailable> + 5653

    5    libc.so.6                          0x00002b9e067d4460 __libc_start_main +
    245

    6    tmpt1hf36p2                        0x0000563a1796d2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660012212
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var i = 0\n    while i <\
    \ n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n  \
    \      i += 1\n    }\n    var collisions = 0\n    i = 0\n    while i < n {\n \
    \       if left_to_right[i] == right_to_left[i] {\n            collisions += 1\n\
    \        }\n        i += 1\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpnjd3n2iq/tmpnjd3n2iq.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d211c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d20ebcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d20ebc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d20ebb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnjd3n2iq                        0x000055b9535322c5 <unavailable> + 4805

    5    libc.so.6                          0x00002b6d213b1460 __libc_start_main +
    245

    6    tmpnjd3n2iq                        0x000055b953531f79 <unavailable> + 3961

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right_cars = [Int](0..<n)\n    var right_to_left_cars\
    \ = [Int](0..<n)\n    var collisions = 0\n    while !left_to_right_cars.isEmpty\
    \ && !right_to_left_cars.isEmpty {\n        let left_car = left_to_right_cars.removeFirst()\n\
    \        let right_car = right_to_left_cars.removeFirst()\n        if left_car\
    \ == right_car {\n            collisions += 1\n        }\n    }\n    return collisions\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpv88g0e4e/tmpv88g0e4e.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2a3ac35c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a3a92cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2a3a92c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2a3a92b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv88g0e4e                        0x0000560947ea5505 <unavailable> + 5381

    5    libc.so.6                          0x00002b2a3ae21460 __libc_start_main +
    245

    6    tmpv88g0e4e                        0x0000560947ea51b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1660012168
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var i = 0\n    while i <\
    \ n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n  \
    \      i += 1\n    }\n    var collisions = 0\n    i = 0\n    while i < n {\n \
    \       var j = 0\n        while j < n {\n            if left_to_right[i] == right_to_left[j]\
    \ {\n                collisions += 1\n            }\n            j += 1\n    \
    \    }\n        i += 1\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpx74kc7zh/tmpx74kc7zh.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6dc17bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6dbe72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6dbe72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6dbe717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx74kc7zh                        0x00005590291e32c5 <unavailable> + 4805

    5    libc.so.6                          0x00002ab6dc367460 __libc_start_main +
    245

    6    tmpx74kc7zh                        0x00005590291e2f79 <unavailable> + 3961

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                count += 1\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpeixhzo9y/tmpeixhzo9y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b261dd57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b261da4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b261da4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b261da4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeixhzo9y                        0x00005571c4c4f455 <unavailable> + 5205

    5    libc.so.6                          0x00002b261df43460 __libc_start_main +
    245

    6    tmpeixhzo9y                        0x00005571c4c4f109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collision = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collision += 1\n            }\n     \
    \   }\n    }\n    return collision\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpw2pxp_gx/tmpw2pxp_gx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1475015c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1474d0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1474d0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1474d0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2pxp_gx                        0x000055eb2e404455 <unavailable> + 5205

    5    libc.so.6                          0x00002b1475201460 __libc_start_main +
    245

    6    tmpw2pxp_gx                        0x000055eb2e404109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(0..<n)\n    var right_to_left =\
    \ Array(0..<n)\n    left_to_right.sort()\n    right_to_left.sort()\n    var collisions\
    \ = 0\n    var i = 0\n    var j = 0\n    while i < n && j < n {\n        if left_to_right[i]\
    \ < right_to_left[j] {\n            collisions += j\n            i += 1\n    \
    \    } else {\n            j += 1\n        }\n    }\n    collisions += j * (n\
    \ - i)\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpurd7e6eb/tmpurd7e6eb.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cfdb6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cfd866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cfd866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cfd8657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpurd7e6eb                        0x000055ea8c6954f5 <unavailable> + 5365

    5    libc.so.6                          0x00002b6cfdd5b460 __libc_start_main +
    245

    6    tmpurd7e6eb                        0x000055ea8c6951a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    var collision = 0\n    var\
    \ i = 0\n    var j = n - 1\n    while i < n && j >= 0 {\n        if left_to_right[i]\
    \ < right_to_left[j] {\n            left_to_right[i] += 1\n            i += 1\n\
    \        } else if left_to_right[i] > right_to_left[j] {\n            right_to_left[j]\
    \ += 1\n            j -= 1\n        } else {\n            collision += 1\n   \
    \         left_to_right[i] += 1\n            right_to_left[j] += 1\n         \
    \   i += 1\n            j -= 1\n        }\n    }\n    return collision\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpgj00ptgq/tmpgj00ptgq.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b72726c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72723bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b72723bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72723bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgj00ptgq                        0x000055aaf50b12c5 <unavailable> + 4805

    5    libc.so.6                          0x00002b72728b2460 __libc_start_main +
    245

    6    tmpgj00ptgq                        0x000055aaf50b0f79 <unavailable> + 3961

    '
  stdout: ''
  timestamp: 1660012212
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collision_count = 0\n\
    \    for i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n       \
    \     if left_to_right[i] == right_to_left[j] {\n                collision_count\
    \ += 1\n            }\n        }\n    }\n    return collision_count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp4lx4niiq/tmp4lx4niiq.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4332c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af432fb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af432fb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af432fb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4lx4niiq                        0x000055db859ec455 <unavailable> + 5205

    5    libc.so.6                          0x00002af4334ae460 __libc_start_main +
    245

    6    tmp4lx4niiq                        0x000055db859ec109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n\
    \ - i - 1)\n    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            if left_to_right[i] == right_to_left[j] {\n                count\
    \ += 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp2hktz2mj/tmp2hktz2mj.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf0d9c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf0d6b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf0d6b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf0d6b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2hktz2mj                        0x00005580120f7445 <unavailable> + 5189

    5    libc.so.6                          0x00002acf0dbac460 __libc_start_main +
    245

    6    tmp2hktz2mj                        0x00005580120f70f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n-i-1)\n\
    \    }\n    var collisions = 0\n    for i in 0..<n {\n        if left_to_right[i]\
    \ == right_to_left[i] {\n            collisions += 1\n        }\n    }\n    return\
    \ collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmph4n1_9r5/tmph4n1_9r5.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdaa96dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdaa664b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdaa664988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdaa6637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph4n1_9r5                        0x0000556ef9314445 <unavailable> + 5189

    5    libc.so.6                          0x00002afdaab59460 __libc_start_main +
    245

    6    tmph4n1_9r5                        0x0000556ef93140f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012212
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    var collision = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collision += 1\n            }\n     \
    \   }\n    }\n    return collision\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpa6brek0n/tmpa6brek0n.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac576e06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac576afdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac576afd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac576afc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa6brek0n                        0x000055bb36ad0455 <unavailable> + 5205

    5    libc.so.6                          0x00002ac576ff2460 __libc_start_main +
    245

    6    tmpa6brek0n                        0x000055bb36ad0109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012212
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            if i < j {\n                count += 1\n            }\n     \
    \   }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmppbya1g_f/tmppbya1g_f.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9eb83c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9eb80bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9eb80bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9eb80bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppbya1g_f                        0x00005624dca9a335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9eb85b2460 __libc_start_main +
    245

    6    tmppbya1g_f                        0x00005624dca99fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(i)\n\
    \    }\n    var count = 0\n    while left_to_right.count > 0 && right_to_left.count\
    \ > 0 {\n        let left = left_to_right.removeFirst()\n        let right = right_to_left.removeLast()\n\
    \        if left == right {\n            count += 1\n        }\n    }\n    return\
    \ count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(car_race_collision(n: 2)\
    \ == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n: 4)\
    \ == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpetyp5n5c/tmpetyp5n5c.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abdbb50fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abdbb206b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abdbb206988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abdbb2057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpetyp5n5c                        0x00005638fcf9c5d5 <unavailable> + 5589

    5    libc.so.6                          0x00002abdbb6fb460 __libc_start_main +
    245

    6    tmpetyp5n5c                        0x00005638fcf9c289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660012212
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(0..<n)\n    var right_to_left =\
    \ Array(0..<n)\n    var collisions = 0\n    while left_to_right.count > 0 && right_to_left.count\
    \ > 0 {\n        if left_to_right[0] < right_to_left[0] {\n            left_to_right.removeFirst()\n\
    \            collisions += 1\n        } else {\n            right_to_left.removeFirst()\n\
    \        }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpdfrxgcs8/tmpdfrxgcs8.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23e7fe4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23e7cdbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23e7cdb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23e7cda7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdfrxgcs8                        0x000056119433f515 <unavailable> + 5397

    5    libc.so.6                          0x00002b23e81d0460 __libc_start_main +
    245

    6    tmpdfrxgcs8                        0x000056119433f1c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660012212
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(i)\n\
    \    }\n    var collisions = 0\n    var i = 0\n    var j = 0\n    while i < n\
    \ && j < n {\n        if left_to_right[i] == right_to_left[j] {\n            collisions\
    \ += 1\n            i += 1\n            j += 1\n        } else if left_to_right[i]\
    \ < right_to_left[j] {\n            i += 1\n        } else {\n            j +=\
    \ 1\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3)\
    \ == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpuagauy97/tmpuagauy97.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8fbcb99c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8fbc890b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8fbc890988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8fbc88f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuagauy97                        0x000055d0a45c3445 <unavailable> + 5189

    5    libc.so.6                          0x00002b8fbcd85460 __libc_start_main +
    245

    6    tmpuagauy97                        0x000055d0a45c30f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012212
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n-i-1)\n\
    \    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n  \
    \          if left_to_right[i] == right_to_left[j] {\n                count +=\
    \ 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpj3scq00u/tmpj3scq00u.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7bd0c52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7bd0949b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7bd0949988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7bd09487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj3scq00u                        0x00005649051c7445 <unavailable> + 5189

    5    libc.so.6                          0x00002b7bd0e3e460 __libc_start_main +
    245

    6    tmpj3scq00u                        0x00005649051c70f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp8gl69j6y/tmp8gl69j6y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc680c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc67db8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc67db8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc67db77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8gl69j6y                        0x000055beeb7cb455 <unavailable> + 5205

    5    libc.so.6                          0x00002abc682ad460 __libc_start_main +
    245

    6    tmp8gl69j6y                        0x000055beeb7cb109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    return\
    \ merge_sort_collision(left_to_right, right_to_left)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmps7rt3orn.swift:17:12: error: cannot find 'merge_sort_collision'\
    \ in scope\n    return merge_sort_collision(left_to_right, right_to_left)\n  \
    \         ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012212
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmptluchuc9/tmptluchuc9.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49eb4e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49eb1ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49eb1dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49eb1dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptluchuc9                        0x00005578d78d91b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b49eb6d2460 __libc_start_main +
    245

    6    tmptluchuc9                        0x00005578d78d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    var collisions = 0\n    for i in 0..<n {\n        left_to_right.append(i)\n\
    \        right_to_left.append(i)\n    }\n    left_to_right.sort()\n    right_to_left.sort()\n\
    \    right_to_left.reverse()\n    var i = 0\n    var j = 0\n    while i < n &&\
    \ j < n {\n        if left_to_right[i] < right_to_left[j] {\n            collisions\
    \ += j\n            i += 1\n        } else {\n            j += 1\n        }\n\
    \    }\n    collisions += j * (n - i)\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpwsumhvdw/tmpwsumhvdw.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa6707fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa66d76b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa66d76988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa66d757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwsumhvdw                        0x00005621c81455f5 <unavailable> + 5621

    5    libc.so.6                          0x00002baa6726b460 __libc_start_main +
    245

    6    tmpwsumhvdw                        0x00005621c81452a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660012212
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n\
    \ - i - 1)\n    }\n    var collision = 0\n    for i in 0..<n {\n        for j\
    \ in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n        \
    \        collision += 1\n            }\n        }\n    }\n    return collision\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpd3ver6fr/tmpd3ver6fr.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b787824cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7877f43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7877f43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7877f427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd3ver6fr                        0x000055a4687de445 <unavailable> + 5189

    5    libc.so.6                          0x00002b7878438460 __libc_start_main +
    245

    6    tmpd3ver6fr                        0x000055a4687de0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    var i = 0\n    var j = 0\n    while i < n && j < n {\n \
    \       if left_to_right[i] < right_to_left[j] {\n            collisions += j\n\
    \            i += 1\n        } else {\n            j += 1\n        }\n    }\n\
    \    collisions += (n - i) * j\n    return collisions\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpoby69lxh/tmpoby69lxh.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af46acfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af46a9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af46a9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af46a9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoby69lxh                        0x00005651e075d455 <unavailable> + 5205

    5    libc.so.6                          0x00002af46aee8460 __libc_start_main +
    245

    6    tmpoby69lxh                        0x00005651e075d109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 1...n {\n        left_to_right.append(i)\n        right_to_left.append(n\
    \ - i + 1)\n    }\n    var collisions = 0\n    for i in 0..<n {\n        for j\
    \ in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n        \
    \        collisions += 1\n            }\n        }\n    }\n    return collisions\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp696do4ol/tmp696do4ol.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add63665c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add6335cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add6335c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add6335b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp696do4ol                        0x000055b9c0824535 <unavailable> + 5429

    5    libc.so.6                          0x00002add63851460 __libc_start_main +
    245

    6    tmp696do4ol                        0x000055b9c08241e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660012168
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp8gl69j6y/tmp8gl69j6y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc680c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc67db8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc67db8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc67db77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8gl69j6y                        0x000055beeb7cb455 <unavailable> + 5205

    5    libc.so.6                          0x00002abc682ad460 __libc_start_main +
    245

    6    tmp8gl69j6y                        0x000055beeb7cb109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(1...n)\n    var right_to_left =\
    \ Array(1...n).reversed()\n    var count = 0\n    while !left_to_right.isEmpty\
    \ && !right_to_left.isEmpty {\n        if left_to_right.first! < right_to_left.first!\
    \ {\n            left_to_right.removeFirst()\n        } else if left_to_right.first!\
    \ > right_to_left.first! {\n            right_to_left.removeFirst()\n        }\
    \ else {\n            left_to_right.removeFirst()\n            right_to_left.removeFirst()\n\
    \            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmpbzw39buj.swift:18:13: error: referencing instance method 'removeFirst()'\
    \ on 'Collection' requires the types 'ReversedCollection<[Int]>' and 'Slice<ReversedCollection<[Int]>>'\
    \ be equivalent\n            right_to_left.removeFirst()\n            ^\nSwift.Collection:1:11:\
    \ note: where 'Self' = 'ReversedCollection<[Int]>', 'Self.SubSequence' = 'Slice<ReversedCollection<[Int]>>'\n\
    extension Collection where Self == Self.SubSequence {\n          ^\n/tmp/tmpbzw39buj.swift:21:13:\
    \ error: referencing instance method 'removeFirst()' on 'Collection' requires\
    \ the types 'ReversedCollection<[Int]>' and 'Slice<ReversedCollection<[Int]>>'\
    \ be equivalent\n            right_to_left.removeFirst()\n            ^\nSwift.Collection:1:11:\
    \ note: where 'Self' = 'ReversedCollection<[Int]>', 'Self.SubSequence' = 'Slice<ReversedCollection<[Int]>>'\n\
    extension Collection where Self == Self.SubSequence {\n          ^\n"
  stdout: ''
  timestamp: 1660012212
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n-i-1)\n\
    \    }\n    var collisions = 0\n    for i in 0..<n {\n        if left_to_right[i]\
    \ == right_to_left[i] {\n            collisions += 1\n        }\n    }\n    return\
    \ collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmph4n1_9r5/tmph4n1_9r5.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdaa96dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdaa664b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdaa664988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdaa6637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph4n1_9r5                        0x0000556ef9314445 <unavailable> + 5189

    5    libc.so.6                          0x00002afdaab59460 __libc_start_main +
    245

    6    tmph4n1_9r5                        0x0000556ef93140f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012212
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collision_count = 0\n\
    \    for i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n       \
    \     if left_to_right[i] == right_to_left[j] {\n                collision_count\
    \ += 1\n            }\n        }\n    }\n    return collision_count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp4lx4niiq/tmp4lx4niiq.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4332c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af432fb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af432fb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af432fb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4lx4niiq                        0x000055db859ec455 <unavailable> + 5205

    5    libc.so.6                          0x00002af4334ae460 __libc_start_main +
    245

    6    tmp4lx4niiq                        0x000055db859ec109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmptluchuc9/tmptluchuc9.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49eb4e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49eb1ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49eb1dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49eb1dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptluchuc9                        0x00005578d78d91b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b49eb6d2460 __libc_start_main +
    245

    6    tmptluchuc9                        0x00005578d78d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    return\
    \ car_race_collision(left_to_right: left_to_right, right_to_left: right_to_left)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmpqde_j4k1.swift:17:30: error: extra arguments at positions #1, #2\
    \ in call\n    return car_race_collision(left_to_right: left_to_right, right_to_left:\
    \ right_to_left)\n                             ^\n/tmp/tmpqde_j4k1.swift:10:6:\
    \ note: 'car_race_collision(n:)' declared here\nfunc car_race_collision(n: Int)\
    \ -> Int {\n     ^\n/tmp/tmpqde_j4k1.swift:17:31: error: missing argument for\
    \ parameter 'n' in call\n    return car_race_collision(left_to_right: left_to_right,\
    \ right_to_left: right_to_left)\n                              ^\n           \
    \                   n: <#Int#>, \n/tmp/tmpqde_j4k1.swift:10:6: note: 'car_race_collision(n:)'\
    \ declared here\nfunc car_race_collision(n: Int) -> Int {\n     ^\n"
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmps1jc4l0x/tmps1jc4l0x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7480becc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74808e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74808e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74808e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1jc4l0x                        0x000055a38fff1455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7480dd8460 __libc_start_main +
    245

    6    tmps1jc4l0x                        0x000055a38fff1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right_cars = [Int](repeating: 0, count: n)\n\
    \    var right_to_left_cars = [Int](repeating: 0, count: n)\n    var collisions\
    \ = 0\n    for i in 0..<n {\n        left_to_right_cars[i] = i\n        right_to_left_cars[i]\
    \ = n - i - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n       \
    \     if left_to_right_cars[i] == right_to_left_cars[j] {\n                collisions\
    \ += 1\n            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpt0f4u9k0/tmpt0f4u9k0.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b96309c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b96306bab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b96306ba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b96306b97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt0f4u9k0                        0x0000563a26d4a455 <unavailable> + 5205

    5    libc.so.6                          0x00002b9630baf460 __libc_start_main +
    245

    6    tmpt0f4u9k0                        0x0000563a26d4a109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](0..<n)\n    var right_to_left =\
    \ [Int](0..<n)\n    var collisions = 0\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n           \
    \     collisions += 1\n            }\n        }\n    }\n    return collisions\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpg3vgk3de/tmpg3vgk3de.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acceeef0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acceebe7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acceebe7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acceebe67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg3vgk3de                        0x000056054d08a515 <unavailable> + 5397

    5    libc.so.6                          0x00002accef0dc460 __libc_start_main +
    245

    6    tmpg3vgk3de                        0x000056054d08a1c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1660012168
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right_cars = [Int](repeating: 0, count: n)\n\
    \    var right_to_left_cars = [Int](repeating: 0, count: n)\n    for i in 0..<n\
    \ {\n        left_to_right_cars[i] = i\n        right_to_left_cars[i] = n - i\
    \ - 1\n    }\n    var collisions = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            if left_to_right_cars[i] == right_to_left_cars[j] {\n       \
    \         collisions += 1\n            }\n        }\n    }\n    return collisions\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp9p9ib76u/tmp9p9ib76u.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7863e5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7863b52b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7863b52988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7863b517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9p9ib76u                        0x000056284a6b0455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7864047460 __libc_start_main +
    245

    6    tmp9p9ib76u                        0x000056284a6b0109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: 0
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left = Array(repeating: 0, count: n)\n    var right =\
    \ Array(repeating: 0, count: n)\n    var i = 0\n    var j = 0\n    var count =\
    \ 0\n    while i < n && j < n {\n        if left[i] < right[j] {\n           \
    \ count += j\n            i += 1\n        } else {\n            j += 1\n     \
    \   }\n    }\n    count += (n - i) * j\n    return count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012212
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp8gl69j6y/tmp8gl69j6y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc680c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc67db8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc67db8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc67db77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8gl69j6y                        0x000055beeb7cb455 <unavailable> + 5205

    5    libc.so.6                          0x00002abc682ad460 __libc_start_main +
    245

    6    tmp8gl69j6y                        0x000055beeb7cb109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var i = 0\n    while i <\
    \ n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n  \
    \      i += 1\n    }\n    var collisions = 0\n    i = 0\n    while i < n {\n \
    \       if left_to_right[i] == right_to_left[i] {\n            collisions += 1\n\
    \        }\n        i += 1\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpnjd3n2iq/tmpnjd3n2iq.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d211c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d20ebcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d20ebc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d20ebb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnjd3n2iq                        0x000055b9535322c5 <unavailable> + 4805

    5    libc.so.6                          0x00002b6d213b1460 __libc_start_main +
    245

    6    tmpnjd3n2iq                        0x000055b953531f79 <unavailable> + 3961

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n-i-1)\n\
    \    }\n    var collisions = 0\n    for i in 0..<n {\n        if left_to_right[i]\
    \ == right_to_left[i] {\n            collisions += 1\n        }\n    }\n    return\
    \ collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmph4n1_9r5/tmph4n1_9r5.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdaa96dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdaa664b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdaa664988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdaa6637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph4n1_9r5                        0x0000556ef9314445 <unavailable> + 5189

    5    libc.so.6                          0x00002afdaab59460 __libc_start_main +
    245

    6    tmph4n1_9r5                        0x0000556ef93140f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012212
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collision = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if\
    \ left_to_right[i] == right_to_left[j] {\n                collision += 1\n   \
    \         }\n        }\n    }\n    return collision\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpdl63q81s/tmpdl63q81s.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e81d40c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e81a37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e81a37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e81a367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl63q81s                        0x0000558b4d6b7455 <unavailable> + 5205

    5    libc.so.6                          0x00002b8e81f2c460 __libc_start_main +
    245

    6    tmpdl63q81s                        0x0000558b4d6b7109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collision = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collision += 1\n            }\n     \
    \   }\n    }\n    return collision\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpw2pxp_gx/tmpw2pxp_gx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1475015c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1474d0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1474d0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1474d0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2pxp_gx                        0x000055eb2e404455 <unavailable> + 5205

    5    libc.so.6                          0x00002b1475201460 __libc_start_main +
    245

    6    tmpw2pxp_gx                        0x000055eb2e404109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(i)\n\
    \    }\n    var collision_count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            if left_to_right[i] == right_to_left[j] {\n                collision_count\
    \ += 1\n            }\n        }\n    }\n    return collision_count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy23i7hcp/tmpy23i7hcp.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac096353c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac09604ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac09604a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0960497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy23i7hcp                        0x0000556406e08445 <unavailable> + 5189

    5    libc.so.6                          0x00002ac09653f460 __libc_start_main +
    245

    6    tmpy23i7hcp                        0x0000556406e080f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012212
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n\
    \ - i - 1)\n    }\n    var collision = 0\n    var i = 0\n    var j = 0\n    while\
    \ i < n && j < n {\n        if left_to_right[i] < right_to_left[j] {\n       \
    \     collision += j\n            i += 1\n        } else {\n            j += 1\n\
    \        }\n    }\n    return collision\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpg4c79pwr/tmpg4c79pwr.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b229707fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2296d76b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2296d76988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2296d757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg4c79pwr                        0x000055a7c7df8445 <unavailable> + 5189

    5    libc.so.6                          0x00002b229726b460 __libc_start_main +
    245

    6    tmpg4c79pwr                        0x000055a7c7df80f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012212
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp8gl69j6y/tmp8gl69j6y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc680c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc67db8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc67db8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc67db77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8gl69j6y                        0x000055beeb7cb455 <unavailable> + 5205

    5    libc.so.6                          0x00002abc682ad460 __libc_start_main +
    245

    6    tmp8gl69j6y                        0x000055beeb7cb109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    var collisions = 0\n    for i in 0..<n {\n        left_to_right.append(i)\n\
    \        right_to_left.append(n - i - 1)\n    }\n    for i in 0..<n {\n      \
    \  for j in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n \
    \               collisions += 1\n            }\n        }\n    }\n    return collisions\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpq6yj_gvr/tmpq6yj_gvr.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fa22aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fa1fa5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fa1fa5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fa1fa47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq6yj_gvr                        0x000055ad036c8445 <unavailable> + 5189

    5    libc.so.6                          0x00002b6fa249a460 __libc_start_main +
    245

    6    tmpq6yj_gvr                        0x000055ad036c80f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012212
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                count += 1\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpeixhzo9y/tmpeixhzo9y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b261dd57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b261da4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b261da4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b261da4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeixhzo9y                        0x00005571c4c4f455 <unavailable> + 5205

    5    libc.so.6                          0x00002b261df43460 __libc_start_main +
    245

    6    tmpeixhzo9y                        0x00005571c4c4f109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left = Array(repeating: 0, count: n)\n    var right =\
    \ Array(repeating: 0, count: n)\n    var collisions = 0\n    for i in 0..<n {\n\
    \        left[i] = i\n        right[i] = n - i - 1\n    }\n    for i in 0..<n\
    \ {\n        for j in 0..<n {\n            if left[i] == right[j] {\n        \
    \        collisions += 1\n            }\n        }\n    }\n    return collisions\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp5hdrhdxz/tmp5hdrhdxz.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ea81a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ea7e98b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ea7e98988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ea7e977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5hdrhdxz                        0x0000563394de6455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4ea838d460 __libc_start_main +
    245

    6    tmp5hdrhdxz                        0x0000563394de6109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(i)\n\
    \    }\n    var collision_count = 0\n    while !left_to_right.isEmpty && !right_to_left.isEmpty\
    \ {\n        let left_car = left_to_right.removeFirst()\n        let right_car\
    \ = right_to_left.removeFirst()\n        if left_car == right_car {\n        \
    \    collision_count += 1\n        }\n    }\n    return collision_count\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpwahkkruy/tmpwahkkruy.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d41b7ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d41875b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d41875988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d418747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwahkkruy                        0x0000559650dd0575 <unavailable> + 5493

    5    libc.so.6                          0x00002b6d41d6a460 __libc_start_main +
    245

    6    tmpwahkkruy                        0x0000559650dd0229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660012212
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    var collisions = 0\n    for i in 0..<n {\n        left_to_right.append(i)\n\
    \        right_to_left.append(n-i-1)\n    }\n    while left_to_right.count > 0\
    \ && right_to_left.count > 0 {\n        let left = left_to_right.removeFirst()\n\
    \        let right = right_to_left.removeFirst()\n        if left == right {\n\
    \            collisions += 1\n        }\n    }\n    return collisions\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpnh6qju66/tmpnh6qju66.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8017e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8014d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8014d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8014d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnh6qju66                        0x0000558394212525 <unavailable> + 5413

    5    libc.so.6                          0x00002ab8019ce460 __libc_start_main +
    245

    6    tmpnh6qju66                        0x00005583942121d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660012212
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmptluchuc9/tmptluchuc9.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49eb4e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49eb1ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49eb1dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49eb1dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptluchuc9                        0x00005578d78d91b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b49eb6d2460 __libc_start_main +
    245

    6    tmptluchuc9                        0x00005578d78d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                count += 1\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpeixhzo9y/tmpeixhzo9y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b261dd57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b261da4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b261da4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b261da4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeixhzo9y                        0x00005571c4c4f455 <unavailable> + 5205

    5    libc.so.6                          0x00002b261df43460 __libc_start_main +
    245

    6    tmpeixhzo9y                        0x00005571c4c4f109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var collisions = 0\n    var left_to_right = [Int](repeating:\
    \ 0, count: n)\n    var right_to_left = [Int](repeating: 0, count: n)\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmprg9l66xn/tmprg9l66xn.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4943b19c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4943810b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4943810988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b494380f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprg9l66xn                        0x000055fb50dd0455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4943d05460 __libc_start_main +
    245

    6    tmprg9l66xn                        0x000055fb50dd0109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012212
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collision_count = 0\n    var i = 0\n    var j = 0\n    while i < n && j < n\
    \ {\n        if left_to_right[i] < right_to_left[j] {\n            collision_count\
    \ += j\n            i += 1\n        } else {\n            j += 1\n        }\n\
    \    }\n    return collision_count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpgz3uppgg/tmpgz3uppgg.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b8cf24c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b8cc1bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b8cc1b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b8cc1a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgz3uppgg                        0x00005652bd90b455 <unavailable> + 5205

    5    libc.so.6                          0x00002b1b8d110460 __libc_start_main +
    245

    6    tmpgz3uppgg                        0x00005652bd90b109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012212
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var collisions = 0\n    var left_to_right = [Int](repeating:\
    \ 0, count: n)\n    var right_to_left = [Int](repeating: 0, count: n)\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmprg9l66xn/tmprg9l66xn.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4943b19c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4943810b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4943810988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b494380f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprg9l66xn                        0x000055fb50dd0455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4943d05460 __libc_start_main +
    245

    6    tmprg9l66xn                        0x000055fb50dd0109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012212
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var i = 0\n    while i <\
    \ n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n  \
    \      i += 1\n    }\n    var collisions = 0\n    i = 0\n    while i < n {\n \
    \       if left_to_right[i] == right_to_left[i] {\n            collisions += 1\n\
    \        }\n        i += 1\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpnjd3n2iq/tmpnjd3n2iq.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d211c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d20ebcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d20ebc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d20ebb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnjd3n2iq                        0x000055b9535322c5 <unavailable> + 4805

    5    libc.so.6                          0x00002b6d213b1460 __libc_start_main +
    245

    6    tmpnjd3n2iq                        0x000055b953531f79 <unavailable> + 3961

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n-i-1)\n\
    \    }\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n  \
    \          if left_to_right[i] == right_to_left[j] {\n                count +=\
    \ 1\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpj3scq00u/tmpj3scq00u.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7bd0c52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7bd0949b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7bd0949988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7bd09487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj3scq00u                        0x00005649051c7445 <unavailable> + 5189

    5    libc.so.6                          0x00002b7bd0e3e460 __libc_start_main +
    245

    6    tmpj3scq00u                        0x00005649051c70f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    return\
    \ car_race_collision(left_to_right: left_to_right, right_to_left: right_to_left)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmp8mu6sjir.swift:17:30: error: extra arguments at positions #1, #2\
    \ in call\n    return car_race_collision(left_to_right: left_to_right, right_to_left:\
    \ right_to_left)\n                             ^\n/tmp/tmp8mu6sjir.swift:10:6:\
    \ note: 'car_race_collision(n:)' declared here\nfunc car_race_collision(n: Int)\
    \ -> Int {\n     ^\n/tmp/tmp8mu6sjir.swift:17:31: error: missing argument for\
    \ parameter 'n' in call\n    return car_race_collision(left_to_right: left_to_right,\
    \ right_to_left: right_to_left)\n                              ^\n           \
    \                   n: <#Int#>, \n/tmp/tmp8mu6sjir.swift:10:6: note: 'car_race_collision(n:)'\
    \ declared here\nfunc car_race_collision(n: Int) -> Int {\n     ^\n"
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                count += 1\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpeixhzo9y/tmpeixhzo9y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b261dd57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b261da4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b261da4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b261da4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeixhzo9y                        0x00005571c4c4f455 <unavailable> + 5205

    5    libc.so.6                          0x00002b261df43460 __libc_start_main +
    245

    6    tmpeixhzo9y                        0x00005571c4c4f109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    var collision_count = 0\n\
    \    for i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n       \
    \     if left_to_right[i] == right_to_left[j] {\n                collision_count\
    \ += 1\n            }\n        }\n    }\n    return collision_count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp9_a7cmqg/tmp9_a7cmqg.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad54327c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad5401eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad5401e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad5401d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9_a7cmqg                        0x0000556b8d884455 <unavailable> + 5205

    5    libc.so.6                          0x00002aad54513460 __libc_start_main +
    245

    6    tmp9_a7cmqg                        0x0000556b8d884109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012168
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmps1jc4l0x/tmps1jc4l0x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7480becc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74808e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74808e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74808e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1jc4l0x                        0x000055a38fff1455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7480dd8460 __libc_start_main +
    245

    6    tmps1jc4l0x                        0x000055a38fff1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var i = 0\n    while i <\
    \ n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n  \
    \      i += 1\n    }\n    return merge_sort_collision(left_to_right: left_to_right,\
    \ right_to_left: right_to_left)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmpatae7epf.swift:19:12: error: cannot find 'merge_sort_collision'\
    \ in scope\n    return merge_sort_collision(left_to_right: left_to_right, right_to_left:\
    \ right_to_left)\n           ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660012212
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmps1jc4l0x/tmps1jc4l0x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7480becc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74808e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74808e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74808e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1jc4l0x                        0x000055a38fff1455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7480dd8460 __libc_start_main +
    245

    6    tmps1jc4l0x                        0x000055a38fff1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var i = 0\n    while i <\
    \ n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n  \
    \      i += 1\n    }\n    var collisions = 0\n    i = 0\n    while i < n {\n \
    \       var j = 0\n        while j < n {\n            if left_to_right[i] == right_to_left[j]\
    \ {\n                collisions += 1\n            }\n            j += 1\n    \
    \    }\n        i += 1\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpx74kc7zh/tmpx74kc7zh.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6dc17bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6dbe72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6dbe72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6dbe717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx74kc7zh                        0x00005590291e32c5 <unavailable> + 4805

    5    libc.so.6                          0x00002ab6dc367460 __libc_start_main +
    245

    6    tmpx74kc7zh                        0x00005590291e2f79 <unavailable> + 3961

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                count += 1\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpeixhzo9y/tmpeixhzo9y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b261dd57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b261da4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b261da4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b261da4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeixhzo9y                        0x00005571c4c4f455 <unavailable> + 5205

    5    libc.so.6                          0x00002b261df43460 __libc_start_main +
    245

    6    tmpeixhzo9y                        0x00005571c4c4f109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left = 0\n    var right = n - 1\n    var collisions =\
    \ 0\n    while left < right {\n        if left == right {\n            collisions\
    \ += 1\n        } else {\n            collisions += 2\n        }\n        left\
    \ += 1\n        right -= 1\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmptsv3rqt2/tmptsv3rqt2.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b20c3aa2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b20c3799b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b20c3799988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b20c37987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptsv3rqt2                        0x00005625cf89e1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b20c3c8e460 __libc_start_main +
    245

    6    tmptsv3rqt2                        0x00005625cf89de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012213
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(i)\n\
    \    }\n    var num_collisions = 0\n    while left_to_right.count > 0 && right_to_left.count\
    \ > 0 {\n        let left_car = left_to_right.removeFirst()\n        let right_car\
    \ = right_to_left.removeLast()\n        if left_car == right_car {\n         \
    \   num_collisions += 1\n        }\n    }\n    return num_collisions\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpwhok5j4f/tmpwhok5j4f.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6e8950c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6e8647b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6e8647988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6e86467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwhok5j4f                        0x0000565378e835d5 <unavailable> + 5589

    5    libc.so.6                          0x00002ab6e8b3c460 __libc_start_main +
    245

    6    tmpwhok5j4f                        0x0000565378e83289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660012213
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmptluchuc9/tmptluchuc9.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49eb4e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49eb1ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49eb1dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49eb1dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptluchuc9                        0x00005578d78d91b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b49eb6d2460 __libc_start_main +
    245

    6    tmptluchuc9                        0x00005578d78d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(i)\n\
    \    }\n    var collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n\
    \            if left_to_right[i] == right_to_left[j] {\n                collisions\
    \ += 1\n            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpucfy9q2q/tmpucfy9q2q.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abe95969c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe95660b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abe95660988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abe9565f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpucfy9q2q                        0x00005578fca50445 <unavailable> + 5189

    5    libc.so.6                          0x00002abe95b55460 __libc_start_main +
    245

    6    tmpucfy9q2q                        0x00005578fca500f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(i)\n\
    \    }\n    var collision = 0\n    while !left_to_right.isEmpty && !right_to_left.isEmpty\
    \ {\n        if left_to_right.first! > right_to_left.first! {\n            collision\
    \ += 1\n        }\n        left_to_right.removeFirst()\n        right_to_left.removeFirst()\n\
    \    }\n    return collision\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmp0ysv9lql/tmp0ysv9lql.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb5a11fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb59e16b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb59e16988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb59e157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0ysv9lql                        0x000055b98d0cd5c5 <unavailable> + 5573

    5    libc.so.6                          0x00002acb5a30b460 __libc_start_main +
    245

    6    tmp0ysv9lql                        0x000055b98d0cd279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660012213
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmps1jc4l0x/tmps1jc4l0x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7480becc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74808e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74808e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74808e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1jc4l0x                        0x000055a38fff1455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7480dd8460 __libc_start_main +
    245

    6    tmps1jc4l0x                        0x000055a38fff1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    var i = 0\n    while i <\
    \ n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n  \
    \      i += 1\n    }\n    var collision = 0\n    i = 0\n    while i < n {\n  \
    \      if left_to_right[i] == right_to_left[i] {\n            collision += 1\n\
    \        }\n        i += 1\n    }\n    return collision\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmphduuu0cx/tmphduuu0cx.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad25eb69c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad25e860b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad25e860988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad25e85f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphduuu0cx                        0x00005616b09552c5 <unavailable> + 4805

    5    libc.so.6                          0x00002ad25ed55460 __libc_start_main +
    245

    6    tmphduuu0cx                        0x00005616b0954f79 <unavailable> + 3961

    '
  stdout: ''
  timestamp: 1660012213
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(i)\n\
    \    }\n    var count = 0\n    while !left_to_right.isEmpty && !right_to_left.isEmpty\
    \ {\n        let l = left_to_right.removeFirst()\n        let r = right_to_left.removeFirst()\n\
    \        if l == r {\n            count += 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpoi0j4sf9/tmpoi0j4sf9.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56cddddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56cdad4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56cdad4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56cdad37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoi0j4sf9                        0x0000563f927cd575 <unavailable> + 5493

    5    libc.so.6                          0x00002b56cdfc9460 __libc_start_main +
    245

    6    tmpoi0j4sf9                        0x0000563f927cd229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660012213
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmps1jc4l0x/tmps1jc4l0x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7480becc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74808e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74808e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74808e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1jc4l0x                        0x000055a38fff1455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7480dd8460 __libc_start_main +
    245

    6    tmps1jc4l0x                        0x000055a38fff1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var i = 0\n    while i <\
    \ n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n  \
    \      i += 1\n    }\n    var collisions = 0\n    i = 0\n    while i < n {\n \
    \       var j = 0\n        while j < n {\n            if left_to_right[i] == right_to_left[j]\
    \ {\n                collisions += 1\n            }\n            j += 1\n    \
    \    }\n        i += 1\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpx74kc7zh/tmpx74kc7zh.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6dc17bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6dbe72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6dbe72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6dbe717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx74kc7zh                        0x00005590291e32c5 <unavailable> + 4805

    5    libc.so.6                          0x00002ab6dc367460 __libc_start_main +
    245

    6    tmpx74kc7zh                        0x00005590291e2f79 <unavailable> + 3961

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var result = 0\n    for i in 1...n {\n        for j in 1...n\
    \ {\n            if i < j {\n                result += 1\n            }\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpcz5vv81i/tmpcz5vv81i.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b951d6b8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b951d3afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b951d3af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b951d3ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcz5vv81i                        0x000056371f04b335 <unavailable> + 4917

    5    libc.so.6                          0x00002b951d8a4460 __libc_start_main +
    245

    6    tmpcz5vv81i                        0x000056371f04afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660012213
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmps1jc4l0x/tmps1jc4l0x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7480becc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74808e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74808e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74808e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1jc4l0x                        0x000055a38fff1455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7480dd8460 __libc_start_main +
    245

    6    tmps1jc4l0x                        0x000055a38fff1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmps1jc4l0x/tmps1jc4l0x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7480becc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74808e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74808e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74808e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1jc4l0x                        0x000055a38fff1455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7480dd8460 __libc_start_main +
    245

    6    tmps1jc4l0x                        0x000055a38fff1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmps1jc4l0x/tmps1jc4l0x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7480becc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74808e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74808e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74808e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1jc4l0x                        0x000055a38fff1455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7480dd8460 __libc_start_main +
    245

    6    tmps1jc4l0x                        0x000055a38fff1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                count += 1\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmphqqnov2d/tmphqqnov2d.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1ab38ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1ab081b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad1ab081988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad1ab0807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphqqnov2d                        0x0000560f44940455 <unavailable> + 5205

    5    libc.so.6                          0x00002ad1ab576460 __libc_start_main +
    245

    6    tmphqqnov2d                        0x0000560f44940109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                count += 1\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpeixhzo9y/tmpeixhzo9y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b261dd57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b261da4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b261da4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b261da4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeixhzo9y                        0x00005571c4c4f455 <unavailable> + 5205

    5    libc.so.6                          0x00002b261df43460 __libc_start_main +
    245

    6    tmpeixhzo9y                        0x00005571c4c4f109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp8gl69j6y/tmp8gl69j6y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc680c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc67db8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc67db8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc67db77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8gl69j6y                        0x000055beeb7cb455 <unavailable> + 5205

    5    libc.so.6                          0x00002abc682ad460 __libc_start_main +
    245

    6    tmp8gl69j6y                        0x000055beeb7cb109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(0..<n)\n    var right_to_left =\
    \ Array(0..<n)\n    var collisions = 0\n    while !left_to_right.isEmpty && !right_to_left.isEmpty\
    \ {\n        let left = left_to_right.removeFirst()\n        let right = right_to_left.removeFirst()\n\
    \        if left > right {\n            collisions += 1\n        }\n    }\n  \
    \  return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpumygig9d/tmpumygig9d.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c97966c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c9765db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c9765d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c9765c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpumygig9d                        0x000055fb34036505 <unavailable> + 5381

    5    libc.so.6                          0x00002b7c97b52460 __libc_start_main +
    245

    6    tmpumygig9d                        0x000055fb340361b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1660012168
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n\
    \ - i - 1)\n    }\n    var collision_count = 0\n    var i = 0\n    var j = 0\n\
    \    while i < n && j < n {\n        if left_to_right[i] < right_to_left[j] {\n\
    \            collision_count += j\n            i += 1\n        } else {\n    \
    \        j += 1\n        }\n    }\n    return collision_count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpoelp8tjo/tmpoelp8tjo.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47d56f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b47d53eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b47d53ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b47d53e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoelp8tjo                        0x000055a10f4af445 <unavailable> + 5189

    5    libc.so.6                          0x00002b47d58df460 __libc_start_main +
    245

    6    tmpoelp8tjo                        0x000055a10f4af0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012213
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var count = 0\n    var left = 0\n    var right = n - 1\n\
    \    while left < right {\n        if left == right {\n            count += 1\n\
    \        } else {\n            count += 2\n        }\n        left += 1\n    \
    \    right -= 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpf38668k2/tmpf38668k2.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b738e181c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b738de78b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b738de78988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b738de777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf38668k2                        0x0000556e076231b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b738e36d460 __libc_start_main +
    245

    6    tmpf38668k2                        0x0000556e07622e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012213
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    var i = 0\n    var j = n\
    \ - 1\n    var count = 0\n    while i < n && j >= 0 {\n        if left_to_right[i]\
    \ == right_to_left[j] {\n            count += 1\n            i += 1\n        \
    \    j -= 1\n        } else if left_to_right[i] < right_to_left[j] {\n       \
    \     left_to_right[i] += 1\n            i += 1\n        } else {\n          \
    \  right_to_left[j] += 1\n            j -= 1\n        }\n    }\n    return count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp827r60u1/tmp827r60u1.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b145b603c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b145b2fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b145b2fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b145b2f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp827r60u1                        0x000055ade61ec2c5 <unavailable> + 4805

    5    libc.so.6                          0x00002b145b7ef460 __libc_start_main +
    245

    6    tmp827r60u1                        0x000055ade61ebf79 <unavailable> + 3961

    '
  stdout: ''
  timestamp: 1660012213
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collision = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collision += 1\n            }\n     \
    \   }\n    }\n    return collision\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpw2pxp_gx/tmpw2pxp_gx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1475015c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1474d0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1474d0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1474d0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2pxp_gx                        0x000055eb2e404455 <unavailable> + 5205

    5    libc.so.6                          0x00002b1475201460 __libc_start_main +
    245

    6    tmpw2pxp_gx                        0x000055eb2e404109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    return\
    \ car_race_collision(left_to_right: left_to_right, right_to_left: right_to_left)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmp8mu6sjir.swift:17:30: error: extra arguments at positions #1, #2\
    \ in call\n    return car_race_collision(left_to_right: left_to_right, right_to_left:\
    \ right_to_left)\n                             ^\n/tmp/tmp8mu6sjir.swift:10:6:\
    \ note: 'car_race_collision(n:)' declared here\nfunc car_race_collision(n: Int)\
    \ -> Int {\n     ^\n/tmp/tmp8mu6sjir.swift:17:31: error: missing argument for\
    \ parameter 'n' in call\n    return car_race_collision(left_to_right: left_to_right,\
    \ right_to_left: right_to_left)\n                              ^\n           \
    \                   n: <#Int#>, \n/tmp/tmp8mu6sjir.swift:10:6: note: 'car_race_collision(n:)'\
    \ declared here\nfunc car_race_collision(n: Int) -> Int {\n     ^\n"
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            if i < j {\n                count += 1\n            }\n     \
    \   }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmppbya1g_f/tmppbya1g_f.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9eb83c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9eb80bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9eb80bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9eb80bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppbya1g_f                        0x00005624dca9a335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9eb85b2460 __libc_start_main +
    245

    6    tmppbya1g_f                        0x00005624dca99fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                count += 1\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpeixhzo9y/tmpeixhzo9y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b261dd57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b261da4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b261da4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b261da4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeixhzo9y                        0x00005571c4c4f455 <unavailable> + 5205

    5    libc.so.6                          0x00002b261df43460 __libc_start_main +
    245

    6    tmpeixhzo9y                        0x00005571c4c4f109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right_cars = [Int](repeating: 0, count: n)\n\
    \    var right_to_left_cars = [Int](repeating: 0, count: n)\n    var collisions\
    \ = 0\n    for i in 0..<n {\n        left_to_right_cars[i] = i\n        right_to_left_cars[i]\
    \ = n - i - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n       \
    \     if left_to_right_cars[i] == right_to_left_cars[j] {\n                collisions\
    \ += 1\n            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpt0f4u9k0/tmpt0f4u9k0.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b96309c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b96306bab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b96306ba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b96306b97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt0f4u9k0                        0x0000563a26d4a455 <unavailable> + 5205

    5    libc.so.6                          0x00002b9630baf460 __libc_start_main +
    245

    6    tmpt0f4u9k0                        0x0000563a26d4a109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmplj1_f9_5/tmplj1_f9_5.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad498029c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad497d20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad497d20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad497d1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplj1_f9_5                        0x0000561810f56455 <unavailable> + 5205

    5    libc.so.6                          0x00002ad498215460 __libc_start_main +
    245

    6    tmplj1_f9_5                        0x0000561810f56109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(0..<n)\n    var right_to_left =\
    \ Array(0..<n)\n    var collisions = 0\n    while left_to_right.count > 0 && right_to_left.count\
    \ > 0 {\n        let left_car = left_to_right.removeFirst()\n        let right_car\
    \ = right_to_left.removeFirst()\n        if left_car > right_car {\n         \
    \   collisions += 1\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp6dq4w0gb/tmp6dq4w0gb.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21858dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21855d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21855d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21855d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6dq4w0gb                        0x000055b47cbde4c5 <unavailable> + 5317

    5    libc.so.6                          0x00002b2185ac8460 __libc_start_main +
    245

    6    tmp6dq4w0gb                        0x000055b47cbde179 <unavailable> + 4473

    '
  stdout: ''
  timestamp: 1660012213
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ result = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                result += 1\n            }\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmp0_h1svmi/tmp0_h1svmi.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19c405ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19c3d51b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19c3d51988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19c3d507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0_h1svmi                        0x000055cc5f1d2455 <unavailable> + 5205

    5    libc.so.6                          0x00002b19c4246460 __libc_start_main +
    245

    6    tmp0_h1svmi                        0x000055cc5f1d2109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012213
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var i = 0\n    while i <\
    \ n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n  \
    \      i += 1\n    }\n    var collision = 0\n    i = 0\n    while i < n {\n  \
    \      if left_to_right[i] == right_to_left[i] {\n            collision += 1\n\
    \        }\n        i += 1\n    }\n    return collision\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp_lrnfevq/tmp_lrnfevq.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1da3895c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1da358cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1da358c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1da358b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_lrnfevq                        0x0000556772cee2c5 <unavailable> + 4805

    5    libc.so.6                          0x00002b1da3a81460 __libc_start_main +
    245

    6    tmp_lrnfevq                        0x0000556772cedf79 <unavailable> + 3961

    '
  stdout: ''
  timestamp: 1660012212
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmps1jc4l0x/tmps1jc4l0x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7480becc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74808e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74808e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74808e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1jc4l0x                        0x000055a38fff1455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7480dd8460 __libc_start_main +
    245

    6    tmps1jc4l0x                        0x000055a38fff1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmps1jc4l0x/tmps1jc4l0x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7480becc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74808e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74808e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74808e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1jc4l0x                        0x000055a38fff1455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7480dd8460 __libc_start_main +
    245

    6    tmps1jc4l0x                        0x000055a38fff1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](0..<n)\n    var right_to_left =\
    \ [Int](0..<n)\n    var collisions = 0\n    var i = 0\n    var j = n - 1\n   \
    \ while i < n && j >= 0 {\n        if left_to_right[i] < right_to_left[j] {\n\
    \            collisions += j + 1\n            i += 1\n        } else {\n     \
    \       j -= 1\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp73yjwaa4/tmp73yjwaa4.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2511cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab250ec2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab250ec2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab250ec17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp73yjwaa4                        0x0000561f993b0425 <unavailable> + 5157

    5    libc.so.6                          0x00002ab2513b7460 __libc_start_main +
    245

    6    tmp73yjwaa4                        0x0000561f993b00d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660012213
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right_cars = [Int](repeating: 0, count: n)\n\
    \    var right_to_left_cars = [Int](repeating: 0, count: n)\n    for i in 0..<n\
    \ {\n        left_to_right_cars[i] = i\n        right_to_left_cars[i] = n - i\
    \ - 1\n    }\n    var collisions = 0\n    for i in 0..<n {\n        for j in 0..<n\
    \ {\n            if left_to_right_cars[i] == right_to_left_cars[j] {\n       \
    \         collisions += 1\n            }\n        }\n    }\n    return collisions\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp9p9ib76u/tmp9p9ib76u.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7863e5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7863b52b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7863b52988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7863b517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9p9ib76u                        0x000056284a6b0455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7864047460 __libc_start_main +
    245

    6    tmp9p9ib76u                        0x000056284a6b0109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmps1jc4l0x/tmps1jc4l0x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7480becc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74808e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74808e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74808e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1jc4l0x                        0x000055a38fff1455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7480dd8460 __libc_start_main +
    245

    6    tmps1jc4l0x                        0x000055a38fff1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collision = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if\
    \ left_to_right[i] == right_to_left[j] {\n                collision += 1\n   \
    \         }\n        }\n    }\n    return collision\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpdl63q81s/tmpdl63q81s.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e81d40c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e81a37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e81a37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e81a367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl63q81s                        0x0000558b4d6b7455 <unavailable> + 5205

    5    libc.so.6                          0x00002b8e81f2c460 __libc_start_main +
    245

    6    tmpdl63q81s                        0x0000558b4d6b7109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmps1jc4l0x/tmps1jc4l0x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7480becc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74808e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74808e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74808e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1jc4l0x                        0x000055a38fff1455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7480dd8460 __libc_start_main +
    245

    6    tmps1jc4l0x                        0x000055a38fff1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp8gl69j6y/tmp8gl69j6y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc680c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc67db8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc67db8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc67db77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8gl69j6y                        0x000055beeb7cb455 <unavailable> + 5205

    5    libc.so.6                          0x00002abc682ad460 __libc_start_main +
    245

    6    tmp8gl69j6y                        0x000055beeb7cb109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmptluchuc9/tmptluchuc9.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49eb4e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49eb1ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49eb1dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49eb1dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptluchuc9                        0x00005578d78d91b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b49eb6d2460 __libc_start_main +
    245

    6    tmptluchuc9                        0x00005578d78d8e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmplj1_f9_5/tmplj1_f9_5.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad498029c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad497d20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad497d20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad497d1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplj1_f9_5                        0x0000561810f56455 <unavailable> + 5205

    5    libc.so.6                          0x00002ad498215460 __libc_start_main +
    245

    6    tmplj1_f9_5                        0x0000561810f56109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var collisions = 0\n    var left_to_right = [Int](repeating:\
    \ 0, count: n)\n    var right_to_left = [Int](repeating: 0, count: n)\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmprg9l66xn/tmprg9l66xn.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4943b19c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4943810b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4943810988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b494380f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprg9l66xn                        0x000055fb50dd0455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4943d05460 __libc_start_main +
    245

    6    tmprg9l66xn                        0x000055fb50dd0109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012212
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var i = 0\n    while i <\
    \ n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n  \
    \      i += 1\n    }\n    var collisions = 0\n    i = 0\n    while i < n {\n \
    \       var j = 0\n        while j < n {\n            if left_to_right[i] == right_to_left[j]\
    \ {\n                collisions += 1\n            }\n            j += 1\n    \
    \    }\n        i += 1\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpx74kc7zh/tmpx74kc7zh.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6dc17bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6dbe72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6dbe72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6dbe717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx74kc7zh                        0x00005590291e32c5 <unavailable> + 4805

    5    libc.so.6                          0x00002ab6dc367460 __libc_start_main +
    245

    6    tmpx74kc7zh                        0x00005590291e2f79 <unavailable> + 3961

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    var collision_count = 0\n\
    \    for i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i]\
    \ = n - i - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n       \
    \     if left_to_right[i] == right_to_left[j] {\n                collision_count\
    \ += 1\n            }\n        }\n    }\n    return collision_count\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp9_a7cmqg/tmp9_a7cmqg.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad54327c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad5401eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad5401e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad5401d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9_a7cmqg                        0x0000556b8d884455 <unavailable> + 5205

    5    libc.so.6                          0x00002aad54513460 __libc_start_main +
    245

    6    tmp9_a7cmqg                        0x0000556b8d884109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012168
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp8gl69j6y/tmp8gl69j6y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc680c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc67db8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc67db8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc67db77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8gl69j6y                        0x000055beeb7cb455 <unavailable> + 5205

    5    libc.so.6                          0x00002abc682ad460 __libc_start_main +
    245

    6    tmp8gl69j6y                        0x000055beeb7cb109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n-i-1)\n\
    \    }\n    var collisions = 0\n    while left_to_right.count > 0 && right_to_left.count\
    \ > 0 {\n        if left_to_right[0] < right_to_left[0] {\n            left_to_right.remove(at:\
    \ 0)\n            collisions += 1\n        } else {\n            right_to_left.remove(at:\
    \ 0)\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3)\
    \ == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpvxmfmjg5/tmpvxmfmjg5.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8f5b39bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8f5b092b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8f5b092988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8f5b0917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvxmfmjg5                        0x000055fa7b54e535 <unavailable> + 5429

    5    libc.so.6                          0x00002b8f5b587460 __libc_start_main +
    245

    6    tmpvxmfmjg5                        0x000055fa7b54e1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660012168
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    var collision = 0\n    for i in 0..<n {\n        left_to_right.append(i)\n\
    \        right_to_left.append(n-i-1)\n    }\n    for i in 0..<n {\n        for\
    \ j in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n      \
    \          collision += 1\n            }\n        }\n    }\n    return collision\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp484i2g_s/tmp484i2g_s.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1919312c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1919009b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1919009988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19190087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp484i2g_s                        0x000055d55cecf445 <unavailable> + 5189

    5    libc.so.6                          0x00002b19194fe460 __libc_start_main +
    245

    6    tmp484i2g_s                        0x000055d55cecf0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012168
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmplj1_f9_5/tmplj1_f9_5.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad498029c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad497d20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad497d20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad497d1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplj1_f9_5                        0x0000561810f56455 <unavailable> + 5205

    5    libc.so.6                          0x00002ad498215460 __libc_start_main +
    245

    6    tmplj1_f9_5                        0x0000561810f56109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmps1jc4l0x/tmps1jc4l0x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7480becc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74808e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74808e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74808e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1jc4l0x                        0x000055a38fff1455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7480dd8460 __libc_start_main +
    245

    6    tmps1jc4l0x                        0x000055a38fff1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var i = 0\n    while i <\
    \ n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n  \
    \      i += 1\n    }\n    var count = 0\n    i = 0\n    while i < n {\n      \
    \  var j = 0\n        while j < n {\n            if left_to_right[i] == right_to_left[j]\
    \ {\n                count += 1\n            }\n            j += 1\n        }\n\
    \        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpn3yxay2h/tmpn3yxay2h.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad74bb5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad748acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad748ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad748ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn3yxay2h                        0x000055bf5b4892c5 <unavailable> + 4805

    5    libc.so.6                          0x00002aad74da1460 __libc_start_main +
    245

    6    tmpn3yxay2h                        0x000055bf5b488f79 <unavailable> + 3961

    '
  stdout: ''
  timestamp: 1660012168
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    var i = 0\n    var j = 0\n    while i < n && j < n {\n \
    \       if left_to_right[i] < right_to_left[j] {\n            collisions += j\n\
    \            i += 1\n        } else {\n            j += 1\n        }\n    }\n\
    \    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpopbqhmvo/tmpopbqhmvo.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae984848c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae98453fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae98453f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae98453e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpopbqhmvo                        0x00005585de3a5455 <unavailable> + 5205

    5    libc.so.6                          0x00002ae984a34460 __libc_start_main +
    245

    6    tmpopbqhmvo                        0x00005585de3a5109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collision = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collision += 1\n            }\n     \
    \   }\n    }\n    return collision\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpw2pxp_gx/tmpw2pxp_gx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1475015c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1474d0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1474d0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1474d0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2pxp_gx                        0x000055eb2e404455 <unavailable> + 5205

    5    libc.so.6                          0x00002b1475201460 __libc_start_main +
    245

    6    tmpw2pxp_gx                        0x000055eb2e404109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n-i-1)\n\
    \    }\n    var collision_count = 0\n    while left_to_right.count > 0 && right_to_left.count\
    \ > 0 {\n        if left_to_right[0] < right_to_left[0] {\n            collision_count\
    \ += 1\n            left_to_right.remove(at: 0)\n            right_to_left.remove(at:\
    \ 0)\n        } else {\n            left_to_right.remove(at: 0)\n        }\n \
    \   }\n    return collision_count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmp2p5tegl5/tmp2p5tegl5.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f80119c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f7fe10b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f7fe10988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f7fe0f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2p5tegl5                        0x000055c56a479535 <unavailable> + 5429

    5    libc.so.6                          0x00002b7f80305460 __libc_start_main +
    245

    6    tmp2p5tegl5                        0x000055c56a4791e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660012213
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(i)\n\
    \    }\n    var collision = 0\n    while left_to_right.count > 0 && right_to_left.count\
    \ > 0 {\n        if left_to_right[0] == right_to_left[0] {\n            collision\
    \ += 1\n            left_to_right.removeFirst()\n            right_to_left.removeFirst()\n\
    \        } else if left_to_right[0] < right_to_left[0] {\n            left_to_right.removeFirst()\n\
    \        } else {\n            right_to_left.removeFirst()\n        }\n    }\n\
    \    return collision\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpiv133e5k/tmpiv133e5k.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b82a4894c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82a458bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b82a458b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82a458a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiv133e5k                        0x00005607d0ad0585 <unavailable> + 5509

    5    libc.so.6                          0x00002b82a4a80460 __libc_start_main +
    245

    6    tmpiv133e5k                        0x00005607d0ad0239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 1...n {\n        left_to_right.append(i)\n        right_to_left.append(n\
    \ - i + 1)\n    }\n    var collision = 0\n    for i in 0..<n {\n        for j\
    \ in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n        \
    \        collision += 1\n            }\n        }\n    }\n    return collision\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpkvoytvb1/tmpkvoytvb1.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba9a2c97c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba9a298eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba9a298e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba9a298d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkvoytvb1                        0x00005612686db535 <unavailable> + 5429

    5    libc.so.6                          0x00002ba9a2e83460 __libc_start_main +
    245

    6    tmpkvoytvb1                        0x00005612686db1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660012213
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collision = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collision += 1\n            }\n     \
    \   }\n    }\n    return collision\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpw2pxp_gx/tmpw2pxp_gx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1475015c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1474d0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1474d0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1474d0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2pxp_gx                        0x000055eb2e404455 <unavailable> + 5205

    5    libc.so.6                          0x00002b1475201460 __libc_start_main +
    245

    6    tmpw2pxp_gx                        0x000055eb2e404109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(0..<n)\n    var right_to_left =\
    \ Array(0..<n)\n    left_to_right.sort()\n    right_to_left.sort()\n    var i\
    \ = 0\n    var j = 0\n    var count = 0\n    while i < n && j < n {\n        if\
    \ left_to_right[i] < right_to_left[j] {\n            i += 1\n        } else if\
    \ left_to_right[i] > right_to_left[j] {\n            j += 1\n        } else {\n\
    \            count += 1\n            i += 1\n            j += 1\n        }\n \
    \   }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmp9t98kd0k/tmp9t98kd0k.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7b0b00c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad7b07f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad7b07f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7b07f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9t98kd0k                        0x000055dfe8b684f5 <unavailable> + 5365

    5    libc.so.6                          0x00002ad7b0cec460 __libc_start_main +
    245

    6    tmp9t98kd0k                        0x000055dfe8b681a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660012213
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                count += 1\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpeixhzo9y/tmpeixhzo9y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b261dd57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b261da4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b261da4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b261da4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeixhzo9y                        0x00005571c4c4f455 <unavailable> + 5205

    5    libc.so.6                          0x00002b261df43460 __libc_start_main +
    245

    6    tmpeixhzo9y                        0x00005571c4c4f109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var leftToRight: [Int] = []\n    var rightToLeft: [Int] =\
    \ []\n    for i in 0..<n {\n        leftToRight.append(i)\n        rightToLeft.append(n\
    \ - i - 1)\n    }\n    var collisions = 0\n    for i in 0..<n {\n        for j\
    \ in 0..<n {\n            if leftToRight[i] == rightToLeft[j] {\n            \
    \    collisions += 1\n            }\n        }\n    }\n    return collisions\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpdz7c_b8i/tmpdz7c_b8i.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37baf0dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37bac04b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37bac04988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37bac037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdz7c_b8i                        0x000055621e34d455 <unavailable> + 5205

    5    libc.so.6                          0x00002b37bb0f9460 __libc_start_main +
    245

    6    tmpdz7c_b8i                        0x000055621e34d109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012213
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right_cars = [Int](repeating: 0, count: n)\n\
    \    var right_to_left_cars = [Int](repeating: 0, count: n)\n    var collisions\
    \ = 0\n    for i in 0..<n {\n        left_to_right_cars[i] = i\n        right_to_left_cars[i]\
    \ = n - i - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n       \
    \     if left_to_right_cars[i] == right_to_left_cars[j] {\n                collisions\
    \ += 1\n            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpt0f4u9k0/tmpt0f4u9k0.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b96309c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b96306bab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b96306ba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b96306b97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt0f4u9k0                        0x0000563a26d4a455 <unavailable> + 5205

    5    libc.so.6                          0x00002b9630baf460 __libc_start_main +
    245

    6    tmpt0f4u9k0                        0x0000563a26d4a109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmplj1_f9_5/tmplj1_f9_5.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad498029c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad497d20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad497d20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad497d1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplj1_f9_5                        0x0000561810f56455 <unavailable> + 5205

    5    libc.so.6                          0x00002ad498215460 __libc_start_main +
    245

    6    tmplj1_f9_5                        0x0000561810f56109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    var collisions = 0\n    for i in 0..<n {\n        left_to_right.append(i)\n\
    \        right_to_left.append(n-i-1)\n    }\n    for i in 0..<n {\n        for\
    \ j in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n      \
    \          collisions += 1\n            }\n        }\n    }\n    return collisions\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpzl86np2_/tmpzl86np2_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba97cd4ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba97ca45b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba97ca45988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba97ca447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzl86np2_                        0x000055ca10def445 <unavailable> + 5189

    5    libc.so.6                          0x00002ba97cf3a460 __libc_start_main +
    245

    6    tmpzl86np2_                        0x000055ca10def0f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collision = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if\
    \ left_to_right[i] == right_to_left[j] {\n                collision += 1\n   \
    \         }\n        }\n    }\n    return collision\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpdl63q81s/tmpdl63q81s.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e81d40c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e81a37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e81a37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e81a367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdl63q81s                        0x0000558b4d6b7455 <unavailable> + 5205

    5    libc.so.6                          0x00002b8e81f2c460 __libc_start_main +
    245

    6    tmpdl63q81s                        0x0000558b4d6b7109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var i = 0\n    while i <\
    \ n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n  \
    \      i += 1\n    }\n    var count = 0\n    i = 0\n    while i < n {\n      \
    \  var j = 0\n        while j < n {\n            if left_to_right[i] == right_to_left[j]\
    \ {\n                count += 1\n            }\n            j += 1\n        }\n\
    \        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpn3yxay2h/tmpn3yxay2h.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad74bb5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad748acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad748ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad748ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn3yxay2h                        0x000055bf5b4892c5 <unavailable> + 4805

    5    libc.so.6                          0x00002aad74da1460 __libc_start_main +
    245

    6    tmpn3yxay2h                        0x000055bf5b488f79 <unavailable> + 3961

    '
  stdout: ''
  timestamp: 1660012168
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n-i-1)\n\
    \    }\n    var collision = 0\n    while !left_to_right.isEmpty && !right_to_left.isEmpty\
    \ {\n        let l = left_to_right.removeFirst()\n        let r = right_to_left.removeFirst()\n\
    \        if l == r {\n            collision += 1\n        }\n    }\n    return\
    \ collision\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpd631feg9/tmpd631feg9.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb08d90c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb08a87b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb08a87988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb08a867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd631feg9                        0x0000559df7ee0575 <unavailable> + 5493

    5    libc.so.6                          0x00002acb08f7c460 __libc_start_main +
    245

    6    tmpd631feg9                        0x0000559df7ee0229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660012213
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmplj1_f9_5/tmplj1_f9_5.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad498029c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad497d20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad497d20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad497d1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplj1_f9_5                        0x0000561810f56455 <unavailable> + 5205

    5    libc.so.6                          0x00002ad498215460 __libc_start_main +
    245

    6    tmplj1_f9_5                        0x0000561810f56109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var i = 0\n    while i <\
    \ n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n  \
    \      i += 1\n    }\n    var count = 0\n    i = 0\n    while i < n {\n      \
    \  var j = 0\n        while j < n {\n            if left_to_right[i] == right_to_left[j]\
    \ {\n                count += 1\n            }\n            j += 1\n        }\n\
    \        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpn3yxay2h/tmpn3yxay2h.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad74bb5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad748acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad748ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad748ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn3yxay2h                        0x000055bf5b4892c5 <unavailable> + 4805

    5    libc.so.6                          0x00002aad74da1460 __libc_start_main +
    245

    6    tmpn3yxay2h                        0x000055bf5b488f79 <unavailable> + 3961

    '
  stdout: ''
  timestamp: 1660012168
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n           \
    \ if left_to_right[i] == right_to_left[j] {\n                collisions += 1\n\
    \            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpy5_5e537/tmpy5_5e537.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d882b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d87fabb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d87fab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d87faa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy5_5e537                        0x0000557cb2403455 <unavailable> + 5205

    5    libc.so.6                          0x00002b4d884a0460 __libc_start_main +
    245

    6    tmpy5_5e537                        0x0000557cb2403109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp8gl69j6y/tmp8gl69j6y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc680c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc67db8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc67db8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc67db77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8gl69j6y                        0x000055beeb7cb455 <unavailable> + 5205

    5    libc.so.6                          0x00002abc682ad460 __libc_start_main +
    245

    6    tmp8gl69j6y                        0x000055beeb7cb109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmps1jc4l0x/tmps1jc4l0x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7480becc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74808e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74808e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74808e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1jc4l0x                        0x000055a38fff1455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7480dd8460 __libc_start_main +
    245

    6    tmps1jc4l0x                        0x000055a38fff1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp8gl69j6y/tmp8gl69j6y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc680c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc67db8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc67db8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc67db77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8gl69j6y                        0x000055beeb7cb455 <unavailable> + 5205

    5    libc.so.6                          0x00002abc682ad460 __libc_start_main +
    245

    6    tmp8gl69j6y                        0x000055beeb7cb109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    return\
    \ car_race_collision(left_to_right: left_to_right, right_to_left: right_to_left)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmp8mu6sjir.swift:17:30: error: extra arguments at positions #1, #2\
    \ in call\n    return car_race_collision(left_to_right: left_to_right, right_to_left:\
    \ right_to_left)\n                             ^\n/tmp/tmp8mu6sjir.swift:10:6:\
    \ note: 'car_race_collision(n:)' declared here\nfunc car_race_collision(n: Int)\
    \ -> Int {\n     ^\n/tmp/tmp8mu6sjir.swift:17:31: error: missing argument for\
    \ parameter 'n' in call\n    return car_race_collision(left_to_right: left_to_right,\
    \ right_to_left: right_to_left)\n                              ^\n           \
    \                   n: <#Int#>, \n/tmp/tmp8mu6sjir.swift:10:6: note: 'car_race_collision(n:)'\
    \ declared here\nfunc car_race_collision(n: Int) -> Int {\n     ^\n"
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collision = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collision += 1\n            }\n     \
    \   }\n    }\n    return collision\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpw2pxp_gx/tmpw2pxp_gx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1475015c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1474d0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1474d0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1474d0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2pxp_gx                        0x000055eb2e404455 <unavailable> + 5205

    5    libc.so.6                          0x00002b1475201460 __libc_start_main +
    245

    6    tmpw2pxp_gx                        0x000055eb2e404109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(i)\n\
    \    }\n    var collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n\
    \            if left_to_right[i] == right_to_left[j] {\n                collisions\
    \ += 1\n            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpucfy9q2q/tmpucfy9q2q.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abe95969c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abe95660b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abe95660988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abe9565f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpucfy9q2q                        0x00005578fca50445 <unavailable> + 5189

    5    libc.so.6                          0x00002abe95b55460 __libc_start_main +
    245

    6    tmpucfy9q2q                        0x00005578fca500f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    var collision_count = 0\n    for i in 0..<n {\n        left_to_right.append(i)\n\
    \        right_to_left.append(n-i-1)\n    }\n    for i in 0..<n {\n        for\
    \ j in 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n      \
    \          collision_count += 1\n            }\n        }\n    }\n    return collision_count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp27wjgho_/tmp27wjgho_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d48b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d45abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d45ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d45aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp27wjgho_                        0x0000563be6007445 <unavailable> + 5189

    5    libc.so.6                          0x00002b22d4aa0460 __libc_start_main +
    245

    6    tmp27wjgho_                        0x0000563be60070f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    return\
    \ car_race_collision(left_to_right: left_to_right, right_to_left: right_to_left)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmp8mu6sjir.swift:17:30: error: extra arguments at positions #1, #2\
    \ in call\n    return car_race_collision(left_to_right: left_to_right, right_to_left:\
    \ right_to_left)\n                             ^\n/tmp/tmp8mu6sjir.swift:10:6:\
    \ note: 'car_race_collision(n:)' declared here\nfunc car_race_collision(n: Int)\
    \ -> Int {\n     ^\n/tmp/tmp8mu6sjir.swift:17:31: error: missing argument for\
    \ parameter 'n' in call\n    return car_race_collision(left_to_right: left_to_right,\
    \ right_to_left: right_to_left)\n                              ^\n           \
    \                   n: <#Int#>, \n/tmp/tmp8mu6sjir.swift:10:6: note: 'car_race_collision(n:)'\
    \ declared here\nfunc car_race_collision(n: Int) -> Int {\n     ^\n"
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(0..<n)\n    var right_to_left =\
    \ Array(0..<n)\n    var collisions = 0\n    while !left_to_right.isEmpty && !right_to_left.isEmpty\
    \ {\n        let l = left_to_right.removeFirst()\n        let r = right_to_left.removeFirst()\n\
    \        if l == r {\n            collisions += 1\n        }\n    }\n    return\
    \ collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpy4jmmmi1/tmpy4jmmmi1.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b112313ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1122e35b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1122e35988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1122e347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy4jmmmi1                        0x000055d6ca141505 <unavailable> + 5381

    5    libc.so.6                          0x00002b112332a460 __libc_start_main +
    245

    6    tmpy4jmmmi1                        0x000055d6ca1411b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1660012213
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var i = 0\n    while i <\
    \ n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n  \
    \      i += 1\n    }\n    var collisions = 0\n    i = 0\n    while i < n {\n \
    \       var j = 0\n        while j < n {\n            if left_to_right[i] == right_to_left[j]\
    \ {\n                collisions += 1\n            }\n            j += 1\n    \
    \    }\n        i += 1\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpx74kc7zh/tmpx74kc7zh.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6dc17bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6dbe72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6dbe72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6dbe717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx74kc7zh                        0x00005590291e32c5 <unavailable> + 4805

    5    libc.so.6                          0x00002ab6dc367460 __libc_start_main +
    245

    6    tmpx74kc7zh                        0x00005590291e2f79 <unavailable> + 3961

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(0..<n)\n    var right_to_left =\
    \ Array(0..<n)\n    left_to_right.sort()\n    right_to_left.sort()\n    var i\
    \ = 0\n    var j = 0\n    var collision = 0\n    while i < n && j < n {\n    \
    \    if left_to_right[i] < right_to_left[j] {\n            collision += j\n  \
    \          i += 1\n        } else {\n            j += 1\n        }\n    }\n  \
    \  collision += (n - i) * j\n    return collision\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpkgpcdp38/tmpkgpcdp38.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92be06cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92bdd63b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92bdd63988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92bdd627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkgpcdp38                        0x0000555fa257f4f5 <unavailable> + 5365

    5    libc.so.6                          0x00002b92be258460 __libc_start_main +
    245

    6    tmpkgpcdp38                        0x0000555fa257f1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660012213
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collision = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collision += 1\n            }\n     \
    \   }\n    }\n    return collision\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpw2pxp_gx/tmpw2pxp_gx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1475015c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1474d0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1474d0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1474d0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2pxp_gx                        0x000055eb2e404455 <unavailable> + 5205

    5    libc.so.6                          0x00002b1475201460 __libc_start_main +
    245

    6    tmpw2pxp_gx                        0x000055eb2e404109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 1...n {\n        left_to_right.append(i)\n        right_to_left.append(i)\n\
    \    }\n    var collision = 0\n    for i in 0..<n {\n        for j in 0..<n {\n\
    \            if left_to_right[i] == right_to_left[j] {\n                collision\
    \ += 1\n            }\n        }\n    }\n    return collision\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpylaxjwh4/tmpylaxjwh4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b04b48c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b0483fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b0483f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b0483e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpylaxjwh4                        0x000055c1bdadf535 <unavailable> + 5429

    5    libc.so.6                          0x00002b8b04d34460 __libc_start_main +
    245

    6    tmpylaxjwh4                        0x000055c1bdadf1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660012213
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n-i-1)\n\
    \    }\n    var collisions = 0\n    for i in 0..<n {\n        if left_to_right[i]\
    \ == right_to_left[i] {\n            collisions += 1\n        }\n    }\n    return\
    \ collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmph4n1_9r5/tmph4n1_9r5.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdaa96dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdaa664b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdaa664988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdaa6637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph4n1_9r5                        0x0000556ef9314445 <unavailable> + 5189

    5    libc.so.6                          0x00002afdaab59460 __libc_start_main +
    245

    6    tmph4n1_9r5                        0x0000556ef93140f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012212
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    var collisions = 0\n    for i in 0..<n {\n        left_to_right.append(i)\n\
    \        right_to_left.append(i)\n    }\n    for i in 0..<n {\n        for j in\
    \ 0..<n {\n            if left_to_right[i] == right_to_left[j] {\n           \
    \     collisions += 1\n            }\n        }\n    }\n    return collisions\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpk7k8ahls/tmpk7k8ahls.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b707d8adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b707d5a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b707d5a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b707d5a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk7k8ahls                        0x0000555ddff47445 <unavailable> + 5189

    5    libc.so.6                          0x00002b707da99460 __libc_start_main +
    245

    6    tmpk7k8ahls                        0x0000555ddff470f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012168
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    var i = 0\n    var j = 0\n    while i < n && j < n {\n \
    \       if left_to_right[i] < right_to_left[j] {\n            collisions += j\n\
    \            i += 1\n        } else {\n            j += 1\n        }\n    }\n\
    \    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpopbqhmvo/tmpopbqhmvo.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae984848c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae98453fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae98453f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae98453e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpopbqhmvo                        0x00005585de3a5455 <unavailable> + 5205

    5    libc.so.6                          0x00002ae984a34460 __libc_start_main +
    245

    6    tmpopbqhmvo                        0x00005585de3a5109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    var collision = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collision += 1\n            }\n     \
    \   }\n    }\n    return collision\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpa6brek0n/tmpa6brek0n.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac576e06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac576afdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac576afd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac576afc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa6brek0n                        0x000055bb36ad0455 <unavailable> + 5205

    5    libc.so.6                          0x00002ac576ff2460 __libc_start_main +
    245

    6    tmpa6brek0n                        0x000055bb36ad0109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012212
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var cars = Array(repeating: 0, count: n)\n    var collisions\
    \ = 0\n    for i in 0..<n {\n        cars[i] = i\n    }\n    for i in 0..<n {\n\
    \        for j in 0..<n {\n            if cars[i] > cars[j] {\n              \
    \  collisions += 1\n            }\n        }\n    }\n    return collisions\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpyuxc3fp1/tmpyuxc3fp1.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afba8412c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afba8109b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afba8109988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afba81087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyuxc3fp1                        0x000055ede8406455 <unavailable> + 5205

    5    libc.so.6                          0x00002afba85fe460 __libc_start_main +
    245

    6    tmpyuxc3fp1                        0x000055ede8406109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012168
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var i = 0\n    while i <\
    \ n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n  \
    \      i += 1\n    }\n    var collisions = 0\n    i = 0\n    while i < n {\n \
    \       var j = 0\n        while j < n {\n            if left_to_right[i] == right_to_left[j]\
    \ {\n                collisions += 1\n            }\n            j += 1\n    \
    \    }\n        i += 1\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpx74kc7zh/tmpx74kc7zh.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6dc17bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6dbe72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6dbe72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6dbe717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx74kc7zh                        0x00005590291e32c5 <unavailable> + 4805

    5    libc.so.6                          0x00002ab6dc367460 __libc_start_main +
    245

    6    tmpx74kc7zh                        0x00005590291e2f79 <unavailable> + 3961

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmps1jc4l0x/tmps1jc4l0x.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7480becc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74808e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74808e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74808e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps1jc4l0x                        0x000055a38fff1455 <unavailable> + 5205

    5    libc.so.6                          0x00002b7480dd8460 __libc_start_main +
    245

    6    tmps1jc4l0x                        0x000055a38fff1109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    var collision = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collision += 1\n            }\n     \
    \   }\n    }\n    return collision\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpw2pxp_gx/tmpw2pxp_gx.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1475015c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1474d0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1474d0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1474d0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2pxp_gx                        0x000055eb2e404455 <unavailable> + 5205

    5    libc.so.6                          0x00002b1475201460 __libc_start_main +
    245

    6    tmpw2pxp_gx                        0x000055eb2e404109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                count += 1\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpeixhzo9y/tmpeixhzo9y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b261dd57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b261da4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b261da4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b261da4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeixhzo9y                        0x00005571c4c4f455 <unavailable> + 5205

    5    libc.so.6                          0x00002b261df43460 __libc_start_main +
    245

    6    tmpeixhzo9y                        0x00005571c4c4f109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = Array(repeating: 0, count: n)\n    var\
    \ right_to_left = Array(repeating: 0, count: n)\n    var collisions = 0\n    for\
    \ i in 0..<n {\n        left_to_right[i] = i\n        right_to_left[i] = n - i\
    \ - 1\n    }\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                collisions += 1\n            }\n    \
    \    }\n    }\n    return collisions\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3) == 9)\n\
    assert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n: 8) == 64)\n\
    assert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmp8gl69j6y/tmp8gl69j6y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc680c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc67db8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc67db8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc67db77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8gl69j6y                        0x000055beeb7cb455 <unavailable> + 5205

    5    libc.so.6                          0x00002abc682ad460 __libc_start_main +
    245

    6    tmp8gl69j6y                        0x000055beeb7cb109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            if left_to_right[i]\
    \ == right_to_left[j] {\n                count += 1\n            }\n        }\n\
    \    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(car_race_collision(n:\
    \ 2) == 4)\nassert(car_race_collision(n: 3) == 9)\nassert(car_race_collision(n:\
    \ 4) == 16)\nassert(car_race_collision(n: 8) == 64)\nassert(car_race_collision(n:\
    \ 10) == 100)"
  status: Exception
  stderr: 'tmpeixhzo9y/tmpeixhzo9y.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b261dd57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b261da4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b261da4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b261da4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeixhzo9y                        0x00005571c4c4f455 <unavailable> + 5205

    5    libc.so.6                          0x00002b261df43460 __libc_start_main +
    245

    6    tmpeixhzo9y                        0x00005571c4c4f109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012166
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    var\
    \ collisions = 0\n    var i = 0\n    var j = 0\n    while i < n && j < n {\n \
    \       if left_to_right[i] < right_to_left[j] {\n            collisions += j\n\
    \            i += 1\n        } else {\n            j += 1\n        }\n    }\n\
    \    collisions += (n - i) * j\n    return collisions\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpoby69lxh/tmpoby69lxh.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af46acfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af46a9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af46a9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af46a9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoby69lxh                        0x00005651e075d455 <unavailable> + 5205

    5    libc.so.6                          0x00002af46aee8460 __libc_start_main +
    245

    6    tmpoby69lxh                        0x00005651e075d109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1660012167
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int]()\n    var right_to_left = [Int]()\n\
    \    for i in 0..<n {\n        left_to_right.append(i)\n        right_to_left.append(n-i-1)\n\
    \    }\n    var collisions = 0\n    for i in 0..<n {\n        for j in 0..<n {\n\
    \            if left_to_right[i] == right_to_left[j] {\n                collisions\
    \ += 1\n            }\n        }\n    }\n    return collisions\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpr4785uzn/tmpr4785uzn.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78b286cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78b2563b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78b2563988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78b25627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr4785uzn                        0x00005563c34e8445 <unavailable> + 5189

    5    libc.so.6                          0x00002b78b2a58460 __libc_start_main +
    245

    6    tmpr4785uzn                        0x00005563c34e80f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660012168
- exit_code: -4
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    return n * (n - 1) / 2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n: 3)\
    \ == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: Exception
  stderr: 'tmpmswg_rvv/tmpmswg_rvv.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea5b323c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea5b01ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea5b01a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea5b0197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmswg_rvv                        0x0000561859a77245 <unavailable> + 4677

    5    libc.so.6                          0x00002aea5b50f460 __libc_start_main +
    245

    6    tmpmswg_rvv                        0x0000561859a76ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660012168
- exit_code: 1
  program: "\n/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfunc car_race_collision(n:\
    \ Int) -> Int {\n    var left_to_right = [Int](repeating: 0, count: n)\n    var\
    \ right_to_left = [Int](repeating: 0, count: n)\n    for i in 0..<n {\n      \
    \  left_to_right[i] = i\n        right_to_left[i] = n - i - 1\n    }\n    return\
    \ car_race_collision(left_to_right: left_to_right, right_to_left: right_to_left)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(car_race_collision(n: 2) == 4)\nassert(car_race_collision(n:\
    \ 3) == 9)\nassert(car_race_collision(n: 4) == 16)\nassert(car_race_collision(n:\
    \ 8) == 64)\nassert(car_race_collision(n: 10) == 100)"
  status: SyntaxError
  stderr: "/tmp/tmp8mu6sjir.swift:17:30: error: extra arguments at positions #1, #2\
    \ in call\n    return car_race_collision(left_to_right: left_to_right, right_to_left:\
    \ right_to_left)\n                             ^\n/tmp/tmp8mu6sjir.swift:10:6:\
    \ note: 'car_race_collision(n:)' declared here\nfunc car_race_collision(n: Int)\
    \ -> Int {\n     ^\n/tmp/tmp8mu6sjir.swift:17:31: error: missing argument for\
    \ parameter 'n' in call\n    return car_race_collision(left_to_right: left_to_right,\
    \ right_to_left: right_to_left)\n                              ^\n           \
    \                   n: <#Int#>, \n/tmp/tmp8mu6sjir.swift:10:6: note: 'car_race_collision(n:)'\
    \ declared here\nfunc car_race_collision(n: Int) -> Int {\n     ^\n"
  stdout: ''
  timestamp: 1660012166
