language: swift
name: HumanEval_57_monotonic
results:
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count < 2 {\n        return true\n    }\n    var increasing\
    \ = true\n    var decreasing = true\n    for i in 1..<l.count {\n        if l[i]\
    \ < l[i - 1] {\n            increasing = false\n        }\n        if l[i] > l[i\
    \ - 1] {\n            decreasing = false\n        }\n    }\n    return increasing\
    \ || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count < 2 {\n        return true\n    }\n    var cmp: (Int,\
    \ Int) -> Bool = { $0 < $1 }\n    for i in 1..<l.count {\n        if cmp(l[i],\
    \ l[i - 1]) {\n            return false\n        }\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: Exception
  stderr: 'tmp_gqioqvv/tmp_gqioqvv.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa534ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa531f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa531f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa531f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_gqioqvv                        0x000055f4932a27b1 <unavailable> + 6065

    5    libc.so.6                          0x00002baa536eb460 __libc_start_main +
    245

    6    tmp_gqioqvv                        0x000055f4932a21a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count < 2 {\n        return true\n    }\n    var increasing\
    \ = true\n    var decreasing = true\n    for i in 1..<l.count {\n        if l[i]\
    \ < l[i - 1] {\n            increasing = false\n        }\n        if l[i] > l[i\
    \ - 1] {\n            decreasing = false\n        }\n    }\n    return increasing\
    \ || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count <= 2 {\n        return true\n    }\n    var increasing\
    \ = true\n    var decreasing = true\n    for i in 1..<l.count {\n        if l[i]\
    \ < l[i - 1] {\n            increasing = false\n        }\n        if l[i] > l[i\
    \ - 1] {\n            decreasing = false\n        }\n    }\n    return increasing\
    \ || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count < 2 {\n        return true\n    }\n    var increasing\
    \ = true\n    var decreasing = true\n    for i in 1..<l.count {\n        if l[i]\
    \ < l[i - 1] {\n            increasing = false\n        }\n        if l[i] > l[i\
    \ - 1] {\n            decreasing = false\n        }\n    }\n    return increasing\
    \ || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for\
    \ i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            isIncreasing =\
    \ false\n        }\n        if l[i] > l[i - 1] {\n            isDecreasing = false\n\
    \        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count <= 1 {\n        return true\n    }\n    var i = 1\n\
    \    var increasing = l[i] > l[i - 1]\n    while i < l.count {\n        if increasing\
    \ && l[i] < l[i - 1] {\n            return false\n        }\n        if !increasing\
    \ && l[i] > l[i - 1] {\n            return false\n        }\n        i += 1\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count < 2 {\n        return true\n    }\n    var increasing\
    \ = true\n    var decreasing = true\n    for i in 1..<l.count {\n        if l[i]\
    \ < l[i - 1] {\n            increasing = false\n        }\n        if l[i] > l[i\
    \ - 1] {\n            decreasing = false\n        }\n    }\n    return increasing\
    \ || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count < 2 {\n        return true\n    }\n    var increasing\
    \ = true\n    var decreasing = true\n    for i in 1..<l.count {\n        if l[i]\
    \ < l[i - 1] {\n            increasing = false\n        }\n        if l[i] > l[i\
    \ - 1] {\n            decreasing = false\n        }\n    }\n    return increasing\
    \ || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    guard l.count > 1 else { return true }\n    var increasing =\
    \ true\n    var decreasing = true\n    for i in 1..<l.count {\n        if l[i]\
    \ < l[i-1] {\n            increasing = false\n        }\n        if l[i] > l[i-1]\
    \ {\n            decreasing = false\n        }\n    }\n    return increasing ||\
    \ decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var inc = true\n    var dec = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            inc = false\n        }\n        if\
    \ l[i] > l[i-1] {\n            dec = false\n        }\n    }\n    return inc ||\
    \ dec\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4,\
    \ 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count <= 1 {\n        return true\n    }\n    var increasing\
    \ = true\n    var decreasing = true\n    for i in 1..<l.count {\n        if l[i]\
    \ < l[i - 1] {\n            increasing = false\n        }\n        if l[i] > l[i\
    \ - 1] {\n            decreasing = false\n        }\n    }\n    return increasing\
    \ || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for\
    \ i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            isIncreasing =\
    \ false\n        }\n        if l[i] > l[i - 1] {\n            isDecreasing = false\n\
    \        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count < 2 {\n        return true\n    }\n    var increasing\
    \ = true\n    var decreasing = true\n    for i in 1..<l.count {\n        if l[i]\
    \ < l[i - 1] {\n            increasing = false\n        }\n        if l[i] > l[i\
    \ - 1] {\n            decreasing = false\n        }\n    }\n    return increasing\
    \ || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count < 2 {\n        return true\n    }\n    var increasing\
    \ = true\n    var decreasing = true\n    for i in 1..<l.count {\n        if l[i]\
    \ < l[i - 1] {\n            increasing = false\n        }\n        if l[i] > l[i\
    \ - 1] {\n            decreasing = false\n        }\n    }\n    return increasing\
    \ || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count < 2 {\n        return true\n    }\n    var inc = true\n\
    \    var dec = true\n    for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n\
    \            inc = false\n        }\n        if l[i] > l[i - 1] {\n          \
    \  dec = false\n        }\n    }\n    return inc || dec\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count < 2 {\n        return true\n    }\n    var increasing\
    \ = true\n    var decreasing = true\n    for i in 1..<l.count {\n        if l[i]\
    \ < l[i - 1] {\n            increasing = false\n        }\n        if l[i] > l[i\
    \ - 1] {\n            decreasing = false\n        }\n    }\n    return increasing\
    \ || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count < 2 {\n        return true\n    }\n    var increasing\
    \ = true\n    var decreasing = true\n    for i in 1..<l.count {\n        if l[i]\
    \ < l[i - 1] {\n            increasing = false\n        }\n        if l[i] > l[i\
    \ - 1] {\n            decreasing = false\n        }\n    }\n    return increasing\
    \ || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for\
    \ i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            isIncreasing =\
    \ false\n        }\n        if l[i] > l[i - 1] {\n            isDecreasing = false\n\
    \        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count < 2 {\n        return true\n    }\n    var increasing\
    \ = true\n    var decreasing = true\n    for i in 1..<l.count {\n        if l[i]\
    \ < l[i - 1] {\n            increasing = false\n        }\n        if l[i] > l[i\
    \ - 1] {\n            decreasing = false\n        }\n    }\n    return increasing\
    \ || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count < 2 {\n        return true\n    }\n    var increasing\
    \ = true\n    var decreasing = true\n    for i in 1..<l.count {\n        if l[i]\
    \ < l[i - 1] {\n            increasing = false\n        }\n        if l[i] > l[i\
    \ - 1] {\n            decreasing = false\n        }\n    }\n    return increasing\
    \ || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var l = l\n    if l.count < 2 {\n        return true\n    }\n\
    \    var increasing = l[1] > l[0]\n    for i in 2..<l.count {\n        if increasing\
    \ {\n            if l[i] < l[i - 1] {\n                return false\n        \
    \    }\n        } else {\n            if l[i] > l[i - 1] {\n                return\
    \ false\n            }\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count < 2 {\n        return true\n    }\n    var increasing\
    \ = true\n    var decreasing = true\n    for i in 1..<l.count {\n        if l[i]\
    \ < l[i - 1] {\n            increasing = false\n        }\n        if l[i] > l[i\
    \ - 1] {\n            decreasing = false\n        }\n    }\n    return increasing\
    \ || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for\
    \ i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            isIncreasing =\
    \ false\n        }\n        if l[i] > l[i - 1] {\n            isDecreasing = false\n\
    \        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count < 2 {\n        return true\n    }\n    var increasing\
    \ = true\n    var decreasing = true\n    for i in 1..<l.count {\n        if l[i]\
    \ < l[i - 1] {\n            increasing = false\n        }\n        if l[i] > l[i\
    \ - 1] {\n            decreasing = false\n        }\n    }\n    return increasing\
    \ || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count < 2 {\n        return true\n    }\n    var increasing\
    \ = true\n    var decreasing = true\n    for i in 1..<l.count {\n        if l[i]\
    \ < l[i - 1] {\n            increasing = false\n        }\n        if l[i] > l[i\
    \ - 1] {\n            decreasing = false\n        }\n    }\n    return increasing\
    \ || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for\
    \ i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            isIncreasing =\
    \ false\n        }\n        if l[i] > l[i - 1] {\n            isDecreasing = false\n\
    \        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count < 2 {\n        return true\n    }\n    var increasing\
    \ = true\n    var decreasing = true\n    for i in 1..<l.count {\n        if l[i]\
    \ < l[i - 1] {\n            increasing = false\n        }\n        if l[i] > l[i\
    \ - 1] {\n            decreasing = false\n        }\n    }\n    return increasing\
    \ || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var is_increasing = true\n    var is_decreasing = true\n    for\
    \ i in 0..<l.count-1 {\n        if l[i] > l[i+1] {\n            is_increasing\
    \ = false\n        }\n        if l[i] < l[i+1] {\n            is_decreasing =\
    \ false\n        }\n    }\n    return is_increasing || is_decreasing\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count <= 1 {\n        return true\n    }\n    var increasing\
    \ = false\n    var decreasing = false\n    for i in 1..<l.count {\n        if\
    \ l[i] > l[i - 1] {\n            increasing = true\n        } else if l[i] < l[i\
    \ - 1] {\n            decreasing = true\n        }\n        if increasing && decreasing\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count <= 1 {\n        return true\n    }\n    var isIncreasing\
    \ = true\n    var isDecreasing = true\n    for i in 1..<l.count {\n        if\
    \ l[i] < l[i - 1] {\n            isIncreasing = false\n        }\n        if l[i]\
    \ > l[i - 1] {\n            isDecreasing = false\n        }\n    }\n    return\
    \ isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820519
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count < 2 {\n        return true\n    }\n    var isIncreasing\
    \ = true\n    var isDecreasing = true\n    for i in 1..<l.count {\n        if\
    \ l[i] < l[i - 1] {\n            isIncreasing = false\n        }\n        if l[i]\
    \ > l[i - 1] {\n            isDecreasing = false\n        }\n    }\n    return\
    \ isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count < 2 {\n        return true\n    }\n    var prev =\
    \ l[0]\n    var inc = true\n    var dec = true\n    for i in 1..<l.count {\n \
    \       if l[i] < prev {\n            inc = false\n        }\n        if l[i]\
    \ > prev {\n            dec = false\n        }\n        prev = l[i]\n    }\n \
    \   return inc || dec\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count < 2 {\n        return true\n    }\n    var direction\
    \ = l[1] - l[0]\n    for i in 2..<l.count {\n        if direction == 0 {\n   \
    \         direction = l[i] - l[i - 1]\n            continue\n        }\n     \
    \   if breaksDirection(a: l[i - 1], b: l[i], direction: direction) {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmprqg732t2.swift:19:12: error: cannot find 'breaksDirection' in scope\n\
    \        if breaksDirection(a: l[i - 1], b: l[i], direction: direction) {\n  \
    \         ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820519
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count < 2 {\n        return true\n    }\n    var increasing\
    \ = true\n    var decreasing = true\n    for i in 1..<l.count {\n        if l[i]\
    \ < l[i - 1] {\n            increasing = false\n        }\n        if l[i] > l[i\
    \ - 1] {\n            decreasing = false\n        }\n    }\n    return increasing\
    \ || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count < 2 {\n        return true\n    }\n    var inc = true\n\
    \    var dec = true\n    for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n\
    \            inc = false\n        }\n        if l[i] > l[i - 1] {\n          \
    \  dec = false\n        }\n    }\n    return inc || dec\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 1
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count <= 1 {\n        return true\n    }\n    let first\
    \ = l[0]\n    let second = l[1]\n    if first < second {\n        return monotonic(l[1..<l.count])\n\
    \    } else if first > second {\n        return monotonic(l[1..<l.count].map {\
    \ -$0 })\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp7pe79fw2.swift:16:26: error: missing argument label 'l:' in call\n\
    \        return monotonic(l[1..<l.count])\n                         ^\n      \
    \                   l: \n/tmp/tmp7pe79fw2.swift:16:27: error: cannot convert value\
    \ of type 'ArraySlice<Int>' to expected argument type '[Int]'\n        return\
    \ monotonic(l[1..<l.count])\n                          ^\n/tmp/tmp7pe79fw2.swift:18:26:\
    \ error: missing argument label 'l:' in call\n        return monotonic(l[1..<l.count].map\
    \ { -$0 })\n                         ^\n                         l: \n"
  stdout: ''
  timestamp: 1659820519
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count < 2 {\n        return true\n    }\n    var isIncreasing\
    \ = true\n    var isDecreasing = true\n    for i in 1..<l.count {\n        if\
    \ l[i] < l[i - 1] {\n            isIncreasing = false\n        }\n        if l[i]\
    \ > l[i - 1] {\n            isDecreasing = false\n        }\n    }\n    return\
    \ isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count < 2 {\n        return true\n    }\n    var increasing\
    \ = true\n    var decreasing = true\n    for i in 1..<l.count {\n        if l[i]\
    \ < l[i - 1] {\n            increasing = false\n        }\n        if l[i] > l[i\
    \ - 1] {\n            decreasing = false\n        }\n    }\n    return increasing\
    \ || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return l.sorted() == l || l.sorted(by: >) == l\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count <= 1 {\n        return true\n    }\n    var i = 1\n\
    \    var inc = l[1] > l[0]\n    while i < l.count {\n        if inc && l[i] <\
    \ l[i - 1] {\n            return false\n        }\n        if !inc && l[i] > l[i\
    \ - 1] {\n            return false\n        }\n        i += 1\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4,\
    \ 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for\
    \ i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            isIncreasing =\
    \ false\n        }\n        if l[i] > l[i - 1] {\n            isDecreasing = false\n\
    \        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for\
    \ i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            isIncreasing =\
    \ false\n        }\n        if l[i] > l[i - 1] {\n            isDecreasing = false\n\
    \        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count <= 2 {\n        return true\n    }\n    var increasing\
    \ = true\n    var decreasing = true\n    for i in 1..<l.count {\n        if l[i]\
    \ < l[i - 1] {\n            increasing = false\n        }\n        if l[i] > l[i\
    \ - 1] {\n            decreasing = false\n        }\n    }\n    return increasing\
    \ || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count <= 2 {\n        return true\n    }\n    var increasing\
    \ = true\n    var decreasing = true\n    for i in 1..<l.count {\n        if l[i]\
    \ < l[i - 1] {\n            increasing = false\n        }\n        if l[i] > l[i\
    \ - 1] {\n            decreasing = false\n        }\n    }\n    return increasing\
    \ || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    while i < l.count - 1 {\n        if l[i] > l[i\
    \ + 1] {\n            break\n        }\n        i += 1\n    }\n    if i == l.count\
    \ - 1 {\n        return true\n    }\n    i = 0\n    while i < l.count - 1 {\n\
    \        if l[i] < l[i + 1] {\n            break\n        }\n        i += 1\n\
    \    }\n    if i == l.count - 1 {\n        return true\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] > l[i-1] {\n            decreasing = false\n\
    \        }\n        if l[i] < l[i-1] {\n            increasing = false\n     \
    \   }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var inc = true\n    var dec = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            inc = false\n        }\n        if\
    \ l[i] > l[i-1] {\n            dec = false\n        }\n    }\n    return inc ||\
    \ dec\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4,\
    \ 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count <= 1 {\n        return true\n    }\n    var increasing\
    \ = true\n    var decreasing = true\n    for i in 1..<l.count {\n        if l[i]\
    \ < l[i - 1] {\n            increasing = false\n        }\n        if l[i] > l[i\
    \ - 1] {\n            decreasing = false\n        }\n    }\n    return increasing\
    \ || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count < 2 {\n        return true\n    }\n    var increasing\
    \ = true\n    var decreasing = true\n    for i in 1..<l.count {\n        if l[i]\
    \ < l[i - 1] {\n            increasing = false\n        }\n        if l[i] > l[i\
    \ - 1] {\n            decreasing = false\n        }\n    }\n    return increasing\
    \ || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for\
    \ i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            isIncreasing =\
    \ false\n        }\n        if l[i] > l[i - 1] {\n            isDecreasing = false\n\
    \        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: -4
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var direction: Int?\n    for i in 0..<l.count - 1 {\n       \
    \ if direction == nil {\n            if l[i] < l[i + 1] {\n                direction\
    \ = 1\n            } else if l[i] > l[i + 1] {\n                direction = -1\n\
    \            }\n        } else {\n            if l[i] * direction! < l[i + 1]\
    \ * direction! {\n                return false\n            }\n        }\n   \
    \ }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: Exception
  stderr: 'tmp6klj39oi/tmp6klj39oi.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c516ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c513e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c513e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c513e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6klj39oi                        0x000055b7b7aaf542 <unavailable> + 5442

    5    libc.so.6                          0x00002b3c518d7460 __libc_start_main +
    245

    6    tmp6klj39oi                        0x000055b7b7aaf1a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var inc = true\n    var dec = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            inc = false\n        }\n        if\
    \ l[i] > l[i-1] {\n            dec = false\n        }\n    }\n    return inc ||\
    \ dec\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4,\
    \ 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var inc = true\n    var dec = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            inc = false\n        }\n        if\
    \ l[i] > l[i-1] {\n            dec = false\n        }\n    }\n    return inc ||\
    \ dec\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4,\
    \ 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count <= 1 {\n        return true\n    }\n    var increasing\
    \ = true\n    var decreasing = true\n    for i in 1..<l.count {\n        if l[i]\
    \ < l[i - 1] {\n            increasing = false\n        }\n        if l[i] > l[i\
    \ - 1] {\n            decreasing = false\n        }\n    }\n    return increasing\
    \ || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for\
    \ i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            isIncreasing =\
    \ false\n        }\n        if l[i] > l[i - 1] {\n            isDecreasing = false\n\
    \        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for\
    \ i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            isIncreasing =\
    \ false\n        }\n        if l[i] > l[i - 1] {\n            isDecreasing = false\n\
    \        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for\
    \ i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            isIncreasing =\
    \ false\n        }\n        if l[i] > l[i - 1] {\n            isDecreasing = false\n\
    \        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count < 2 {\n        return true\n    }\n    var increasing\
    \ = true\n    var decreasing = true\n    for i in 1..<l.count {\n        if l[i]\
    \ < l[i - 1] {\n            increasing = false\n        }\n        if l[i] > l[i\
    \ - 1] {\n            decreasing = false\n        }\n    }\n    return increasing\
    \ || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count <= 1 {\n        return true\n    }\n    var increasing\
    \ = true\n    var decreasing = true\n    for i in 1..<l.count {\n        if l[i]\
    \ < l[i - 1] {\n            increasing = false\n        }\n        if l[i] > l[i\
    \ - 1] {\n            decreasing = false\n        }\n    }\n    return increasing\
    \ || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for\
    \ i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            isIncreasing =\
    \ false\n        }\n        if l[i] > l[i - 1] {\n            isDecreasing = false\n\
    \        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count < 2 {\n        return true\n    }\n    var increasing\
    \ = true\n    var decreasing = true\n    for i in 1..<l.count {\n        if l[i]\
    \ < l[i - 1] {\n            increasing = false\n        }\n        if l[i] > l[i\
    \ - 1] {\n            decreasing = false\n        }\n    }\n    return increasing\
    \ || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count < 2 {\n        return true\n    }\n    var i = 0\n\
    \    var increasing = true\n    while i < l.count - 1 {\n        if l[i] > l[i\
    \ + 1] {\n            increasing = false\n            break\n        }\n     \
    \   i += 1\n    }\n    if increasing {\n        return true\n    }\n    i = 0\n\
    \    while i < l.count - 1 {\n        if l[i] < l[i + 1] {\n            return\
    \ false\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    guard l.count > 1 else { return true }\n    var increasing =\
    \ true\n    var decreasing = true\n    for i in 1..<l.count {\n        if l[i]\
    \ < l[i-1] {\n            increasing = false\n        }\n        if l[i] > l[i-1]\
    \ {\n            decreasing = false\n        }\n    }\n    return increasing ||\
    \ decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count <= 1 {\n        return true\n    }\n    var increasing\
    \ = true\n    var decreasing = true\n    for i in 1..<l.count {\n        if l[i]\
    \ < l[i - 1] {\n            increasing = false\n        }\n        if l[i] > l[i\
    \ - 1] {\n            decreasing = false\n        }\n    }\n    return increasing\
    \ || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var i = 0\n    var j = 1\n    var increasing = true\n    var\
    \ decreasing = true\n    while j < l.count {\n        if l[i] > l[j] {\n     \
    \       increasing = false\n        }\n        if l[i] < l[j] {\n            decreasing\
    \ = false\n        }\n        i += 1\n        j += 1\n    }\n    return increasing\
    \ || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count <= 2 {\n        return true\n    }\n    var increasing\
    \ = true\n    var decreasing = true\n    for i in 1..<l.count {\n        if l[i]\
    \ < l[i - 1] {\n            increasing = false\n        }\n        if l[i] > l[i\
    \ - 1] {\n            decreasing = false\n        }\n    }\n    return increasing\
    \ || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for\
    \ i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            isIncreasing =\
    \ false\n        }\n        if l[i] > l[i - 1] {\n            isDecreasing = false\n\
    \        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count < 2 {\n        return true\n    }\n    var isIncreasing\
    \ = true\n    var isDecreasing = true\n    for i in 1..<l.count {\n        if\
    \ l[i] < l[i - 1] {\n            isIncreasing = false\n        }\n        if l[i]\
    \ > l[i - 1] {\n            isDecreasing = false\n        }\n    }\n    return\
    \ isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count <= 1 {\n        return true\n    }\n    var increasing\
    \ = true\n    var decreasing = true\n    for i in 1..<l.count {\n        if l[i]\
    \ < l[i - 1] {\n            increasing = false\n        }\n        if l[i] > l[i\
    \ - 1] {\n            decreasing = false\n        }\n    }\n    return increasing\
    \ || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    let sorted = l.sorted()\n    return sorted == l || sorted.reversed()\
    \ == l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4,\
    \ 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for\
    \ i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            isIncreasing =\
    \ false\n        }\n        if l[i] > l[i - 1] {\n            isDecreasing = false\n\
    \        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count < 2 {\n        return true\n    }\n    var increasing\
    \ = true\n    var decreasing = true\n    for i in 1..<l.count {\n        if l[i]\
    \ < l[i - 1] {\n            increasing = false\n        }\n        if l[i] > l[i\
    \ - 1] {\n            decreasing = false\n        }\n    }\n    return increasing\
    \ || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count < 2 {\n        return true\n    }\n    var i = 0\n\
    \    while i < l.count - 1 {\n        if l[i] > l[i + 1] {\n            break\n\
    \        }\n        i += 1\n    }\n    if i == l.count - 1 {\n        return true\n\
    \    }\n    i = 0\n    while i < l.count - 1 {\n        if l[i] < l[i + 1] {\n\
    \            break\n        }\n        i += 1\n    }\n    if i == l.count - 1\
    \ {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for\
    \ i in 1..<l.count {\n        if l[i] < l[i - 1] {\n            isIncreasing =\
    \ false\n        }\n        if l[i] > l[i - 1] {\n            isDecreasing = false\n\
    \        }\n    }\n    return isIncreasing || isDecreasing\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count <= 1 {\n        return true\n    }\n    var increasing\
    \ = true\n    var decreasing = true\n    for i in 1..<l.count {\n        if l[i]\
    \ > l[i - 1] {\n            decreasing = false\n        }\n        if l[i] < l[i\
    \ - 1] {\n            increasing = false\n        }\n    }\n    return increasing\
    \ || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count < 2 {\n        return true\n    }\n    var increasing\
    \ = true\n    var decreasing = true\n    for i in 1..<l.count {\n        if l[i]\
    \ < l[i - 1] {\n            increasing = false\n        }\n        if l[i] > l[i\
    \ - 1] {\n            decreasing = false\n        }\n    }\n    return increasing\
    \ || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    guard l.count > 1 else { return true }\n    var increasing =\
    \ true\n    var decreasing = true\n    for i in 1..<l.count {\n        if l[i]\
    \ < l[i-1] {\n            increasing = false\n        }\n        if l[i] > l[i-1]\
    \ {\n            decreasing = false\n        }\n    }\n    return increasing ||\
    \ decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    guard l.count > 1 else {\n        return true\n    }\n    var\
    \ increasing = true\n    var decreasing = true\n    for i in 1..<l.count {\n \
    \       if l[i] < l[i - 1] {\n            increasing = false\n        }\n    \
    \    if l[i] > l[i - 1] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20])\
    \ == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count <= 1 {\n        return true\n    }\n    var increasing\
    \ = true\n    var decreasing = true\n    for i in 1..<l.count {\n        if l[i]\
    \ < l[i - 1] {\n            increasing = false\n        }\n        if l[i] > l[i\
    \ - 1] {\n            decreasing = false\n        }\n    }\n    return increasing\
    \ || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    guard l.count > 1 else { return true }\n    var isIncreasing\
    \ = true\n    var isDecreasing = true\n    for i in 1..<l.count {\n        if\
    \ l[i] < l[i - 1] {\n            isIncreasing = false\n        }\n        if l[i]\
    \ > l[i - 1] {\n            isDecreasing = false\n        }\n    }\n    return\
    \ isIncreasing || isDecreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(monotonic(l:\
    \ [1, 2, 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return l.sorted() == l || l.sorted(by: >) == l\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count < 2 {\n        return true\n    }\n    var increasing\
    \ = true\n    var decreasing = true\n    for i in 1..<l.count {\n        if l[i]\
    \ < l[i - 1] {\n            increasing = false\n        }\n        if l[i] > l[i\
    \ - 1] {\n            decreasing = false\n        }\n    }\n    return increasing\
    \ || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count <= 1 {\n        return true\n    }\n    var increasing\
    \ = true\n    var decreasing = true\n    for i in 1..<l.count {\n        if l[i]\
    \ < l[i - 1] {\n            increasing = false\n        }\n        if l[i] > l[i\
    \ - 1] {\n            decreasing = false\n        }\n    }\n    return increasing\
    \ || decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    return l.isEmpty || l.count == 1 || l.sorted() == l || l.sorted(by:\
    \ >) == l\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    if l.count\
    \ <= 2 {\n        return true\n    }\n    for i in 1..<l.count {\n        if l[i]\
    \ < l[i-1] {\n            increasing = false\n        }\n        if l[i] > l[i-1]\
    \ {\n            decreasing = false\n        }\n    }\n    return increasing ||\
    \ decreasing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2,\
    \ 4, 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var inc = true\n    var dec = true\n    for i in 1..<l.count\
    \ {\n        if l[i] < l[i-1] {\n            inc = false\n        }\n        if\
    \ l[i] > l[i-1] {\n            dec = false\n        }\n    }\n    return inc ||\
    \ dec\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(monotonic(l: [1, 2, 4,\
    \ 10]) == true)\nassert(monotonic(l: [1, 2, 4, 20]) == true)\nassert(monotonic(l:\
    \ [1, 20, 4, 10]) == false)\nassert(monotonic(l: [4, 1, 0, -10]) == true)\nassert(monotonic(l:\
    \ [4, 1, 1, 0]) == true)\nassert(monotonic(l: [1, 2, 3, 2, 5, 60]) == false)\n\
    assert(monotonic(l: [1, 2, 3, 4, 5, 60]) == true)\nassert(monotonic(l: [9, 9,\
    \ 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    if l.count < 2 {\n        return true\n    }\n    var inc = true\n\
    \    var dec = true\n    for i in 1..<l.count {\n        if l[i] < l[i - 1] {\n\
    \            inc = false\n        }\n        if l[i] > l[i - 1] {\n          \
    \  dec = false\n        }\n    }\n    return inc || dec\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
- exit_code: 0
  program: "\n/// Return True is list elements are monotonically increasing or decreasing.\n\
    /// >>> monotonic([1, 2, 4, 20])\n/// True\n/// >>> monotonic([1, 20, 4, 10])\n\
    /// False\n/// >>> monotonic([4, 1, 0, -10])\n/// True\nfunc monotonic(l: [Int])\
    \ -> Bool {\n    var increasing = true\n    var decreasing = true\n    for i in\
    \ 1..<l.count {\n        if l[i] < l[i - 1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i - 1] {\n            decreasing = false\n   \
    \     }\n    }\n    return increasing || decreasing\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(monotonic(l: [1, 2, 4, 10]) == true)\nassert(monotonic(l:\
    \ [1, 2, 4, 20]) == true)\nassert(monotonic(l: [1, 20, 4, 10]) == false)\nassert(monotonic(l:\
    \ [4, 1, 0, -10]) == true)\nassert(monotonic(l: [4, 1, 1, 0]) == true)\nassert(monotonic(l:\
    \ [1, 2, 3, 2, 5, 60]) == false)\nassert(monotonic(l: [1, 2, 3, 4, 5, 60]) ==\
    \ true)\nassert(monotonic(l: [9, 9, 9, 9]) == true)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659820520
