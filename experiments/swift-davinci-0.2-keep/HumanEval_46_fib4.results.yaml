language: swift
name: HumanEval_46_fib4
results:
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n \
    \   var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n  \
    \  var k = 0\n    var l = 0\n    var m = 0\n    var o = 0\n    var p = 0\n   \
    \ var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var\
    \ v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var aa\
    \ = 0\n    var ab = 0\n    var ac = 0\n    var ad = 0\n    var ae = 0\n    var\
    \ af = 0\n    var ag = 0\n    var ah = 0\n    var ai = 0\n    var aj = 0\n   \
    \ var ak = 0\n    var al = 0\n    var am = 0\n    var an = 0\n    var ao = 0\n\
    \    var ap = 0\n    var aq = 0\n    var ar = 0\n    var as = 0\n    var at =\
    \ 0\n    var au = 0\n    var av = 0\n    var aw = 0\n    var ax = 0\n    var ay\
    \ = 0\n    var az = 0\n    var ba = 0\n    var bb = 0\n    var bc = 0\n    var\
    \ bd = 0\n    var be = 0\n    var bf = 0\n    var bg = 0\n    var bh = 0\n   \
    \ var bi = 0\n    var bj = 0\n    var bk = 0\n    var bl = 0\n    var bm = 0\n\
    \    var bn = 0\n    var bo = 0\n    var bp = 0\n    var bq = 0\n    var br =\
    \ 0\n    var bs = 0\n    var bt = 0\n    var bu = 0\n    var bv = 0\n    var bw\
    \ = 0\n    var bx = 0\n    var by = 0\n    var bz = 0\n    var ca = 0\n    var\
    \ cb = 0\n    var cc = 0\n    var cd = 0\n   \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpnin0wnon.swift:59:9: error: keyword 'as' cannot be used as an identifier\
    \ here\n    var as = 0\n        ^\n/tmp/tmpnin0wnon.swift:59:9: note: if this\
    \ name is unavoidable, use backticks to escape it\n    var as = 0\n        ^~\n\
    \        `as`\n/tmp/tmpnin0wnon.swift:16:9: warning: initialization of variable\
    \ 'a' was never used; consider replacing with assignment to '_' or removing it\n\
    \    var a = 0\n    ~~~~^\n    _\n/tmp/tmpnin0wnon.swift:17:9: warning: initialization\
    \ of variable 'b' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    var b = 0\n    ~~~~^\n    _\n/tmp/tmpnin0wnon.swift:18:9: warning:\
    \ initialization of variable 'c' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var c = 2\n    ~~~~^\n    _\n/tmp/tmpnin0wnon.swift:19:9:\
    \ warning: initialization of variable 'd' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var d = 0\n    ~~~~^\n    _\n/tmp/tmpnin0wnon.swift:20:9:\
    \ warning: initialization of variable 'e' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var e = 0\n    ~~~~^\n    _\n/tmp/tmpnin0wnon.swift:21:9:\
    \ warning: initialization of variable 'f' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var f = 0\n    ~~~~^\n    _\n/tmp/tmpnin0wnon.swift:22:9:\
    \ warning: initialization of variable 'g' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var g = 0\n    ~~~~^\n    _\n/tmp/tmpnin0wnon.swift:23:9:\
    \ warning: initialization of variable 'h' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var h = 0\n    ~~~~^\n    _\n/tmp/tmpnin0wnon.swift:24:9:\
    \ warning: initialization of variable 'i' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var i = 0\n    ~~~~^\n    _\n/tmp/tmpnin0wnon.swift:25:9:\
    \ warning: initialization of variable 'j' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var j = 0\n    ~~~~^\n    _\n/tmp/tmpnin0wnon.swift:26:9:\
    \ warning: initialization of variable 'k' was never used; co"
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 3...n\
    \ {\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n\
    \    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpmvouo3r_/tmpmvouo3r_.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43f6cccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43f69c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43f69c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43f69c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmvouo3r_                        0x000055597c7bb335 <unavailable> + 4917

    5    libc.so.6                          0x00002b43f6eb8460 __libc_start_main +
    245

    6    tmpmvouo3r_                        0x000055597c7bafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 3...n\
    \ {\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n\
    \    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpmvouo3r_/tmpmvouo3r_.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43f6cccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43f69c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43f69c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43f69c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmvouo3r_                        0x000055597c7bb335 <unavailable> + 4917

    5    libc.so.6                          0x00002b43f6eb8460 __libc_start_main +
    245

    6    tmpmvouo3r_                        0x000055597c7bafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 3...n\
    \ {\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n\
    \    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpmvouo3r_/tmpmvouo3r_.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43f6cccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43f69c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43f69c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43f69c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmvouo3r_                        0x000055597c7bb335 <unavailable> + 4917

    5    libc.so.6                          0x00002b43f6eb8460 __libc_start_main +
    245

    6    tmpmvouo3r_                        0x000055597c7bafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n \
    \   for _ in 3...n {\n        e = a + b + c + d\n        a = b\n        b = c\n\
    \        c = d\n        d = e\n    }\n    return e\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpspapj63x/tmpspapj63x.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6855699c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6855390b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6855390988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b685538f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpspapj63x                        0x000055b5c20b4335 <unavailable> + 4917

    5    libc.so.6                          0x00002b6855885460 __libc_start_main +
    245

    6    tmpspapj63x                        0x000055b5c20b3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n \
    \   for _ in 3...n {\n        e = a + b + c + d\n        a = b\n        b = c\n\
    \        c = d\n        d = e\n    }\n    return e\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpspapj63x/tmpspapj63x.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6855699c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6855390b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6855390988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b685538f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpspapj63x                        0x000055b5c20b4335 <unavailable> + 4917

    5    libc.so.6                          0x00002b6855885460 __libc_start_main +
    245

    6    tmpspapj63x                        0x000055b5c20b3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n\
    \    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return\
    \ 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for\
    \ _ in 4...n {\n        d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpcz4kflbm/tmpcz4kflbm.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4a6a45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4a673cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4a673c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4a673b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcz4kflbm                        0x0000560ad469c3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ae4a6c31460 __libc_start_main +
    245

    6    tmpcz4kflbm                        0x0000560ad469bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n \
    \   while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n    \
    \    c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpi088m1r5/tmpi088m1r5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac22b56cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac22b263b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac22b263988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac22b2627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi088m1r5                        0x000055b1c7dd31b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ac22b758460 __libc_start_main +
    245

    6    tmpi088m1r5                        0x000055b1c7dd2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n \
    \   for _ in 4...n {\n        e = a + b + c + d\n        a = b\n        b = c\n\
    \        c = d\n        d = e\n    }\n    return e\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n \
    \   for _ in 3...n {\n        e = a + b + c + d\n        a = b\n        b = c\n\
    \        c = d\n        d = e\n    }\n    return e\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpspapj63x/tmpspapj63x.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6855699c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6855390b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6855390988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b685538f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpspapj63x                        0x000055b5c20b4335 <unavailable> + 4917

    5    libc.so.6                          0x00002b6855885460 __libc_start_main +
    245

    6    tmpspapj63x                        0x000055b5c20b3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n    var b\
    \ = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d = a + b +\
    \ c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmptai5046s/tmptai5046s.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad064b20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad064817b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad064817988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0648167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptai5046s                        0x0000555e03e9d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ad064d0c460 __libc_start_main +
    245

    6    tmptai5046s                        0x0000555e03e9cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n \
    \   for _ in 4...n {\n        e = a + b + c + d\n        a = b\n        b = c\n\
    \        c = d\n        d = e\n    }\n    return e\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824818
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var fib4 = [0, 0, 2, 0]\n    if n <= 3 {\n        return fib4[n]\n    }\n\
    \    for _ in 4...n {\n        fib4.append(fib4[0] + fib4[1] + fib4[2] + fib4[3])\n\
    \        fib4.removeFirst()\n    }\n    return fib4[3]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n \
    \   while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n    \
    \    c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpi088m1r5/tmpi088m1r5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac22b56cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac22b263b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac22b263988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac22b2627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi088m1r5                        0x000055b1c7dd31b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ac22b758460 __libc_start_main +
    245

    6    tmpi088m1r5                        0x000055b1c7dd2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n \
    \   if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n\
    \    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return\
    \ 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c + d\n \
    \           a = b\n            b = c\n            c = d\n            d = e\n \
    \       }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n    var b\
    \ = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d = a + b +\
    \ c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmptai5046s/tmptai5046s.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad064b20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad064817b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad064817988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0648167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptai5046s                        0x0000555e03e9d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ad064d0c460 __libc_start_main +
    245

    6    tmptai5046s                        0x0000555e03e9cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n \
    \   while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n    \
    \    c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpi088m1r5/tmpi088m1r5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac22b56cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac22b263b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac22b263988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac22b2627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi088m1r5                        0x000055b1c7dd31b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ac22b758460 __libc_start_main +
    245

    6    tmpi088m1r5                        0x000055b1c7dd2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n \
    \   while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n    \
    \    c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpi088m1r5/tmpi088m1r5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac22b56cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac22b263b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac22b263988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac22b2627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi088m1r5                        0x000055b1c7dd31b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ac22b758460 __libc_start_main +
    245

    6    tmpi088m1r5                        0x000055b1c7dd2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n    var b\
    \ = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d = a + b +\
    \ c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmptai5046s/tmptai5046s.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad064b20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad064817b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad064817988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0648167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptai5046s                        0x0000555e03e9d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ad064d0c460 __libc_start_main +
    245

    6    tmptai5046s                        0x0000555e03e9cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n \
    \   while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n    \
    \    c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpi088m1r5/tmpi088m1r5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac22b56cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac22b263b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac22b263988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac22b2627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi088m1r5                        0x000055b1c7dd31b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ac22b758460 __libc_start_main +
    245

    6    tmpi088m1r5                        0x000055b1c7dd2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n \
    \   while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n    \
    \    c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpi088m1r5/tmpi088m1r5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac22b56cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac22b263b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac22b263988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac22b2627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi088m1r5                        0x000055b1c7dd31b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ac22b758460 __libc_start_main +
    245

    6    tmpi088m1r5                        0x000055b1c7dd2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n \
    \   for _ in 3...n {\n        e = a + b + c + d\n        a = b\n        b = c\n\
    \        c = d\n        d = e\n    }\n    return e\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpspapj63x/tmpspapj63x.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6855699c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6855390b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6855390988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b685538f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpspapj63x                        0x000055b5c20b4335 <unavailable> + 4917

    5    libc.so.6                          0x00002b6855885460 __libc_start_main +
    245

    6    tmpspapj63x                        0x000055b5c20b3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n\
    \    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return\
    \ 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for\
    \ _ in 4...n {\n        d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpcz4kflbm/tmpcz4kflbm.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4a6a45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4a673cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4a673c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4a673b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcz4kflbm                        0x0000560ad469c3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ae4a6c31460 __libc_start_main +
    245

    6    tmpcz4kflbm                        0x0000560ad469bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 2\n    } else if n == 3 {\n        return 0\n    } else\
    \ {\n        for _ in 4...n {\n            d = a + b + c\n            a = b\n\
    \            b = c\n            c = d\n        }\n        return d\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp_zp0lwuo/tmp_zp0lwuo.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba253b83c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba25387ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba25387a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2538797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_zp0lwuo                        0x000055a66ef793b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ba253d6f460 __libc_start_main +
    245

    6    tmp_zp0lwuo                        0x000055a66ef78fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 3...n\
    \ {\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n\
    \    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpmvouo3r_/tmpmvouo3r_.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43f6cccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43f69c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43f69c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43f69c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmvouo3r_                        0x000055597c7bb335 <unavailable> + 4917

    5    libc.so.6                          0x00002b43f6eb8460 __libc_start_main +
    245

    6    tmpmvouo3r_                        0x000055597c7bafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n    var b\
    \ = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d = a + b +\
    \ c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmptai5046s/tmptai5046s.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad064b20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad064817b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad064817988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0648167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptai5046s                        0x0000555e03e9d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ad064d0c460 __libc_start_main +
    245

    6    tmptai5046s                        0x0000555e03e9cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n \
    \   var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n  \
    \  var k = 0\n    var l = 0\n    var m = 0\n    var o = 0\n    var p = 0\n   \
    \ var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var\
    \ v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var aa\
    \ = 0\n    var ab = 0\n    var ac = 0\n    var ad = 0\n    var ae = 0\n    var\
    \ af = 0\n    var ag = 0\n    var ah = 0\n    var ai = 0\n    var aj = 0\n   \
    \ var ak = 0\n    var al = 0\n    var am = 0\n    var an = 0\n    var ao = 0\n\
    \    var ap = 0\n    var aq = 0\n    var ar = 0\n    var as = 0\n    var at =\
    \ 0\n    var au = 0\n    var av = 0\n    var aw = 0\n    var ax = 0\n    var ay\
    \ = 0\n    var az = 0\n    var ba = 0\n    var bb = 0\n    var bc = 0\n    var\
    \ bd = 0\n    var be = 0\n    var bf = 0\n    var bg = 0\n    var bh = 0\n   \
    \ var bi = 0\n    var bj = 0\n    var bk = 0\n    var bl = 0\n    var bm = 0\n\
    \    var bn = 0\n    var bo = 0\n    var bp = 0\n    var bq = 0\n    var br =\
    \ 0\n    var bs = 0\n    var bt = 0\n    var bu = 0\n    var bv = 0\n    var bw\
    \ = 0\n    var bx = 0\n    var by = 0\n    var bz = 0\n    var ca = 0\n    var\
    \ cb = 0\n    var cc = 0\n    var cd = 0\n   \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpnin0wnon.swift:59:9: error: keyword 'as' cannot be used as an identifier\
    \ here\n    var as = 0\n        ^\n/tmp/tmpnin0wnon.swift:59:9: note: if this\
    \ name is unavoidable, use backticks to escape it\n    var as = 0\n        ^~\n\
    \        `as`\n/tmp/tmpnin0wnon.swift:16:9: warning: initialization of variable\
    \ 'a' was never used; consider replacing with assignment to '_' or removing it\n\
    \    var a = 0\n    ~~~~^\n    _\n/tmp/tmpnin0wnon.swift:17:9: warning: initialization\
    \ of variable 'b' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    var b = 0\n    ~~~~^\n    _\n/tmp/tmpnin0wnon.swift:18:9: warning:\
    \ initialization of variable 'c' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var c = 2\n    ~~~~^\n    _\n/tmp/tmpnin0wnon.swift:19:9:\
    \ warning: initialization of variable 'd' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var d = 0\n    ~~~~^\n    _\n/tmp/tmpnin0wnon.swift:20:9:\
    \ warning: initialization of variable 'e' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var e = 0\n    ~~~~^\n    _\n/tmp/tmpnin0wnon.swift:21:9:\
    \ warning: initialization of variable 'f' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var f = 0\n    ~~~~^\n    _\n/tmp/tmpnin0wnon.swift:22:9:\
    \ warning: initialization of variable 'g' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var g = 0\n    ~~~~^\n    _\n/tmp/tmpnin0wnon.swift:23:9:\
    \ warning: initialization of variable 'h' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var h = 0\n    ~~~~^\n    _\n/tmp/tmpnin0wnon.swift:24:9:\
    \ warning: initialization of variable 'i' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var i = 0\n    ~~~~^\n    _\n/tmp/tmpnin0wnon.swift:25:9:\
    \ warning: initialization of variable 'j' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var j = 0\n    ~~~~^\n    _\n/tmp/tmpnin0wnon.swift:26:9:\
    \ warning: initialization of variable 'k' was never used; co"
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 3...n\
    \ {\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n\
    \    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpmvouo3r_/tmpmvouo3r_.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43f6cccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43f69c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43f69c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43f69c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmvouo3r_                        0x000055597c7bb335 <unavailable> + 4917

    5    libc.so.6                          0x00002b43f6eb8460 __libc_start_main +
    245

    6    tmpmvouo3r_                        0x000055597c7bafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n \
    \   if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n\
    \    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return\
    \ 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c + d\n \
    \           a = b\n            b = c\n            c = d\n            d = e\n \
    \       }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 3...n\
    \ {\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n\
    \    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpmvouo3r_/tmpmvouo3r_.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43f6cccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43f69c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43f69c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43f69c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmvouo3r_                        0x000055597c7bb335 <unavailable> + 4917

    5    libc.so.6                          0x00002b43f6eb8460 __libc_start_main +
    245

    6    tmpmvouo3r_                        0x000055597c7bafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n    var b\
    \ = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d = a + b +\
    \ c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmptai5046s/tmptai5046s.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad064b20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad064817b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad064817988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0648167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptai5046s                        0x0000555e03e9d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ad064d0c460 __libc_start_main +
    245

    6    tmptai5046s                        0x0000555e03e9cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n    var b\
    \ = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d = a + b +\
    \ c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmptai5046s/tmptai5046s.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad064b20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad064817b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad064817988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0648167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptai5046s                        0x0000555e03e9d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ad064d0c460 __libc_start_main +
    245

    6    tmptai5046s                        0x0000555e03e9cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n\
    \    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return\
    \ 0\n    }\n    var n1 = 0\n    var n2 = 0\n    var n3 = 2\n    var n4 = 0\n \
    \   var sum = 0\n    for _ in 4...n {\n        sum = n1 + n2 + n3 + n4\n     \
    \   n1 = n2\n        n2 = n3\n        n3 = n4\n        n4 = sum\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n \
    \   for _ in 3...n {\n        e = a + b + c + d\n        a = b\n        b = c\n\
    \        c = d\n        d = e\n    }\n    return e\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpspapj63x/tmpspapj63x.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6855699c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6855390b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6855390988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b685538f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpspapj63x                        0x000055b5c20b4335 <unavailable> + 4917

    5    libc.so.6                          0x00002b6855885460 __libc_start_main +
    245

    6    tmpspapj63x                        0x000055b5c20b3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n \
    \   while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n    \
    \    c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpi088m1r5/tmpi088m1r5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac22b56cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac22b263b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac22b263988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac22b2627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi088m1r5                        0x000055b1c7dd31b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ac22b758460 __libc_start_main +
    245

    6    tmpi088m1r5                        0x000055b1c7dd2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n    var b\
    \ = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d = a + b +\
    \ c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmptai5046s/tmptai5046s.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad064b20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad064817b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad064817988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0648167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptai5046s                        0x0000555e03e9d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ad064d0c460 __libc_start_main +
    245

    6    tmptai5046s                        0x0000555e03e9cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n\
    \    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return\
    \ 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for\
    \ _ in 4...n {\n        let temp = a + b + c + d\n        a = b\n        b = c\n\
    \        c = d\n        d = temp\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n\
    \    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return\
    \ 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for\
    \ _ in 4...n {\n        d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpcz4kflbm/tmpcz4kflbm.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4a6a45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4a673cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4a673c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4a673b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcz4kflbm                        0x0000560ad469c3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ae4a6c31460 __libc_start_main +
    245

    6    tmpcz4kflbm                        0x0000560ad469bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n \
    \   var i = 3\n    while i <= n {\n        e = a + b + c + d\n        a = b\n\
    \        b = c\n        c = d\n        d = e\n        i += 1\n    }\n    return\
    \ e\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpitxgvblb/tmpitxgvblb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab482fcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab482cc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab482cc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab482cc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpitxgvblb                        0x0000557a204481b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ab4831b6460 __libc_start_main +
    245

    6    tmpitxgvblb                        0x0000557a20447e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var n1 = 0\n    var\
    \ n2 = 0\n    var n3 = 2\n    var n4 = 0\n    var n5 = 0\n    for _ in 4...n {\n\
    \        n5 = n1 + n2 + n3 + n4\n        n1 = n2\n        n2 = n3\n        n3\
    \ = n4\n        n4 = n5\n    }\n    return n5\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n \
    \   while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n    \
    \    c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpi088m1r5/tmpi088m1r5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac22b56cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac22b263b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac22b263988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac22b2627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi088m1r5                        0x000055b1c7dd31b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ac22b758460 __libc_start_main +
    245

    6    tmpi088m1r5                        0x000055b1c7dd2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n\
    \    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return\
    \ 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for\
    \ _ in 4...n {\n        d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpcz4kflbm/tmpcz4kflbm.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4a6a45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4a673cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4a673c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4a673b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcz4kflbm                        0x0000560ad469c3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ae4a6c31460 __libc_start_main +
    245

    6    tmpcz4kflbm                        0x0000560ad469bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 2\n    } else if n == 3 {\n        return 0\n    } else\
    \ {\n        for _ in 4...n {\n            d = a + b + c\n            a = b\n\
    \            b = c\n            c = d\n        }\n        return d\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp_zp0lwuo/tmp_zp0lwuo.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba253b83c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba25387ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba25387a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2538797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_zp0lwuo                        0x000055a66ef793b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ba253d6f460 __libc_start_main +
    245

    6    tmp_zp0lwuo                        0x000055a66ef78fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n \
    \   while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n    \
    \    c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpi088m1r5/tmpi088m1r5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac22b56cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac22b263b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac22b263988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac22b2627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi088m1r5                        0x000055b1c7dd31b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ac22b758460 __libc_start_main +
    245

    6    tmpi088m1r5                        0x000055b1c7dd2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n    var b\
    \ = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d = a + b +\
    \ c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmptai5046s/tmptai5046s.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad064b20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad064817b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad064817988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0648167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptai5046s                        0x0000555e03e9d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ad064d0c460 __libc_start_main +
    245

    6    tmptai5046s                        0x0000555e03e9cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n\
    \    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return\
    \ 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for\
    \ _ in 4...n {\n        d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpcz4kflbm/tmpcz4kflbm.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4a6a45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4a673cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4a673c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4a673b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcz4kflbm                        0x0000560ad469c3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ae4a6c31460 __libc_start_main +
    245

    6    tmpcz4kflbm                        0x0000560ad469bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 3...n\
    \ {\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n\
    \    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpmvouo3r_/tmpmvouo3r_.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43f6cccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43f69c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43f69c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43f69c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmvouo3r_                        0x000055597c7bb335 <unavailable> + 4917

    5    libc.so.6                          0x00002b43f6eb8460 __libc_start_main +
    245

    6    tmpmvouo3r_                        0x000055597c7bafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n \
    \   while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n    \
    \    c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpi088m1r5/tmpi088m1r5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac22b56cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac22b263b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac22b263988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac22b2627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi088m1r5                        0x000055b1c7dd31b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ac22b758460 __libc_start_main +
    245

    6    tmpi088m1r5                        0x000055b1c7dd2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n \
    \   while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n    \
    \    c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpi088m1r5/tmpi088m1r5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac22b56cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac22b263b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac22b263988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac22b2627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi088m1r5                        0x000055b1c7dd31b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ac22b758460 __libc_start_main +
    245

    6    tmpi088m1r5                        0x000055b1c7dd2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n \
    \   while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n    \
    \    c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpi088m1r5/tmpi088m1r5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac22b56cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac22b263b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac22b263988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac22b2627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi088m1r5                        0x000055b1c7dd31b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ac22b758460 __libc_start_main +
    245

    6    tmpi088m1r5                        0x000055b1c7dd2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n    var b\
    \ = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d = a + b +\
    \ c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmptai5046s/tmptai5046s.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad064b20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad064817b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad064817988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0648167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptai5046s                        0x0000555e03e9d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ad064d0c460 __libc_start_main +
    245

    6    tmptai5046s                        0x0000555e03e9cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 3...n\
    \ {\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n\
    \    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpmvouo3r_/tmpmvouo3r_.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43f6cccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43f69c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43f69c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43f69c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmvouo3r_                        0x000055597c7bb335 <unavailable> + 4917

    5    libc.so.6                          0x00002b43f6eb8460 __libc_start_main +
    245

    6    tmpmvouo3r_                        0x000055597c7bafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n \
    \   while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n    \
    \    c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpi088m1r5/tmpi088m1r5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac22b56cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac22b263b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac22b263988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac22b2627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi088m1r5                        0x000055b1c7dd31b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ac22b758460 __libc_start_main +
    245

    6    tmpi088m1r5                        0x000055b1c7dd2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n \
    \   if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n\
    \    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return\
    \ 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c + d\n \
    \           a = b\n            b = c\n            c = d\n            d = e\n \
    \       }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824818
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n \
    \   if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n\
    \    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return\
    \ 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c + d\n \
    \           a = b\n            b = c\n            c = d\n            d = e\n \
    \       }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n \
    \   while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n    \
    \    c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpi088m1r5/tmpi088m1r5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac22b56cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac22b263b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac22b263988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac22b2627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi088m1r5                        0x000055b1c7dd31b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ac22b758460 __libc_start_main +
    245

    6    tmpi088m1r5                        0x000055b1c7dd2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n    var b\
    \ = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d = a + b +\
    \ c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmptai5046s/tmptai5046s.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad064b20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad064817b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad064817988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0648167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptai5046s                        0x0000555e03e9d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ad064d0c460 __libc_start_main +
    245

    6    tmptai5046s                        0x0000555e03e9cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n \
    \   while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n    \
    \    c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpi088m1r5/tmpi088m1r5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac22b56cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac22b263b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac22b263988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac22b2627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi088m1r5                        0x000055b1c7dd31b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ac22b758460 __libc_start_main +
    245

    6    tmpi088m1r5                        0x000055b1c7dd2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 3...n\
    \ {\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n\
    \    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpmvouo3r_/tmpmvouo3r_.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43f6cccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43f69c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43f69c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43f69c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmvouo3r_                        0x000055597c7bb335 <unavailable> + 4917

    5    libc.so.6                          0x00002b43f6eb8460 __libc_start_main +
    245

    6    tmpmvouo3r_                        0x000055597c7bafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n \
    \   while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n    \
    \    c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpi088m1r5/tmpi088m1r5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac22b56cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac22b263b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac22b263988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac22b2627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi088m1r5                        0x000055b1c7dd31b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ac22b758460 __libc_start_main +
    245

    6    tmpi088m1r5                        0x000055b1c7dd2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    if n == 0 {\n\
    \        return a\n    } else if n == 1 {\n        return b\n    } else if n ==\
    \ 2 {\n        return c\n    } else if n == 3 {\n        return d\n    } else\
    \ {\n        for _ in 4...n {\n            a = b\n            b = c\n        \
    \    c = d\n            d = a + b + c + d\n        }\n        return d\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpmcvex0zx/tmpmcvex0zx.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d74014c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d73d0bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d73d0b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d73d0a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmcvex0zx                        0x0000555c244f2335 <unavailable> + 4917

    5    libc.so.6                          0x00002b2d74200460 __libc_start_main +
    245

    6    tmpmcvex0zx                        0x0000555c244f1fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n \
    \   while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n    \
    \    c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpi088m1r5/tmpi088m1r5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac22b56cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac22b263b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac22b263988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac22b2627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi088m1r5                        0x000055b1c7dd31b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ac22b758460 __libc_start_main +
    245

    6    tmpi088m1r5                        0x000055b1c7dd2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 3...n\
    \ {\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n\
    \    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpmvouo3r_/tmpmvouo3r_.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43f6cccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43f69c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43f69c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43f69c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmvouo3r_                        0x000055597c7bb335 <unavailable> + 4917

    5    libc.so.6                          0x00002b43f6eb8460 __libc_start_main +
    245

    6    tmpmvouo3r_                        0x000055597c7bafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var n1 = 0\n    var n2 = 0\n    var n3 = 2\n    var n4 = 0\n    var n5 =\
    \ 0\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return\
    \ 0\n    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n      \
    \  return 0\n    } else {\n        for _ in 4...n {\n            n5 = n1 + n2\
    \ + n3 + n4\n            n1 = n2\n            n2 = n3\n            n3 = n4\n \
    \           n4 = n5\n        }\n        return n5\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n \
    \   while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n    \
    \    c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpi088m1r5/tmpi088m1r5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac22b56cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac22b263b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac22b263988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac22b2627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi088m1r5                        0x000055b1c7dd31b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ac22b758460 __libc_start_main +
    245

    6    tmpi088m1r5                        0x000055b1c7dd2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    if n == 0 {\n\
    \        return a\n    } else if n == 1 {\n        return b\n    } else if n ==\
    \ 2 {\n        return c\n    } else if n == 3 {\n        return d\n    } else\
    \ {\n        for _ in 4...n {\n            a = b\n            b = c\n        \
    \    c = d\n            d = a + b + c + d\n        }\n        return d\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpmcvex0zx/tmpmcvex0zx.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d74014c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d73d0bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d73d0b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d73d0a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmcvex0zx                        0x0000555c244f2335 <unavailable> + 4917

    5    libc.so.6                          0x00002b2d74200460 __libc_start_main +
    245

    6    tmpmcvex0zx                        0x0000555c244f1fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 2\n    } else if n == 3 {\n        return 0\n    } else\
    \ {\n        for _ in 4...n {\n            d = a + b + c\n            a = b\n\
    \            b = c\n            c = d\n        }\n        return d\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp_zp0lwuo/tmp_zp0lwuo.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba253b83c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba25387ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba25387a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2538797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_zp0lwuo                        0x000055a66ef793b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ba253d6f460 __libc_start_main +
    245

    6    tmp_zp0lwuo                        0x000055a66ef78fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n \
    \   while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n    \
    \    c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpi088m1r5/tmpi088m1r5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac22b56cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac22b263b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac22b263988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac22b2627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi088m1r5                        0x000055b1c7dd31b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ac22b758460 __libc_start_main +
    245

    6    tmpi088m1r5                        0x000055b1c7dd2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n    var b\
    \ = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d = a + b +\
    \ c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmptai5046s/tmptai5046s.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad064b20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad064817b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad064817988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0648167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptai5046s                        0x0000555e03e9d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ad064d0c460 __libc_start_main +
    245

    6    tmptai5046s                        0x0000555e03e9cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n \
    \   if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n\
    \    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return\
    \ 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c + d\n \
    \           a = b\n            b = c\n            c = d\n            d = e\n \
    \       }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n \
    \   for _ in 3...n {\n        e = a + b + c + d\n        a = b\n        b = c\n\
    \        c = d\n        d = e\n    }\n    return e\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpspapj63x/tmpspapj63x.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6855699c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6855390b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6855390988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b685538f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpspapj63x                        0x000055b5c20b4335 <unavailable> + 4917

    5    libc.so.6                          0x00002b6855885460 __libc_start_main +
    245

    6    tmpspapj63x                        0x000055b5c20b3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n \
    \   if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n\
    \    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return\
    \ 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c + d\n \
    \           a = b\n            b = c\n            c = d\n            d = e\n \
    \       }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    if n == 0 {\n\
    \        return a\n    } else if n == 1 {\n        return b\n    } else if n ==\
    \ 2 {\n        return c\n    } else if n == 3 {\n        return d\n    } else\
    \ {\n        for _ in 4...n {\n            a = b\n            b = c\n        \
    \    c = d\n            d = a + b + c + d\n        }\n        return d\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpmcvex0zx/tmpmcvex0zx.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d74014c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d73d0bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d73d0b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d73d0a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmcvex0zx                        0x0000555c244f2335 <unavailable> + 4917

    5    libc.so.6                          0x00002b2d74200460 __libc_start_main +
    245

    6    tmpmcvex0zx                        0x0000555c244f1fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 3...n\
    \ {\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n\
    \    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpmvouo3r_/tmpmvouo3r_.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43f6cccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43f69c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43f69c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43f69c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmvouo3r_                        0x000055597c7bb335 <unavailable> + 4917

    5    libc.so.6                          0x00002b43f6eb8460 __libc_start_main +
    245

    6    tmpmvouo3r_                        0x000055597c7bafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n \
    \   while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n    \
    \    c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpi088m1r5/tmpi088m1r5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac22b56cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac22b263b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac22b263988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac22b2627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi088m1r5                        0x000055b1c7dd31b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ac22b758460 __libc_start_main +
    245

    6    tmpi088m1r5                        0x000055b1c7dd2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n\
    \    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return\
    \ 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for\
    \ _ in 4...n {\n        d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpcz4kflbm/tmpcz4kflbm.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4a6a45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4a673cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4a673c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4a673b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcz4kflbm                        0x0000560ad469c3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ae4a6c31460 __libc_start_main +
    245

    6    tmpcz4kflbm                        0x0000560ad469bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 3...n\
    \ {\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n\
    \    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpmvouo3r_/tmpmvouo3r_.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43f6cccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43f69c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43f69c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43f69c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmvouo3r_                        0x000055597c7bb335 <unavailable> + 4917

    5    libc.so.6                          0x00002b43f6eb8460 __libc_start_main +
    245

    6    tmpmvouo3r_                        0x000055597c7bafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n\
    \    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return\
    \ 0\n    }\n    var fib4_n_1 = 0\n    var fib4_n_2 = 0\n    var fib4_n_3 = 2\n\
    \    var fib4_n_4 = 0\n    var fib4_n = 0\n    for _ in 4...n {\n        fib4_n\
    \ = fib4_n_1 + fib4_n_2 + fib4_n_3 + fib4_n_4\n        fib4_n_1 = fib4_n_2\n \
    \       fib4_n_2 = fib4_n_3\n        fib4_n_3 = fib4_n_4\n        fib4_n_4 = fib4_n\n\
    \    }\n    return fib4_n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n    var b\
    \ = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d = a + b +\
    \ c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmptai5046s/tmptai5046s.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad064b20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad064817b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad064817988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0648167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptai5046s                        0x0000555e03e9d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ad064d0c460 __libc_start_main +
    245

    6    tmptai5046s                        0x0000555e03e9cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var fib4 = [0, 0, 2, 0]\n    if n < 4 {\n        return fib4[n]\n    }\n\
    \    for i in 4...n {\n        fib4.append(fib4[i-1] + fib4[i-2] + fib4[i-3] +\
    \ fib4[i-4])\n    }\n    return fib4[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 3...n\
    \ {\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n\
    \    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpmvouo3r_/tmpmvouo3r_.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43f6cccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43f69c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43f69c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43f69c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmvouo3r_                        0x000055597c7bb335 <unavailable> + 4917

    5    libc.so.6                          0x00002b43f6eb8460 __libc_start_main +
    245

    6    tmpmvouo3r_                        0x000055597c7bafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n    var b\
    \ = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d = a + b +\
    \ c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmptai5046s/tmptai5046s.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad064b20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad064817b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad064817988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0648167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptai5046s                        0x0000555e03e9d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ad064d0c460 __libc_start_main +
    245

    6    tmptai5046s                        0x0000555e03e9cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n \
    \   while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n    \
    \    c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpi088m1r5/tmpi088m1r5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac22b56cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac22b263b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac22b263988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac22b2627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi088m1r5                        0x000055b1c7dd31b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ac22b758460 __libc_start_main +
    245

    6    tmpi088m1r5                        0x000055b1c7dd2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n \
    \   if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n\
    \    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return\
    \ 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c + d\n \
    \           a = b\n            b = c\n            c = d\n            d = e\n \
    \       }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 2\n    } else if n == 3 {\n        return 0\n    } else\
    \ {\n        for _ in 4...n {\n            d = a + b + c\n            a = b\n\
    \            b = c\n            c = d\n        }\n        return d\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp_zp0lwuo/tmp_zp0lwuo.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba253b83c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba25387ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba25387a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2538797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_zp0lwuo                        0x000055a66ef793b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ba253d6f460 __libc_start_main +
    245

    6    tmp_zp0lwuo                        0x000055a66ef78fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n \
    \   for _ in 3...n {\n        e = a + b + c + d\n        a = b\n        b = c\n\
    \        c = d\n        d = e\n    }\n    return e\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpspapj63x/tmpspapj63x.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6855699c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6855390b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6855390988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b685538f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpspapj63x                        0x000055b5c20b4335 <unavailable> + 4917

    5    libc.so.6                          0x00002b6855885460 __libc_start_main +
    245

    6    tmpspapj63x                        0x000055b5c20b3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n \
    \   if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n\
    \    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return\
    \ 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c + d\n \
    \           a = b\n            b = c\n            c = d\n            d = e\n \
    \       }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 3...n\
    \ {\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n\
    \    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpmvouo3r_/tmpmvouo3r_.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43f6cccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43f69c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43f69c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43f69c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmvouo3r_                        0x000055597c7bb335 <unavailable> + 4917

    5    libc.so.6                          0x00002b43f6eb8460 __libc_start_main +
    245

    6    tmpmvouo3r_                        0x000055597c7bafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n \
    \   while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n    \
    \    c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpi088m1r5/tmpi088m1r5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac22b56cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac22b263b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac22b263988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac22b2627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi088m1r5                        0x000055b1c7dd31b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ac22b758460 __libc_start_main +
    245

    6    tmpi088m1r5                        0x000055b1c7dd2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n \
    \   while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n    \
    \    c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpi088m1r5/tmpi088m1r5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac22b56cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac22b263b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac22b263988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac22b2627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi088m1r5                        0x000055b1c7dd31b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ac22b758460 __libc_start_main +
    245

    6    tmpi088m1r5                        0x000055b1c7dd2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 2\n    } else if n == 3 {\n        return 0\n    } else\
    \ {\n        for _ in 4...n {\n            d = a + b + c\n            a = b\n\
    \            b = c\n            c = d\n        }\n        return d\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp_zp0lwuo/tmp_zp0lwuo.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba253b83c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba25387ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba25387a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2538797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_zp0lwuo                        0x000055a66ef793b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ba253d6f460 __libc_start_main +
    245

    6    tmp_zp0lwuo                        0x000055a66ef78fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n \
    \   while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n    \
    \    c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpi088m1r5/tmpi088m1r5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac22b56cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac22b263b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac22b263988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac22b2627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi088m1r5                        0x000055b1c7dd31b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ac22b758460 __libc_start_main +
    245

    6    tmpi088m1r5                        0x000055b1c7dd2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n \
    \   if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n\
    \    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return\
    \ 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c + d\n \
    \           a = b\n            b = c\n            c = d\n            d = e\n \
    \       }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n \
    \   while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n    \
    \    c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpi088m1r5/tmpi088m1r5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac22b56cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac22b263b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac22b263988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac22b2627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi088m1r5                        0x000055b1c7dd31b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ac22b758460 __libc_start_main +
    245

    6    tmpi088m1r5                        0x000055b1c7dd2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n \
    \   if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n\
    \    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return\
    \ 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c + d\n \
    \           a = b\n            b = c\n            c = d\n            d = e\n \
    \       }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n \
    \   while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n    \
    \    c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpi088m1r5/tmpi088m1r5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac22b56cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac22b263b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac22b263988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac22b2627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi088m1r5                        0x000055b1c7dd31b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ac22b758460 __libc_start_main +
    245

    6    tmpi088m1r5                        0x000055b1c7dd2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n \
    \   while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n    \
    \    c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpi088m1r5/tmpi088m1r5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac22b56cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac22b263b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac22b263988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac22b2627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi088m1r5                        0x000055b1c7dd31b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ac22b758460 __libc_start_main +
    245

    6    tmpi088m1r5                        0x000055b1c7dd2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 2\n    } else if n == 3 {\n        return 0\n    } else\
    \ {\n        for _ in 4...n {\n            d = a + b + c\n            a = b\n\
    \            b = c\n            c = d\n        }\n        return d\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp_zp0lwuo/tmp_zp0lwuo.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba253b83c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba25387ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba25387a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2538797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_zp0lwuo                        0x000055a66ef793b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ba253d6f460 __libc_start_main +
    245

    6    tmp_zp0lwuo                        0x000055a66ef78fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n \
    \   while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n    \
    \    c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpi088m1r5/tmpi088m1r5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac22b56cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac22b263b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac22b263988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac22b2627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi088m1r5                        0x000055b1c7dd31b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ac22b758460 __libc_start_main +
    245

    6    tmpi088m1r5                        0x000055b1c7dd2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n\
    \    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return\
    \ 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for\
    \ _ in 4...n {\n        d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpcz4kflbm/tmpcz4kflbm.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4a6a45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4a673cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4a673c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4a673b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcz4kflbm                        0x0000560ad469c3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ae4a6c31460 __libc_start_main +
    245

    6    tmpcz4kflbm                        0x0000560ad469bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n \
    \   for _ in 3...n {\n        e = a + b + c + d\n        a = b\n        b = c\n\
    \        c = d\n        d = e\n    }\n    return e\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpspapj63x/tmpspapj63x.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6855699c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6855390b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6855390988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b685538f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpspapj63x                        0x000055b5c20b4335 <unavailable> + 4917

    5    libc.so.6                          0x00002b6855885460 __libc_start_main +
    245

    6    tmpspapj63x                        0x000055b5c20b3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n \
    \   while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n    \
    \    c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpi088m1r5/tmpi088m1r5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac22b56cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac22b263b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac22b263988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac22b2627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi088m1r5                        0x000055b1c7dd31b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ac22b758460 __libc_start_main +
    245

    6    tmpi088m1r5                        0x000055b1c7dd2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n \
    \   while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n    \
    \    c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpi088m1r5/tmpi088m1r5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac22b56cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac22b263b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac22b263988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac22b2627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi088m1r5                        0x000055b1c7dd31b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ac22b758460 __libc_start_main +
    245

    6    tmpi088m1r5                        0x000055b1c7dd2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 2\n    } else if n == 3 {\n        return 0\n    } else\
    \ {\n        for _ in 4...n {\n            d = a + b + c\n            a = b\n\
    \            b = c\n            c = d\n        }\n        return d\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp_zp0lwuo/tmp_zp0lwuo.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba253b83c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba25387ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba25387a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2538797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_zp0lwuo                        0x000055a66ef793b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ba253d6f460 __libc_start_main +
    245

    6    tmp_zp0lwuo                        0x000055a66ef78fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n    var b\
    \ = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d = a + b +\
    \ c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmptai5046s/tmptai5046s.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad064b20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad064817b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad064817988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0648167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptai5046s                        0x0000555e03e9d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ad064d0c460 __libc_start_main +
    245

    6    tmptai5046s                        0x0000555e03e9cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n \
    \   while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n    \
    \    c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpi088m1r5/tmpi088m1r5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac22b56cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac22b263b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac22b263988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac22b2627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi088m1r5                        0x000055b1c7dd31b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ac22b758460 __libc_start_main +
    245

    6    tmpi088m1r5                        0x000055b1c7dd2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n \
    \   if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n\
    \    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return\
    \ 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c + d\n \
    \           a = b\n            b = c\n            c = d\n            d = e\n \
    \       }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 3...n\
    \ {\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n\
    \    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpmvouo3r_/tmpmvouo3r_.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43f6cccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43f69c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43f69c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43f69c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmvouo3r_                        0x000055597c7bb335 <unavailable> + 4917

    5    libc.so.6                          0x00002b43f6eb8460 __libc_start_main +
    245

    6    tmpmvouo3r_                        0x000055597c7bafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n \
    \   if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n\
    \    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return\
    \ 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c + d\n \
    \           a = b\n            b = c\n            c = d\n            d = e\n \
    \       }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824818
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n \
    \   if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n\
    \    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return\
    \ 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c + d\n \
    \           a = b\n            b = c\n            c = d\n            d = e\n \
    \       }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n \
    \   while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n    \
    \    c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpi088m1r5/tmpi088m1r5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac22b56cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac22b263b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac22b263988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac22b2627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi088m1r5                        0x000055b1c7dd31b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ac22b758460 __libc_start_main +
    245

    6    tmpi088m1r5                        0x000055b1c7dd2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n\
    \    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return\
    \ 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for\
    \ _ in 4...n {\n        d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpcz4kflbm/tmpcz4kflbm.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4a6a45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4a673cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4a673c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4a673b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcz4kflbm                        0x0000560ad469c3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ae4a6c31460 __libc_start_main +
    245

    6    tmpcz4kflbm                        0x0000560ad469bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n\
    \    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return\
    \ 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for\
    \ _ in 4...n {\n        d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmprxx2odts/tmprxx2odts.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac882bfdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac8828f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac8828f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac8828f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprxx2odts                        0x00005562402143b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ac882de9460 __libc_start_main +
    245

    6    tmprxx2odts                        0x0000556240213fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 3...n\
    \ {\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n\
    \    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpmvouo3r_/tmpmvouo3r_.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43f6cccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43f69c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43f69c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43f69c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmvouo3r_                        0x000055597c7bb335 <unavailable> + 4917

    5    libc.so.6                          0x00002b43f6eb8460 __libc_start_main +
    245

    6    tmpmvouo3r_                        0x000055597c7bafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpe9cf1apg/tmpe9cf1apg.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a76847c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a7653eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a7653e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a7653d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe9cf1apg                        0x000055b2af5af1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b5a76a33460 __libc_start_main +
    245

    6    tmpe9cf1apg                        0x000055b2af5aee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n\
    \    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return\
    \ 0\n    }\n    var n1 = 0\n    var n2 = 0\n    var n3 = 2\n    var n4 = 0\n \
    \   var result = 0\n    for _ in 4...n {\n        result = n1 + n2 + n3 + n4\n\
    \        n1 = n2\n        n2 = n3\n        n3 = n4\n        n4 = result\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824818
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n \
    \   if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n\
    \    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return\
    \ 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c + d\n \
    \           a = b\n            b = c\n            c = d\n            d = e\n \
    \       }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824818
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n \
    \   if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n\
    \    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return\
    \ 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c + d\n \
    \           a = b\n            b = c\n            c = d\n            d = e\n \
    \       }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n \
    \   while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n    \
    \    c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpi088m1r5/tmpi088m1r5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac22b56cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac22b263b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac22b263988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac22b2627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi088m1r5                        0x000055b1c7dd31b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ac22b758460 __libc_start_main +
    245

    6    tmpi088m1r5                        0x000055b1c7dd2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n    var b\
    \ = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d = a + b +\
    \ c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmptai5046s/tmptai5046s.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad064b20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad064817b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad064817988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0648167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptai5046s                        0x0000555e03e9d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ad064d0c460 __libc_start_main +
    245

    6    tmptai5046s                        0x0000555e03e9cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n\
    \    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return\
    \ 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for\
    \ _ in 4...n {\n        d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpcz4kflbm/tmpcz4kflbm.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4a6a45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4a673cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4a673c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4a673b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcz4kflbm                        0x0000560ad469c3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ae4a6c31460 __libc_start_main +
    245

    6    tmpcz4kflbm                        0x0000560ad469bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n \
    \   while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n    \
    \    c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpi088m1r5/tmpi088m1r5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac22b56cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac22b263b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac22b263988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac22b2627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi088m1r5                        0x000055b1c7dd31b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ac22b758460 __libc_start_main +
    245

    6    tmpi088m1r5                        0x000055b1c7dd2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 3...n\
    \ {\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n\
    \    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpmvouo3r_/tmpmvouo3r_.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43f6cccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43f69c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43f69c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43f69c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmvouo3r_                        0x000055597c7bb335 <unavailable> + 4917

    5    libc.so.6                          0x00002b43f6eb8460 __libc_start_main +
    245

    6    tmpmvouo3r_                        0x000055597c7bafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n    var b\
    \ = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d = a + b +\
    \ c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmptai5046s/tmptai5046s.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad064b20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad064817b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad064817988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0648167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptai5046s                        0x0000555e03e9d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ad064d0c460 __libc_start_main +
    245

    6    tmptai5046s                        0x0000555e03e9cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpe9cf1apg/tmpe9cf1apg.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a76847c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a7653eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a7653e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a7653d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe9cf1apg                        0x000055b2af5af1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b5a76a33460 __libc_start_main +
    245

    6    tmpe9cf1apg                        0x000055b2af5aee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n < 3 {\n        return n\n    }\n    var a = 0\n    var b = 0\n    var\
    \ c = 2\n    var d = 0\n    for _ in 3...n {\n        d = a + b + c\n        a\
    \ = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpmaff9irk/tmpmaff9irk.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6c26bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6c23b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6c23b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6c23b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmaff9irk                        0x0000558033e5e335 <unavailable> + 4917

    5    libc.so.6                          0x00002ae6c28a6460 __libc_start_main +
    245

    6    tmpmaff9irk                        0x0000558033e5dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n \
    \   while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n    \
    \    c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpi088m1r5/tmpi088m1r5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac22b56cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac22b263b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac22b263988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac22b2627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi088m1r5                        0x000055b1c7dd31b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ac22b758460 __libc_start_main +
    245

    6    tmpi088m1r5                        0x000055b1c7dd2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n \
    \   while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n    \
    \    c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpi088m1r5/tmpi088m1r5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac22b56cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac22b263b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac22b263988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac22b2627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi088m1r5                        0x000055b1c7dd31b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ac22b758460 __libc_start_main +
    245

    6    tmpi088m1r5                        0x000055b1c7dd2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n\
    \    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return\
    \ 0\n    } else {\n        var a = 0\n        var b = 0\n        var c = 2\n \
    \       var d = 0\n        var i = 4\n        while i <= n {\n            let\
    \ temp = a + b + c + d\n            a = b\n            b = c\n            c =\
    \ d\n            d = temp\n            i += 1\n        }\n        return a + b\
    \ + c + d\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpszc7xlat/tmpszc7xlat.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8beeb27c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8bee81eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8bee81e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8bee81d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpszc7xlat                        0x000055619f0f11b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b8beed13460 __libc_start_main +
    245

    6    tmpszc7xlat                        0x000055619f0f0e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n \
    \   while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n    \
    \    c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpi088m1r5/tmpi088m1r5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac22b56cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac22b263b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac22b263988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac22b2627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi088m1r5                        0x000055b1c7dd31b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ac22b758460 __libc_start_main +
    245

    6    tmpi088m1r5                        0x000055b1c7dd2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n < 4 {\n        return n\n    }\n    var a = 0\n    var b = 0\n    var\
    \ c = 2\n    var d = 0\n    for _ in 4...n {\n        d = a + b + c\n        a\
    \ = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpym4zm_tq/tmpym4zm_tq.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ca50d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ca4dc8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1ca4dc8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1ca4dc77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpym4zm_tq                        0x000055738f29f3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b1ca52bd460 __libc_start_main +
    245

    6    tmpym4zm_tq                        0x000055738f29efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n\
    \    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return\
    \ 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for\
    \ _ in 4...n {\n        d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpcz4kflbm/tmpcz4kflbm.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4a6a45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4a673cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4a673c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4a673b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcz4kflbm                        0x0000560ad469c3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ae4a6c31460 __libc_start_main +
    245

    6    tmpcz4kflbm                        0x0000560ad469bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n \
    \   if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n\
    \    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return\
    \ 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c + d\n \
    \           a = b\n            b = c\n            c = d\n            d = e\n \
    \       }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n \
    \   while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n    \
    \    c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpi088m1r5/tmpi088m1r5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac22b56cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac22b263b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac22b263988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac22b2627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi088m1r5                        0x000055b1c7dd31b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ac22b758460 __libc_start_main +
    245

    6    tmpi088m1r5                        0x000055b1c7dd2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 0..<n\
    \ {\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n\
    \    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp3mej5hh9/tmp3mej5hh9.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca213aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca210a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca210a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca210a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3mej5hh9                        0x000055d812f2b335 <unavailable> + 4917

    5    libc.so.6                          0x00002aca2159a460 __libc_start_main +
    245

    6    tmp3mej5hh9                        0x000055d812f2afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: 1
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n \
    \   var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n  \
    \  var k = 0\n    var l = 0\n    var m = 0\n    var o = 0\n    var p = 0\n   \
    \ var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var\
    \ v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var aa\
    \ = 0\n    var ab = 0\n    var ac = 0\n    var ad = 0\n    var ae = 0\n    var\
    \ af = 0\n    var ag = 0\n    var ah = 0\n    var ai = 0\n    var aj = 0\n   \
    \ var ak = 0\n    var al = 0\n    var am = 0\n    var an = 0\n    var ao = 0\n\
    \    var ap = 0\n    var aq = 0\n    var ar = 0\n    var as = 0\n    var at =\
    \ 0\n    var au = 0\n    var av = 0\n    var aw = 0\n    var ax = 0\n    var ay\
    \ = 0\n    var az = 0\n    var ba = 0\n    var bb = 0\n    var bc = 0\n    var\
    \ bd = 0\n    var be = 0\n    var bf = 0\n    var bg = 0\n    var bh = 0\n   \
    \ var bi = 0\n    var bj = 0\n    var bk = 0\n    var bl = 0\n    var bm = 0\n\
    \    var bn = 0\n    var bo = 0\n    var bp = 0\n    var bq = 0\n    var br =\
    \ 0\n    var bs = 0\n    var bt = 0\n    var bu = 0\n    var bv = 0\n    var bw\
    \ = 0\n    var bx = 0\n    var by = 0\n    var bz = 0\n    var ca = 0\n    var\
    \ cb = 0\n    var cc = 0\n    var cd = 0\n   \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: SyntaxError
  stderr: "/tmp/tmpnin0wnon.swift:59:9: error: keyword 'as' cannot be used as an identifier\
    \ here\n    var as = 0\n        ^\n/tmp/tmpnin0wnon.swift:59:9: note: if this\
    \ name is unavoidable, use backticks to escape it\n    var as = 0\n        ^~\n\
    \        `as`\n/tmp/tmpnin0wnon.swift:16:9: warning: initialization of variable\
    \ 'a' was never used; consider replacing with assignment to '_' or removing it\n\
    \    var a = 0\n    ~~~~^\n    _\n/tmp/tmpnin0wnon.swift:17:9: warning: initialization\
    \ of variable 'b' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    var b = 0\n    ~~~~^\n    _\n/tmp/tmpnin0wnon.swift:18:9: warning:\
    \ initialization of variable 'c' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var c = 2\n    ~~~~^\n    _\n/tmp/tmpnin0wnon.swift:19:9:\
    \ warning: initialization of variable 'd' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var d = 0\n    ~~~~^\n    _\n/tmp/tmpnin0wnon.swift:20:9:\
    \ warning: initialization of variable 'e' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var e = 0\n    ~~~~^\n    _\n/tmp/tmpnin0wnon.swift:21:9:\
    \ warning: initialization of variable 'f' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var f = 0\n    ~~~~^\n    _\n/tmp/tmpnin0wnon.swift:22:9:\
    \ warning: initialization of variable 'g' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var g = 0\n    ~~~~^\n    _\n/tmp/tmpnin0wnon.swift:23:9:\
    \ warning: initialization of variable 'h' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var h = 0\n    ~~~~^\n    _\n/tmp/tmpnin0wnon.swift:24:9:\
    \ warning: initialization of variable 'i' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var i = 0\n    ~~~~^\n    _\n/tmp/tmpnin0wnon.swift:25:9:\
    \ warning: initialization of variable 'j' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var j = 0\n    ~~~~^\n    _\n/tmp/tmpnin0wnon.swift:26:9:\
    \ warning: initialization of variable 'k' was never used; co"
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 3...n\
    \ {\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n\
    \    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpmvouo3r_/tmpmvouo3r_.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43f6cccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43f69c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43f69c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43f69c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmvouo3r_                        0x000055597c7bb335 <unavailable> + 4917

    5    libc.so.6                          0x00002b43f6eb8460 __libc_start_main +
    245

    6    tmpmvouo3r_                        0x000055597c7bafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n\
    \    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return\
    \ 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for\
    \ _ in 4...n {\n        d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpcz4kflbm/tmpcz4kflbm.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4a6a45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4a673cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4a673c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4a673b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcz4kflbm                        0x0000560ad469c3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ae4a6c31460 __libc_start_main +
    245

    6    tmpcz4kflbm                        0x0000560ad469bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n    var b\
    \ = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d = a + b +\
    \ c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmptai5046s/tmptai5046s.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad064b20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad064817b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad064817988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0648167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptai5046s                        0x0000555e03e9d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ad064d0c460 __libc_start_main +
    245

    6    tmptai5046s                        0x0000555e03e9cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n\
    \    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return\
    \ 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for\
    \ _ in 4...n {\n        d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpcz4kflbm/tmpcz4kflbm.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4a6a45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4a673cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4a673c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4a673b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcz4kflbm                        0x0000560ad469c3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ae4a6c31460 __libc_start_main +
    245

    6    tmpcz4kflbm                        0x0000560ad469bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n \
    \   for _ in 3...n {\n        e = a + b + c + d\n        a = b\n        b = c\n\
    \        c = d\n        d = e\n    }\n    return e\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpspapj63x/tmpspapj63x.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6855699c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6855390b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6855390988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b685538f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpspapj63x                        0x000055b5c20b4335 <unavailable> + 4917

    5    libc.so.6                          0x00002b6855885460 __libc_start_main +
    245

    6    tmpspapj63x                        0x000055b5c20b3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n \
    \   while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n    \
    \    c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpi088m1r5/tmpi088m1r5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac22b56cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac22b263b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac22b263988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac22b2627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi088m1r5                        0x000055b1c7dd31b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ac22b758460 __libc_start_main +
    245

    6    tmpi088m1r5                        0x000055b1c7dd2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n\
    \    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return\
    \ 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for\
    \ _ in 4...n {\n        d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpcz4kflbm/tmpcz4kflbm.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4a6a45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4a673cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4a673c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4a673b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcz4kflbm                        0x0000560ad469c3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ae4a6c31460 __libc_start_main +
    245

    6    tmpcz4kflbm                        0x0000560ad469bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n\
    \    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return\
    \ 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for\
    \ _ in 4...n {\n        d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpcz4kflbm/tmpcz4kflbm.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4a6a45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4a673cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4a673c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4a673b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcz4kflbm                        0x0000560ad469c3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ae4a6c31460 __libc_start_main +
    245

    6    tmpcz4kflbm                        0x0000560ad469bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 3...n\
    \ {\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n\
    \    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpmvouo3r_/tmpmvouo3r_.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43f6cccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43f69c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43f69c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43f69c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmvouo3r_                        0x000055597c7bb335 <unavailable> + 4917

    5    libc.so.6                          0x00002b43f6eb8460 __libc_start_main +
    245

    6    tmpmvouo3r_                        0x000055597c7bafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 3...n\
    \ {\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n\
    \    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpmvouo3r_/tmpmvouo3r_.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43f6cccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43f69c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43f69c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43f69c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmvouo3r_                        0x000055597c7bb335 <unavailable> + 4917

    5    libc.so.6                          0x00002b43f6eb8460 __libc_start_main +
    245

    6    tmpmvouo3r_                        0x000055597c7bafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n    var b\
    \ = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d = a + b +\
    \ c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmptai5046s/tmptai5046s.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad064b20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad064817b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad064817988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0648167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptai5046s                        0x0000555e03e9d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ad064d0c460 __libc_start_main +
    245

    6    tmptai5046s                        0x0000555e03e9cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n \
    \   if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n\
    \    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return\
    \ 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c + d\n \
    \           a = b\n            b = c\n            c = d\n            d = e\n \
    \       }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n \
    \   while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n    \
    \    c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpi088m1r5/tmpi088m1r5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac22b56cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac22b263b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac22b263988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac22b2627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi088m1r5                        0x000055b1c7dd31b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ac22b758460 __libc_start_main +
    245

    6    tmpi088m1r5                        0x000055b1c7dd2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n    var b\
    \ = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d = a + b +\
    \ c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmptai5046s/tmptai5046s.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad064b20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad064817b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad064817988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0648167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptai5046s                        0x0000555e03e9d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ad064d0c460 __libc_start_main +
    245

    6    tmptai5046s                        0x0000555e03e9cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 2\n \
    \   while i < n {\n        d = a + b + c\n        a = b\n        b = c\n     \
    \   c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmparytq8ej/tmparytq8ej.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b9295ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b92655b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b92655988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b926547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmparytq8ej                        0x0000559770f731b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b6b92b4a460 __libc_start_main +
    245

    6    tmparytq8ej                        0x0000559770f72e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n == 0 {\n        return 0\n    }\n    var a = 0\n    var b = 0\n    var\
    \ c = 2\n    var d = 0\n    for _ in 3...n {\n        d = a + b + c\n        a\
    \ = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp3ygf0aul/tmp3ygf0aul.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55b9226c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55b8f1db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55b8f1d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55b8f1c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3ygf0aul                        0x000056540ba91335 <unavailable> + 4917

    5    libc.so.6                          0x00002b55b9412460 __libc_start_main +
    245

    6    tmp3ygf0aul                        0x000056540ba90fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n \
    \   for _ in 3...n {\n        e = a + b + c + d\n        a = b\n        b = c\n\
    \        c = d\n        d = e\n    }\n    return e\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpspapj63x/tmpspapj63x.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6855699c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6855390b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6855390988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b685538f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpspapj63x                        0x000055b5c20b4335 <unavailable> + 4917

    5    libc.so.6                          0x00002b6855885460 __libc_start_main +
    245

    6    tmpspapj63x                        0x000055b5c20b3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n    var b\
    \ = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d = a + b +\
    \ c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmptai5046s/tmptai5046s.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad064b20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad064817b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad064817988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0648167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptai5046s                        0x0000555e03e9d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ad064d0c460 __libc_start_main +
    245

    6    tmptai5046s                        0x0000555e03e9cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n\
    \    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return\
    \ 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for\
    \ _ in 4...n {\n        d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpcz4kflbm/tmpcz4kflbm.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4a6a45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4a673cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4a673c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4a673b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcz4kflbm                        0x0000560ad469c3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ae4a6c31460 __libc_start_main +
    245

    6    tmpcz4kflbm                        0x0000560ad469bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n\
    \    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return\
    \ 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for\
    \ _ in 4...n {\n        d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpcz4kflbm/tmpcz4kflbm.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4a6a45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4a673cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4a673c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4a673b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcz4kflbm                        0x0000560ad469c3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ae4a6c31460 __libc_start_main +
    245

    6    tmpcz4kflbm                        0x0000560ad469bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n \
    \   while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n    \
    \    c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpi088m1r5/tmpi088m1r5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac22b56cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac22b263b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac22b263988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac22b2627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi088m1r5                        0x000055b1c7dd31b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ac22b758460 __libc_start_main +
    245

    6    tmpi088m1r5                        0x000055b1c7dd2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 3...n\
    \ {\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n\
    \    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpmvouo3r_/tmpmvouo3r_.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43f6cccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43f69c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43f69c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43f69c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmvouo3r_                        0x000055597c7bb335 <unavailable> + 4917

    5    libc.so.6                          0x00002b43f6eb8460 __libc_start_main +
    245

    6    tmpmvouo3r_                        0x000055597c7bafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 3...n\
    \ {\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n\
    \    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpmvouo3r_/tmpmvouo3r_.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43f6cccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43f69c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43f69c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43f69c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmvouo3r_                        0x000055597c7bb335 <unavailable> + 4917

    5    libc.so.6                          0x00002b43f6eb8460 __libc_start_main +
    245

    6    tmpmvouo3r_                        0x000055597c7bafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 3...n\
    \ {\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n\
    \    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpmvouo3r_/tmpmvouo3r_.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43f6cccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43f69c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43f69c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43f69c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmvouo3r_                        0x000055597c7bb335 <unavailable> + 4917

    5    libc.so.6                          0x00002b43f6eb8460 __libc_start_main +
    245

    6    tmpmvouo3r_                        0x000055597c7bafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n \
    \   while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n    \
    \    c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpi088m1r5/tmpi088m1r5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac22b56cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac22b263b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac22b263988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac22b2627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi088m1r5                        0x000055b1c7dd31b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ac22b758460 __libc_start_main +
    245

    6    tmpi088m1r5                        0x000055b1c7dd2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    if n == 0 {\n\
    \        return 0\n    } else if n == 1 {\n        return 0\n    } else if n ==\
    \ 2 {\n        return 2\n    } else if n == 3 {\n        return 0\n    } else\
    \ {\n        for _ in 4...n {\n            d = a + b + c\n            a = b\n\
    \            b = c\n            c = d\n        }\n        return d\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmp_zp0lwuo/tmp_zp0lwuo.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba253b83c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba25387ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba25387a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2538797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_zp0lwuo                        0x000055a66ef793b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ba253d6f460 __libc_start_main +
    245

    6    tmp_zp0lwuo                        0x000055a66ef78fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n\
    \    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return\
    \ 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for\
    \ _ in 4...n {\n        d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpcz4kflbm/tmpcz4kflbm.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4a6a45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4a673cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4a673c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4a673b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcz4kflbm                        0x0000560ad469c3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ae4a6c31460 __libc_start_main +
    245

    6    tmpcz4kflbm                        0x0000560ad469bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n < 4 {\n        return n\n    }\n    var a = 0\n    var b = 0\n    var\
    \ c = 2\n    var d = 0\n    for _ in 4...n {\n        d = a + b + c\n        a\
    \ = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpym4zm_tq/tmpym4zm_tq.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ca50d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ca4dc8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1ca4dc8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1ca4dc77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpym4zm_tq                        0x000055738f29f3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002b1ca52bd460 __libc_start_main +
    245

    6    tmpym4zm_tq                        0x000055738f29efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpe9cf1apg/tmpe9cf1apg.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a76847c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a7653eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a7653e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a7653d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe9cf1apg                        0x000055b2af5af1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b5a76a33460 __libc_start_main +
    245

    6    tmpe9cf1apg                        0x000055b2af5aee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n \
    \   while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n    \
    \    c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpi088m1r5/tmpi088m1r5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac22b56cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac22b263b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac22b263988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac22b2627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi088m1r5                        0x000055b1c7dd31b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ac22b758460 __libc_start_main +
    245

    6    tmpi088m1r5                        0x000055b1c7dd2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n\
    \    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return\
    \ 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for\
    \ _ in 4...n {\n        d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpcz4kflbm/tmpcz4kflbm.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4a6a45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4a673cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4a673c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4a673b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcz4kflbm                        0x0000560ad469c3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ae4a6c31460 __libc_start_main +
    245

    6    tmpcz4kflbm                        0x0000560ad469bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpe9cf1apg/tmpe9cf1apg.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a76847c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a7653eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a7653e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a7653d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe9cf1apg                        0x000055b2af5af1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b5a76a33460 __libc_start_main +
    245

    6    tmpe9cf1apg                        0x000055b2af5aee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n \
    \   if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n\
    \    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return\
    \ 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c + d\n \
    \           a = b\n            b = c\n            c = d\n            d = e\n \
    \       }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n \
    \   for _ in 3...n {\n        e = a + b + c + d\n        a = b\n        b = c\n\
    \        c = d\n        d = e\n    }\n    return e\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpspapj63x/tmpspapj63x.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6855699c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6855390b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6855390988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b685538f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpspapj63x                        0x000055b5c20b4335 <unavailable> + 4917

    5    libc.so.6                          0x00002b6855885460 __libc_start_main +
    245

    6    tmpspapj63x                        0x000055b5c20b3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n \
    \   var i = 3\n    while i <= n {\n        e = a + b + c + d\n        a = b\n\
    \        b = c\n        c = d\n        d = e\n        i += 1\n    }\n    return\
    \ e\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n:\
    \ 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpitxgvblb/tmpitxgvblb.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab482fcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab482cc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab482cc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab482cc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpitxgvblb                        0x0000557a204481b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ab4831b6460 __libc_start_main +
    245

    6    tmpitxgvblb                        0x0000557a20447e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n    var b\
    \ = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d = a + b +\
    \ c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmptai5046s/tmptai5046s.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad064b20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad064817b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad064817988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0648167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptai5046s                        0x0000555e03e9d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ad064d0c460 __libc_start_main +
    245

    6    tmptai5046s                        0x0000555e03e9cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 3...n\
    \ {\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n\
    \    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpmvouo3r_/tmpmvouo3r_.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43f6cccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43f69c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43f69c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43f69c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmvouo3r_                        0x000055597c7bb335 <unavailable> + 4917

    5    libc.so.6                          0x00002b43f6eb8460 __libc_start_main +
    245

    6    tmpmvouo3r_                        0x000055597c7bafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n \
    \   while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n    \
    \    c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpi088m1r5/tmpi088m1r5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac22b56cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac22b263b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac22b263988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac22b2627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi088m1r5                        0x000055b1c7dd31b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ac22b758460 __libc_start_main +
    245

    6    tmpi088m1r5                        0x000055b1c7dd2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n\
    \    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return\
    \ 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for\
    \ _ in 4...n {\n        d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpcz4kflbm/tmpcz4kflbm.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4a6a45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4a673cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4a673c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4a673b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcz4kflbm                        0x0000560ad469c3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ae4a6c31460 __libc_start_main +
    245

    6    tmpcz4kflbm                        0x0000560ad469bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n\
    \    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return\
    \ 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for\
    \ _ in 4...n {\n        d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpcz4kflbm/tmpcz4kflbm.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4a6a45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4a673cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4a673c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4a673b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcz4kflbm                        0x0000560ad469c3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ae4a6c31460 __libc_start_main +
    245

    6    tmpcz4kflbm                        0x0000560ad469bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n \
    \   if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n\
    \    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return\
    \ 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c + d\n \
    \           a = b\n            b = c\n            c = d\n            d = e\n \
    \       }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n\
    \    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return\
    \ 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for\
    \ _ in 4...n {\n        d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpcz4kflbm/tmpcz4kflbm.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4a6a45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4a673cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4a673c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4a673b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcz4kflbm                        0x0000560ad469c3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ae4a6c31460 __libc_start_main +
    245

    6    tmpcz4kflbm                        0x0000560ad469bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n \
    \   for _ in 3...n {\n        e = a + b + c + d\n        a = b\n        b = c\n\
    \        c = d\n        d = e\n    }\n    return e\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpspapj63x/tmpspapj63x.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6855699c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6855390b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6855390988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b685538f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpspapj63x                        0x000055b5c20b4335 <unavailable> + 4917

    5    libc.so.6                          0x00002b6855885460 __libc_start_main +
    245

    6    tmpspapj63x                        0x000055b5c20b3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n \
    \   if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n\
    \    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return\
    \ 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c + d\n \
    \           a = b\n            b = c\n            c = d\n            d = e\n \
    \       }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n    var b\
    \ = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d = a + b +\
    \ c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmptai5046s/tmptai5046s.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad064b20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad064817b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad064817988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0648167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptai5046s                        0x0000555e03e9d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ad064d0c460 __libc_start_main +
    245

    6    tmptai5046s                        0x0000555e03e9cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n \
    \   if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n\
    \    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return\
    \ 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c + d\n \
    \           a = b\n            b = c\n            c = d\n            d = e\n \
    \       }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n \
    \   while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n    \
    \    c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpi088m1r5/tmpi088m1r5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac22b56cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac22b263b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac22b263988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac22b2627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi088m1r5                        0x000055b1c7dd31b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ac22b758460 __libc_start_main +
    245

    6    tmpi088m1r5                        0x000055b1c7dd2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n    var b\
    \ = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d = a + b +\
    \ c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmptai5046s/tmptai5046s.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad064b20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad064817b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad064817988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0648167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptai5046s                        0x0000555e03e9d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ad064d0c460 __libc_start_main +
    245

    6    tmptai5046s                        0x0000555e03e9cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n < 0 {\n        return -1\n    }\n    if n == 0 {\n        return 0\n\
    \    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return\
    \ 2\n    }\n    if n == 3 {\n        return 0\n    }\n    var a = 0\n    var b\
    \ = 0\n    var c = 2\n    var d = 0\n    for _ in 4...n {\n        d = a + b +\
    \ c\n        a = b\n        b = c\n        c = d\n    }\n    return d\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmptai5046s/tmptai5046s.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad064b20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad064817b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad064817988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0648167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptai5046s                        0x0000555e03e9d3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ad064d0c460 __libc_start_main +
    245

    6    tmptai5046s                        0x0000555e03e9cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n \
    \   while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n    \
    \    c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpi088m1r5/tmpi088m1r5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac22b56cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac22b263b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac22b263988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac22b2627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi088m1r5                        0x000055b1c7dd31b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ac22b758460 __libc_start_main +
    245

    6    tmpi088m1r5                        0x000055b1c7dd2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n \
    \   while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n    \
    \    c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpi088m1r5/tmpi088m1r5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac22b56cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac22b263b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac22b263988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac22b2627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi088m1r5                        0x000055b1c7dd31b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ac22b758460 __libc_start_main +
    245

    6    tmpi088m1r5                        0x000055b1c7dd2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n \
    \   for _ in 3...n {\n        e = a + b + c + d\n        a = b\n        b = c\n\
    \        c = d\n        d = e\n    }\n    return e\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpspapj63x/tmpspapj63x.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6855699c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6855390b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6855390988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b685538f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpspapj63x                        0x000055b5c20b4335 <unavailable> + 4917

    5    libc.so.6                          0x00002b6855885460 __libc_start_main +
    245

    6    tmpspapj63x                        0x000055b5c20b3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n < 2 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n\
    \    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _\
    \ in 3...n {\n        d = a + b + c\n        a = b\n        b = c\n        c =\
    \ d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmphs1mzcp3/tmphs1mzcp3.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac1fefac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac1fbf1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac1fbf1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac1fbf07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphs1mzcp3                        0x000055d9dc2d2335 <unavailable> + 4917

    5    libc.so.6                          0x00002aac200e6460 __libc_start_main +
    245

    6    tmphs1mzcp3                        0x000055d9dc2d1fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824819
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var fib4 = [0, 0, 2, 0]\n    for i in 4...n {\n        fib4.append(fib4[i-1]\
    \ + fib4[i-2] + fib4[i-3] + fib4[i-4])\n    }\n    return fib4[n]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824819
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n\
    \    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return\
    \ 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for\
    \ _ in 4...n {\n        d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpcz4kflbm/tmpcz4kflbm.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4a6a45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4a673cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4a673c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4a673b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcz4kflbm                        0x0000560ad469c3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ae4a6c31460 __libc_start_main +
    245

    6    tmpcz4kflbm                        0x0000560ad469bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n\
    \    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return\
    \ 0\n    }\n    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for\
    \ _ in 4...n {\n        d = a + b + c\n        a = b\n        b = c\n        c\
    \ = d\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5)\
    \ == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n:\
    \ 12) == 386)"
  status: Exception
  stderr: 'tmpcz4kflbm/tmpcz4kflbm.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4a6a45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4a673cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4a673c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4a673b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcz4kflbm                        0x0000560ad469c3b0 <unavailable> + 5040

    5    libc.so.6                          0x00002ae4a6c31460 __libc_start_main +
    245

    6    tmpcz4kflbm                        0x0000560ad469bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 3...n\
    \ {\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n\
    \    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpmvouo3r_/tmpmvouo3r_.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43f6cccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43f69c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43f69c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43f69c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmvouo3r_                        0x000055597c7bb335 <unavailable> + 4917

    5    libc.so.6                          0x00002b43f6eb8460 __libc_start_main +
    245

    6    tmpmvouo3r_                        0x000055597c7bafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    if n == 0 {\n\
    \        return a\n    } else if n == 1 {\n        return b\n    } else if n ==\
    \ 2 {\n        return c\n    } else if n == 3 {\n        return d\n    } else\
    \ {\n        for _ in 4...n {\n            a = b\n            b = c\n        \
    \    c = d\n            d = a + b + c + d\n        }\n        return d\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpmcvex0zx/tmpmcvex0zx.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d74014c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d73d0bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d73d0b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d73d0a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmcvex0zx                        0x0000555c244f2335 <unavailable> + 4917

    5    libc.so.6                          0x00002b2d74200460 __libc_start_main +
    245

    6    tmpmcvex0zx                        0x0000555c244f1fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var i = 3\n \
    \   while i <= n {\n        d = a + b + c\n        a = b\n        b = c\n    \
    \    c = d\n        i += 1\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) ==\
    \ 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpi088m1r5/tmpi088m1r5.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac22b56cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac22b263b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac22b263988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac22b2627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi088m1r5                        0x000055b1c7dd31b5 <unavailable> + 4533

    5    libc.so.6                          0x00002ac22b758460 __libc_start_main +
    245

    6    tmpi088m1r5                        0x000055b1c7dd2e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n \
    \   if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n\
    \    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return\
    \ 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c + d\n \
    \           a = b\n            b = c\n            c = d\n            d = e\n \
    \       }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n \
    \   for _ in 3...n {\n        e = a + b + c + d\n        a = b\n        b = c\n\
    \        c = d\n        d = e\n    }\n    return e\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n:\
    \ 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpspapj63x/tmpspapj63x.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6855699c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6855390b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6855390988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b685538f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpspapj63x                        0x000055b5c20b4335 <unavailable> + 4917

    5    libc.so.6                          0x00002b6855885460 __libc_start_main +
    245

    6    tmpspapj63x                        0x000055b5c20b3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 3...n\
    \ {\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n\
    \    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpmvouo3r_/tmpmvouo3r_.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43f6cccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43f69c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43f69c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43f69c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmvouo3r_                        0x000055597c7bb335 <unavailable> + 4917

    5    libc.so.6                          0x00002b43f6eb8460 __libc_start_main +
    245

    6    tmpmvouo3r_                        0x000055597c7bafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: -4
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    for _ in 3...n\
    \ {\n        d = a + b + c\n        a = b\n        b = c\n        c = d\n    }\n\
    \    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(fib4(n: 5) == 4)\n\
    assert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\nassert(fib4(n: 12) == 386)"
  status: Exception
  stderr: 'tmpmvouo3r_/tmpmvouo3r_.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43f6cccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43f69c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43f69c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43f69c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmvouo3r_                        0x000055597c7bb335 <unavailable> + 4917

    5    libc.so.6                          0x00002b43f6eb8460 __libc_start_main +
    245

    6    tmpmvouo3r_                        0x000055597c7bafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824818
- exit_code: 0
  program: "\n/// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n///\
    \ fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n\
    /// >>> fib4(6)\n/// 8\n/// >>> fib4(7)\n/// 14\nfunc fib4(n: Int) -> Int {\n\
    \    var a = 0\n    var b = 0\n    var c = 2\n    var d = 0\n    var e = 0\n \
    \   if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 0\n\
    \    } else if n == 2 {\n        return 2\n    } else if n == 3 {\n        return\
    \ 0\n    } else {\n        for _ in 4...n {\n            e = a + b + c + d\n \
    \           a = b\n            b = c\n            c = d\n            d = e\n \
    \       }\n        return e\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(fib4(n: 5) == 4)\nassert(fib4(n: 8) == 28)\nassert(fib4(n: 10) == 104)\n\
    assert(fib4(n: 12) == 386)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824818
